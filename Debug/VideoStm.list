
VideoStm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .screen       00002760  20000000  20000000  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007488  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b28  08007668  08007668  00008668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08008190  08008190  0005cc00  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  08008190  08008190  00009190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08008198  08008198  0005cc00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08008198  08008198  00009198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0800819c  0800819c  0000919c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000bb0  20002760  080081a0  00009760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000414  20003310  08008d50  0000a310  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003724  08008d50  0000a724  2**0
                  ALLOC
 12 .screenBB     0004ec00  22000000  22000000  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 00000030  00000000  00000000  0005cc00  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ee54  00000000  00000000  0005cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002884  00000000  00000000  0006ba84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001008  00000000  00000000  0006e308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b04  00000000  00000000  0006f310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000117ab  00000000  00000000  00096e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9daa  00000000  00000000  000a85bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a2369  2**0
                  CONTENTS, READONLY
 21 .debug_rnglists 00000c31  00000000  00000000  001a23ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004ae4  00000000  00000000  001a2fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000061  00000000  00000000  001a7ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20003310 	.word	0x20003310
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007650 	.word	0x08007650

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20003314 	.word	0x20003314
 800021c:	08007650 	.word	0x08007650

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <gdiBitBlt>:
		h			Bitmap height, in pixels
		bm			Pointer to the bitmap start position

	return			none
*/
void gdiBitBlt(PGDI_RECT prc, int16_t x, int16_t y, int16_t w, int16_t h, pBMP bm) {
 80002c0:	b490      	push	{r4, r7}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	4608      	mov	r0, r1
 80002ca:	4611      	mov	r1, r2
 80002cc:	461a      	mov	r2, r3
 80002ce:	4603      	mov	r3, r0
 80002d0:	817b      	strh	r3, [r7, #10]
 80002d2:	460b      	mov	r3, r1
 80002d4:	813b      	strh	r3, [r7, #8]
 80002d6:	4613      	mov	r3, r2
 80002d8:	80fb      	strh	r3, [r7, #6]
int16_t todo;
uint16_t alignment;

//	Calculate clipping region

	if (prc != NULL) {
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d00f      	beq.n	8000300 <gdiBitBlt+0x40>
		x += prc->x;
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	897b      	ldrh	r3, [r7, #10]
 80002ea:	4413      	add	r3, r2
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	817b      	strh	r3, [r7, #10]
		y += prc->y;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80002f6:	b29a      	uxth	r2, r3
 80002f8:	893b      	ldrh	r3, [r7, #8]
 80002fa:	4413      	add	r3, r2
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	813b      	strh	r3, [r7, #8]
//??		w = min(prc->w, VID_PIXELS_X-x);	// clip X
//??		h = min(prc->w, VID_PIXELS_Y-y);	// clip Y
	}
	alignment = x & 0b0000000000001111;
 8000300:	897b      	ldrh	r3, [r7, #10]
 8000302:	f003 030f 	and.w	r3, r3, #15
 8000306:	82bb      	strh	r3, [r7, #20]
	for(;--h >= 0; y++) {
 8000308:	e2cc      	b.n	80008a4 <gdiBitBlt+0x5e4>
		for (todo = w; todo>0;) {
 800030a:	88fb      	ldrh	r3, [r7, #6]
 800030c:	82fb      	strh	r3, [r7, #22]
 800030e:	e2be      	b.n	800088e <gdiBitBlt+0x5ce>
			if (todo >= 9) {
 8000310:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000314:	2b08      	cmp	r3, #8
 8000316:	dd2d      	ble.n	8000374 <gdiBitBlt+0xb4>
				bitmask.word = (todo >= 16) ?
									0xFFFF		<< (16-alignment):
 8000318:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800031c:	2b0f      	cmp	r3, #15
 800031e:	dd08      	ble.n	8000332 <gdiBitBlt+0x72>
 8000320:	8abb      	ldrh	r3, [r7, #20]
 8000322:	f1c3 0310 	rsb	r3, r3, #16
 8000326:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800032a:	fa02 f303 	lsl.w	r3, r2, r3
 800032e:	461a      	mov	r2, r3
 8000330:	e00c      	b.n	800034c <gdiBitBlt+0x8c>
						masktable[todo-1]		<< (16-alignment);
 8000332:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000336:	3b01      	subs	r3, #1
 8000338:	4a79      	ldr	r2, [pc, #484]	@ (8000520 <gdiBitBlt+0x260>)
 800033a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800033e:	461a      	mov	r2, r3
 8000340:	8abb      	ldrh	r3, [r7, #20]
 8000342:	f1c3 0310 	rsb	r3, r3, #16
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
									0xFFFF		<< (16-alignment):
 800034a:	461a      	mov	r2, r3
				bitmask.word = (todo >= 16) ?
 800034c:	4b75      	ldr	r3, [pc, #468]	@ (8000524 <gdiBitBlt+0x264>)
 800034e:	601a      	str	r2, [r3, #0]
				pattern.word = *bm.halfwords++	<< (16-alignment);
 8000350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000352:	1c9a      	adds	r2, r3, #2
 8000354:	627a      	str	r2, [r7, #36]	@ 0x24
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	461a      	mov	r2, r3
 800035a:	8abb      	ldrh	r3, [r7, #20]
 800035c:	f1c3 0310 	rsb	r3, r3, #16
 8000360:	fa02 f303 	lsl.w	r3, r2, r3
 8000364:	461a      	mov	r2, r3
 8000366:	4b70      	ldr	r3, [pc, #448]	@ (8000528 <gdiBitBlt+0x268>)
 8000368:	601a      	str	r2, [r3, #0]
				todo -= 16;
 800036a:	8afb      	ldrh	r3, [r7, #22]
 800036c:	3b10      	subs	r3, #16
 800036e:	b29b      	uxth	r3, r3
 8000370:	82fb      	strh	r3, [r7, #22]
 8000372:	e01f      	b.n	80003b4 <gdiBitBlt+0xf4>
			} else {
				bitmask.word = masktable[todo-1] << (16-alignment);
 8000374:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000378:	3b01      	subs	r3, #1
 800037a:	4a69      	ldr	r2, [pc, #420]	@ (8000520 <gdiBitBlt+0x260>)
 800037c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000380:	461a      	mov	r2, r3
 8000382:	8abb      	ldrh	r3, [r7, #20]
 8000384:	f1c3 0310 	rsb	r3, r3, #16
 8000388:	fa02 f303 	lsl.w	r3, r2, r3
 800038c:	461a      	mov	r2, r3
 800038e:	4b65      	ldr	r3, [pc, #404]	@ (8000524 <gdiBitBlt+0x264>)
 8000390:	601a      	str	r2, [r3, #0]
				pattern.word = *bm.bytesinROM++  << (24-alignment);
 8000392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000394:	1c5a      	adds	r2, r3, #1
 8000396:	627a      	str	r2, [r7, #36]	@ 0x24
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	461a      	mov	r2, r3
 800039c:	8abb      	ldrh	r3, [r7, #20]
 800039e:	f1c3 0318 	rsb	r3, r3, #24
 80003a2:	fa02 f303 	lsl.w	r3, r2, r3
 80003a6:	461a      	mov	r2, r3
 80003a8:	4b5f      	ldr	r3, [pc, #380]	@ (8000528 <gdiBitBlt+0x268>)
 80003aa:	601a      	str	r2, [r3, #0]
				todo -= 8;
 80003ac:	8afb      	ldrh	r3, [r7, #22]
 80003ae:	3b08      	subs	r3, #8
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	82fb      	strh	r3, [r7, #22]
			}
			switch(rop) {
 80003b4:	4b5d      	ldr	r3, [pc, #372]	@ (800052c <gdiBitBlt+0x26c>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b04      	cmp	r3, #4
 80003ba:	f200 8268 	bhi.w	800088e <gdiBitBlt+0x5ce>
 80003be:	a201      	add	r2, pc, #4	@ (adr r2, 80003c4 <gdiBitBlt+0x104>)
 80003c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c4:	080003d9 	.word	0x080003d9
 80003c8:	08000535 	.word	0x08000535
 80003cc:	080007bd 	.word	0x080007bd
 80003d0:	0800067d 	.word	0x0800067d
 80003d4:	0800071d 	.word	0x0800071d
				case GDI_ROP_COPY:
					screen[y][x>>4] &= ~bitmask.halfword[1];
 80003d8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80003dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80003e0:	111b      	asrs	r3, r3, #4
 80003e2:	b21b      	sxth	r3, r3
 80003e4:	4618      	mov	r0, r3
 80003e6:	4952      	ldr	r1, [pc, #328]	@ (8000530 <gdiBitBlt+0x270>)
 80003e8:	4613      	mov	r3, r2
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	4413      	add	r3, r2
 80003ee:	00da      	lsls	r2, r3, #3
 80003f0:	1ad2      	subs	r2, r2, r3
 80003f2:	1813      	adds	r3, r2, r0
 80003f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80003f8:	b21a      	sxth	r2, r3
 80003fa:	4b4a      	ldr	r3, [pc, #296]	@ (8000524 <gdiBitBlt+0x264>)
 80003fc:	885b      	ldrh	r3, [r3, #2]
 80003fe:	b21b      	sxth	r3, r3
 8000400:	43db      	mvns	r3, r3
 8000402:	b21b      	sxth	r3, r3
 8000404:	4013      	ands	r3, r2
 8000406:	b219      	sxth	r1, r3
 8000408:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800040c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000410:	111b      	asrs	r3, r3, #4
 8000412:	b21b      	sxth	r3, r3
 8000414:	461c      	mov	r4, r3
 8000416:	b288      	uxth	r0, r1
 8000418:	4945      	ldr	r1, [pc, #276]	@ (8000530 <gdiBitBlt+0x270>)
 800041a:	4613      	mov	r3, r2
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	4413      	add	r3, r2
 8000420:	00da      	lsls	r2, r3, #3
 8000422:	1ad2      	subs	r2, r2, r3
 8000424:	1913      	adds	r3, r2, r4
 8000426:	4602      	mov	r2, r0
 8000428:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					screen[y][x>>4] |=  pattern.halfword[1];
 800042c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000430:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000434:	111b      	asrs	r3, r3, #4
 8000436:	b21b      	sxth	r3, r3
 8000438:	4618      	mov	r0, r3
 800043a:	493d      	ldr	r1, [pc, #244]	@ (8000530 <gdiBitBlt+0x270>)
 800043c:	4613      	mov	r3, r2
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	4413      	add	r3, r2
 8000442:	00da      	lsls	r2, r3, #3
 8000444:	1ad2      	subs	r2, r2, r3
 8000446:	1813      	adds	r3, r2, r0
 8000448:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800044c:	4b36      	ldr	r3, [pc, #216]	@ (8000528 <gdiBitBlt+0x268>)
 800044e:	885b      	ldrh	r3, [r3, #2]
 8000450:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000454:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000458:	1100      	asrs	r0, r0, #4
 800045a:	b200      	sxth	r0, r0
 800045c:	4604      	mov	r4, r0
 800045e:	430b      	orrs	r3, r1
 8000460:	b298      	uxth	r0, r3
 8000462:	4933      	ldr	r1, [pc, #204]	@ (8000530 <gdiBitBlt+0x270>)
 8000464:	4613      	mov	r3, r2
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	4413      	add	r3, r2
 800046a:	00da      	lsls	r2, r3, #3
 800046c:	1ad2      	subs	r2, r2, r3
 800046e:	1913      	adds	r3, r2, r4
 8000470:	4602      	mov	r2, r0
 8000472:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (bitmask.halfword[0] != 0) {
 8000476:	4b2b      	ldr	r3, [pc, #172]	@ (8000524 <gdiBitBlt+0x264>)
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	f000 81fe 	beq.w	800087c <gdiBitBlt+0x5bc>
						screen[y][(x>>4)+1] &= ~bitmask.halfword[0];
 8000480:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000484:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000488:	111b      	asrs	r3, r3, #4
 800048a:	b21b      	sxth	r3, r3
 800048c:	1c59      	adds	r1, r3, #1
 800048e:	4828      	ldr	r0, [pc, #160]	@ (8000530 <gdiBitBlt+0x270>)
 8000490:	4613      	mov	r3, r2
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	4413      	add	r3, r2
 8000496:	00da      	lsls	r2, r3, #3
 8000498:	1ad2      	subs	r2, r2, r3
 800049a:	1853      	adds	r3, r2, r1
 800049c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80004a0:	b21a      	sxth	r2, r3
 80004a2:	4b20      	ldr	r3, [pc, #128]	@ (8000524 <gdiBitBlt+0x264>)
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	b21b      	sxth	r3, r3
 80004a8:	43db      	mvns	r3, r3
 80004aa:	b21b      	sxth	r3, r3
 80004ac:	4013      	ands	r3, r2
 80004ae:	b218      	sxth	r0, r3
 80004b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004b8:	111b      	asrs	r3, r3, #4
 80004ba:	b21b      	sxth	r3, r3
 80004bc:	1c59      	adds	r1, r3, #1
 80004be:	b284      	uxth	r4, r0
 80004c0:	481b      	ldr	r0, [pc, #108]	@ (8000530 <gdiBitBlt+0x270>)
 80004c2:	4613      	mov	r3, r2
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	4413      	add	r3, r2
 80004c8:	00da      	lsls	r2, r3, #3
 80004ca:	1ad2      	subs	r2, r2, r3
 80004cc:	1853      	adds	r3, r2, r1
 80004ce:	4622      	mov	r2, r4
 80004d0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						screen[y][(x>>4)+1] |=  pattern.halfword[0];
 80004d4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004dc:	111b      	asrs	r3, r3, #4
 80004de:	b21b      	sxth	r3, r3
 80004e0:	1c59      	adds	r1, r3, #1
 80004e2:	4813      	ldr	r0, [pc, #76]	@ (8000530 <gdiBitBlt+0x270>)
 80004e4:	4613      	mov	r3, r2
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	4413      	add	r3, r2
 80004ea:	00da      	lsls	r2, r3, #3
 80004ec:	1ad2      	subs	r2, r2, r3
 80004ee:	1853      	adds	r3, r2, r1
 80004f0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80004f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <gdiBitBlt+0x268>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004fc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000500:	1109      	asrs	r1, r1, #4
 8000502:	b209      	sxth	r1, r1
 8000504:	3101      	adds	r1, #1
 8000506:	4303      	orrs	r3, r0
 8000508:	b29c      	uxth	r4, r3
 800050a:	4809      	ldr	r0, [pc, #36]	@ (8000530 <gdiBitBlt+0x270>)
 800050c:	4613      	mov	r3, r2
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	4413      	add	r3, r2
 8000512:	00da      	lsls	r2, r3, #3
 8000514:	1ad2      	subs	r2, r2, r3
 8000516:	1853      	adds	r3, r2, r1
 8000518:	4622      	mov	r2, r4
 800051a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					}
					break;
 800051e:	e1ad      	b.n	800087c <gdiBitBlt+0x5bc>
 8000520:	08007b14 	.word	0x08007b14
 8000524:	20003330 	.word	0x20003330
 8000528:	2000332c 	.word	0x2000332c
 800052c:	20002760 	.word	0x20002760
 8000530:	20000000 	.word	0x20000000
				case GDI_ROP_BONW:	// inverse video
					screen[y][x>>4] |=  bitmask.halfword[1];
 8000534:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000538:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800053c:	111b      	asrs	r3, r3, #4
 800053e:	b21b      	sxth	r3, r3
 8000540:	4618      	mov	r0, r3
 8000542:	49cb      	ldr	r1, [pc, #812]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000544:	4613      	mov	r3, r2
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	4413      	add	r3, r2
 800054a:	00da      	lsls	r2, r3, #3
 800054c:	1ad2      	subs	r2, r2, r3
 800054e:	1813      	adds	r3, r2, r0
 8000550:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000554:	4bc7      	ldr	r3, [pc, #796]	@ (8000874 <gdiBitBlt+0x5b4>)
 8000556:	885b      	ldrh	r3, [r3, #2]
 8000558:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800055c:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000560:	1100      	asrs	r0, r0, #4
 8000562:	b200      	sxth	r0, r0
 8000564:	4604      	mov	r4, r0
 8000566:	430b      	orrs	r3, r1
 8000568:	b298      	uxth	r0, r3
 800056a:	49c1      	ldr	r1, [pc, #772]	@ (8000870 <gdiBitBlt+0x5b0>)
 800056c:	4613      	mov	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	4413      	add	r3, r2
 8000572:	00da      	lsls	r2, r3, #3
 8000574:	1ad2      	subs	r2, r2, r3
 8000576:	1913      	adds	r3, r2, r4
 8000578:	4602      	mov	r2, r0
 800057a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					screen[y][x>>4] &= ~pattern.halfword[1];
 800057e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000582:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000586:	111b      	asrs	r3, r3, #4
 8000588:	b21b      	sxth	r3, r3
 800058a:	4618      	mov	r0, r3
 800058c:	49b8      	ldr	r1, [pc, #736]	@ (8000870 <gdiBitBlt+0x5b0>)
 800058e:	4613      	mov	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	4413      	add	r3, r2
 8000594:	00da      	lsls	r2, r3, #3
 8000596:	1ad2      	subs	r2, r2, r3
 8000598:	1813      	adds	r3, r2, r0
 800059a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800059e:	b21a      	sxth	r2, r3
 80005a0:	4bb5      	ldr	r3, [pc, #724]	@ (8000878 <gdiBitBlt+0x5b8>)
 80005a2:	885b      	ldrh	r3, [r3, #2]
 80005a4:	b21b      	sxth	r3, r3
 80005a6:	43db      	mvns	r3, r3
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	4013      	ands	r3, r2
 80005ac:	b219      	sxth	r1, r3
 80005ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005b6:	111b      	asrs	r3, r3, #4
 80005b8:	b21b      	sxth	r3, r3
 80005ba:	461c      	mov	r4, r3
 80005bc:	b288      	uxth	r0, r1
 80005be:	49ac      	ldr	r1, [pc, #688]	@ (8000870 <gdiBitBlt+0x5b0>)
 80005c0:	4613      	mov	r3, r2
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	4413      	add	r3, r2
 80005c6:	00da      	lsls	r2, r3, #3
 80005c8:	1ad2      	subs	r2, r2, r3
 80005ca:	1913      	adds	r3, r2, r4
 80005cc:	4602      	mov	r2, r0
 80005ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (bitmask.halfword[0] != 0) {
 80005d2:	4ba8      	ldr	r3, [pc, #672]	@ (8000874 <gdiBitBlt+0x5b4>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	f000 8152 	beq.w	8000880 <gdiBitBlt+0x5c0>
						screen[y][(x>>4)+1] |=  bitmask.halfword[0];
 80005dc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005e4:	111b      	asrs	r3, r3, #4
 80005e6:	b21b      	sxth	r3, r3
 80005e8:	1c59      	adds	r1, r3, #1
 80005ea:	48a1      	ldr	r0, [pc, #644]	@ (8000870 <gdiBitBlt+0x5b0>)
 80005ec:	4613      	mov	r3, r2
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	4413      	add	r3, r2
 80005f2:	00da      	lsls	r2, r3, #3
 80005f4:	1ad2      	subs	r2, r2, r3
 80005f6:	1853      	adds	r3, r2, r1
 80005f8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80005fc:	4b9d      	ldr	r3, [pc, #628]	@ (8000874 <gdiBitBlt+0x5b4>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000604:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000608:	1109      	asrs	r1, r1, #4
 800060a:	b209      	sxth	r1, r1
 800060c:	3101      	adds	r1, #1
 800060e:	4303      	orrs	r3, r0
 8000610:	b29c      	uxth	r4, r3
 8000612:	4897      	ldr	r0, [pc, #604]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000614:	4613      	mov	r3, r2
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	4413      	add	r3, r2
 800061a:	00da      	lsls	r2, r3, #3
 800061c:	1ad2      	subs	r2, r2, r3
 800061e:	1853      	adds	r3, r2, r1
 8000620:	4622      	mov	r2, r4
 8000622:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						screen[y][(x>>4)+1] &= ~pattern.halfword[0];
 8000626:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800062a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800062e:	111b      	asrs	r3, r3, #4
 8000630:	b21b      	sxth	r3, r3
 8000632:	1c59      	adds	r1, r3, #1
 8000634:	488e      	ldr	r0, [pc, #568]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000636:	4613      	mov	r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	4413      	add	r3, r2
 800063c:	00da      	lsls	r2, r3, #3
 800063e:	1ad2      	subs	r2, r2, r3
 8000640:	1853      	adds	r3, r2, r1
 8000642:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000646:	b21a      	sxth	r2, r3
 8000648:	4b8b      	ldr	r3, [pc, #556]	@ (8000878 <gdiBitBlt+0x5b8>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	b21b      	sxth	r3, r3
 800064e:	43db      	mvns	r3, r3
 8000650:	b21b      	sxth	r3, r3
 8000652:	4013      	ands	r3, r2
 8000654:	b218      	sxth	r0, r3
 8000656:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800065a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800065e:	111b      	asrs	r3, r3, #4
 8000660:	b21b      	sxth	r3, r3
 8000662:	1c59      	adds	r1, r3, #1
 8000664:	b284      	uxth	r4, r0
 8000666:	4882      	ldr	r0, [pc, #520]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	00da      	lsls	r2, r3, #3
 8000670:	1ad2      	subs	r2, r2, r3
 8000672:	1853      	adds	r3, r2, r1
 8000674:	4622      	mov	r2, r4
 8000676:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					}
					break;
 800067a:	e101      	b.n	8000880 <gdiBitBlt+0x5c0>
				case GDI_ROP_XOR:
					screen[y][x>>4] ^= pattern.halfword[1];
 800067c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000680:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000684:	111b      	asrs	r3, r3, #4
 8000686:	b21b      	sxth	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	4979      	ldr	r1, [pc, #484]	@ (8000870 <gdiBitBlt+0x5b0>)
 800068c:	4613      	mov	r3, r2
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	4413      	add	r3, r2
 8000692:	00da      	lsls	r2, r3, #3
 8000694:	1ad2      	subs	r2, r2, r3
 8000696:	1813      	adds	r3, r2, r0
 8000698:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800069c:	4b76      	ldr	r3, [pc, #472]	@ (8000878 <gdiBitBlt+0x5b8>)
 800069e:	885b      	ldrh	r3, [r3, #2]
 80006a0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006a4:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80006a8:	1100      	asrs	r0, r0, #4
 80006aa:	b200      	sxth	r0, r0
 80006ac:	4604      	mov	r4, r0
 80006ae:	404b      	eors	r3, r1
 80006b0:	b298      	uxth	r0, r3
 80006b2:	496f      	ldr	r1, [pc, #444]	@ (8000870 <gdiBitBlt+0x5b0>)
 80006b4:	4613      	mov	r3, r2
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	4413      	add	r3, r2
 80006ba:	00da      	lsls	r2, r3, #3
 80006bc:	1ad2      	subs	r2, r2, r3
 80006be:	1913      	adds	r3, r2, r4
 80006c0:	4602      	mov	r2, r0
 80006c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 80006c6:	4b6c      	ldr	r3, [pc, #432]	@ (8000878 <gdiBitBlt+0x5b8>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	f000 80da 	beq.w	8000884 <gdiBitBlt+0x5c4>
						screen[y][(x>>4)+1] ^= pattern.halfword[0];
 80006d0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80006d8:	111b      	asrs	r3, r3, #4
 80006da:	b21b      	sxth	r3, r3
 80006dc:	1c59      	adds	r1, r3, #1
 80006de:	4864      	ldr	r0, [pc, #400]	@ (8000870 <gdiBitBlt+0x5b0>)
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	00da      	lsls	r2, r3, #3
 80006e8:	1ad2      	subs	r2, r2, r3
 80006ea:	1853      	adds	r3, r2, r1
 80006ec:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80006f0:	4b61      	ldr	r3, [pc, #388]	@ (8000878 <gdiBitBlt+0x5b8>)
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006f8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80006fc:	1109      	asrs	r1, r1, #4
 80006fe:	b209      	sxth	r1, r1
 8000700:	3101      	adds	r1, #1
 8000702:	4043      	eors	r3, r0
 8000704:	b29c      	uxth	r4, r3
 8000706:	485a      	ldr	r0, [pc, #360]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000708:	4613      	mov	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	4413      	add	r3, r2
 800070e:	00da      	lsls	r2, r3, #3
 8000710:	1ad2      	subs	r2, r2, r3
 8000712:	1853      	adds	r3, r2, r1
 8000714:	4622      	mov	r2, r4
 8000716:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 800071a:	e0b3      	b.n	8000884 <gdiBitBlt+0x5c4>
				case GDI_ROP_OR:
					screen[y][x>>4] |= pattern.halfword[1];
 800071c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000720:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000724:	111b      	asrs	r3, r3, #4
 8000726:	b21b      	sxth	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	4951      	ldr	r1, [pc, #324]	@ (8000870 <gdiBitBlt+0x5b0>)
 800072c:	4613      	mov	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4413      	add	r3, r2
 8000732:	00da      	lsls	r2, r3, #3
 8000734:	1ad2      	subs	r2, r2, r3
 8000736:	1813      	adds	r3, r2, r0
 8000738:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800073c:	4b4e      	ldr	r3, [pc, #312]	@ (8000878 <gdiBitBlt+0x5b8>)
 800073e:	885b      	ldrh	r3, [r3, #2]
 8000740:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000744:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000748:	1100      	asrs	r0, r0, #4
 800074a:	b200      	sxth	r0, r0
 800074c:	4604      	mov	r4, r0
 800074e:	430b      	orrs	r3, r1
 8000750:	b298      	uxth	r0, r3
 8000752:	4947      	ldr	r1, [pc, #284]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	00da      	lsls	r2, r3, #3
 800075c:	1ad2      	subs	r2, r2, r3
 800075e:	1913      	adds	r3, r2, r4
 8000760:	4602      	mov	r2, r0
 8000762:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 8000766:	4b44      	ldr	r3, [pc, #272]	@ (8000878 <gdiBitBlt+0x5b8>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	f000 808c 	beq.w	8000888 <gdiBitBlt+0x5c8>
						screen[y][(x>>4)+1] |= pattern.halfword[0];
 8000770:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000774:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000778:	111b      	asrs	r3, r3, #4
 800077a:	b21b      	sxth	r3, r3
 800077c:	1c59      	adds	r1, r3, #1
 800077e:	483c      	ldr	r0, [pc, #240]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	00da      	lsls	r2, r3, #3
 8000788:	1ad2      	subs	r2, r2, r3
 800078a:	1853      	adds	r3, r2, r1
 800078c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000790:	4b39      	ldr	r3, [pc, #228]	@ (8000878 <gdiBitBlt+0x5b8>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000798:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800079c:	1109      	asrs	r1, r1, #4
 800079e:	b209      	sxth	r1, r1
 80007a0:	3101      	adds	r1, #1
 80007a2:	4303      	orrs	r3, r0
 80007a4:	b29c      	uxth	r4, r3
 80007a6:	4832      	ldr	r0, [pc, #200]	@ (8000870 <gdiBitBlt+0x5b0>)
 80007a8:	4613      	mov	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	00da      	lsls	r2, r3, #3
 80007b0:	1ad2      	subs	r2, r2, r3
 80007b2:	1853      	adds	r3, r2, r1
 80007b4:	4622      	mov	r2, r4
 80007b6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 80007ba:	e065      	b.n	8000888 <gdiBitBlt+0x5c8>
				case GDI_ROP_NAND:
					screen[y][x>>4] &= ~pattern.halfword[1];
 80007bc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80007c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007c4:	111b      	asrs	r3, r3, #4
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	4929      	ldr	r1, [pc, #164]	@ (8000870 <gdiBitBlt+0x5b0>)
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	00da      	lsls	r2, r3, #3
 80007d4:	1ad2      	subs	r2, r2, r3
 80007d6:	1813      	adds	r3, r2, r0
 80007d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007dc:	b21a      	sxth	r2, r3
 80007de:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <gdiBitBlt+0x5b8>)
 80007e0:	885b      	ldrh	r3, [r3, #2]
 80007e2:	b21b      	sxth	r3, r3
 80007e4:	43db      	mvns	r3, r3
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	4013      	ands	r3, r2
 80007ea:	b219      	sxth	r1, r3
 80007ec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80007f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007f4:	111b      	asrs	r3, r3, #4
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	461c      	mov	r4, r3
 80007fa:	b288      	uxth	r0, r1
 80007fc:	491c      	ldr	r1, [pc, #112]	@ (8000870 <gdiBitBlt+0x5b0>)
 80007fe:	4613      	mov	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	4413      	add	r3, r2
 8000804:	00da      	lsls	r2, r3, #3
 8000806:	1ad2      	subs	r2, r2, r3
 8000808:	1913      	adds	r3, r2, r4
 800080a:	4602      	mov	r2, r0
 800080c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <gdiBitBlt+0x5b8>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d039      	beq.n	800088c <gdiBitBlt+0x5cc>
						screen[y][(x>>4)+1] &= ~pattern.halfword[0];
 8000818:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800081c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000820:	111b      	asrs	r3, r3, #4
 8000822:	b21b      	sxth	r3, r3
 8000824:	1c59      	adds	r1, r3, #1
 8000826:	4812      	ldr	r0, [pc, #72]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000828:	4613      	mov	r3, r2
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	4413      	add	r3, r2
 800082e:	00da      	lsls	r2, r3, #3
 8000830:	1ad2      	subs	r2, r2, r3
 8000832:	1853      	adds	r3, r2, r1
 8000834:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000838:	b21a      	sxth	r2, r3
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <gdiBitBlt+0x5b8>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	b21b      	sxth	r3, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	b21b      	sxth	r3, r3
 8000844:	4013      	ands	r3, r2
 8000846:	b218      	sxth	r0, r3
 8000848:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800084c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000850:	111b      	asrs	r3, r3, #4
 8000852:	b21b      	sxth	r3, r3
 8000854:	1c59      	adds	r1, r3, #1
 8000856:	b284      	uxth	r4, r0
 8000858:	4805      	ldr	r0, [pc, #20]	@ (8000870 <gdiBitBlt+0x5b0>)
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00da      	lsls	r2, r3, #3
 8000862:	1ad2      	subs	r2, r2, r3
 8000864:	1853      	adds	r3, r2, r1
 8000866:	4622      	mov	r2, r4
 8000868:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 800086c:	e00e      	b.n	800088c <gdiBitBlt+0x5cc>
 800086e:	bf00      	nop
 8000870:	20000000 	.word	0x20000000
 8000874:	20003330 	.word	0x20003330
 8000878:	2000332c 	.word	0x2000332c
					break;
 800087c:	bf00      	nop
 800087e:	e006      	b.n	800088e <gdiBitBlt+0x5ce>
					break;
 8000880:	bf00      	nop
 8000882:	e004      	b.n	800088e <gdiBitBlt+0x5ce>
					break;
 8000884:	bf00      	nop
 8000886:	e002      	b.n	800088e <gdiBitBlt+0x5ce>
					break;
 8000888:	bf00      	nop
 800088a:	e000      	b.n	800088e <gdiBitBlt+0x5ce>
					break;
 800088c:	bf00      	nop
		for (todo = w; todo>0;) {
 800088e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000892:	2b00      	cmp	r3, #0
 8000894:	f73f ad3c 	bgt.w	8000310 <gdiBitBlt+0x50>
	for(;--h >= 0; y++) {
 8000898:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800089c:	b29b      	uxth	r3, r3
 800089e:	3301      	adds	r3, #1
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	813b      	strh	r3, [r7, #8]
 80008a4:	8c3b      	ldrh	r3, [r7, #32]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	843b      	strh	r3, [r7, #32]
 80008ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	f6bf ad2a 	bge.w	800030a <gdiBitBlt+0x4a>
			}
		}
	}
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc90      	pop	{r4, r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop

080008c4 <gdiPoint>:
		x			X position
		y			Y position

	return:			none
*/
void gdiPoint(PGDI_RECT rc, uint16_t x, uint16_t y) {
 80008c4:	b490      	push	{r4, r7}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	807b      	strh	r3, [r7, #2]
 80008d0:	4613      	mov	r3, r2
 80008d2:	803b      	strh	r3, [r7, #0]
	/* The bit addressing of pixels is MSB first (I2S property).
	 * so invert the lower nibble, indexing 16 pixels
	 */
	uint16_t nibble = x & 0b1111;
 80008d4:	887b      	ldrh	r3, [r7, #2]
 80008d6:	f003 030f 	and.w	r3, r3, #15
 80008da:	81fb      	strh	r3, [r7, #14]
	x = (x & ~0b1111) + 0b1111 - nibble;
 80008dc:	887b      	ldrh	r3, [r7, #2]
 80008de:	f023 030f 	bic.w	r3, r3, #15
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	89fb      	ldrh	r3, [r7, #14]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	330f      	adds	r3, #15
 80008ec:	807b      	strh	r3, [r7, #2]
	if (x < VID_PIXELS_X && y < VID_PIXELS_Y)	// Check display area bounds
 80008ee:	887b      	ldrh	r3, [r7, #2]
 80008f0:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 80008f4:	d243      	bcs.n	800097e <gdiPoint+0xba>
 80008f6:	883b      	ldrh	r3, [r7, #0]
 80008f8:	2bef      	cmp	r3, #239	@ 0xef
 80008fa:	d840      	bhi.n	800097e <gdiPoint+0xba>
	{
		switch(rop) {
 80008fc:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <gdiPoint+0xc4>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b04      	cmp	r3, #4
 8000902:	d83c      	bhi.n	800097e <gdiPoint+0xba>
 8000904:	a201      	add	r2, pc, #4	@ (adr r2, 800090c <gdiPoint+0x48>)
 8000906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090a:	bf00      	nop
 800090c:	08000921 	.word	0x08000921
 8000910:	08000939 	.word	0x08000939
 8000914:	08000939 	.word	0x08000939
 8000918:	08000951 	.word	0x08000951
 800091c:	08000921 	.word	0x08000921
			case GDI_ROP_COPY:
			case GDI_ROP_OR:	screenBB[y][x] = 1;
 8000920:	883a      	ldrh	r2, [r7, #0]
 8000922:	887b      	ldrh	r3, [r7, #2]
 8000924:	4919      	ldr	r1, [pc, #100]	@ (800098c <gdiPoint+0xc8>)
 8000926:	f44f 70a8 	mov.w	r0, #336	@ 0x150
 800092a:	fb00 f202 	mul.w	r2, r0, r2
 800092e:	4413      	add	r3, r2
 8000930:	2201      	movs	r2, #1
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
								break;
 8000936:	e022      	b.n	800097e <gdiPoint+0xba>
			case GDI_ROP_BONW:
			case GDI_ROP_NAND:	screenBB[y][x] = 0;
 8000938:	883a      	ldrh	r2, [r7, #0]
 800093a:	887b      	ldrh	r3, [r7, #2]
 800093c:	4913      	ldr	r1, [pc, #76]	@ (800098c <gdiPoint+0xc8>)
 800093e:	f44f 70a8 	mov.w	r0, #336	@ 0x150
 8000942:	fb00 f202 	mul.w	r2, r0, r2
 8000946:	4413      	add	r3, r2
 8000948:	2200      	movs	r2, #0
 800094a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
								break;
 800094e:	e016      	b.n	800097e <gdiPoint+0xba>
			case GDI_ROP_XOR:	screenBB[y][x] ^= 1;
 8000950:	883a      	ldrh	r2, [r7, #0]
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	490d      	ldr	r1, [pc, #52]	@ (800098c <gdiPoint+0xc8>)
 8000956:	f44f 70a8 	mov.w	r0, #336	@ 0x150
 800095a:	fb00 f202 	mul.w	r2, r0, r2
 800095e:	4413      	add	r3, r2
 8000960:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000964:	8839      	ldrh	r1, [r7, #0]
 8000966:	887b      	ldrh	r3, [r7, #2]
 8000968:	f082 0201 	eor.w	r2, r2, #1
 800096c:	4807      	ldr	r0, [pc, #28]	@ (800098c <gdiPoint+0xc8>)
 800096e:	f44f 74a8 	mov.w	r4, #336	@ 0x150
 8000972:	fb04 f101 	mul.w	r1, r4, r1
 8000976:	440b      	add	r3, r1
 8000978:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		}
	}
}
 800097c:	e7ff      	b.n	800097e <gdiPoint+0xba>
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bc90      	pop	{r4, r7}
 8000986:	4770      	bx	lr
 8000988:	20002760 	.word	0x20002760
 800098c:	22000000 	.word	0x22000000

08000990 <gdiLine>:
		x2			X end position
		y2			Y end position

	return			none
*/
void gdiLine(PGDI_RECT prc, int16_t x1, int16_t y1, int16_t x2, int16_t y2) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	4608      	mov	r0, r1
 800099a:	4611      	mov	r1, r2
 800099c:	461a      	mov	r2, r3
 800099e:	4603      	mov	r3, r0
 80009a0:	817b      	strh	r3, [r7, #10]
 80009a2:	460b      	mov	r3, r1
 80009a4:	813b      	strh	r3, [r7, #8]
 80009a6:	4613      	mov	r3, r2
 80009a8:	80fb      	strh	r3, [r7, #6]

int16_t		dx, dy, i, e;
int16_t		incx, incy, inc1, inc2;
int16_t		x, y;

	dx = x2 - x1;
 80009aa:	88fa      	ldrh	r2, [r7, #6]
 80009ac:	897b      	ldrh	r3, [r7, #10]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	dy = y2 - y1;
 80009b4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80009b6:	893b      	ldrh	r3, [r7, #8]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	84bb      	strh	r3, [r7, #36]	@ 0x24

	if(dx < 0) dx = -dx;
 80009be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	da03      	bge.n	80009ce <gdiLine+0x3e>
 80009c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80009c8:	425b      	negs	r3, r3
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	if(dy < 0) dy = -dy;
 80009ce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	da03      	bge.n	80009de <gdiLine+0x4e>
 80009d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80009d8:	425b      	negs	r3, r3
 80009da:	b29b      	uxth	r3, r3
 80009dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
	incx = 1;
 80009de:	2301      	movs	r3, #1
 80009e0:	83fb      	strh	r3, [r7, #30]
	if(x2 < x1) incx = -1;
 80009e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80009e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	da02      	bge.n	80009f4 <gdiLine+0x64>
 80009ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009f2:	83fb      	strh	r3, [r7, #30]
	incy = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	83bb      	strh	r3, [r7, #28]
	if(y2 < y1) incy = -1;
 80009f8:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 80009fc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	da02      	bge.n	8000a0a <gdiLine+0x7a>
 8000a04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a08:	83bb      	strh	r3, [r7, #28]
	x = x1;
 8000a0a:	897b      	ldrh	r3, [r7, #10]
 8000a0c:	837b      	strh	r3, [r7, #26]
	y = y1;
 8000a0e:	893b      	ldrh	r3, [r7, #8]
 8000a10:	833b      	strh	r3, [r7, #24]

	if (dx > dy) {
 8000a12:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8000a16:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	dd48      	ble.n	8000ab0 <gdiLine+0x120>
		gdiPoint(prc, x, y);
 8000a1e:	8b7b      	ldrh	r3, [r7, #26]
 8000a20:	8b3a      	ldrh	r2, [r7, #24]
 8000a22:	4619      	mov	r1, r3
 8000a24:	68f8      	ldr	r0, [r7, #12]
 8000a26:	f7ff ff4d 	bl	80008c4 <gdiPoint>
		e = 2*dy - dx;
 8000a2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	843b      	strh	r3, [r7, #32]
		inc1 = 2 * (dy - dx);
 8000a38:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8000a3c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	82fb      	strh	r3, [r7, #22]
		inc2 = 2 * dy;
 8000a4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	82bb      	strh	r3, [r7, #20]
		for (i = 0; i < dx; i++) {
 8000a52:	2300      	movs	r3, #0
 8000a54:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000a56:	e024      	b.n	8000aa2 <gdiLine+0x112>
			if (e >= 0) {
 8000a58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <gdiLine+0xe6>
				y += incy;
 8000a60:	8b3a      	ldrh	r2, [r7, #24]
 8000a62:	8bbb      	ldrh	r3, [r7, #28]
 8000a64:	4413      	add	r3, r2
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	833b      	strh	r3, [r7, #24]
				e += inc1;
 8000a6a:	8c3a      	ldrh	r2, [r7, #32]
 8000a6c:	8afb      	ldrh	r3, [r7, #22]
 8000a6e:	4413      	add	r3, r2
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	843b      	strh	r3, [r7, #32]
 8000a74:	e004      	b.n	8000a80 <gdiLine+0xf0>
			}
			else {
				e += inc2;
 8000a76:	8c3a      	ldrh	r2, [r7, #32]
 8000a78:	8abb      	ldrh	r3, [r7, #20]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	843b      	strh	r3, [r7, #32]
			}
			x += incx;
 8000a80:	8b7a      	ldrh	r2, [r7, #26]
 8000a82:	8bfb      	ldrh	r3, [r7, #30]
 8000a84:	4413      	add	r3, r2
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	837b      	strh	r3, [r7, #26]
			gdiPoint(prc, x, y);
 8000a8a:	8b7b      	ldrh	r3, [r7, #26]
 8000a8c:	8b3a      	ldrh	r2, [r7, #24]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f7ff ff17 	bl	80008c4 <gdiPoint>
		for (i = 0; i < dx; i++) {
 8000a96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000aa2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8000aa6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	dbd4      	blt.n	8000a58 <gdiLine+0xc8>
			}
			y += incy;
			gdiPoint(prc, x, y);
		}
	}
}
 8000aae:	e047      	b.n	8000b40 <gdiLine+0x1b0>
		gdiPoint(prc, x, y);
 8000ab0:	8b7b      	ldrh	r3, [r7, #26]
 8000ab2:	8b3a      	ldrh	r2, [r7, #24]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff ff04 	bl	80008c4 <gdiPoint>
		e = 2 * dx - dy;
 8000abc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	843b      	strh	r3, [r7, #32]
		inc1 = 2 * (dx - dy);
 8000aca:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8000ace:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	82fb      	strh	r3, [r7, #22]
		inc2 = 2 * dx;
 8000adc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	82bb      	strh	r3, [r7, #20]
		for(i = 0; i < dy; i++) {
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000ae8:	e024      	b.n	8000b34 <gdiLine+0x1a4>
			if (e >= 0) {
 8000aea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db0a      	blt.n	8000b08 <gdiLine+0x178>
				x += incx;
 8000af2:	8b7a      	ldrh	r2, [r7, #26]
 8000af4:	8bfb      	ldrh	r3, [r7, #30]
 8000af6:	4413      	add	r3, r2
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	837b      	strh	r3, [r7, #26]
				e += inc1;
 8000afc:	8c3a      	ldrh	r2, [r7, #32]
 8000afe:	8afb      	ldrh	r3, [r7, #22]
 8000b00:	4413      	add	r3, r2
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	843b      	strh	r3, [r7, #32]
 8000b06:	e004      	b.n	8000b12 <gdiLine+0x182>
				e += inc2;
 8000b08:	8c3a      	ldrh	r2, [r7, #32]
 8000b0a:	8abb      	ldrh	r3, [r7, #20]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	843b      	strh	r3, [r7, #32]
			y += incy;
 8000b12:	8b3a      	ldrh	r2, [r7, #24]
 8000b14:	8bbb      	ldrh	r3, [r7, #28]
 8000b16:	4413      	add	r3, r2
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	833b      	strh	r3, [r7, #24]
			gdiPoint(prc, x, y);
 8000b1c:	8b7b      	ldrh	r3, [r7, #26]
 8000b1e:	8b3a      	ldrh	r2, [r7, #24]
 8000b20:	4619      	mov	r1, r3
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f7ff fece 	bl	80008c4 <gdiPoint>
		for(i = 0; i < dy; i++) {
 8000b28:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	3301      	adds	r3, #1
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000b34:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8000b38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dbd4      	blt.n	8000aea <gdiLine+0x15a>
}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	@ 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <gdiRectangle>:
		y2			Y end position

	return			none
*/
void	gdiRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	4604      	mov	r4, r0
 8000b50:	4608      	mov	r0, r1
 8000b52:	4611      	mov	r1, r2
 8000b54:	461a      	mov	r2, r3
 8000b56:	4623      	mov	r3, r4
 8000b58:	80fb      	strh	r3, [r7, #6]
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80bb      	strh	r3, [r7, #4]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	807b      	strh	r3, [r7, #2]
 8000b62:	4613      	mov	r3, r2
 8000b64:	803b      	strh	r3, [r7, #0]
	gdiLine(NULL,x0,y0,x1,y0);
 8000b66:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000b6a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b6e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff ff08 	bl	8000990 <gdiLine>
	gdiLine(NULL,x0,y1,x1,y1);
 8000b80:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000b84:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b88:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	4603      	mov	r3, r0
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff fefb 	bl	8000990 <gdiLine>
	gdiLine(NULL,x0,y0,x0,y1);
 8000b9a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b9e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ba2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ba6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	4603      	mov	r3, r0
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff feee 	bl	8000990 <gdiLine>
	gdiLine(NULL,x1,y0,x1,y1);
 8000bb4:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000bb8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000bbc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000bc0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff fee1 	bl	8000990 <gdiLine>
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd90      	pop	{r4, r7, pc}
	...

08000bd8 <gdiDrawTextEx>:
		ptext		Pointer to text

	return			none
*/
void gdiDrawTextEx(int16_t x, int16_t y, char *ptext)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	4603      	mov	r3, r0
 8000be0:	603a      	str	r2, [r7, #0]
 8000be2:	80fb      	strh	r3, [r7, #6]
 8000be4:	460b      	mov	r3, r1
 8000be6:	80bb      	strh	r3, [r7, #4]
	char		c;

	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH)
 8000be8:	e01a      	b.n	8000c20 <gdiDrawTextEx+0x48>
		if (c >= GDI_SYSFONT_OFFSET)
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	2b1f      	cmp	r3, #31
 8000bee:	d913      	bls.n	8000c18 <gdiDrawTextEx+0x40>
			gdiBitBlt(NULL, x, y, GDI_SYSFONT_WIDTH, GDI_SYSFONT_HEIGHT, (pBMP) gdiSystemFont[c-GDI_SYSFONT_OFFSET]);
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	f1a3 0220 	sub.w	r2, r3, #32
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	4413      	add	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8000c3c <gdiDrawTextEx+0x64>)
 8000c00:	4413      	add	r3, r2
 8000c02:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c06:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	230a      	movs	r3, #10
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2306      	movs	r3, #6
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff fb54 	bl	80002c0 <gdiBitBlt>
	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH)
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	3306      	adds	r3, #6
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	80fb      	strh	r3, [r7, #6]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	603a      	str	r2, [r7, #0]
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d1dc      	bne.n	8000bea <gdiDrawTextEx+0x12>
//	clip here if		if (x >= VID_PIXELS_X - GDI_SYSFONT_WIDTH)
		// else control character handling ...
}
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08007754 	.word	0x08007754

08000c40 <DelayMs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DelayMs(uint32_t nTime) // delay function
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 8000c48:	4a09      	ldr	r2, [pc, #36]	@ (8000c70 <DelayMs+0x30>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  while((TimingDelay != 0));
 8000c4e:	bf00      	nop
 8000c50:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <DelayMs+0x30>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1fb      	bne.n	8000c50 <DelayMs+0x10>
  while(Paused);
 8000c58:	bf00      	nop
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <DelayMs+0x34>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1fb      	bne.n	8000c5a <DelayMs+0x1a>
}
 8000c62:	bf00      	nop
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	2000358c 	.word	0x2000358c
 8000c74:	20003588 	.word	0x20003588

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7c:	f000 ffff 	bl	8001c7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c80:	f000 f862 	bl	8000d48 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c84:	f000 fa76 	bl	8001174 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c88:	f000 fa32 	bl	80010f0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c8c:	f000 f8d6 	bl	8000e3c <MX_TIM2_Init>
  MX_I2S2_Init();
 8000c90:	f000 f89a 	bl	8000dc8 <MX_I2S2_Init>
  MX_TIM3_Init();
 8000c94:	f000 f968 	bl	8000f68 <MX_TIM3_Init>
//    lineptrs[L] = screen[src];
//  }



  HAL_TIM_MspPostInit(&htim3);
 8000c98:	4822      	ldr	r0, [pc, #136]	@ (8000d24 <main+0xac>)
 8000c9a:	f000 fdbd 	bl	8001818 <HAL_TIM_MspPostInit>
  // add:
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	201d      	movs	r0, #29
 8000ca4:	f001 f937 	bl	8001f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ca8:	201d      	movs	r0, #29
 8000caa:	f001 f94e 	bl	8001f4a <HAL_NVIC_EnableIRQ>

  //do know if it is necessary
  HAL_TIM_Base_Start(&htim2); // start the timer for the video sync
 8000cae:	481e      	ldr	r0, [pc, #120]	@ (8000d28 <main+0xb0>)
 8000cb0:	f003 fd5c 	bl	800476c <HAL_TIM_Base_Start>
  //HAL_TIM_Base_Start(&htim3); // start the timer for the video sync
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);  // OC4Ref → TRGO
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	481c      	ldr	r0, [pc, #112]	@ (8000d28 <main+0xb0>)
 8000cb8:	f003 fe2a 	bl	8004910 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4819      	ldr	r0, [pc, #100]	@ (8000d24 <main+0xac>)
 8000cc0:	f003 ff38 	bl	8004b34 <HAL_TIM_OC_Start_IT>
  //__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);



  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4817      	ldr	r0, [pc, #92]	@ (8000d24 <main+0xac>)
 8000cc8:	f003 fe22 	bl	8004910 <HAL_TIM_OC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // this the same
 8000ccc:	2104      	movs	r1, #4
 8000cce:	4815      	ldr	r0, [pc, #84]	@ (8000d24 <main+0xac>)
 8000cd0:	f004 f8f2 	bl	8004eb8 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3);
 8000cd4:	2108      	movs	r1, #8
 8000cd6:	4813      	ldr	r0, [pc, #76]	@ (8000d24 <main+0xac>)
 8000cd8:	f003 fe1a 	bl	8004910 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_4);
 8000cdc:	210c      	movs	r1, #12
 8000cde:	4811      	ldr	r0, [pc, #68]	@ (8000d24 <main+0xac>)
 8000ce0:	f003 fe16 	bl	8004910 <HAL_TIM_OC_Start>
//    (uint32_t)&TIM3->CCR1,           // peripheral dest
//    VID_VSIZE                // number of half-words to transfer
//  );


  HAL_DMA_Start(
 8000ce4:	4911      	ldr	r1, [pc, #68]	@ (8000d2c <main+0xb4>)
 8000ce6:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <main+0xb8>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a12      	ldr	r2, [pc, #72]	@ (8000d34 <main+0xbc>)
 8000cec:	4812      	ldr	r0, [pc, #72]	@ (8000d38 <main+0xc0>)
 8000cee:	f001 f9ef 	bl	80020d0 <HAL_DMA_Start>
    LINES_PER_FIELD                  // one CCR1 write per line
  );



  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <main+0xac>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <main+0xac>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d00:	60da      	str	r2, [r3, #12]
  //__HAL_DMA_ENABLE(&hdma_tim3_ch1);


  HAL_I2S_Transmit_DMA(&hi2s2,
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <main+0xc4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <main+0xb8>)
 8000d08:	6812      	ldr	r2, [r2, #0]
 8000d0a:	b292      	uxth	r2, r2
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480c      	ldr	r0, [pc, #48]	@ (8000d40 <main+0xc8>)
 8000d10:	f001 fe4e 	bl	80029b0 <HAL_I2S_Transmit_DMA>
  //HAL_I2S_Transmit_DMA(&hi2s2, Vwhite, VID_HSIZE);



  // also i added a function for handleing
  srand(SysTick->VAL);
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <main+0xcc>)
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f005 fc8f 	bl	800663c <srand>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  show();
 8000d1e:	f000 fa79 	bl	8001214 <show>
 8000d22:	e7fc      	b.n	8000d1e <main+0xa6>
 8000d24:	2000341c 	.word	0x2000341c
 8000d28:	200033d0 	.word	0x200033d0
 8000d2c:	08007b94 	.word	0x08007b94
 8000d30:	080080ac 	.word	0x080080ac
 8000d34:	40000434 	.word	0x40000434
 8000d38:	20003468 	.word	0x20003468
 8000d3c:	200028e8 	.word	0x200028e8
 8000d40:	20003334 	.word	0x20003334
 8000d44:	e000e010 	.word	0xe000e010

08000d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b094      	sub	sp, #80	@ 0x50
 8000d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4e:	f107 0318 	add.w	r3, r7, #24
 8000d52:	2238      	movs	r2, #56	@ 0x38
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f005 fde1 	bl	800691e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d6e:	f001 ff37 	bl	8002be0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d7c:	2340      	movs	r3, #64	@ 0x40
 8000d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d84:	f107 0318 	add.w	r3, r7, #24
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 ffdd 	bl	8002d48 <HAL_RCC_OscConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d94:	f000 fa12 	bl	80011bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d98:	230f      	movs	r3, #15
 8000d9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f002 fadb 	bl	800336c <HAL_RCC_ClockConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000dbc:	f000 f9fe 	bl	80011bc <Error_Handler>
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3750      	adds	r7, #80	@ 0x50
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2S2_Init 1 */
	//hi2s2.Init.CPOL = I2S_CPOL_HIGH;

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000dcc:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <MX_I2S2_Init+0x6c>)
 8000dce:	4a1a      	ldr	r2, [pc, #104]	@ (8000e38 <MX_I2S2_Init+0x70>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000dd2:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <MX_I2S2_Init+0x6c>)
 8000dd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dd8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000dda:	4b16      	ldr	r3, [pc, #88]	@ (8000e34 <MX_I2S2_Init+0x6c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000de0:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <MX_I2S2_Init+0x6c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000de6:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <MX_I2S2_Init+0x6c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000dec:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <MX_I2S2_Init+0x6c>)
 8000dee:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000df2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <MX_I2S2_Init+0x6c>)
 8000df6:	2208      	movs	r2, #8
 8000df8:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000dfa:	480e      	ldr	r0, [pc, #56]	@ (8000e34 <MX_I2S2_Init+0x6c>)
 8000dfc:	f001 fcf8 	bl	80027f0 <HAL_I2S_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8000e06:	f000 f9d9 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */
  __HAL_I2S_DISABLE(&hi2s2);
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <MX_I2S2_Init+0x6c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	69da      	ldr	r2, [r3, #28]
 8000e10:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <MX_I2S2_Init+0x6c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e18:	61da      	str	r2, [r3, #28]
   SPI2->I2SPR = 1;   // I2SDIV = 1, ODD = 0
 8000e1a:	4b07      	ldr	r3, [pc, #28]	@ (8000e38 <MX_I2S2_Init+0x70>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	621a      	str	r2, [r3, #32]
   __HAL_I2S_ENABLE(&hi2s2);
 8000e20:	4b04      	ldr	r3, [pc, #16]	@ (8000e34 <MX_I2S2_Init+0x6c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	69da      	ldr	r2, [r3, #28]
 8000e26:	4b03      	ldr	r3, [pc, #12]	@ (8000e34 <MX_I2S2_Init+0x6c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e2e:	61da      	str	r2, [r3, #28]
  /* USER CODE END I2S2_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20003334 	.word	0x20003334
 8000e38:	40003800 	.word	0x40003800

08000e3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b094      	sub	sp, #80	@ 0x50
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e42:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e60:	f107 0320 	add.w	r3, r7, #32
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
 8000e7a:	615a      	str	r2, [r3, #20]
 8000e7c:	619a      	str	r2, [r3, #24]
  //htim2.Init.Prescaler         = VID_HSIZE/4 - 1;
  //htim2.Init.Period            = 2*VID_VSIZE - 1;
  //sConfigOC.Pulse      = VID_VSIZE - 1;

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e7e:	4b39      	ldr	r3, [pc, #228]	@ (8000f64 <MX_TIM2_Init+0x128>)
 8000e80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VID_HSIZE/4 - 1;
 8000e86:	4b37      	ldr	r3, [pc, #220]	@ (8000f64 <MX_TIM2_Init+0x128>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b35      	ldr	r3, [pc, #212]	@ (8000f64 <MX_TIM2_Init+0x128>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2*VID_VSIZE - 1;
 8000e92:	4b34      	ldr	r3, [pc, #208]	@ (8000f64 <MX_TIM2_Init+0x128>)
 8000e94:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8000e98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000e9a:	4b32      	ldr	r3, [pc, #200]	@ (8000f64 <MX_TIM2_Init+0x128>)
 8000e9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ea0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b30      	ldr	r3, [pc, #192]	@ (8000f64 <MX_TIM2_Init+0x128>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ea8:	482e      	ldr	r0, [pc, #184]	@ (8000f64 <MX_TIM2_Init+0x128>)
 8000eaa:	f003 fc07 	bl	80046bc <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000eb4:	f000 f982 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebc:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ebe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4827      	ldr	r0, [pc, #156]	@ (8000f64 <MX_TIM2_Init+0x128>)
 8000ec6:	f004 fbe7 	bl	8005698 <HAL_TIM_ConfigClockSource>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000ed0:	f000 f974 	bl	80011bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ed4:	4823      	ldr	r0, [pc, #140]	@ (8000f64 <MX_TIM2_Init+0x128>)
 8000ed6:	f003 ff8d 	bl	8004df4 <HAL_TIM_PWM_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000ee0:	f000 f96c 	bl	80011bc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ee4:	2306      	movs	r3, #6
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000ee8:	2370      	movs	r3, #112	@ 0x70
 8000eea:	633b      	str	r3, [r7, #48]	@ 0x30
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000eec:	2300      	movs	r3, #0
 8000eee:	637b      	str	r3, [r7, #52]	@ 0x34
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sSlaveConfig.TriggerFilter = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000ef8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000efc:	4619      	mov	r1, r3
 8000efe:	4819      	ldr	r0, [pc, #100]	@ (8000f64 <MX_TIM2_Init+0x128>)
 8000f00:	f004 fce0 	bl	80058c4 <HAL_TIM_SlaveConfigSynchro>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000f0a:	f000 f957 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000f0e:	2370      	movs	r3, #112	@ 0x70
 8000f10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000f12:	2380      	movs	r3, #128	@ 0x80
 8000f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f16:	f107 0320 	add.w	r3, r7, #32
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4811      	ldr	r0, [pc, #68]	@ (8000f64 <MX_TIM2_Init+0x128>)
 8000f1e:	f005 fab1 	bl	8006484 <HAL_TIMEx_MasterConfigSynchronization>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000f28:	f000 f948 	bl	80011bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f2c:	2360      	movs	r3, #96	@ 0x60
 8000f2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VID_VSIZE - 1;
 8000f30:	f44f 731c 	mov.w	r3, #624	@ 0x270
 8000f34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000f36:	2302      	movs	r3, #2
 8000f38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	220c      	movs	r2, #12
 8000f42:	4619      	mov	r1, r3
 8000f44:	4807      	ldr	r0, [pc, #28]	@ (8000f64 <MX_TIM2_Init+0x128>)
 8000f46:	f004 fa93 	bl	8005470 <HAL_TIM_PWM_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8000f50:	f000 f934 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f54:	4803      	ldr	r0, [pc, #12]	@ (8000f64 <MX_TIM2_Init+0x128>)
 8000f56:	f000 fc5f 	bl	8001818 <HAL_TIM_MspPostInit>

}
 8000f5a:	bf00      	nop
 8000f5c:	3750      	adds	r7, #80	@ 0x50
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200033d0 	.word	0x200033d0

08000f68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b094      	sub	sp, #80	@ 0x50
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8c:	f107 0320 	add.w	r3, r7, #32
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]
 8000fa6:	615a      	str	r2, [r3, #20]
 8000fa8:	619a      	str	r2, [r3, #24]

  //FOR CHANNEL 2:
  //sConfigOC.Pulse = HSYNCCOUNTS;

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000faa:	4b4f      	ldr	r3, [pc, #316]	@ (80010e8 <MX_TIM3_Init+0x180>)
 8000fac:	4a4f      	ldr	r2, [pc, #316]	@ (80010ec <MX_TIM3_Init+0x184>)
 8000fae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fb0:	4b4d      	ldr	r3, [pc, #308]	@ (80010e8 <MX_TIM3_Init+0x180>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80010e8 <MX_TIM3_Init+0x180>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIMERCOUNTS - 1; // 0xFFFF;
 8000fbc:	4b4a      	ldr	r3, [pc, #296]	@ (80010e8 <MX_TIM3_Init+0x180>)
 8000fbe:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000fc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc4:	4b48      	ldr	r3, [pc, #288]	@ (80010e8 <MX_TIM3_Init+0x180>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fca:	4b47      	ldr	r3, [pc, #284]	@ (80010e8 <MX_TIM3_Init+0x180>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fd0:	4845      	ldr	r0, [pc, #276]	@ (80010e8 <MX_TIM3_Init+0x180>)
 8000fd2:	f003 fb73 	bl	80046bc <HAL_TIM_Base_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000fdc:	f000 f8ee 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe4:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fe6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fea:	4619      	mov	r1, r3
 8000fec:	483e      	ldr	r0, [pc, #248]	@ (80010e8 <MX_TIM3_Init+0x180>)
 8000fee:	f004 fb53 	bl	8005698 <HAL_TIM_ConfigClockSource>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000ff8:	f000 f8e0 	bl	80011bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000ffc:	483a      	ldr	r0, [pc, #232]	@ (80010e8 <MX_TIM3_Init+0x180>)
 8000ffe:	f003 fc25 	bl	800484c <HAL_TIM_OC_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8001008:	f000 f8d8 	bl	80011bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800100c:	4836      	ldr	r0, [pc, #216]	@ (80010e8 <MX_TIM3_Init+0x180>)
 800100e:	f003 fef1 	bl	8004df4 <HAL_TIM_PWM_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001018:	f000 f8d0 	bl	80011bc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800101c:	2306      	movs	r3, #6
 800101e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001020:	2310      	movs	r3, #16
 8001022:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001024:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001028:	4619      	mov	r1, r3
 800102a:	482f      	ldr	r0, [pc, #188]	@ (80010e8 <MX_TIM3_Init+0x180>)
 800102c:	f004 fc4a 	bl	80058c4 <HAL_TIM_SlaveConfigSynchro>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8001036:	f000 f8c1 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	4619      	mov	r1, r3
 8001048:	4827      	ldr	r0, [pc, #156]	@ (80010e8 <MX_TIM3_Init+0x180>)
 800104a:	f005 fa1b 	bl	8006484 <HAL_TIMEx_MasterConfigSynchronization>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001054:	f000 f8b2 	bl	80011bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001058:	2330      	movs	r3, #48	@ 0x30
 800105a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = NO_TOG; // 0;
 800105c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001060:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001062:	2302      	movs	r3, #2
 8001064:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	4619      	mov	r1, r3
 8001070:	481d      	ldr	r0, [pc, #116]	@ (80010e8 <MX_TIM3_Init+0x180>)
 8001072:	f004 f983 	bl	800537c <HAL_TIM_OC_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 800107c:	f000 f89e 	bl	80011bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001080:	2360      	movs	r3, #96	@ 0x60
 8001082:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = HSYNCCOUNTS; // 208;
 8001084:	234b      	movs	r3, #75	@ 0x4b
 8001086:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2204      	movs	r2, #4
 800108c:	4619      	mov	r1, r3
 800108e:	4816      	ldr	r0, [pc, #88]	@ (80010e8 <MX_TIM3_Init+0x180>)
 8001090:	f004 f9ee 	bl	8005470 <HAL_TIM_PWM_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM3_Init+0x136>
  {
    Error_Handler();
 800109a:	f000 f88f 	bl	80011bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 208;
 80010a2:	23d0      	movs	r3, #208	@ 0xd0
 80010a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	2208      	movs	r2, #8
 80010aa:	4619      	mov	r1, r3
 80010ac:	480e      	ldr	r0, [pc, #56]	@ (80010e8 <MX_TIM3_Init+0x180>)
 80010ae:	f004 f965 	bl	800537c <HAL_TIM_OC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM3_Init+0x154>
  {
    Error_Handler();
 80010b8:	f000 f880 	bl	80011bc <Error_Handler>
  }
  sConfigOC.Pulse = 880;
 80010bc:	f44f 735c 	mov.w	r3, #880	@ 0x370
 80010c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	220c      	movs	r2, #12
 80010c6:	4619      	mov	r1, r3
 80010c8:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <MX_TIM3_Init+0x180>)
 80010ca:	f004 f957 	bl	800537c <HAL_TIM_OC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM3_Init+0x170>
  {
    Error_Handler();
 80010d4:	f000 f872 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  //TIM_DMACmd(TIM3, TIM_DMA_CC1|TIM_DMA_CC3, ENABLE);
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010d8:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <MX_TIM3_Init+0x180>)
 80010da:	f000 fb9d 	bl	8001818 <HAL_TIM_MspPostInit>

}
 80010de:	bf00      	nop
 80010e0:	3750      	adds	r7, #80	@ 0x50
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000341c 	.word	0x2000341c
 80010ec:	40000400 	.word	0x40000400

080010f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <MX_DMA_Init+0x80>)
 80010f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001170 <MX_DMA_Init+0x80>)
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	6493      	str	r3, [r2, #72]	@ 0x48
 8001102:	4b1b      	ldr	r3, [pc, #108]	@ (8001170 <MX_DMA_Init+0x80>)
 8001104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800110e:	4b18      	ldr	r3, [pc, #96]	@ (8001170 <MX_DMA_Init+0x80>)
 8001110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001112:	4a17      	ldr	r2, [pc, #92]	@ (8001170 <MX_DMA_Init+0x80>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6493      	str	r3, [r2, #72]	@ 0x48
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <MX_DMA_Init+0x80>)
 800111c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	200c      	movs	r0, #12
 800112c:	f000 fef3 	bl	8001f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001130:	200c      	movs	r0, #12
 8001132:	f000 ff0a 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	200d      	movs	r0, #13
 800113c:	f000 feeb 	bl	8001f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001140:	200d      	movs	r0, #13
 8001142:	f000 ff02 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	200f      	movs	r0, #15
 800114c:	f000 fee3 	bl	8001f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001150:	200f      	movs	r0, #15
 8001152:	f000 fefa 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	2010      	movs	r0, #16
 800115c:	f000 fedb 	bl	8001f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001160:	2010      	movs	r0, #16
 8001162:	f000 fef2 	bl	8001f4a <HAL_NVIC_EnableIRQ>

}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000

08001174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <MX_GPIO_Init+0x44>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	4a0e      	ldr	r2, [pc, #56]	@ (80011b8 <MX_GPIO_Init+0x44>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001186:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <MX_GPIO_Init+0x44>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <MX_GPIO_Init+0x44>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a08      	ldr	r2, [pc, #32]	@ (80011b8 <MX_GPIO_Init+0x44>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <MX_GPIO_Init+0x44>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000

080011bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i
}
 80011c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <Error_Handler+0x8>

080011c8 <introScreen>:
	}
	Paused = !Paused;
}

void introScreen(char *subtitle)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	vidClearScreen();
 80011d0:	f000 fd20 	bl	8001c14 <vidClearScreen>
	gdiDrawTextEx(120, 40, KOPTEKST);
 80011d4:	4a0d      	ldr	r2, [pc, #52]	@ (800120c <introScreen+0x44>)
 80011d6:	2128      	movs	r1, #40	@ 0x28
 80011d8:	2078      	movs	r0, #120	@ 0x78
 80011da:	f7ff fcfd 	bl	8000bd8 <gdiDrawTextEx>
	gdiDrawTextEx(100, 50, SUBTITEL);
 80011de:	4a0c      	ldr	r2, [pc, #48]	@ (8001210 <introScreen+0x48>)
 80011e0:	2132      	movs	r1, #50	@ 0x32
 80011e2:	2064      	movs	r0, #100	@ 0x64
 80011e4:	f7ff fcf8 	bl	8000bd8 <gdiDrawTextEx>
	DelayMs(2000); gdiDrawTextEx(110, 60, subtitle);
 80011e8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011ec:	f7ff fd28 	bl	8000c40 <DelayMs>
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	213c      	movs	r1, #60	@ 0x3c
 80011f4:	206e      	movs	r0, #110	@ 0x6e
 80011f6:	f7ff fcef 	bl	8000bd8 <gdiDrawTextEx>
	DelayMs(3000);
 80011fa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80011fe:	f7ff fd1f 	bl	8000c40 <DelayMs>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	0800767c 	.word	0x0800767c
 8001210:	08007688 	.word	0x08007688

08001214 <show>:

void show(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af02      	add	r7, sp, #8
	int16_t		x1, y1, x2, y2, i;

//	Demo Point
	introScreen("point demonstration");
 800121a:	48a7      	ldr	r0, [pc, #668]	@ (80014b8 <show+0x2a4>)
 800121c:	f7ff ffd4 	bl	80011c8 <introScreen>
	for (i = 0; i < 500; i++) {
 8001220:	2300      	movs	r3, #0
 8001222:	81bb      	strh	r3, [r7, #12]
 8001224:	e02e      	b.n	8001284 <show+0x70>
		DelayMs(10);
 8001226:	200a      	movs	r0, #10
 8001228:	f7ff fd0a 	bl	8000c40 <DelayMs>
		x1 = rand() % VID_PIXELS_X;
 800122c:	f005 fa34 	bl	8006698 <rand>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	0913      	lsrs	r3, r2, #4
 8001236:	49a1      	ldr	r1, [pc, #644]	@ (80014bc <show+0x2a8>)
 8001238:	fba1 1303 	umull	r1, r3, r1, r3
 800123c:	085b      	lsrs	r3, r3, #1
 800123e:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8001242:	fb01 f303 	mul.w	r3, r1, r3
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	81fb      	strh	r3, [r7, #14]
		y1 = rand() % VID_PIXELS_Y;
 800124a:	f005 fa25 	bl	8006698 <rand>
 800124e:	4602      	mov	r2, r0
 8001250:	4b9b      	ldr	r3, [pc, #620]	@ (80014c0 <show+0x2ac>)
 8001252:	fb83 1302 	smull	r1, r3, r3, r2
 8001256:	4413      	add	r3, r2
 8001258:	11d9      	asrs	r1, r3, #7
 800125a:	17d3      	asrs	r3, r2, #31
 800125c:	1ac9      	subs	r1, r1, r3
 800125e:	460b      	mov	r3, r1
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	1a5b      	subs	r3, r3, r1
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	1ad1      	subs	r1, r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	817b      	strh	r3, [r7, #10]
		gdiPoint(NULL,x1,y1);
 800126c:	89fb      	ldrh	r3, [r7, #14]
 800126e:	897a      	ldrh	r2, [r7, #10]
 8001270:	4619      	mov	r1, r3
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff fb26 	bl	80008c4 <gdiPoint>
	for (i = 0; i < 500; i++) {
 8001278:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800127c:	b29b      	uxth	r3, r3
 800127e:	3301      	adds	r3, #1
 8001280:	b29b      	uxth	r3, r3
 8001282:	81bb      	strh	r3, [r7, #12]
 8001284:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001288:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800128c:	dbcb      	blt.n	8001226 <show+0x12>
	}
	DelayMs(3000);
 800128e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001292:	f7ff fcd5 	bl	8000c40 <DelayMs>

//	Demo Line
	introScreen("line demonstration");
 8001296:	488b      	ldr	r0, [pc, #556]	@ (80014c4 <show+0x2b0>)
 8001298:	f7ff ff96 	bl	80011c8 <introScreen>
	for (i = 0; i < 50; i++) {
 800129c:	2300      	movs	r3, #0
 800129e:	81bb      	strh	r3, [r7, #12]
 80012a0:	e055      	b.n	800134e <show+0x13a>
		DelayMs(150);
 80012a2:	2096      	movs	r0, #150	@ 0x96
 80012a4:	f7ff fccc 	bl	8000c40 <DelayMs>
		x1 = rand() % VID_PIXELS_X;
 80012a8:	f005 f9f6 	bl	8006698 <rand>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	0913      	lsrs	r3, r2, #4
 80012b2:	4982      	ldr	r1, [pc, #520]	@ (80014bc <show+0x2a8>)
 80012b4:	fba1 1303 	umull	r1, r3, r1, r3
 80012b8:	085b      	lsrs	r3, r3, #1
 80012ba:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80012be:	fb01 f303 	mul.w	r3, r1, r3
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	81fb      	strh	r3, [r7, #14]
		y1 = rand() % VID_PIXELS_Y;
 80012c6:	f005 f9e7 	bl	8006698 <rand>
 80012ca:	4602      	mov	r2, r0
 80012cc:	4b7c      	ldr	r3, [pc, #496]	@ (80014c0 <show+0x2ac>)
 80012ce:	fb83 1302 	smull	r1, r3, r3, r2
 80012d2:	4413      	add	r3, r2
 80012d4:	11d9      	asrs	r1, r3, #7
 80012d6:	17d3      	asrs	r3, r2, #31
 80012d8:	1ac9      	subs	r1, r1, r3
 80012da:	460b      	mov	r3, r1
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	1a5b      	subs	r3, r3, r1
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	1ad1      	subs	r1, r2, r3
 80012e4:	460b      	mov	r3, r1
 80012e6:	817b      	strh	r3, [r7, #10]
		x2 = rand() % VID_PIXELS_X;
 80012e8:	f005 f9d6 	bl	8006698 <rand>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	0913      	lsrs	r3, r2, #4
 80012f2:	4972      	ldr	r1, [pc, #456]	@ (80014bc <show+0x2a8>)
 80012f4:	fba1 1303 	umull	r1, r3, r1, r3
 80012f8:	085b      	lsrs	r3, r3, #1
 80012fa:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80012fe:	fb01 f303 	mul.w	r3, r1, r3
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	813b      	strh	r3, [r7, #8]
		y2 = rand() % VID_PIXELS_Y;
 8001306:	f005 f9c7 	bl	8006698 <rand>
 800130a:	4602      	mov	r2, r0
 800130c:	4b6c      	ldr	r3, [pc, #432]	@ (80014c0 <show+0x2ac>)
 800130e:	fb83 1302 	smull	r1, r3, r3, r2
 8001312:	4413      	add	r3, r2
 8001314:	11d9      	asrs	r1, r3, #7
 8001316:	17d3      	asrs	r3, r2, #31
 8001318:	1ac9      	subs	r1, r1, r3
 800131a:	460b      	mov	r3, r1
 800131c:	011b      	lsls	r3, r3, #4
 800131e:	1a5b      	subs	r3, r3, r1
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	1ad1      	subs	r1, r2, r3
 8001324:	460b      	mov	r3, r1
 8001326:	80fb      	strh	r3, [r7, #6]
		gdiLine(NULL,x1,y1,x2,y2);
 8001328:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 800132c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001330:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	4603      	mov	r3, r0
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff fb27 	bl	8000990 <gdiLine>
	for (i = 0; i < 50; i++) {
 8001342:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001346:	b29b      	uxth	r3, r3
 8001348:	3301      	adds	r3, #1
 800134a:	b29b      	uxth	r3, r3
 800134c:	81bb      	strh	r3, [r7, #12]
 800134e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001352:	2b31      	cmp	r3, #49	@ 0x31
 8001354:	dda5      	ble.n	80012a2 <show+0x8e>
	}
	DelayMs(3000);
 8001356:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800135a:	f7ff fc71 	bl	8000c40 <DelayMs>

//	Demo Rectangle
	introScreen("rectangle demonstration");
 800135e:	485a      	ldr	r0, [pc, #360]	@ (80014c8 <show+0x2b4>)
 8001360:	f7ff ff32 	bl	80011c8 <introScreen>
	for (i = 0; i < 15; i++) {
 8001364:	2300      	movs	r3, #0
 8001366:	81bb      	strh	r3, [r7, #12]
 8001368:	e051      	b.n	800140e <show+0x1fa>
		DelayMs(600);
 800136a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800136e:	f7ff fc67 	bl	8000c40 <DelayMs>
		x1 = rand() % VID_PIXELS_X;
 8001372:	f005 f991 	bl	8006698 <rand>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	0913      	lsrs	r3, r2, #4
 800137c:	494f      	ldr	r1, [pc, #316]	@ (80014bc <show+0x2a8>)
 800137e:	fba1 1303 	umull	r1, r3, r1, r3
 8001382:	085b      	lsrs	r3, r3, #1
 8001384:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8001388:	fb01 f303 	mul.w	r3, r1, r3
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	81fb      	strh	r3, [r7, #14]
		y1 = rand() % VID_PIXELS_Y;
 8001390:	f005 f982 	bl	8006698 <rand>
 8001394:	4602      	mov	r2, r0
 8001396:	4b4a      	ldr	r3, [pc, #296]	@ (80014c0 <show+0x2ac>)
 8001398:	fb83 1302 	smull	r1, r3, r3, r2
 800139c:	4413      	add	r3, r2
 800139e:	11d9      	asrs	r1, r3, #7
 80013a0:	17d3      	asrs	r3, r2, #31
 80013a2:	1ac9      	subs	r1, r1, r3
 80013a4:	460b      	mov	r3, r1
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	1a5b      	subs	r3, r3, r1
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	1ad1      	subs	r1, r2, r3
 80013ae:	460b      	mov	r3, r1
 80013b0:	817b      	strh	r3, [r7, #10]
		x2 = rand() % 100;
 80013b2:	f005 f971 	bl	8006698 <rand>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a44      	ldr	r2, [pc, #272]	@ (80014cc <show+0x2b8>)
 80013ba:	fb82 1203 	smull	r1, r2, r2, r3
 80013be:	1151      	asrs	r1, r2, #5
 80013c0:	17da      	asrs	r2, r3, #31
 80013c2:	1a8a      	subs	r2, r1, r2
 80013c4:	2164      	movs	r1, #100	@ 0x64
 80013c6:	fb01 f202 	mul.w	r2, r1, r2
 80013ca:	1a9a      	subs	r2, r3, r2
 80013cc:	4613      	mov	r3, r2
 80013ce:	813b      	strh	r3, [r7, #8]
		y2 = rand() % 100;
 80013d0:	f005 f962 	bl	8006698 <rand>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a3d      	ldr	r2, [pc, #244]	@ (80014cc <show+0x2b8>)
 80013d8:	fb82 1203 	smull	r1, r2, r2, r3
 80013dc:	1151      	asrs	r1, r2, #5
 80013de:	17da      	asrs	r2, r3, #31
 80013e0:	1a8a      	subs	r2, r1, r2
 80013e2:	2164      	movs	r1, #100	@ 0x64
 80013e4:	fb01 f202 	mul.w	r2, r1, r2
 80013e8:	1a9a      	subs	r2, r3, r2
 80013ea:	4613      	mov	r3, r2
 80013ec:	80fb      	strh	r3, [r7, #6]
		gdiRectangle(x1,y1,x2,y2);
 80013ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013f6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80013fa:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80013fe:	f7ff fba3 	bl	8000b48 <gdiRectangle>
	for (i = 0; i < 15; i++) {
 8001402:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001406:	b29b      	uxth	r3, r3
 8001408:	3301      	adds	r3, #1
 800140a:	b29b      	uxth	r3, r3
 800140c:	81bb      	strh	r3, [r7, #12]
 800140e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001412:	2b0e      	cmp	r3, #14
 8001414:	dda9      	ble.n	800136a <show+0x156>
	}
	DelayMs(3000);
 8001416:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800141a:	f7ff fc11 	bl	8000c40 <DelayMs>
		gdiCircle(x,y,x1,GDI_ROP_COPY);
	}
	DelayMs(3000);
#endif
//	Demo Bitmap
	introScreen("bitmap demonstration");
 800141e:	482c      	ldr	r0, [pc, #176]	@ (80014d0 <show+0x2bc>)
 8001420:	f7ff fed2 	bl	80011c8 <introScreen>
	x1 = VID_PIXELS_X / 8;
 8001424:	232a      	movs	r3, #42	@ 0x2a
 8001426:	81fb      	strh	r3, [r7, #14]
	y1 = 220;
 8001428:	23dc      	movs	r3, #220	@ 0xdc
 800142a:	817b      	strh	r3, [r7, #10]
	do {
		gdiBitBlt(NULL,x1,y1,15,12,(pBMP)((x1&1)?deBadBoys1:
 800142c:	89fb      	ldrh	r3, [r7, #14]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d108      	bne.n	8001448 <show+0x234>
				((x1&3)?deBadBoys2:deBadBoys0)));
 8001436:	89fb      	ldrh	r3, [r7, #14]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <show+0x230>
 8001440:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <show+0x2c0>)
 8001442:	e002      	b.n	800144a <show+0x236>
 8001444:	4b24      	ldr	r3, [pc, #144]	@ (80014d8 <show+0x2c4>)
 8001446:	e000      	b.n	800144a <show+0x236>
		gdiBitBlt(NULL,x1,y1,15,12,(pBMP)((x1&1)?deBadBoys1:
 8001448:	4b24      	ldr	r3, [pc, #144]	@ (80014dc <show+0x2c8>)
 800144a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800144e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	230c      	movs	r3, #12
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	230f      	movs	r3, #15
 800145a:	2000      	movs	r0, #0
 800145c:	f7fe ff30 	bl	80002c0 <gdiBitBlt>
		DelayMs(100);
 8001460:	2064      	movs	r0, #100	@ 0x64
 8001462:	f7ff fbed 	bl	8000c40 <DelayMs>
	} while (x1++ < (VID_PIXELS_X * 7 / 8));
 8001466:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800146a:	b293      	uxth	r3, r2
 800146c:	3301      	adds	r3, #1
 800146e:	b29b      	uxth	r3, r3
 8001470:	81fb      	strh	r3, [r7, #14]
 8001472:	b293      	uxth	r3, r2
 8001474:	f5b3 7f93 	cmp.w	r3, #294	@ 0x126
 8001478:	d3d8      	bcc.n	800142c <show+0x218>
	DelayMs(3000);
 800147a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800147e:	f7ff fbdf 	bl	8000c40 <DelayMs>

// Goodbye
	introScreen("font size 6x10, 42 * 24 text");
 8001482:	4817      	ldr	r0, [pc, #92]	@ (80014e0 <show+0x2cc>)
 8001484:	f7ff fea0 	bl	80011c8 <introScreen>

	gdiDrawTextEx(80, 90, "ARM MCU development");
 8001488:	4a16      	ldr	r2, [pc, #88]	@ (80014e4 <show+0x2d0>)
 800148a:	215a      	movs	r1, #90	@ 0x5a
 800148c:	2050      	movs	r0, #80	@ 0x50
 800148e:	f7ff fba3 	bl	8000bd8 <gdiDrawTextEx>
	gdiDrawTextEx(95, 120, "by E.J.W. VRIEZE");
 8001492:	4a15      	ldr	r2, [pc, #84]	@ (80014e8 <show+0x2d4>)
 8001494:	2178      	movs	r1, #120	@ 0x78
 8001496:	205f      	movs	r0, #95	@ 0x5f
 8001498:	f7ff fb9e 	bl	8000bd8 <gdiDrawTextEx>
	gdiDrawTextEx(95, 130, "~~~~~ 2016 ~~~~~");
 800149c:	4a13      	ldr	r2, [pc, #76]	@ (80014ec <show+0x2d8>)
 800149e:	2182      	movs	r1, #130	@ 0x82
 80014a0:	205f      	movs	r0, #95	@ 0x5f
 80014a2:	f7ff fb99 	bl	8000bd8 <gdiDrawTextEx>
	DelayMs(9000);
 80014a6:	f242 3028 	movw	r0, #9000	@ 0x2328
 80014aa:	f7ff fbc9 	bl	8000c40 <DelayMs>
}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	080076a0 	.word	0x080076a0
 80014bc:	18618619 	.word	0x18618619
 80014c0:	88888889 	.word	0x88888889
 80014c4:	080076b4 	.word	0x080076b4
 80014c8:	080076c8 	.word	0x080076c8
 80014cc:	51eb851f 	.word	0x51eb851f
 80014d0:	080076e0 	.word	0x080076e0
 80014d4:	08007b64 	.word	0x08007b64
 80014d8:	08007b34 	.word	0x08007b34
 80014dc:	08007b4c 	.word	0x08007b4c
 80014e0:	080076f8 	.word	0x080076f8
 80014e4:	08007718 	.word	0x08007718
 80014e8:	0800772c 	.word	0x0800772c
 80014ec:	08007740 	.word	0x08007740

080014f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <HAL_MspInit+0x44>)
 80014f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001534 <HAL_MspInit+0x44>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6613      	str	r3, [r2, #96]	@ 0x60
 8001502:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <HAL_MspInit+0x44>)
 8001504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <HAL_MspInit+0x44>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001512:	4a08      	ldr	r2, [pc, #32]	@ (8001534 <HAL_MspInit+0x44>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001518:	6593      	str	r3, [r2, #88]	@ 0x58
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <HAL_MspInit+0x44>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001526:	f001 fbff 	bl	8002d28 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000

08001538 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b09e      	sub	sp, #120	@ 0x78
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	2254      	movs	r2, #84	@ 0x54
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f005 f9e0 	bl	800691e <memset>
  if(hi2s->Instance==SPI2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a35      	ldr	r2, [pc, #212]	@ (8001638 <HAL_I2S_MspInit+0x100>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d163      	bne.n	8001630 <HAL_I2S_MspInit+0xf8>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001568:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800156c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 800156e:	2300      	movs	r3, #0
 8001570:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4618      	mov	r0, r3
 8001578:	f002 f914 	bl	80037a4 <HAL_RCCEx_PeriphCLKConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 8001582:	f7ff fe1b 	bl	80011bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001586:	4b2d      	ldr	r3, [pc, #180]	@ (800163c <HAL_I2S_MspInit+0x104>)
 8001588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158a:	4a2c      	ldr	r2, [pc, #176]	@ (800163c <HAL_I2S_MspInit+0x104>)
 800158c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001590:	6593      	str	r3, [r2, #88]	@ 0x58
 8001592:	4b2a      	ldr	r3, [pc, #168]	@ (800163c <HAL_I2S_MspInit+0x104>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	4b27      	ldr	r3, [pc, #156]	@ (800163c <HAL_I2S_MspInit+0x104>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	4a26      	ldr	r2, [pc, #152]	@ (800163c <HAL_I2S_MspInit+0x104>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015aa:	4b24      	ldr	r3, [pc, #144]	@ (800163c <HAL_I2S_MspInit+0x104>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80015b6:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80015ba:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015c8:	2305      	movs	r3, #5
 80015ca:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015d0:	4619      	mov	r1, r3
 80015d2:	481b      	ldr	r0, [pc, #108]	@ (8001640 <HAL_I2S_MspInit+0x108>)
 80015d4:	f000 ff8a 	bl	80024ec <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <HAL_I2S_MspInit+0x10c>)
 80015da:	4a1b      	ldr	r2, [pc, #108]	@ (8001648 <HAL_I2S_MspInit+0x110>)
 80015dc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80015de:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <HAL_I2S_MspInit+0x10c>)
 80015e0:	220d      	movs	r2, #13
 80015e2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015e4:	4b17      	ldr	r3, [pc, #92]	@ (8001644 <HAL_I2S_MspInit+0x10c>)
 80015e6:	2210      	movs	r2, #16
 80015e8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ea:	4b16      	ldr	r3, [pc, #88]	@ (8001644 <HAL_I2S_MspInit+0x10c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015f0:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <HAL_I2S_MspInit+0x10c>)
 80015f2:	2280      	movs	r2, #128	@ 0x80
 80015f4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015f6:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <HAL_I2S_MspInit+0x10c>)
 80015f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015fc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015fe:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <HAL_I2S_MspInit+0x10c>)
 8001600:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001604:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001606:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <HAL_I2S_MspInit+0x10c>)
 8001608:	2220      	movs	r2, #32
 800160a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800160c:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <HAL_I2S_MspInit+0x10c>)
 800160e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001612:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001614:	480b      	ldr	r0, [pc, #44]	@ (8001644 <HAL_I2S_MspInit+0x10c>)
 8001616:	f000 fcb3 	bl	8001f80 <HAL_DMA_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_I2S_MspInit+0xec>
    {
      Error_Handler();
 8001620:	f7ff fdcc 	bl	80011bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a07      	ldr	r2, [pc, #28]	@ (8001644 <HAL_I2S_MspInit+0x10c>)
 8001628:	62da      	str	r2, [r3, #44]	@ 0x2c
 800162a:	4a06      	ldr	r2, [pc, #24]	@ (8001644 <HAL_I2S_MspInit+0x10c>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001630:	bf00      	nop
 8001632:	3778      	adds	r7, #120	@ 0x78
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40003800 	.word	0x40003800
 800163c:	40021000 	.word	0x40021000
 8001640:	48000400 	.word	0x48000400
 8001644:	20003370 	.word	0x20003370
 8001648:	40020058 	.word	0x40020058

0800164c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	@ 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800166c:	d129      	bne.n	80016c2 <HAL_TIM_Base_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800166e:	4b62      	ldr	r3, [pc, #392]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1ac>)
 8001670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001672:	4a61      	ldr	r2, [pc, #388]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1ac>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6593      	str	r3, [r2, #88]	@ 0x58
 800167a:	4b5f      	ldr	r3, [pc, #380]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1ac>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	4b5c      	ldr	r3, [pc, #368]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1ac>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	4a5b      	ldr	r2, [pc, #364]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1ac>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001692:	4b59      	ldr	r3, [pc, #356]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1ac>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800169e:	2301      	movs	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 80016ae:	230e      	movs	r3, #14
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016bc:	f000 ff16 	bl	80024ec <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016c0:	e095      	b.n	80017ee <HAL_TIM_Base_MspInit+0x1a2>
  else if(htim_base->Instance==TIM3)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a4d      	ldr	r2, [pc, #308]	@ (80017fc <HAL_TIM_Base_MspInit+0x1b0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	f040 8090 	bne.w	80017ee <HAL_TIM_Base_MspInit+0x1a2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ce:	4b4a      	ldr	r3, [pc, #296]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1ac>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d2:	4a49      	ldr	r2, [pc, #292]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1ac>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016da:	4b47      	ldr	r3, [pc, #284]	@ (80017f8 <HAL_TIM_Base_MspInit+0x1ac>)
 80016dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Channel6;
 80016e6:	4b46      	ldr	r3, [pc, #280]	@ (8001800 <HAL_TIM_Base_MspInit+0x1b4>)
 80016e8:	4a46      	ldr	r2, [pc, #280]	@ (8001804 <HAL_TIM_Base_MspInit+0x1b8>)
 80016ea:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80016ec:	4b44      	ldr	r3, [pc, #272]	@ (8001800 <HAL_TIM_Base_MspInit+0x1b4>)
 80016ee:	223d      	movs	r2, #61	@ 0x3d
 80016f0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016f2:	4b43      	ldr	r3, [pc, #268]	@ (8001800 <HAL_TIM_Base_MspInit+0x1b4>)
 80016f4:	2210      	movs	r2, #16
 80016f6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f8:	4b41      	ldr	r3, [pc, #260]	@ (8001800 <HAL_TIM_Base_MspInit+0x1b4>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80016fe:	4b40      	ldr	r3, [pc, #256]	@ (8001800 <HAL_TIM_Base_MspInit+0x1b4>)
 8001700:	2280      	movs	r2, #128	@ 0x80
 8001702:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001704:	4b3e      	ldr	r3, [pc, #248]	@ (8001800 <HAL_TIM_Base_MspInit+0x1b4>)
 8001706:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800170a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800170c:	4b3c      	ldr	r3, [pc, #240]	@ (8001800 <HAL_TIM_Base_MspInit+0x1b4>)
 800170e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001712:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_CIRCULAR;
 8001714:	4b3a      	ldr	r3, [pc, #232]	@ (8001800 <HAL_TIM_Base_MspInit+0x1b4>)
 8001716:	2220      	movs	r2, #32
 8001718:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800171a:	4b39      	ldr	r3, [pc, #228]	@ (8001800 <HAL_TIM_Base_MspInit+0x1b4>)
 800171c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001720:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8001722:	4837      	ldr	r0, [pc, #220]	@ (8001800 <HAL_TIM_Base_MspInit+0x1b4>)
 8001724:	f000 fc2c 	bl	8001f80 <HAL_DMA_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_TIM_Base_MspInit+0xe6>
      Error_Handler();
 800172e:	f7ff fd45 	bl	80011bc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a32      	ldr	r2, [pc, #200]	@ (8001800 <HAL_TIM_Base_MspInit+0x1b4>)
 8001736:	625a      	str	r2, [r3, #36]	@ 0x24
 8001738:	4a31      	ldr	r2, [pc, #196]	@ (8001800 <HAL_TIM_Base_MspInit+0x1b4>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 800173e:	4b32      	ldr	r3, [pc, #200]	@ (8001808 <HAL_TIM_Base_MspInit+0x1bc>)
 8001740:	4a32      	ldr	r2, [pc, #200]	@ (800180c <HAL_TIM_Base_MspInit+0x1c0>)
 8001742:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 8001744:	4b30      	ldr	r3, [pc, #192]	@ (8001808 <HAL_TIM_Base_MspInit+0x1bc>)
 8001746:	223f      	movs	r2, #63	@ 0x3f
 8001748:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800174a:	4b2f      	ldr	r3, [pc, #188]	@ (8001808 <HAL_TIM_Base_MspInit+0x1bc>)
 800174c:	2210      	movs	r2, #16
 800174e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001750:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <HAL_TIM_Base_MspInit+0x1bc>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001756:	4b2c      	ldr	r3, [pc, #176]	@ (8001808 <HAL_TIM_Base_MspInit+0x1bc>)
 8001758:	2280      	movs	r2, #128	@ 0x80
 800175a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800175c:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <HAL_TIM_Base_MspInit+0x1bc>)
 800175e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001762:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001764:	4b28      	ldr	r3, [pc, #160]	@ (8001808 <HAL_TIM_Base_MspInit+0x1bc>)
 8001766:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800176a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 800176c:	4b26      	ldr	r3, [pc, #152]	@ (8001808 <HAL_TIM_Base_MspInit+0x1bc>)
 800176e:	2220      	movs	r2, #32
 8001770:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001772:	4b25      	ldr	r3, [pc, #148]	@ (8001808 <HAL_TIM_Base_MspInit+0x1bc>)
 8001774:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001778:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 800177a:	4823      	ldr	r0, [pc, #140]	@ (8001808 <HAL_TIM_Base_MspInit+0x1bc>)
 800177c:	f000 fc00 	bl	8001f80 <HAL_DMA_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_TIM_Base_MspInit+0x13e>
      Error_Handler();
 8001786:	f7ff fd19 	bl	80011bc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a1e      	ldr	r2, [pc, #120]	@ (8001808 <HAL_TIM_Base_MspInit+0x1bc>)
 800178e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001790:	4a1d      	ldr	r2, [pc, #116]	@ (8001808 <HAL_TIM_Base_MspInit+0x1bc>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim3_ch4.Instance = DMA1_Channel3;
 8001796:	4b1e      	ldr	r3, [pc, #120]	@ (8001810 <HAL_TIM_Base_MspInit+0x1c4>)
 8001798:	4a1e      	ldr	r2, [pc, #120]	@ (8001814 <HAL_TIM_Base_MspInit+0x1c8>)
 800179a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 800179c:	4b1c      	ldr	r3, [pc, #112]	@ (8001810 <HAL_TIM_Base_MspInit+0x1c4>)
 800179e:	2240      	movs	r2, #64	@ 0x40
 80017a0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001810 <HAL_TIM_Base_MspInit+0x1c4>)
 80017a4:	2210      	movs	r2, #16
 80017a6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a8:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <HAL_TIM_Base_MspInit+0x1c4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80017ae:	4b18      	ldr	r3, [pc, #96]	@ (8001810 <HAL_TIM_Base_MspInit+0x1c4>)
 80017b0:	2280      	movs	r2, #128	@ 0x80
 80017b2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017b4:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <HAL_TIM_Base_MspInit+0x1c4>)
 80017b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017ba:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017bc:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <HAL_TIM_Base_MspInit+0x1c4>)
 80017be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017c2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_CIRCULAR;
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <HAL_TIM_Base_MspInit+0x1c4>)
 80017c6:	2220      	movs	r2, #32
 80017c8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017ca:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <HAL_TIM_Base_MspInit+0x1c4>)
 80017cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 80017d2:	480f      	ldr	r0, [pc, #60]	@ (8001810 <HAL_TIM_Base_MspInit+0x1c4>)
 80017d4:	f000 fbd4 	bl	8001f80 <HAL_DMA_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_TIM_Base_MspInit+0x196>
      Error_Handler();
 80017de:	f7ff fced 	bl	80011bc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <HAL_TIM_Base_MspInit+0x1c4>)
 80017e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80017e8:	4a09      	ldr	r2, [pc, #36]	@ (8001810 <HAL_TIM_Base_MspInit+0x1c4>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80017ee:	bf00      	nop
 80017f0:	3728      	adds	r7, #40	@ 0x28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40000400 	.word	0x40000400
 8001800:	20003468 	.word	0x20003468
 8001804:	4002006c 	.word	0x4002006c
 8001808:	200034c8 	.word	0x200034c8
 800180c:	4002001c 	.word	0x4002001c
 8001810:	20003528 	.word	0x20003528
 8001814:	40020030 	.word	0x40020030

08001818 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	@ 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001838:	d11d      	bne.n	8001876 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b22      	ldr	r3, [pc, #136]	@ (80018c4 <HAL_TIM_MspPostInit+0xac>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183e:	4a21      	ldr	r2, [pc, #132]	@ (80018c4 <HAL_TIM_MspPostInit+0xac>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001846:	4b1f      	ldr	r3, [pc, #124]	@ (80018c4 <HAL_TIM_MspPostInit+0xac>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001852:	2308      	movs	r3, #8
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001862:	2301      	movs	r3, #1
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001870:	f000 fe3c 	bl	80024ec <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001874:	e021      	b.n	80018ba <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a13      	ldr	r2, [pc, #76]	@ (80018c8 <HAL_TIM_MspPostInit+0xb0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d11c      	bne.n	80018ba <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001880:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <HAL_TIM_MspPostInit+0xac>)
 8001882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001884:	4a0f      	ldr	r2, [pc, #60]	@ (80018c4 <HAL_TIM_MspPostInit+0xac>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800188c:	4b0d      	ldr	r3, [pc, #52]	@ (80018c4 <HAL_TIM_MspPostInit+0xac>)
 800188e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001898:	2350      	movs	r3, #80	@ 0x50
 800189a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189c:	2312      	movs	r3, #18
 800189e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018a8:	2302      	movs	r3, #2
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b6:	f000 fe19 	bl	80024ec <HAL_GPIO_Init>
}
 80018ba:	bf00      	nop
 80018bc:	3728      	adds	r7, #40	@ 0x28
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40000400 	.word	0x40000400

080018cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <NMI_Handler+0x4>

080018d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <HardFault_Handler+0x4>

080018dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <MemManage_Handler+0x4>

080018e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <BusFault_Handler+0x4>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <UsageFault_Handler+0x4>

080018f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001924:	f000 f9fe 	bl	8001d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (TimingDelay) {
 8001928:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <SysTick_Handler+0x20>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d004      	beq.n	800193a <SysTick_Handler+0x1a>
    TimingDelay--;
 8001930:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <SysTick_Handler+0x20>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	3b01      	subs	r3, #1
 8001936:	4a02      	ldr	r2, [pc, #8]	@ (8001940 <SysTick_Handler+0x20>)
 8001938:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000358c 	.word	0x2000358c

08001944 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <DMA1_Channel2_IRQHandler+0x10>)
 800194a:	f000 fc7f 	bl	800224c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200034c8 	.word	0x200034c8

08001958 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <DMA1_Channel3_IRQHandler+0x10>)
 800195e:	f000 fc75 	bl	800224c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20003528 	.word	0x20003528

0800196c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001970:	4802      	ldr	r0, [pc, #8]	@ (800197c <DMA1_Channel5_IRQHandler+0x10>)
 8001972:	f000 fc6b 	bl	800224c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20003370 	.word	0x20003370

08001980 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <DMA1_Channel6_IRQHandler+0x10>)
 8001986:	f000 fc61 	bl	800224c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20003468 	.word	0x20003468

08001994 <HAL_TIM_PeriodElapsedCallback>:
//    __HAL_DMA_ENABLE(&hdma_spi2_tx);
//  }
//}
// called on every 64 µs rollover
// called on every timer *overflow* (64 µs)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a05      	ldr	r2, [pc, #20]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d102      	bne.n	80019ac <HAL_TIM_PeriodElapsedCallback+0x18>
    lineIndex = FIRST_VISIBLE_LINE;
 80019a6:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80019a8:	2208      	movs	r2, #8
 80019aa:	801a      	strh	r2, [r3, #0]
  }
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	40000400 	.word	0x40000400
 80019bc:	20002762 	.word	0x20002762

080019c0 <HAL_TIM_OC_DelayElapsedCallback>:

// called each time CC1 fires (the sync-end)
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3 &&
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a40 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d12f      	bne.n	8001a32 <HAL_TIM_OC_DelayElapsedCallback+0x72>
      htim->Channel  == HAL_TIM_ACTIVE_CHANNEL_1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	7f1b      	ldrb	r3, [r3, #28]
  if (htim->Instance == TIM3 &&
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d12b      	bne.n	8001a32 <HAL_TIM_OC_DelayElapsedCallback+0x72>
  {
    // stop the old I2S DMA
    __HAL_DMA_DISABLE(&hdma_spi2_tx);
 80019da:	4b1a      	ldr	r3, [pc, #104]	@ (8001a44 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b18      	ldr	r3, [pc, #96]	@ (8001a44 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0201 	bic.w	r2, r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

    // advance & wrap *within* visible lines
    if (++lineIndex >= VID_VSIZE) {
 80019ea:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	3301      	adds	r3, #1
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	4a14      	ldr	r2, [pc, #80]	@ (8001a48 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80019f6:	4619      	mov	r1, r3
 80019f8:	8011      	strh	r1, [r2, #0]
 80019fa:	f5b3 7f1c 	cmp.w	r3, #624	@ 0x270
 80019fe:	d902      	bls.n	8001a06 <HAL_TIM_OC_DelayElapsedCallback+0x46>
      lineIndex = FIRST_VISIBLE_LINE;
 8001a00:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8001a02:	2208      	movs	r2, #8
 8001a04:	801a      	strh	r2, [r3, #0]
    }

    // re-point and reload the I2S DMA
    hdma_spi2_tx.Instance->CMAR  = (uint32_t)lineptrs[lineIndex];
 8001a06:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8001a10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a14:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Instance->CNDTR = VID_HSIZE;
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a44 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_spi2_tx);
 8001a22:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0201 	orr.w	r2, r2, #1
 8001a30:	601a      	str	r2, [r3, #0]
  }
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40000400 	.word	0x40000400
 8001a44:	20003370 	.word	0x20003370
 8001a48:	20002762 	.word	0x20002762
 8001a4c:	200028e8 	.word	0x200028e8

08001a50 <TIM3_IRQHandler>:


void TIM3_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim3);
 8001a54:	4802      	ldr	r0, [pc, #8]	@ (8001a60 <TIM3_IRQHandler+0x10>)
 8001a56:	f003 fb41 	bl	80050dc <HAL_TIM_IRQHandler>

}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000341c 	.word	0x2000341c

08001a64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return 1;
 8001a68:	2301      	movs	r3, #1
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_kill>:

int _kill(int pid, int sig)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a7e:	f004 ff9d 	bl	80069bc <__errno>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2216      	movs	r2, #22
 8001a86:	601a      	str	r2, [r3, #0]
  return -1;
 8001a88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_exit>:

void _exit (int status)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ffe7 	bl	8001a74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aa6:	bf00      	nop
 8001aa8:	e7fd      	b.n	8001aa6 <_exit+0x12>

08001aaa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	e00a      	b.n	8001ad2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001abc:	f3af 8000 	nop.w
 8001ac0:	4601      	mov	r1, r0
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	60ba      	str	r2, [r7, #8]
 8001ac8:	b2ca      	uxtb	r2, r1
 8001aca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	dbf0      	blt.n	8001abc <_read+0x12>
  }

  return len;
 8001ada:	687b      	ldr	r3, [r7, #4]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	e009      	b.n	8001b0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	60ba      	str	r2, [r7, #8]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	dbf1      	blt.n	8001af6 <_write+0x12>
  }
  return len;
 8001b12:	687b      	ldr	r3, [r7, #4]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_close>:

int _close(int file)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b44:	605a      	str	r2, [r3, #4]
  return 0;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_isatty>:

int _isatty(int file)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b5c:	2301      	movs	r3, #1
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b8c:	4a14      	ldr	r2, [pc, #80]	@ (8001be0 <_sbrk+0x5c>)
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <_sbrk+0x60>)
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b98:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <_sbrk+0x64>)
 8001ba2:	4a12      	ldr	r2, [pc, #72]	@ (8001bec <_sbrk+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d207      	bcs.n	8001bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb4:	f004 ff02 	bl	80069bc <__errno>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	220c      	movs	r2, #12
 8001bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bc2:	e009      	b.n	8001bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bca:	4b07      	ldr	r3, [pc, #28]	@ (8001be8 <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a05      	ldr	r2, [pc, #20]	@ (8001be8 <_sbrk+0x64>)
 8001bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20020000 	.word	0x20020000
 8001be4:	00000400 	.word	0x00000400
 8001be8:	20003590 	.word	0x20003590
 8001bec:	20003728 	.word	0x20003728

08001bf0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bf4:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <SystemInit+0x20>)
 8001bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bfa:	4a05      	ldr	r2, [pc, #20]	@ (8001c10 <SystemInit+0x20>)
 8001bfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <vidClearScreen>:

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
const size_t LINES_PER_FIELD = sizeof(SyncTable)/sizeof(SyncTable[0]);
void vidClearScreen(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	{
		fb[line]				[0] = 0b1111111111111110;
		fb[line]  [XFERS_PERLINE-1] = 0b1111111111111110;
	}
#else
	memset(screen,0xFF,sizeof(screen));
 8001c18:	f242 7260 	movw	r2, #10080	@ 0x2760
 8001c1c:	21ff      	movs	r1, #255	@ 0xff
 8001c1e:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <vidClearScreen+0x14>)
 8001c20:	f004 fe7d 	bl	800691e <memset>
#endif

}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000000 	.word	0x20000000

08001c2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c2c:	480d      	ldr	r0, [pc, #52]	@ (8001c64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c2e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c30:	f7ff ffde 	bl	8001bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c34:	480c      	ldr	r0, [pc, #48]	@ (8001c68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c36:	490d      	ldr	r1, [pc, #52]	@ (8001c6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c38:	4a0d      	ldr	r2, [pc, #52]	@ (8001c70 <LoopForever+0xe>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c3c:	e002      	b.n	8001c44 <LoopCopyDataInit>

08001c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c42:	3304      	adds	r3, #4

08001c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c48:	d3f9      	bcc.n	8001c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c78 <LoopForever+0x16>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c50:	e001      	b.n	8001c56 <LoopFillZerobss>

08001c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c54:	3204      	adds	r2, #4

08001c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c58:	d3fb      	bcc.n	8001c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f004 feb5 	bl	80069c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c5e:	f7ff f80b 	bl	8000c78 <main>

08001c62 <LoopForever>:

LoopForever:
    b LoopForever
 8001c62:	e7fe      	b.n	8001c62 <LoopForever>
  ldr   r0, =_estack
 8001c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c68:	20002760 	.word	0x20002760
  ldr r1, =_edata
 8001c6c:	20003310 	.word	0x20003310
  ldr r2, =_sidata
 8001c70:	080081a0 	.word	0x080081a0
  ldr r2, =_sbss
 8001c74:	20003310 	.word	0x20003310
  ldr r4, =_ebss
 8001c78:	20003724 	.word	0x20003724

08001c7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c7c:	e7fe      	b.n	8001c7c <ADC1_2_IRQHandler>

08001c7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c88:	2003      	movs	r0, #3
 8001c8a:	f000 f939 	bl	8001f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c8e:	200f      	movs	r0, #15
 8001c90:	f000 f80e 	bl	8001cb0 <HAL_InitTick>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	71fb      	strb	r3, [r7, #7]
 8001c9e:	e001      	b.n	8001ca4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ca0:	f7ff fc26 	bl	80014f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ca4:	79fb      	ldrb	r3, [r7, #7]

}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001cbc:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <HAL_InitTick+0x68>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d022      	beq.n	8001d0a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001cc4:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <HAL_InitTick+0x6c>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b13      	ldr	r3, [pc, #76]	@ (8001d18 <HAL_InitTick+0x68>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001cd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 f944 	bl	8001f66 <HAL_SYSTICK_Config>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10f      	bne.n	8001d04 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b0f      	cmp	r3, #15
 8001ce8:	d809      	bhi.n	8001cfe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cea:	2200      	movs	r2, #0
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cf2:	f000 f910 	bl	8001f16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d20 <HAL_InitTick+0x70>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	e007      	b.n	8001d0e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
 8001d02:	e004      	b.n	8001d0e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
 8001d08:	e001      	b.n	8001d0e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	200032b0 	.word	0x200032b0
 8001d1c:	20002764 	.word	0x20002764
 8001d20:	200032ac 	.word	0x200032ac

08001d24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d28:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <HAL_IncTick+0x1c>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <HAL_IncTick+0x20>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4413      	add	r3, r2
 8001d32:	4a03      	ldr	r2, [pc, #12]	@ (8001d40 <HAL_IncTick+0x1c>)
 8001d34:	6013      	str	r3, [r2, #0]
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	200035d4 	.word	0x200035d4
 8001d44:	200032b0 	.word	0x200032b0

08001d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <HAL_GetTick+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	200035d4 	.word	0x200035d4

08001d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d70:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d92:	4a04      	ldr	r2, [pc, #16]	@ (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	60d3      	str	r3, [r2, #12]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dac:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	f003 0307 	and.w	r3, r3, #7
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	db0b      	blt.n	8001dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	4907      	ldr	r1, [pc, #28]	@ (8001dfc <__NVIC_EnableIRQ+0x38>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	2001      	movs	r0, #1
 8001de6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000e100 	.word	0xe000e100

08001e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	db0a      	blt.n	8001e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	490c      	ldr	r1, [pc, #48]	@ (8001e4c <__NVIC_SetPriority+0x4c>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	0112      	lsls	r2, r2, #4
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	440b      	add	r3, r1
 8001e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e28:	e00a      	b.n	8001e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4908      	ldr	r1, [pc, #32]	@ (8001e50 <__NVIC_SetPriority+0x50>)
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3b04      	subs	r3, #4
 8001e38:	0112      	lsls	r2, r2, #4
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	761a      	strb	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000e100 	.word	0xe000e100
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	@ 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f1c3 0307 	rsb	r3, r3, #7
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	bf28      	it	cs
 8001e72:	2304      	movcs	r3, #4
 8001e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d902      	bls.n	8001e84 <NVIC_EncodePriority+0x30>
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3b03      	subs	r3, #3
 8001e82:	e000      	b.n	8001e86 <NVIC_EncodePriority+0x32>
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	401a      	ands	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	43d9      	mvns	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	4313      	orrs	r3, r2
         );
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3724      	adds	r7, #36	@ 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ecc:	d301      	bcc.n	8001ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00f      	b.n	8001ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <SysTick_Config+0x40>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eda:	210f      	movs	r1, #15
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ee0:	f7ff ff8e 	bl	8001e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee4:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <SysTick_Config+0x40>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eea:	4b04      	ldr	r3, [pc, #16]	@ (8001efc <SysTick_Config+0x40>)
 8001eec:	2207      	movs	r2, #7
 8001eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	e000e010 	.word	0xe000e010

08001f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ff29 	bl	8001d60 <__NVIC_SetPriorityGrouping>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f24:	f7ff ff40 	bl	8001da8 <__NVIC_GetPriorityGrouping>
 8001f28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	6978      	ldr	r0, [r7, #20]
 8001f30:	f7ff ff90 	bl	8001e54 <NVIC_EncodePriority>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff5f 	bl	8001e00 <__NVIC_SetPriority>
}
 8001f42:	bf00      	nop
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff33 	bl	8001dc4 <__NVIC_EnableIRQ>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ffa4 	bl	8001ebc <SysTick_Config>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e08d      	b.n	80020ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b47      	ldr	r3, [pc, #284]	@ (80020b8 <HAL_DMA_Init+0x138>)
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d80f      	bhi.n	8001fbe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b45      	ldr	r3, [pc, #276]	@ (80020bc <HAL_DMA_Init+0x13c>)
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a45      	ldr	r2, [pc, #276]	@ (80020c0 <HAL_DMA_Init+0x140>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	009a      	lsls	r2, r3, #2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a42      	ldr	r2, [pc, #264]	@ (80020c4 <HAL_DMA_Init+0x144>)
 8001fba:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fbc:	e00e      	b.n	8001fdc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b40      	ldr	r3, [pc, #256]	@ (80020c8 <HAL_DMA_Init+0x148>)
 8001fc6:	4413      	add	r3, r2
 8001fc8:	4a3d      	ldr	r2, [pc, #244]	@ (80020c0 <HAL_DMA_Init+0x140>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	009a      	lsls	r2, r3, #2
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a3c      	ldr	r2, [pc, #240]	@ (80020cc <HAL_DMA_Init+0x14c>)
 8001fda:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ff6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002000:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002018:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f9fa 	bl	8002428 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800203c:	d102      	bne.n	8002044 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002058:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d010      	beq.n	8002084 <HAL_DMA_Init+0x104>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b04      	cmp	r3, #4
 8002068:	d80c      	bhi.n	8002084 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fa1a 	bl	80024a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	e008      	b.n	8002096 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40020407 	.word	0x40020407
 80020bc:	bffdfff8 	.word	0xbffdfff8
 80020c0:	cccccccd 	.word	0xcccccccd
 80020c4:	40020000 	.word	0x40020000
 80020c8:	bffdfbf8 	.word	0xbffdfbf8
 80020cc:	40020400 	.word	0x40020400

080020d0 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_DMA_Start+0x20>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e02e      	b.n	800214e <HAL_DMA_Start+0x7e>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d11d      	bne.n	8002140 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68b9      	ldr	r1, [r7, #8]
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 f93e 	bl	80023aa <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	e005      	b.n	800214c <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    status = HAL_BUSY;
 8002148:	2302      	movs	r3, #2
 800214a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800214c:	7dfb      	ldrb	r3, [r7, #23]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_DMA_Start_IT+0x20>
 8002172:	2302      	movs	r3, #2
 8002174:	e066      	b.n	8002244 <HAL_DMA_Start_IT+0xee>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b01      	cmp	r3, #1
 8002188:	d155      	bne.n	8002236 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2202      	movs	r2, #2
 800218e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f8fb 	bl	80023aa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 020e 	orr.w	r2, r2, #14
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e00f      	b.n	80021ee <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0204 	bic.w	r2, r2, #4
 80021dc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 020a 	orr.w	r2, r2, #10
 80021ec:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002206:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800220a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002210:	2b00      	cmp	r3, #0
 8002212:	d007      	beq.n	8002224 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002222:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	e005      	b.n	8002242 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800223e:	2302      	movs	r3, #2
 8002240:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002242:	7dfb      	ldrb	r3, [r7, #23]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	2204      	movs	r2, #4
 800226e:	409a      	lsls	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d026      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x7a>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	d021      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0320 	and.w	r3, r3, #32
 800228c:	2b00      	cmp	r3, #0
 800228e:	d107      	bne.n	80022a0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0204 	bic.w	r2, r2, #4
 800229e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ac:	2104      	movs	r1, #4
 80022ae:	fa01 f202 	lsl.w	r2, r1, r2
 80022b2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d071      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80022c4:	e06c      	b.n	80023a0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ca:	f003 031f 	and.w	r3, r3, #31
 80022ce:	2202      	movs	r2, #2
 80022d0:	409a      	lsls	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d02e      	beq.n	8002338 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d029      	beq.n	8002338 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10b      	bne.n	800230a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 020a 	bic.w	r2, r2, #10
 8002300:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	f003 021f 	and.w	r2, r3, #31
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	2102      	movs	r1, #2
 8002318:	fa01 f202 	lsl.w	r2, r1, r2
 800231c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232a:	2b00      	cmp	r3, #0
 800232c:	d038      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002336:	e033      	b.n	80023a0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	2208      	movs	r2, #8
 8002342:	409a      	lsls	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02a      	beq.n	80023a2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d025      	beq.n	80023a2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 020e 	bic.w	r2, r2, #14
 8002364:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	f003 021f 	and.w	r2, r3, #31
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	2101      	movs	r1, #1
 8002374:	fa01 f202 	lsl.w	r2, r1, r2
 8002378:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002394:	2b00      	cmp	r3, #0
 8002396:	d004      	beq.n	80023a2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
}
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b085      	sub	sp, #20
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023c0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d004      	beq.n	80023d4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80023d2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	2101      	movs	r1, #1
 80023e2:	fa01 f202 	lsl.w	r2, r1, r2
 80023e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b10      	cmp	r3, #16
 80023f6:	d108      	bne.n	800240a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002408:	e007      	b.n	800241a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	60da      	str	r2, [r3, #12]
}
 800241a:	bf00      	nop
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	4b16      	ldr	r3, [pc, #88]	@ (8002490 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002438:	429a      	cmp	r2, r3
 800243a:	d802      	bhi.n	8002442 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800243c:	4b15      	ldr	r3, [pc, #84]	@ (8002494 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	e001      	b.n	8002446 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002442:	4b15      	ldr	r3, [pc, #84]	@ (8002498 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002444:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	3b08      	subs	r3, #8
 8002452:	4a12      	ldr	r2, [pc, #72]	@ (800249c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	009a      	lsls	r2, r3, #2
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4413      	add	r3, r2
 8002468:	461a      	mov	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a0b      	ldr	r2, [pc, #44]	@ (80024a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002472:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	2201      	movs	r2, #1
 800247c:	409a      	lsls	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002482:	bf00      	nop
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40020407 	.word	0x40020407
 8002494:	40020800 	.word	0x40020800
 8002498:	40020820 	.word	0x40020820
 800249c:	cccccccd 	.word	0xcccccccd
 80024a0:	40020880 	.word	0x40020880

080024a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	461a      	mov	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a08      	ldr	r2, [pc, #32]	@ (80024e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80024c6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	2201      	movs	r2, #1
 80024d2:	409a      	lsls	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	1000823f 	.word	0x1000823f
 80024e8:	40020940 	.word	0x40020940

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024fa:	e15a      	b.n	80027b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2101      	movs	r1, #1
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	4013      	ands	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 814c 	beq.w	80027ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b01      	cmp	r3, #1
 800251e:	d005      	beq.n	800252c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002528:	2b02      	cmp	r3, #2
 800252a:	d130      	bne.n	800258e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002562:	2201      	movs	r2, #1
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f003 0201 	and.w	r2, r3, #1
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b03      	cmp	r3, #3
 8002598:	d017      	beq.n	80025ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d123      	bne.n	800261e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	08da      	lsrs	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3208      	adds	r2, #8
 80025de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	220f      	movs	r2, #15
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4013      	ands	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	08da      	lsrs	r2, r3, #3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3208      	adds	r2, #8
 8002618:	6939      	ldr	r1, [r7, #16]
 800261a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	2203      	movs	r2, #3
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0203 	and.w	r2, r3, #3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80a6 	beq.w	80027ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002660:	4b5b      	ldr	r3, [pc, #364]	@ (80027d0 <HAL_GPIO_Init+0x2e4>)
 8002662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002664:	4a5a      	ldr	r2, [pc, #360]	@ (80027d0 <HAL_GPIO_Init+0x2e4>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6613      	str	r3, [r2, #96]	@ 0x60
 800266c:	4b58      	ldr	r3, [pc, #352]	@ (80027d0 <HAL_GPIO_Init+0x2e4>)
 800266e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002678:	4a56      	ldr	r2, [pc, #344]	@ (80027d4 <HAL_GPIO_Init+0x2e8>)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	3302      	adds	r3, #2
 8002680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	220f      	movs	r2, #15
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80026a2:	d01f      	beq.n	80026e4 <HAL_GPIO_Init+0x1f8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a4c      	ldr	r2, [pc, #304]	@ (80027d8 <HAL_GPIO_Init+0x2ec>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d019      	beq.n	80026e0 <HAL_GPIO_Init+0x1f4>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a4b      	ldr	r2, [pc, #300]	@ (80027dc <HAL_GPIO_Init+0x2f0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d013      	beq.n	80026dc <HAL_GPIO_Init+0x1f0>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a4a      	ldr	r2, [pc, #296]	@ (80027e0 <HAL_GPIO_Init+0x2f4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d00d      	beq.n	80026d8 <HAL_GPIO_Init+0x1ec>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a49      	ldr	r2, [pc, #292]	@ (80027e4 <HAL_GPIO_Init+0x2f8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d007      	beq.n	80026d4 <HAL_GPIO_Init+0x1e8>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a48      	ldr	r2, [pc, #288]	@ (80027e8 <HAL_GPIO_Init+0x2fc>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d101      	bne.n	80026d0 <HAL_GPIO_Init+0x1e4>
 80026cc:	2305      	movs	r3, #5
 80026ce:	e00a      	b.n	80026e6 <HAL_GPIO_Init+0x1fa>
 80026d0:	2306      	movs	r3, #6
 80026d2:	e008      	b.n	80026e6 <HAL_GPIO_Init+0x1fa>
 80026d4:	2304      	movs	r3, #4
 80026d6:	e006      	b.n	80026e6 <HAL_GPIO_Init+0x1fa>
 80026d8:	2303      	movs	r3, #3
 80026da:	e004      	b.n	80026e6 <HAL_GPIO_Init+0x1fa>
 80026dc:	2302      	movs	r3, #2
 80026de:	e002      	b.n	80026e6 <HAL_GPIO_Init+0x1fa>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <HAL_GPIO_Init+0x1fa>
 80026e4:	2300      	movs	r3, #0
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	f002 0203 	and.w	r2, r2, #3
 80026ec:	0092      	lsls	r2, r2, #2
 80026ee:	4093      	lsls	r3, r2
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f6:	4937      	ldr	r1, [pc, #220]	@ (80027d4 <HAL_GPIO_Init+0x2e8>)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002704:	4b39      	ldr	r3, [pc, #228]	@ (80027ec <HAL_GPIO_Init+0x300>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	43db      	mvns	r3, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002728:	4a30      	ldr	r2, [pc, #192]	@ (80027ec <HAL_GPIO_Init+0x300>)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800272e:	4b2f      	ldr	r3, [pc, #188]	@ (80027ec <HAL_GPIO_Init+0x300>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002752:	4a26      	ldr	r2, [pc, #152]	@ (80027ec <HAL_GPIO_Init+0x300>)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002758:	4b24      	ldr	r3, [pc, #144]	@ (80027ec <HAL_GPIO_Init+0x300>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	43db      	mvns	r3, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800277c:	4a1b      	ldr	r2, [pc, #108]	@ (80027ec <HAL_GPIO_Init+0x300>)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002782:	4b1a      	ldr	r3, [pc, #104]	@ (80027ec <HAL_GPIO_Init+0x300>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	43db      	mvns	r3, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4013      	ands	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027a6:	4a11      	ldr	r2, [pc, #68]	@ (80027ec <HAL_GPIO_Init+0x300>)
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	3301      	adds	r3, #1
 80027b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f47f ae9d 	bne.w	80024fc <HAL_GPIO_Init+0x10>
  }
}
 80027c2:	bf00      	nop
 80027c4:	bf00      	nop
 80027c6:	371c      	adds	r7, #28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40010000 	.word	0x40010000
 80027d8:	48000400 	.word	0x48000400
 80027dc:	48000800 	.word	0x48000800
 80027e0:	48000c00 	.word	0x48000c00
 80027e4:	48001000 	.word	0x48001000
 80027e8:	48001400 	.word	0x48001400
 80027ec:	40010400 	.word	0x40010400

080027f0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e0d0      	b.n	80029a4 <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d106      	bne.n	800281c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fe fe8e 	bl	8001538 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002832:	f023 030f 	bic.w	r3, r3, #15
 8002836:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2202      	movs	r2, #2
 800283e:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d061      	beq.n	800290c <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002850:	2310      	movs	r3, #16
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	e001      	b.n	800285a <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002856:	2320      	movs	r3, #32
 8002858:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b20      	cmp	r3, #32
 8002860:	d802      	bhi.n	8002868 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002868:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800286c:	f001 f9e8 	bl	8003c40 <HAL_RCCEx_GetPeriphCLKFreq>
 8002870:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800287a:	d125      	bne.n	80028c8 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d010      	beq.n	80028a6 <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	fbb2 f2f3 	udiv	r2, r2, r3
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	461a      	mov	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a0:	3305      	adds	r3, #5
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	e01f      	b.n	80028e6 <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	461a      	mov	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c2:	3305      	adds	r3, #5
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	e00e      	b.n	80028e6 <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	461a      	mov	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e2:	3305      	adds	r3, #5
 80028e4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4a30      	ldr	r2, [pc, #192]	@ (80029ac <HAL_I2S_Init+0x1bc>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	08db      	lsrs	r3, r3, #3
 80028f0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	085b      	lsrs	r3, r3, #1
 8002902:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	e003      	b.n	8002914 <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800290c:	2302      	movs	r3, #2
 800290e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d902      	bls.n	8002920 <HAL_I2S_Init+0x130>
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	2bff      	cmp	r3, #255	@ 0xff
 800291e:	d907      	bls.n	8002930 <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002924:	f043 0210 	orr.w	r2, r3, #16
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e039      	b.n	80029a4 <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	ea42 0103 	orr.w	r1, r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	430a      	orrs	r2, r1
 8002942:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800294e:	f023 030f 	bic.w	r3, r3, #15
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6851      	ldr	r1, [r2, #4]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6892      	ldr	r2, [r2, #8]
 800295a:	4311      	orrs	r1, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	68d2      	ldr	r2, [r2, #12]
 8002960:	4311      	orrs	r1, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6992      	ldr	r2, [r2, #24]
 8002966:	430a      	orrs	r2, r1
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002972:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b30      	cmp	r3, #48	@ 0x30
 800297a:	d003      	beq.n	8002984 <HAL_I2S_Init+0x194>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2bb0      	cmp	r3, #176	@ 0xb0
 8002982:	d107      	bne.n	8002994 <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69da      	ldr	r2, [r3, #28]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002992:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3720      	adds	r7, #32
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	cccccccd 	.word	0xcccccccd

080029b0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	4613      	mov	r3, r2
 80029bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_I2S_Transmit_DMA+0x1a>
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e08a      	b.n	8002ae4 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d001      	beq.n	80029de <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80029da:	2302      	movs	r3, #2
 80029dc:	e082      	b.n	8002ae4 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_I2S_Transmit_DMA+0x3e>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e07a      	b.n	8002ae4 <HAL_I2S_Transmit_DMA+0x134>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2203      	movs	r2, #3
 80029fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d002      	beq.n	8002a22 <HAL_I2S_Transmit_DMA+0x72>
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2b05      	cmp	r3, #5
 8002a20:	d10a      	bne.n	8002a38 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	845a      	strh	r2, [r3, #34]	@ 0x22
 8002a36:	e005      	b.n	8002a44 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	88fa      	ldrh	r2, [r7, #6]
 8002a3c:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	88fa      	ldrh	r2, [r7, #6]
 8002a42:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a48:	4a28      	ldr	r2, [pc, #160]	@ (8002aec <HAL_I2S_Transmit_DMA+0x13c>)
 8002a4a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	4a27      	ldr	r2, [pc, #156]	@ (8002af0 <HAL_I2S_Transmit_DMA+0x140>)
 8002a52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a58:	4a26      	ldr	r2, [pc, #152]	@ (8002af4 <HAL_I2S_Transmit_DMA+0x144>)
 8002a5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002a64:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002a6c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8c1b      	ldrh	r3, [r3, #32]
 8002a72:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002a74:	f7ff fb6f 	bl	8002156 <HAL_DMA_Start_IT>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00f      	beq.n	8002a9e <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a82:	f043 0208 	orr.w	r2, r3, #8
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    __HAL_UNLOCK(hi2s);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e022      	b.n	8002ae4 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d107      	bne.n	8002ac4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0202 	orr.w	r2, r2, #2
 8002ac2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d107      	bne.n	8002ae2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69da      	ldr	r2, [r3, #28]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ae0:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	08002b77 	.word	0x08002b77
 8002af0:	08002b35 	.word	0x08002b35
 8002af4:	08002b93 	.word	0x08002b93

08002af8 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b40:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10e      	bne.n	8002b68 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0202 	bic.w	r2, r2, #2
 8002b58:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	845a      	strh	r2, [r3, #34]	@ 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7ff ffcf 	bl	8002b0c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f7ff ffb7 	bl	8002af8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0203 	bic.w	r2, r2, #3
 8002bae:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc8:	f043 0208 	orr.w	r2, r3, #8
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f7ff ffa5 	bl	8002b20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d141      	bne.n	8002c72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bee:	4b4b      	ldr	r3, [pc, #300]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bfa:	d131      	bne.n	8002c60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bfc:	4b47      	ldr	r3, [pc, #284]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c02:	4a46      	ldr	r2, [pc, #280]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c0c:	4b43      	ldr	r3, [pc, #268]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c14:	4a41      	ldr	r2, [pc, #260]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c1c:	4b40      	ldr	r3, [pc, #256]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2232      	movs	r2, #50	@ 0x32
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	4a3f      	ldr	r2, [pc, #252]	@ (8002d24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	0c9b      	lsrs	r3, r3, #18
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c32:	e002      	b.n	8002c3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c3a:	4b38      	ldr	r3, [pc, #224]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c46:	d102      	bne.n	8002c4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f2      	bne.n	8002c34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c4e:	4b33      	ldr	r3, [pc, #204]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c5a:	d158      	bne.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e057      	b.n	8002d10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c60:	4b2e      	ldr	r3, [pc, #184]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c66:	4a2d      	ldr	r2, [pc, #180]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c70:	e04d      	b.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c78:	d141      	bne.n	8002cfe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c7a:	4b28      	ldr	r3, [pc, #160]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c86:	d131      	bne.n	8002cec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c88:	4b24      	ldr	r3, [pc, #144]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c8e:	4a23      	ldr	r2, [pc, #140]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c98:	4b20      	ldr	r3, [pc, #128]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2232      	movs	r2, #50	@ 0x32
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	0c9b      	lsrs	r3, r3, #18
 8002cba:	3301      	adds	r3, #1
 8002cbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cbe:	e002      	b.n	8002cc6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cc6:	4b15      	ldr	r3, [pc, #84]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cd2:	d102      	bne.n	8002cda <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f2      	bne.n	8002cc0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cda:	4b10      	ldr	r3, [pc, #64]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ce6:	d112      	bne.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e011      	b.n	8002d10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cec:	4b0b      	ldr	r3, [pc, #44]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002cfc:	e007      	b.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cfe:	4b07      	ldr	r3, [pc, #28]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d06:	4a05      	ldr	r2, [pc, #20]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	20002764 	.word	0x20002764
 8002d24:	431bde83 	.word	0x431bde83

08002d28 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d2c:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4a04      	ldr	r2, [pc, #16]	@ (8002d44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d36:	6093      	str	r3, [r2, #8]
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40007000 	.word	0x40007000

08002d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e2fe      	b.n	8003358 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d075      	beq.n	8002e52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d66:	4b97      	ldr	r3, [pc, #604]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d70:	4b94      	ldr	r3, [pc, #592]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b0c      	cmp	r3, #12
 8002d7e:	d102      	bne.n	8002d86 <HAL_RCC_OscConfig+0x3e>
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d002      	beq.n	8002d8c <HAL_RCC_OscConfig+0x44>
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d10b      	bne.n	8002da4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8c:	4b8d      	ldr	r3, [pc, #564]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d05b      	beq.n	8002e50 <HAL_RCC_OscConfig+0x108>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d157      	bne.n	8002e50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e2d9      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dac:	d106      	bne.n	8002dbc <HAL_RCC_OscConfig+0x74>
 8002dae:	4b85      	ldr	r3, [pc, #532]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a84      	ldr	r2, [pc, #528]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e01d      	b.n	8002df8 <HAL_RCC_OscConfig+0xb0>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x98>
 8002dc6:	4b7f      	ldr	r3, [pc, #508]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a7e      	ldr	r2, [pc, #504]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002dcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	4b7c      	ldr	r3, [pc, #496]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a7b      	ldr	r2, [pc, #492]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e00b      	b.n	8002df8 <HAL_RCC_OscConfig+0xb0>
 8002de0:	4b78      	ldr	r3, [pc, #480]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a77      	ldr	r2, [pc, #476]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002de6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	4b75      	ldr	r3, [pc, #468]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a74      	ldr	r2, [pc, #464]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002df2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d013      	beq.n	8002e28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe ffa2 	bl	8001d48 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e08:	f7fe ff9e 	bl	8001d48 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	@ 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e29e      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e1a:	4b6a      	ldr	r3, [pc, #424]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0xc0>
 8002e26:	e014      	b.n	8002e52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe ff8e 	bl	8001d48 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e30:	f7fe ff8a 	bl	8001d48 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	@ 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e28a      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e42:	4b60      	ldr	r3, [pc, #384]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0xe8>
 8002e4e:	e000      	b.n	8002e52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d075      	beq.n	8002f4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e5e:	4b59      	ldr	r3, [pc, #356]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e68:	4b56      	ldr	r3, [pc, #344]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	2b0c      	cmp	r3, #12
 8002e76:	d102      	bne.n	8002e7e <HAL_RCC_OscConfig+0x136>
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d002      	beq.n	8002e84 <HAL_RCC_OscConfig+0x13c>
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d11f      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e84:	4b4f      	ldr	r3, [pc, #316]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_OscConfig+0x154>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e25d      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9c:	4b49      	ldr	r3, [pc, #292]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	061b      	lsls	r3, r3, #24
 8002eaa:	4946      	ldr	r1, [pc, #280]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002eb0:	4b45      	ldr	r3, [pc, #276]	@ (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe fefb 	bl	8001cb0 <HAL_InitTick>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d043      	beq.n	8002f48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e249      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d023      	beq.n	8002f14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ecc:	4b3d      	ldr	r3, [pc, #244]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a3c      	ldr	r2, [pc, #240]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7fe ff36 	bl	8001d48 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee0:	f7fe ff32 	bl	8001d48 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e232      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef2:	4b34      	ldr	r3, [pc, #208]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efe:	4b31      	ldr	r3, [pc, #196]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	061b      	lsls	r3, r3, #24
 8002f0c:	492d      	ldr	r1, [pc, #180]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	604b      	str	r3, [r1, #4]
 8002f12:	e01a      	b.n	8002f4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f14:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a2a      	ldr	r2, [pc, #168]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002f1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fe ff12 	bl	8001d48 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f28:	f7fe ff0e 	bl	8001d48 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e20e      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f3a:	4b22      	ldr	r3, [pc, #136]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x1e0>
 8002f46:	e000      	b.n	8002f4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d041      	beq.n	8002fda <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d01c      	beq.n	8002f98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5e:	4b19      	ldr	r3, [pc, #100]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f64:	4a17      	ldr	r2, [pc, #92]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6e:	f7fe feeb 	bl	8001d48 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f76:	f7fe fee7 	bl	8001d48 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e1e7      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f88:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0ef      	beq.n	8002f76 <HAL_RCC_OscConfig+0x22e>
 8002f96:	e020      	b.n	8002fda <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f98:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f9e:	4a09      	ldr	r2, [pc, #36]	@ (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa8:	f7fe fece 	bl	8001d48 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fae:	e00d      	b.n	8002fcc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb0:	f7fe feca 	bl	8001d48 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d906      	bls.n	8002fcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e1ca      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	200032ac 	.word	0x200032ac
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fcc:	4b8c      	ldr	r3, [pc, #560]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8002fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1ea      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 80a6 	beq.w	8003134 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fec:	4b84      	ldr	r3, [pc, #528]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_OscConfig+0x2b4>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <HAL_RCC_OscConfig+0x2b6>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00d      	beq.n	800301e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003002:	4b7f      	ldr	r3, [pc, #508]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003006:	4a7e      	ldr	r2, [pc, #504]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800300c:	6593      	str	r3, [r2, #88]	@ 0x58
 800300e:	4b7c      	ldr	r3, [pc, #496]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800301a:	2301      	movs	r3, #1
 800301c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301e:	4b79      	ldr	r3, [pc, #484]	@ (8003204 <HAL_RCC_OscConfig+0x4bc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d118      	bne.n	800305c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800302a:	4b76      	ldr	r3, [pc, #472]	@ (8003204 <HAL_RCC_OscConfig+0x4bc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a75      	ldr	r2, [pc, #468]	@ (8003204 <HAL_RCC_OscConfig+0x4bc>)
 8003030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003036:	f7fe fe87 	bl	8001d48 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303e:	f7fe fe83 	bl	8001d48 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e183      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003050:	4b6c      	ldr	r3, [pc, #432]	@ (8003204 <HAL_RCC_OscConfig+0x4bc>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d108      	bne.n	8003076 <HAL_RCC_OscConfig+0x32e>
 8003064:	4b66      	ldr	r3, [pc, #408]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306a:	4a65      	ldr	r2, [pc, #404]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003074:	e024      	b.n	80030c0 <HAL_RCC_OscConfig+0x378>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b05      	cmp	r3, #5
 800307c:	d110      	bne.n	80030a0 <HAL_RCC_OscConfig+0x358>
 800307e:	4b60      	ldr	r3, [pc, #384]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003084:	4a5e      	ldr	r2, [pc, #376]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800308e:	4b5c      	ldr	r3, [pc, #368]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003094:	4a5a      	ldr	r2, [pc, #360]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800309e:	e00f      	b.n	80030c0 <HAL_RCC_OscConfig+0x378>
 80030a0:	4b57      	ldr	r3, [pc, #348]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a6:	4a56      	ldr	r2, [pc, #344]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030b0:	4b53      	ldr	r3, [pc, #332]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b6:	4a52      	ldr	r2, [pc, #328]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 80030b8:	f023 0304 	bic.w	r3, r3, #4
 80030bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d016      	beq.n	80030f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7fe fe3e 	bl	8001d48 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f7fe fe3a 	bl	8001d48 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e138      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e6:	4b46      	ldr	r3, [pc, #280]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 80030e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0ed      	beq.n	80030d0 <HAL_RCC_OscConfig+0x388>
 80030f4:	e015      	b.n	8003122 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f6:	f7fe fe27 	bl	8001d48 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030fc:	e00a      	b.n	8003114 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fe:	f7fe fe23 	bl	8001d48 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310c:	4293      	cmp	r3, r2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e121      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003114:	4b3a      	ldr	r3, [pc, #232]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1ed      	bne.n	80030fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003122:	7ffb      	ldrb	r3, [r7, #31]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d105      	bne.n	8003134 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003128:	4b35      	ldr	r3, [pc, #212]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312c:	4a34      	ldr	r2, [pc, #208]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 800312e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003132:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d03c      	beq.n	80031ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01c      	beq.n	8003182 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003148:	4b2d      	ldr	r3, [pc, #180]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 800314a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800314e:	4a2c      	ldr	r2, [pc, #176]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7fe fdf6 	bl	8001d48 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003160:	f7fe fdf2 	bl	8001d48 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e0f2      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003172:	4b23      	ldr	r3, [pc, #140]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003174:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0ef      	beq.n	8003160 <HAL_RCC_OscConfig+0x418>
 8003180:	e01b      	b.n	80031ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003182:	4b1f      	ldr	r3, [pc, #124]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003184:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003188:	4a1d      	ldr	r2, [pc, #116]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 800318a:	f023 0301 	bic.w	r3, r3, #1
 800318e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003192:	f7fe fdd9 	bl	8001d48 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800319a:	f7fe fdd5 	bl	8001d48 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e0d5      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031ac:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 80031ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1ef      	bne.n	800319a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80c9 	beq.w	8003356 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b0c      	cmp	r3, #12
 80031ce:	f000 8083 	beq.w	80032d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d15e      	bne.n	8003298 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031da:	4b09      	ldr	r3, [pc, #36]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a08      	ldr	r2, [pc, #32]	@ (8003200 <HAL_RCC_OscConfig+0x4b8>)
 80031e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e6:	f7fe fdaf 	bl	8001d48 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ec:	e00c      	b.n	8003208 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ee:	f7fe fdab 	bl	8001d48 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d905      	bls.n	8003208 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e0ab      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
 8003200:	40021000 	.word	0x40021000
 8003204:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003208:	4b55      	ldr	r3, [pc, #340]	@ (8003360 <HAL_RCC_OscConfig+0x618>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1ec      	bne.n	80031ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003214:	4b52      	ldr	r3, [pc, #328]	@ (8003360 <HAL_RCC_OscConfig+0x618>)
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	4b52      	ldr	r3, [pc, #328]	@ (8003364 <HAL_RCC_OscConfig+0x61c>)
 800321a:	4013      	ands	r3, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6a11      	ldr	r1, [r2, #32]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003224:	3a01      	subs	r2, #1
 8003226:	0112      	lsls	r2, r2, #4
 8003228:	4311      	orrs	r1, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800322e:	0212      	lsls	r2, r2, #8
 8003230:	4311      	orrs	r1, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003236:	0852      	lsrs	r2, r2, #1
 8003238:	3a01      	subs	r2, #1
 800323a:	0552      	lsls	r2, r2, #21
 800323c:	4311      	orrs	r1, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003242:	0852      	lsrs	r2, r2, #1
 8003244:	3a01      	subs	r2, #1
 8003246:	0652      	lsls	r2, r2, #25
 8003248:	4311      	orrs	r1, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800324e:	06d2      	lsls	r2, r2, #27
 8003250:	430a      	orrs	r2, r1
 8003252:	4943      	ldr	r1, [pc, #268]	@ (8003360 <HAL_RCC_OscConfig+0x618>)
 8003254:	4313      	orrs	r3, r2
 8003256:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003258:	4b41      	ldr	r3, [pc, #260]	@ (8003360 <HAL_RCC_OscConfig+0x618>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a40      	ldr	r2, [pc, #256]	@ (8003360 <HAL_RCC_OscConfig+0x618>)
 800325e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003262:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003264:	4b3e      	ldr	r3, [pc, #248]	@ (8003360 <HAL_RCC_OscConfig+0x618>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a3d      	ldr	r2, [pc, #244]	@ (8003360 <HAL_RCC_OscConfig+0x618>)
 800326a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800326e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fe fd6a 	bl	8001d48 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003278:	f7fe fd66 	bl	8001d48 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e066      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328a:	4b35      	ldr	r3, [pc, #212]	@ (8003360 <HAL_RCC_OscConfig+0x618>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0x530>
 8003296:	e05e      	b.n	8003356 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003298:	4b31      	ldr	r3, [pc, #196]	@ (8003360 <HAL_RCC_OscConfig+0x618>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a30      	ldr	r2, [pc, #192]	@ (8003360 <HAL_RCC_OscConfig+0x618>)
 800329e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe fd50 	bl	8001d48 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ac:	f7fe fd4c 	bl	8001d48 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e04c      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032be:	4b28      	ldr	r3, [pc, #160]	@ (8003360 <HAL_RCC_OscConfig+0x618>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80032ca:	4b25      	ldr	r3, [pc, #148]	@ (8003360 <HAL_RCC_OscConfig+0x618>)
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	4924      	ldr	r1, [pc, #144]	@ (8003360 <HAL_RCC_OscConfig+0x618>)
 80032d0:	4b25      	ldr	r3, [pc, #148]	@ (8003368 <HAL_RCC_OscConfig+0x620>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	60cb      	str	r3, [r1, #12]
 80032d6:	e03e      	b.n	8003356 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e039      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80032e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003360 <HAL_RCC_OscConfig+0x618>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 0203 	and.w	r2, r3, #3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d12c      	bne.n	8003352 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	3b01      	subs	r3, #1
 8003304:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d123      	bne.n	8003352 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003314:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003316:	429a      	cmp	r2, r3
 8003318:	d11b      	bne.n	8003352 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003324:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003326:	429a      	cmp	r2, r3
 8003328:	d113      	bne.n	8003352 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	3b01      	subs	r3, #1
 8003338:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800333a:	429a      	cmp	r2, r3
 800333c:	d109      	bne.n	8003352 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003348:	085b      	lsrs	r3, r3, #1
 800334a:	3b01      	subs	r3, #1
 800334c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3720      	adds	r7, #32
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000
 8003364:	019f800c 	.word	0x019f800c
 8003368:	feeefffc 	.word	0xfeeefffc

0800336c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e11e      	b.n	80035c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003384:	4b91      	ldr	r3, [pc, #580]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d910      	bls.n	80033b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b8e      	ldr	r3, [pc, #568]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f023 020f 	bic.w	r2, r3, #15
 800339a:	498c      	ldr	r1, [pc, #560]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	4313      	orrs	r3, r2
 80033a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a2:	4b8a      	ldr	r3, [pc, #552]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e106      	b.n	80035c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d073      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d129      	bne.n	800341c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c8:	4b81      	ldr	r3, [pc, #516]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0f4      	b.n	80035c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80033d8:	f000 f99e 	bl	8003718 <RCC_GetSysClockFreqFromPLLSource>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4a7c      	ldr	r2, [pc, #496]	@ (80035d4 <HAL_RCC_ClockConfig+0x268>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d93f      	bls.n	8003466 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033e6:	4b7a      	ldr	r3, [pc, #488]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d033      	beq.n	8003466 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003402:	2b00      	cmp	r3, #0
 8003404:	d12f      	bne.n	8003466 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003406:	4b72      	ldr	r3, [pc, #456]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800340e:	4a70      	ldr	r2, [pc, #448]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 8003410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003414:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003416:	2380      	movs	r3, #128	@ 0x80
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	e024      	b.n	8003466 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d107      	bne.n	8003434 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003424:	4b6a      	ldr	r3, [pc, #424]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d109      	bne.n	8003444 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0c6      	b.n	80035c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003434:	4b66      	ldr	r3, [pc, #408]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0be      	b.n	80035c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003444:	f000 f8ce 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8003448:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4a61      	ldr	r2, [pc, #388]	@ (80035d4 <HAL_RCC_ClockConfig+0x268>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d909      	bls.n	8003466 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003452:	4b5f      	ldr	r3, [pc, #380]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800345a:	4a5d      	ldr	r2, [pc, #372]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 800345c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003460:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003462:	2380      	movs	r3, #128	@ 0x80
 8003464:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003466:	4b5a      	ldr	r3, [pc, #360]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f023 0203 	bic.w	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4957      	ldr	r1, [pc, #348]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 8003474:	4313      	orrs	r3, r2
 8003476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003478:	f7fe fc66 	bl	8001d48 <HAL_GetTick>
 800347c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	e00a      	b.n	8003496 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003480:	f7fe fc62 	bl	8001d48 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e095      	b.n	80035c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	4b4e      	ldr	r3, [pc, #312]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 020c 	and.w	r2, r3, #12
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d1eb      	bne.n	8003480 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d023      	beq.n	80034fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c0:	4b43      	ldr	r3, [pc, #268]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	4a42      	ldr	r2, [pc, #264]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 80034c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80034ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80034d8:	4b3d      	ldr	r3, [pc, #244]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80034e0:	4a3b      	ldr	r2, [pc, #236]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 80034e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80034e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e8:	4b39      	ldr	r3, [pc, #228]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4936      	ldr	r1, [pc, #216]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	608b      	str	r3, [r1, #8]
 80034fa:	e008      	b.n	800350e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b80      	cmp	r3, #128	@ 0x80
 8003500:	d105      	bne.n	800350e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003502:	4b33      	ldr	r3, [pc, #204]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	4a32      	ldr	r2, [pc, #200]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 8003508:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800350c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800350e:	4b2f      	ldr	r3, [pc, #188]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d21d      	bcs.n	8003558 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351c:	4b2b      	ldr	r3, [pc, #172]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 020f 	bic.w	r2, r3, #15
 8003524:	4929      	ldr	r1, [pc, #164]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	4313      	orrs	r3, r2
 800352a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800352c:	f7fe fc0c 	bl	8001d48 <HAL_GetTick>
 8003530:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	e00a      	b.n	800354a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003534:	f7fe fc08 	bl	8001d48 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e03b      	b.n	80035c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b20      	ldr	r3, [pc, #128]	@ (80035cc <HAL_RCC_ClockConfig+0x260>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d1ed      	bne.n	8003534 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003564:	4b1a      	ldr	r3, [pc, #104]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4917      	ldr	r1, [pc, #92]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003582:	4b13      	ldr	r3, [pc, #76]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	490f      	ldr	r1, [pc, #60]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003596:	f000 f825 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 800359a:	4602      	mov	r2, r0
 800359c:	4b0c      	ldr	r3, [pc, #48]	@ (80035d0 <HAL_RCC_ClockConfig+0x264>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	490c      	ldr	r1, [pc, #48]	@ (80035d8 <HAL_RCC_ClockConfig+0x26c>)
 80035a8:	5ccb      	ldrb	r3, [r1, r3]
 80035aa:	f003 031f 	and.w	r3, r3, #31
 80035ae:	fa22 f303 	lsr.w	r3, r2, r3
 80035b2:	4a0a      	ldr	r2, [pc, #40]	@ (80035dc <HAL_RCC_ClockConfig+0x270>)
 80035b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035b6:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <HAL_RCC_ClockConfig+0x274>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe fb78 	bl	8001cb0 <HAL_InitTick>
 80035c0:	4603      	mov	r3, r0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40022000 	.word	0x40022000
 80035d0:	40021000 	.word	0x40021000
 80035d4:	04c4b400 	.word	0x04c4b400
 80035d8:	08007b7c 	.word	0x08007b7c
 80035dc:	20002764 	.word	0x20002764
 80035e0:	200032ac 	.word	0x200032ac

080035e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035ea:	4b2c      	ldr	r3, [pc, #176]	@ (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d102      	bne.n	80035fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035f6:	4b2a      	ldr	r3, [pc, #168]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	e047      	b.n	800368c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80035fc:	4b27      	ldr	r3, [pc, #156]	@ (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 030c 	and.w	r3, r3, #12
 8003604:	2b08      	cmp	r3, #8
 8003606:	d102      	bne.n	800360e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003608:	4b26      	ldr	r3, [pc, #152]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	e03e      	b.n	800368c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800360e:	4b23      	ldr	r3, [pc, #140]	@ (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b0c      	cmp	r3, #12
 8003618:	d136      	bne.n	8003688 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800361a:	4b20      	ldr	r3, [pc, #128]	@ (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003624:	4b1d      	ldr	r3, [pc, #116]	@ (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	3301      	adds	r3, #1
 8003630:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b03      	cmp	r3, #3
 8003636:	d10c      	bne.n	8003652 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003638:	4a1a      	ldr	r2, [pc, #104]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003640:	4a16      	ldr	r2, [pc, #88]	@ (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003642:	68d2      	ldr	r2, [r2, #12]
 8003644:	0a12      	lsrs	r2, r2, #8
 8003646:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800364a:	fb02 f303 	mul.w	r3, r2, r3
 800364e:	617b      	str	r3, [r7, #20]
      break;
 8003650:	e00c      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003652:	4a13      	ldr	r2, [pc, #76]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	fbb2 f3f3 	udiv	r3, r2, r3
 800365a:	4a10      	ldr	r2, [pc, #64]	@ (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 800365c:	68d2      	ldr	r2, [r2, #12]
 800365e:	0a12      	lsrs	r2, r2, #8
 8003660:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003664:	fb02 f303 	mul.w	r3, r2, r3
 8003668:	617b      	str	r3, [r7, #20]
      break;
 800366a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800366c:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	0e5b      	lsrs	r3, r3, #25
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	3301      	adds	r3, #1
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	fbb2 f3f3 	udiv	r3, r2, r3
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	e001      	b.n	800368c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800368c:	693b      	ldr	r3, [r7, #16]
}
 800368e:	4618      	mov	r0, r3
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000
 80036a0:	00f42400 	.word	0x00f42400
 80036a4:	007a1200 	.word	0x007a1200

080036a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ac:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20002764 	.word	0x20002764

080036c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036c4:	f7ff fff0 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b06      	ldr	r3, [pc, #24]	@ (80036e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	0a1b      	lsrs	r3, r3, #8
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4904      	ldr	r1, [pc, #16]	@ (80036e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40021000 	.word	0x40021000
 80036e8:	08007b8c 	.word	0x08007b8c

080036ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036f0:	f7ff ffda 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036f4:	4602      	mov	r2, r0
 80036f6:	4b06      	ldr	r3, [pc, #24]	@ (8003710 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	0adb      	lsrs	r3, r3, #11
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	4904      	ldr	r1, [pc, #16]	@ (8003714 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003702:	5ccb      	ldrb	r3, [r1, r3]
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800370c:	4618      	mov	r0, r3
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40021000 	.word	0x40021000
 8003714:	08007b8c 	.word	0x08007b8c

08003718 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800371e:	4b1e      	ldr	r3, [pc, #120]	@ (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003728:	4b1b      	ldr	r3, [pc, #108]	@ (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	3301      	adds	r3, #1
 8003734:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b03      	cmp	r3, #3
 800373a:	d10c      	bne.n	8003756 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800373c:	4a17      	ldr	r2, [pc, #92]	@ (800379c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	4a14      	ldr	r2, [pc, #80]	@ (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003746:	68d2      	ldr	r2, [r2, #12]
 8003748:	0a12      	lsrs	r2, r2, #8
 800374a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	617b      	str	r3, [r7, #20]
    break;
 8003754:	e00c      	b.n	8003770 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003756:	4a12      	ldr	r2, [pc, #72]	@ (80037a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	fbb2 f3f3 	udiv	r3, r2, r3
 800375e:	4a0e      	ldr	r2, [pc, #56]	@ (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003760:	68d2      	ldr	r2, [r2, #12]
 8003762:	0a12      	lsrs	r2, r2, #8
 8003764:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003768:	fb02 f303 	mul.w	r3, r2, r3
 800376c:	617b      	str	r3, [r7, #20]
    break;
 800376e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003770:	4b09      	ldr	r3, [pc, #36]	@ (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	0e5b      	lsrs	r3, r3, #25
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	3301      	adds	r3, #1
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800378a:	687b      	ldr	r3, [r7, #4]
}
 800378c:	4618      	mov	r0, r3
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	40021000 	.word	0x40021000
 800379c:	007a1200 	.word	0x007a1200
 80037a0:	00f42400 	.word	0x00f42400

080037a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037ac:	2300      	movs	r3, #0
 80037ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037b0:	2300      	movs	r3, #0
 80037b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8098 	beq.w	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c6:	4b43      	ldr	r3, [pc, #268]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10d      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	4b40      	ldr	r3, [pc, #256]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d6:	4a3f      	ldr	r2, [pc, #252]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80037de:	4b3d      	ldr	r3, [pc, #244]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ea:	2301      	movs	r3, #1
 80037ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ee:	4b3a      	ldr	r3, [pc, #232]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a39      	ldr	r2, [pc, #228]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037fa:	f7fe faa5 	bl	8001d48 <HAL_GetTick>
 80037fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003800:	e009      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003802:	f7fe faa1 	bl	8001d48 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d902      	bls.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	74fb      	strb	r3, [r7, #19]
        break;
 8003814:	e005      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003816:	4b30      	ldr	r3, [pc, #192]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0ef      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003822:	7cfb      	ldrb	r3, [r7, #19]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d159      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003828:	4b2a      	ldr	r3, [pc, #168]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003832:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01e      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	429a      	cmp	r2, r3
 8003842:	d019      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003844:	4b23      	ldr	r3, [pc, #140]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800384e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003850:	4b20      	ldr	r3, [pc, #128]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003856:	4a1f      	ldr	r2, [pc, #124]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800385c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003860:	4b1c      	ldr	r3, [pc, #112]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003866:	4a1b      	ldr	r2, [pc, #108]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800386c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003870:	4a18      	ldr	r2, [pc, #96]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d016      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7fe fa61 	bl	8001d48 <HAL_GetTick>
 8003886:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003888:	e00b      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f7fe fa5d 	bl	8001d48 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003898:	4293      	cmp	r3, r2
 800389a:	d902      	bls.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	74fb      	strb	r3, [r7, #19]
            break;
 80038a0:	e006      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a2:	4b0c      	ldr	r3, [pc, #48]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0ec      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80038b0:	7cfb      	ldrb	r3, [r7, #19]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b6:	4b07      	ldr	r3, [pc, #28]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c4:	4903      	ldr	r1, [pc, #12]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038cc:	e008      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038ce:	7cfb      	ldrb	r3, [r7, #19]
 80038d0:	74bb      	strb	r3, [r7, #18]
 80038d2:	e005      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038dc:	7cfb      	ldrb	r3, [r7, #19]
 80038de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038e0:	7c7b      	ldrb	r3, [r7, #17]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d105      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e6:	4ba7      	ldr	r3, [pc, #668]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ea:	4aa6      	ldr	r2, [pc, #664]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038fe:	4ba1      	ldr	r3, [pc, #644]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003904:	f023 0203 	bic.w	r2, r3, #3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	499d      	ldr	r1, [pc, #628]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003920:	4b98      	ldr	r3, [pc, #608]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003926:	f023 020c 	bic.w	r2, r3, #12
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	4995      	ldr	r1, [pc, #596]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003942:	4b90      	ldr	r3, [pc, #576]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003948:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	498c      	ldr	r1, [pc, #560]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003964:	4b87      	ldr	r3, [pc, #540]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	4984      	ldr	r1, [pc, #528]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003986:	4b7f      	ldr	r3, [pc, #508]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	497b      	ldr	r1, [pc, #492]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039a8:	4b76      	ldr	r3, [pc, #472]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	4973      	ldr	r1, [pc, #460]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ca:	4b6e      	ldr	r3, [pc, #440]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	496a      	ldr	r1, [pc, #424]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039ec:	4b65      	ldr	r3, [pc, #404]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4962      	ldr	r1, [pc, #392]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	4959      	ldr	r1, [pc, #356]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a30:	4b54      	ldr	r3, [pc, #336]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a36:	f023 0203 	bic.w	r2, r3, #3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3e:	4951      	ldr	r1, [pc, #324]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a52:	4b4c      	ldr	r3, [pc, #304]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	4948      	ldr	r1, [pc, #288]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d015      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a74:	4b43      	ldr	r3, [pc, #268]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a82:	4940      	ldr	r1, [pc, #256]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a94:	4b3b      	ldr	r3, [pc, #236]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4a3a      	ldr	r2, [pc, #232]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a9e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d015      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003aac:	4b35      	ldr	r3, [pc, #212]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aba:	4932      	ldr	r1, [pc, #200]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003acc:	4b2d      	ldr	r3, [pc, #180]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4a2c      	ldr	r2, [pc, #176]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ad6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d015      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ae4:	4b27      	ldr	r3, [pc, #156]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af2:	4924      	ldr	r1, [pc, #144]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b02:	d105      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b04:	4b1f      	ldr	r3, [pc, #124]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a1e      	ldr	r2, [pc, #120]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b0e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d015      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b1c:	4b19      	ldr	r3, [pc, #100]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2a:	4916      	ldr	r1, [pc, #88]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b3a:	d105      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b3c:	4b11      	ldr	r3, [pc, #68]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4a10      	ldr	r2, [pc, #64]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b46:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d019      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b54:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b62:	4908      	ldr	r1, [pc, #32]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b72:	d109      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b74:	4b03      	ldr	r3, [pc, #12]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a02      	ldr	r2, [pc, #8]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b7e:	60d3      	str	r3, [r2, #12]
 8003b80:	e002      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d015      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b94:	4b29      	ldr	r3, [pc, #164]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba2:	4926      	ldr	r1, [pc, #152]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bb2:	d105      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bb4:	4b21      	ldr	r3, [pc, #132]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4a20      	ldr	r2, [pc, #128]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bbe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d015      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bda:	4918      	ldr	r1, [pc, #96]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bea:	d105      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bec:	4b13      	ldr	r3, [pc, #76]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4a12      	ldr	r2, [pc, #72]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d015      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c04:	4b0d      	ldr	r3, [pc, #52]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c12:	490a      	ldr	r1, [pc, #40]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c22:	d105      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c24:	4b05      	ldr	r3, [pc, #20]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4a04      	ldr	r2, [pc, #16]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c2e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c30:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000

08003c40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c52:	d136      	bne.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003c54:	4bb1      	ldr	r3, [pc, #708]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5e:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003c60:	4bae      	ldr	r3, [pc, #696]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d108      	bne.n	8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c74:	d104      	bne.n	8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8003c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	f000 bd12 	b.w	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003c80:	4ba6      	ldr	r3, [pc, #664]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d108      	bne.n	8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c94:	d104      	bne.n	8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 8003c96:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	f000 bd02 	b.w	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003ca0:	4b9e      	ldr	r3, [pc, #632]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cac:	f040 84fa 	bne.w	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cb6:	f040 84f5 	bne.w	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = HSE_VALUE / 32U;
 8003cba:	4b99      	ldr	r3, [pc, #612]	@ (8003f20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	f000 bcf1 	b.w	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 8003cc2:	4b96      	ldr	r3, [pc, #600]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003cce:	4b93      	ldr	r3, [pc, #588]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cda:	d102      	bne.n	8003ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 8003cdc:	4b91      	ldr	r3, [pc, #580]	@ (8003f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003cde:	61bb      	str	r3, [r7, #24]
 8003ce0:	e017      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	e014      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 8003ce8:	4b8c      	ldr	r3, [pc, #560]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d10c      	bne.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003cf4:	4b89      	ldr	r3, [pc, #548]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d00:	d102      	bne.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 8003d02:	4b89      	ldr	r3, [pc, #548]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	e004      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61bb      	str	r3, [r7, #24]
 8003d0c:	e001      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003d12:	4b82      	ldr	r3, [pc, #520]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d2c:	f000 8466 	beq.w	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d36:	f200 848e 	bhi.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d40:	f000 8263 	beq.w	800420a <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d4a:	f200 8484 	bhi.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d54:	f000 8417 	beq.w	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d5e:	f200 847a 	bhi.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d68:	f000 83d0 	beq.w	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d72:	f200 8470 	bhi.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d7c:	f000 8398 	beq.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d86:	f200 8466 	bhi.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d90:	f000 8360 	beq.w	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d9a:	f200 845c 	bhi.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003da4:	f000 8318 	beq.w	80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dae:	f200 8452 	bhi.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003db8:	f000 82ca 	beq.w	8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dc2:	f200 8448 	bhi.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dcc:	f000 827c 	beq.w	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dd6:	f200 843e 	bhi.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003de0:	f000 8236 	beq.w	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dea:	f200 8434 	bhi.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003df4:	f000 81e4 	beq.w	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dfe:	f200 842a 	bhi.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b80      	cmp	r3, #128	@ 0x80
 8003e06:	f000 81b1 	beq.w	800416c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b80      	cmp	r3, #128	@ 0x80
 8003e0e:	f200 8422 	bhi.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	d84b      	bhi.n	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 841b 	beq.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	2b1f      	cmp	r3, #31
 8003e26:	f200 8416 	bhi.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>)
 8003e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e30:	08003ebb 	.word	0x08003ebb
 8003e34:	08003f2d 	.word	0x08003f2d
 8003e38:	08004657 	.word	0x08004657
 8003e3c:	08003f8f 	.word	0x08003f8f
 8003e40:	08004657 	.word	0x08004657
 8003e44:	08004657 	.word	0x08004657
 8003e48:	08004657 	.word	0x08004657
 8003e4c:	08003ff1 	.word	0x08003ff1
 8003e50:	08004657 	.word	0x08004657
 8003e54:	08004657 	.word	0x08004657
 8003e58:	08004657 	.word	0x08004657
 8003e5c:	08004657 	.word	0x08004657
 8003e60:	08004657 	.word	0x08004657
 8003e64:	08004657 	.word	0x08004657
 8003e68:	08004657 	.word	0x08004657
 8003e6c:	08004053 	.word	0x08004053
 8003e70:	08004657 	.word	0x08004657
 8003e74:	08004657 	.word	0x08004657
 8003e78:	08004657 	.word	0x08004657
 8003e7c:	08004657 	.word	0x08004657
 8003e80:	08004657 	.word	0x08004657
 8003e84:	08004657 	.word	0x08004657
 8003e88:	08004657 	.word	0x08004657
 8003e8c:	08004657 	.word	0x08004657
 8003e90:	08004657 	.word	0x08004657
 8003e94:	08004657 	.word	0x08004657
 8003e98:	08004657 	.word	0x08004657
 8003e9c:	08004657 	.word	0x08004657
 8003ea0:	08004657 	.word	0x08004657
 8003ea4:	08004657 	.word	0x08004657
 8003ea8:	08004657 	.word	0x08004657
 8003eac:	080040bb 	.word	0x080040bb
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b40      	cmp	r3, #64	@ 0x40
 8003eb4:	f000 8135 	beq.w	8004122 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
      break;

#endif /* QUADSPI */

    default:
      break;
 8003eb8:	e3cd      	b.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003eba:	4b18      	ldr	r3, [pc, #96]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d103      	bne.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        frequency = HAL_RCC_GetPCLK2Freq();
 8003ecc:	f7ff fc0e 	bl	80036ec <HAL_RCC_GetPCLK2Freq>
 8003ed0:	61f8      	str	r0, [r7, #28]
      break;
 8003ed2:	e3c2      	b.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d103      	bne.n	8003ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
        frequency = HAL_RCC_GetSysClockFreq();
 8003eda:	f7ff fb83 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8003ede:	61f8      	str	r0, [r7, #28]
      break;
 8003ee0:	e3bb      	b.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 8003ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eee:	d105      	bne.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d102      	bne.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HSI_VALUE;
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8003f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003ef8:	61fb      	str	r3, [r7, #28]
      break;
 8003efa:	e3ae      	b.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003efc:	4b07      	ldr	r3, [pc, #28]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	f040 83a7 	bne.w	800465a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	f040 83a3 	bne.w	800465a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
        frequency = LSE_VALUE;
 8003f14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f18:	61fb      	str	r3, [r7, #28]
      break;
 8003f1a:	e39e      	b.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	0003d090 	.word	0x0003d090
 8003f24:	00f42400 	.word	0x00f42400
 8003f28:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003f2c:	4ba2      	ldr	r3, [pc, #648]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003f3e:	f7ff fbbf 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 8003f42:	61f8      	str	r0, [r7, #28]
      break;
 8003f44:	e38b      	b.n	800465e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d103      	bne.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
        frequency = HAL_RCC_GetSysClockFreq();
 8003f4c:	f7ff fb4a 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8003f50:	61f8      	str	r0, [r7, #28]
      break;
 8003f52:	e384      	b.n	800465e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003f54:	4b98      	ldr	r3, [pc, #608]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f60:	d105      	bne.n	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d102      	bne.n	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
        frequency = HSI_VALUE;
 8003f68:	4b94      	ldr	r3, [pc, #592]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003f6a:	61fb      	str	r3, [r7, #28]
      break;
 8003f6c:	e377      	b.n	800465e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003f6e:	4b92      	ldr	r3, [pc, #584]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	f040 8370 	bne.w	800465e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b0c      	cmp	r3, #12
 8003f82:	f040 836c 	bne.w	800465e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
        frequency = LSE_VALUE;
 8003f86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f8a:	61fb      	str	r3, [r7, #28]
      break;
 8003f8c:	e367      	b.n	800465e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003f8e:	4b8a      	ldr	r3, [pc, #552]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f98:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d103      	bne.n	8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003fa0:	f7ff fb8e 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 8003fa4:	61f8      	str	r0, [r7, #28]
      break;
 8003fa6:	e35c      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	2b10      	cmp	r3, #16
 8003fac:	d103      	bne.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
        frequency = HAL_RCC_GetSysClockFreq();
 8003fae:	f7ff fb19 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8003fb2:	61f8      	str	r0, [r7, #28]
      break;
 8003fb4:	e355      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003fb6:	4b80      	ldr	r3, [pc, #512]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fc2:	d105      	bne.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b20      	cmp	r3, #32
 8003fc8:	d102      	bne.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
        frequency = HSI_VALUE;
 8003fca:	4b7c      	ldr	r3, [pc, #496]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003fcc:	61fb      	str	r3, [r7, #28]
      break;
 8003fce:	e348      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003fd0:	4b79      	ldr	r3, [pc, #484]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	f040 8341 	bne.w	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b30      	cmp	r3, #48	@ 0x30
 8003fe4:	f040 833d 	bne.w	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        frequency = LSE_VALUE;
 8003fe8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fec:	61fb      	str	r3, [r7, #28]
      break;
 8003fee:	e338      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003ff0:	4b71      	ldr	r3, [pc, #452]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ffa:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d103      	bne.n	800400a <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004002:	f7ff fb5d 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 8004006:	61f8      	str	r0, [r7, #28]
      break;
 8004008:	e32d      	b.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b40      	cmp	r3, #64	@ 0x40
 800400e:	d103      	bne.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        frequency = HAL_RCC_GetSysClockFreq();
 8004010:	f7ff fae8 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8004014:	61f8      	str	r0, [r7, #28]
      break;
 8004016:	e326      	b.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004018:	4b67      	ldr	r3, [pc, #412]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004020:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004024:	d105      	bne.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b80      	cmp	r3, #128	@ 0x80
 800402a:	d102      	bne.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
        frequency = HSI_VALUE;
 800402c:	4b63      	ldr	r3, [pc, #396]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800402e:	61fb      	str	r3, [r7, #28]
      break;
 8004030:	e319      	b.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004032:	4b61      	ldr	r3, [pc, #388]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b02      	cmp	r3, #2
 800403e:	f040 8312 	bne.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	2bc0      	cmp	r3, #192	@ 0xc0
 8004046:	f040 830e 	bne.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
        frequency = LSE_VALUE;
 800404a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800404e:	61fb      	str	r3, [r7, #28]
      break;
 8004050:	e309      	b.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004052:	4b59      	ldr	r3, [pc, #356]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004058:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800405c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d103      	bne.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004064:	f7ff fb2c 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 8004068:	61f8      	str	r0, [r7, #28]
      break;
 800406a:	e2fe      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004072:	d103      	bne.n	800407c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
        frequency = HAL_RCC_GetSysClockFreq();
 8004074:	f7ff fab6 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8004078:	61f8      	str	r0, [r7, #28]
      break;
 800407a:	e2f6      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800407c:	4b4e      	ldr	r3, [pc, #312]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004088:	d106      	bne.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004090:	d102      	bne.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
        frequency = HSI_VALUE;
 8004092:	4b4a      	ldr	r3, [pc, #296]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004094:	61fb      	str	r3, [r7, #28]
      break;
 8004096:	e2e8      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004098:	4b47      	ldr	r3, [pc, #284]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	f040 82e1 	bne.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040ae:	f040 82dc 	bne.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
        frequency = LSE_VALUE;
 80040b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040b6:	61fb      	str	r3, [r7, #28]
      break;
 80040b8:	e2d7      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80040ba:	4b3f      	ldr	r3, [pc, #252]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80040c4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d103      	bne.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
        frequency = HAL_RCC_GetPCLK1Freq();
 80040cc:	f7ff faf8 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 80040d0:	61f8      	str	r0, [r7, #28]
      break;
 80040d2:	e2cc      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040da:	d103      	bne.n	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
        frequency = HAL_RCC_GetSysClockFreq();
 80040dc:	f7ff fa82 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 80040e0:	61f8      	str	r0, [r7, #28]
      break;
 80040e2:	e2c4      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80040e4:	4b34      	ldr	r3, [pc, #208]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040f0:	d106      	bne.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040f8:	d102      	bne.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
        frequency = HSI_VALUE;
 80040fa:	4b30      	ldr	r3, [pc, #192]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80040fc:	61fb      	str	r3, [r7, #28]
      break;
 80040fe:	e2b6      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004100:	4b2d      	ldr	r3, [pc, #180]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b02      	cmp	r3, #2
 800410c:	f040 82af 	bne.w	800466e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004116:	f040 82aa 	bne.w	800466e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
        frequency = LSE_VALUE;
 800411a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800411e:	61fb      	str	r3, [r7, #28]
      break;
 8004120:	e2a5      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004122:	4b25      	ldr	r3, [pc, #148]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004128:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800412c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d103      	bne.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004134:	f7ff fac4 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 8004138:	61f8      	str	r0, [r7, #28]
      break;
 800413a:	e29a      	b.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004142:	d103      	bne.n	800414c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        frequency = HAL_RCC_GetSysClockFreq();
 8004144:	f7ff fa4e 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8004148:	61f8      	str	r0, [r7, #28]
      break;
 800414a:	e292      	b.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800414c:	4b1a      	ldr	r3, [pc, #104]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004158:	f040 828b 	bne.w	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004162:	f040 8286 	bne.w	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
        frequency = HSI_VALUE;
 8004166:	4b15      	ldr	r3, [pc, #84]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004168:	61fb      	str	r3, [r7, #28]
      break;
 800416a:	e282      	b.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800416c:	4b12      	ldr	r3, [pc, #72]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004172:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004176:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d103      	bne.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
        frequency = HAL_RCC_GetPCLK1Freq();
 800417e:	f7ff fa9f 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 8004182:	61f8      	str	r0, [r7, #28]
      break;
 8004184:	e277      	b.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800418c:	d103      	bne.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
        frequency = HAL_RCC_GetSysClockFreq();
 800418e:	f7ff fa29 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8004192:	61f8      	str	r0, [r7, #28]
      break;
 8004194:	e26f      	b.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004196:	4b08      	ldr	r3, [pc, #32]	@ (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800419e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041a2:	f040 8268 	bne.w	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041ac:	f040 8263 	bne.w	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
        frequency = HSI_VALUE;
 80041b0:	4b02      	ldr	r3, [pc, #8]	@ (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80041b2:	61fb      	str	r3, [r7, #28]
      break;
 80041b4:	e25f      	b.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80041b6:	bf00      	nop
 80041b8:	40021000 	.word	0x40021000
 80041bc:	00f42400 	.word	0x00f42400
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80041c0:	4ba0      	ldr	r3, [pc, #640]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041ca:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
        frequency = HAL_RCC_GetPCLK1Freq();
 80041d2:	f7ff fa75 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 80041d6:	61f8      	str	r0, [r7, #28]
      break;
 80041d8:	e24f      	b.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041e0:	d103      	bne.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
        frequency = HAL_RCC_GetSysClockFreq();
 80041e2:	f7ff f9ff 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 80041e6:	61f8      	str	r0, [r7, #28]
      break;
 80041e8:	e247      	b.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80041ea:	4b96      	ldr	r3, [pc, #600]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041f6:	f040 8240 	bne.w	800467a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004200:	f040 823b 	bne.w	800467a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        frequency = HSI_VALUE;
 8004204:	4b90      	ldr	r3, [pc, #576]	@ (8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004206:	61fb      	str	r3, [r7, #28]
      break;
 8004208:	e237      	b.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800420a:	4b8e      	ldr	r3, [pc, #568]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800420c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d103      	bne.n	8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
        frequency = HAL_RCC_GetPCLK1Freq();
 800421c:	f7ff fa50 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 8004220:	61f8      	str	r0, [r7, #28]
      break;
 8004222:	e22c      	b.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if(srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d103      	bne.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        frequency = HAL_RCC_GetSysClockFreq();
 800422a:	f7ff f9db 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 800422e:	61f8      	str	r0, [r7, #28]
      break;
 8004230:	e225      	b.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004232:	4b84      	ldr	r3, [pc, #528]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800423a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800423e:	f040 821e 	bne.w	800467e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	2b02      	cmp	r3, #2
 8004246:	f040 821a 	bne.w	800467e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
        frequency = HSI_VALUE;
 800424a:	4b7f      	ldr	r3, [pc, #508]	@ (8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800424c:	61fb      	str	r3, [r7, #28]
      break;
 800424e:	e216      	b.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004250:	4b7c      	ldr	r3, [pc, #496]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004256:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800425a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004262:	f7ff fa2d 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 8004266:	61f8      	str	r0, [r7, #28]
      break;
 8004268:	e20b      	b.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800426a:	4b76      	ldr	r3, [pc, #472]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800426c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b02      	cmp	r3, #2
 8004276:	d107      	bne.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800427e:	d103      	bne.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
        frequency = LSI_VALUE;
 8004280:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	e01e      	b.n	80042c6 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004288:	4b6e      	ldr	r3, [pc, #440]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004294:	d106      	bne.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800429c:	d102      	bne.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        frequency = HSI_VALUE;
 800429e:	4b6a      	ldr	r3, [pc, #424]	@ (8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	e010      	b.n	80042c6 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80042a4:	4b67      	ldr	r3, [pc, #412]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	f040 81e7 	bne.w	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80042ba:	f040 81e2 	bne.w	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
        frequency = LSE_VALUE;
 80042be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042c2:	61fb      	str	r3, [r7, #28]
      break;
 80042c4:	e1dd      	b.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80042c6:	e1dc      	b.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80042c8:	4b5e      	ldr	r3, [pc, #376]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ce:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80042d2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d103      	bne.n	80042e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
        frequency = HAL_RCC_GetSysClockFreq();
 80042da:	f7ff f983 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 80042de:	61f8      	str	r0, [r7, #28]
      break;
 80042e0:	e1d1      	b.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042e8:	d11b      	bne.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80042ea:	4b56      	ldr	r3, [pc, #344]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 81c7 	beq.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80042f8:	4b52      	ldr	r3, [pc, #328]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	0a1b      	lsrs	r3, r3, #8
 80042fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004302:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	fb03 f202 	mul.w	r2, r3, r2
 800430c:	4b4d      	ldr	r3, [pc, #308]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	0d5b      	lsrs	r3, r3, #21
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	3301      	adds	r3, #1
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	fbb2 f3f3 	udiv	r3, r2, r3
 800431e:	61fb      	str	r3, [r7, #28]
      break;
 8004320:	e1b1      	b.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004328:	d102      	bne.n	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        frequency = EXTERNAL_CLOCK_VALUE;
 800432a:	4b48      	ldr	r3, [pc, #288]	@ (800444c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800432c:	61fb      	str	r3, [r7, #28]
      break;
 800432e:	e1aa      	b.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 8004330:	4b44      	ldr	r3, [pc, #272]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800433c:	f040 81a3 	bne.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004346:	f040 819e 	bne.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
        frequency = HSI_VALUE;
 800434a:	4b3f      	ldr	r3, [pc, #252]	@ (8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800434c:	61fb      	str	r3, [r7, #28]
      break;
 800434e:	e19a      	b.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004350:	4b3c      	ldr	r3, [pc, #240]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004356:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800435a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d103      	bne.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
        frequency = HAL_RCC_GetSysClockFreq();
 8004362:	f7ff f93f 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8004366:	61f8      	str	r0, [r7, #28]
      break;
 8004368:	e18f      	b.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004370:	d11b      	bne.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8004372:	4b34      	ldr	r3, [pc, #208]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 8185 	beq.w	800468a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004380:	4b30      	ldr	r3, [pc, #192]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	0a1b      	lsrs	r3, r3, #8
 8004386:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800438a:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	fb03 f202 	mul.w	r2, r3, r2
 8004394:	4b2b      	ldr	r3, [pc, #172]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	0d5b      	lsrs	r3, r3, #21
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	3301      	adds	r3, #1
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	61fb      	str	r3, [r7, #28]
      break;
 80043a8:	e16f      	b.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043b0:	d102      	bne.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        frequency = EXTERNAL_CLOCK_VALUE;
 80043b2:	4b26      	ldr	r3, [pc, #152]	@ (800444c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80043b4:	61fb      	str	r3, [r7, #28]
      break;
 80043b6:	e168      	b.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 80043b8:	4b22      	ldr	r3, [pc, #136]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c4:	f040 8161 	bne.w	800468a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80043ce:	f040 815c 	bne.w	800468a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
        frequency = HSI_VALUE;
 80043d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80043d4:	61fb      	str	r3, [r7, #28]
      break;
 80043d6:	e158      	b.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80043d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043de:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80043e2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043ea:	d103      	bne.n	80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
        frequency = HAL_RCC_GetPCLK1Freq();
 80043ec:	f7ff f968 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 80043f0:	61f8      	str	r0, [r7, #28]
      break;
 80043f2:	e14c      	b.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d102      	bne.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
        frequency = HSE_VALUE;
 80043fa:	4b15      	ldr	r3, [pc, #84]	@ (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80043fc:	61fb      	str	r3, [r7, #28]
      break;
 80043fe:	e146      	b.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004406:	f040 8142 	bne.w	800468e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800440a:	4b0e      	ldr	r3, [pc, #56]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 813b 	beq.w	800468e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004418:	4b0a      	ldr	r3, [pc, #40]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	0a1b      	lsrs	r3, r3, #8
 800441e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004422:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	fb03 f202 	mul.w	r2, r3, r2
 800442c:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	0d5b      	lsrs	r3, r3, #21
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	3301      	adds	r3, #1
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	fbb2 f3f3 	udiv	r3, r2, r3
 800443e:	61fb      	str	r3, [r7, #28]
      break;
 8004440:	e125      	b.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8004442:	bf00      	nop
 8004444:	40021000 	.word	0x40021000
 8004448:	00f42400 	.word	0x00f42400
 800444c:	00bb8000 	.word	0x00bb8000
 8004450:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004454:	4b96      	ldr	r3, [pc, #600]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800445e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004466:	d114      	bne.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004468:	4b91      	ldr	r3, [pc, #580]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	0a1b      	lsrs	r3, r3, #8
 800446e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004472:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	fb03 f202 	mul.w	r2, r3, r2
 800447c:	4b8c      	ldr	r3, [pc, #560]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	0d5b      	lsrs	r3, r3, #21
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	3301      	adds	r3, #1
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	fbb2 f3f3 	udiv	r3, r2, r3
 800448e:	61fb      	str	r3, [r7, #28]
      break;
 8004490:	e0ff      	b.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 8004492:	4b87      	ldr	r3, [pc, #540]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004494:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b02      	cmp	r3, #2
 800449e:	f040 80f8 	bne.w	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f040 80f4 	bne.w	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
        frequency = HSI48_VALUE;
 80044aa:	4b82      	ldr	r3, [pc, #520]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80044ac:	61fb      	str	r3, [r7, #28]
      break;
 80044ae:	e0f0      	b.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80044b0:	4b7f      	ldr	r3, [pc, #508]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80044ba:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044c2:	d114      	bne.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80044c4:	4b7a      	ldr	r3, [pc, #488]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	0a1b      	lsrs	r3, r3, #8
 80044ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044ce:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	fb03 f202 	mul.w	r2, r3, r2
 80044d8:	4b75      	ldr	r3, [pc, #468]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	0d5b      	lsrs	r3, r3, #21
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	3301      	adds	r3, #1
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ea:	61fb      	str	r3, [r7, #28]
      break;
 80044ec:	e0d3      	b.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 80044ee:	4b70      	ldr	r3, [pc, #448]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80044f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	f040 80cc 	bne.w	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f040 80c8 	bne.w	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
        frequency = HSI48_VALUE;
 8004506:	4b6b      	ldr	r3, [pc, #428]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8004508:	61fb      	str	r3, [r7, #28]
      break;
 800450a:	e0c4      	b.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 800450c:	4b68      	ldr	r3, [pc, #416]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004516:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800451e:	d129      	bne.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8004520:	4b63      	ldr	r3, [pc, #396]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80b6 	beq.w	800469a <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800452e:	4b60      	ldr	r3, [pc, #384]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	0a1b      	lsrs	r3, r3, #8
 8004534:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004538:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800453a:	4b5d      	ldr	r3, [pc, #372]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	0edb      	lsrs	r3, r3, #27
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800454c:	4b58      	ldr	r3, [pc, #352]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
              pllp = 17U;
 8004558:	2311      	movs	r3, #17
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	e001      	b.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
              pllp = 7U;
 800455e:	2307      	movs	r3, #7
 8004560:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	fb03 f202 	mul.w	r2, r3, r2
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004570:	61fb      	str	r3, [r7, #28]
      break;
 8004572:	e092      	b.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800457a:	f040 808e 	bne.w	800469a <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
        frequency = HAL_RCC_GetSysClockFreq();
 800457e:	f7ff f831 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8004582:	61f8      	str	r0, [r7, #28]
      break;
 8004584:	e089      	b.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 8004586:	4b4a      	ldr	r3, [pc, #296]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800458c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004590:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004598:	d128      	bne.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 800459a:	4b45      	ldr	r3, [pc, #276]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d07b      	beq.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80045a6:	4b42      	ldr	r3, [pc, #264]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	0a1b      	lsrs	r3, r3, #8
 80045ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045b0:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80045b2:	4b3f      	ldr	r3, [pc, #252]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	0edb      	lsrs	r3, r3, #27
 80045b8:	f003 031f 	and.w	r3, r3, #31
 80045bc:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10a      	bne.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80045c4:	4b3a      	ldr	r3, [pc, #232]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
              pllp = 17U;
 80045d0:	2311      	movs	r3, #17
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	e001      	b.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
              pllp = 7U;
 80045d6:	2307      	movs	r3, #7
 80045d8:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	fb03 f202 	mul.w	r2, r3, r2
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	61fb      	str	r3, [r7, #28]
      break;
 80045ea:	e058      	b.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045f2:	d154      	bne.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
        frequency = HAL_RCC_GetSysClockFreq();
 80045f4:	f7fe fff6 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 80045f8:	61f8      	str	r0, [r7, #28]
      break;
 80045fa:	e050      	b.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 80045fc:	4b2c      	ldr	r3, [pc, #176]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80045fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004602:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004606:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800460e:	d114      	bne.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004610:	4b27      	ldr	r3, [pc, #156]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	0a1b      	lsrs	r3, r3, #8
 8004616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800461a:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	fb03 f202 	mul.w	r2, r3, r2
 8004624:	4b22      	ldr	r3, [pc, #136]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	0d5b      	lsrs	r3, r3, #21
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	3301      	adds	r3, #1
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	fbb2 f3f3 	udiv	r3, r2, r3
 8004636:	61fb      	str	r3, [r7, #28]
      break;
 8004638:	e033      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004640:	d102      	bne.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xa08>
        frequency = HSI_VALUE;
 8004642:	4b1d      	ldr	r3, [pc, #116]	@ (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8004644:	61fb      	str	r3, [r7, #28]
      break;
 8004646:	e02c      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d129      	bne.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
        frequency = HAL_RCC_GetSysClockFreq();
 800464e:	f7fe ffc9 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8004652:	61f8      	str	r0, [r7, #28]
      break;
 8004654:	e025      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      break;
 8004656:	bf00      	nop
 8004658:	e024      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800465a:	bf00      	nop
 800465c:	e022      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800465e:	bf00      	nop
 8004660:	e020      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004662:	bf00      	nop
 8004664:	e01e      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004666:	bf00      	nop
 8004668:	e01c      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800466a:	bf00      	nop
 800466c:	e01a      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800466e:	bf00      	nop
 8004670:	e018      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004672:	bf00      	nop
 8004674:	e016      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004676:	bf00      	nop
 8004678:	e014      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800467a:	bf00      	nop
 800467c:	e012      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800467e:	bf00      	nop
 8004680:	e010      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004682:	bf00      	nop
 8004684:	e00e      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004686:	bf00      	nop
 8004688:	e00c      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800468a:	bf00      	nop
 800468c:	e00a      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800468e:	bf00      	nop
 8004690:	e008      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004692:	bf00      	nop
 8004694:	e006      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004696:	bf00      	nop
 8004698:	e004      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800469a:	bf00      	nop
 800469c:	e002      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800469e:	bf00      	nop
 80046a0:	e000      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80046a2:	bf00      	nop
    }
  }

  return(frequency);
 80046a4:	69fb      	ldr	r3, [r7, #28]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40021000 	.word	0x40021000
 80046b4:	02dc6c00 	.word	0x02dc6c00
 80046b8:	00f42400 	.word	0x00f42400

080046bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e049      	b.n	8004762 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d106      	bne.n	80046e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fc ffb2 	bl	800164c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3304      	adds	r3, #4
 80046f8:	4619      	mov	r1, r3
 80046fa:	4610      	mov	r0, r2
 80046fc:	f001 f942 	bl	8005984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b01      	cmp	r3, #1
 800477e:	d001      	beq.n	8004784 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e04c      	b.n	800481e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a26      	ldr	r2, [pc, #152]	@ (800482c <HAL_TIM_Base_Start+0xc0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d022      	beq.n	80047dc <HAL_TIM_Base_Start+0x70>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800479e:	d01d      	beq.n	80047dc <HAL_TIM_Base_Start+0x70>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a22      	ldr	r2, [pc, #136]	@ (8004830 <HAL_TIM_Base_Start+0xc4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d018      	beq.n	80047dc <HAL_TIM_Base_Start+0x70>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a21      	ldr	r2, [pc, #132]	@ (8004834 <HAL_TIM_Base_Start+0xc8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d013      	beq.n	80047dc <HAL_TIM_Base_Start+0x70>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004838 <HAL_TIM_Base_Start+0xcc>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00e      	beq.n	80047dc <HAL_TIM_Base_Start+0x70>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1e      	ldr	r2, [pc, #120]	@ (800483c <HAL_TIM_Base_Start+0xd0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d009      	beq.n	80047dc <HAL_TIM_Base_Start+0x70>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004840 <HAL_TIM_Base_Start+0xd4>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d004      	beq.n	80047dc <HAL_TIM_Base_Start+0x70>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004844 <HAL_TIM_Base_Start+0xd8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d115      	bne.n	8004808 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	4b19      	ldr	r3, [pc, #100]	@ (8004848 <HAL_TIM_Base_Start+0xdc>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b06      	cmp	r3, #6
 80047ec:	d015      	beq.n	800481a <HAL_TIM_Base_Start+0xae>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047f4:	d011      	beq.n	800481a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0201 	orr.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004806:	e008      	b.n	800481a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0201 	orr.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	e000      	b.n	800481c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40000400 	.word	0x40000400
 8004834:	40000800 	.word	0x40000800
 8004838:	40000c00 	.word	0x40000c00
 800483c:	40013400 	.word	0x40013400
 8004840:	40014000 	.word	0x40014000
 8004844:	40015000 	.word	0x40015000
 8004848:	00010007 	.word	0x00010007

0800484c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e049      	b.n	80048f2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f841 	bl	80048fa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3304      	adds	r3, #4
 8004888:	4619      	mov	r1, r3
 800488a:	4610      	mov	r0, r2
 800488c:	f001 f87a 	bl	8005984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
	...

08004910 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d109      	bne.n	8004934 <HAL_TIM_OC_Start+0x24>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	bf14      	ite	ne
 800492c:	2301      	movne	r3, #1
 800492e:	2300      	moveq	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e03c      	b.n	80049ae <HAL_TIM_OC_Start+0x9e>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b04      	cmp	r3, #4
 8004938:	d109      	bne.n	800494e <HAL_TIM_OC_Start+0x3e>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	bf14      	ite	ne
 8004946:	2301      	movne	r3, #1
 8004948:	2300      	moveq	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	e02f      	b.n	80049ae <HAL_TIM_OC_Start+0x9e>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d109      	bne.n	8004968 <HAL_TIM_OC_Start+0x58>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	bf14      	ite	ne
 8004960:	2301      	movne	r3, #1
 8004962:	2300      	moveq	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	e022      	b.n	80049ae <HAL_TIM_OC_Start+0x9e>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b0c      	cmp	r3, #12
 800496c:	d109      	bne.n	8004982 <HAL_TIM_OC_Start+0x72>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b01      	cmp	r3, #1
 8004978:	bf14      	ite	ne
 800497a:	2301      	movne	r3, #1
 800497c:	2300      	moveq	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	e015      	b.n	80049ae <HAL_TIM_OC_Start+0x9e>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b10      	cmp	r3, #16
 8004986:	d109      	bne.n	800499c <HAL_TIM_OC_Start+0x8c>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	bf14      	ite	ne
 8004994:	2301      	movne	r3, #1
 8004996:	2300      	moveq	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	e008      	b.n	80049ae <HAL_TIM_OC_Start+0x9e>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	bf14      	ite	ne
 80049a8:	2301      	movne	r3, #1
 80049aa:	2300      	moveq	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e0a6      	b.n	8004b04 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d104      	bne.n	80049c6 <HAL_TIM_OC_Start+0xb6>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049c4:	e023      	b.n	8004a0e <HAL_TIM_OC_Start+0xfe>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d104      	bne.n	80049d6 <HAL_TIM_OC_Start+0xc6>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049d4:	e01b      	b.n	8004a0e <HAL_TIM_OC_Start+0xfe>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d104      	bne.n	80049e6 <HAL_TIM_OC_Start+0xd6>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049e4:	e013      	b.n	8004a0e <HAL_TIM_OC_Start+0xfe>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b0c      	cmp	r3, #12
 80049ea:	d104      	bne.n	80049f6 <HAL_TIM_OC_Start+0xe6>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049f4:	e00b      	b.n	8004a0e <HAL_TIM_OC_Start+0xfe>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b10      	cmp	r3, #16
 80049fa:	d104      	bne.n	8004a06 <HAL_TIM_OC_Start+0xf6>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a04:	e003      	b.n	8004a0e <HAL_TIM_OC_Start+0xfe>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2201      	movs	r2, #1
 8004a14:	6839      	ldr	r1, [r7, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f001 fd0e 	bl	8006438 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a3a      	ldr	r2, [pc, #232]	@ (8004b0c <HAL_TIM_OC_Start+0x1fc>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d018      	beq.n	8004a58 <HAL_TIM_OC_Start+0x148>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a39      	ldr	r2, [pc, #228]	@ (8004b10 <HAL_TIM_OC_Start+0x200>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d013      	beq.n	8004a58 <HAL_TIM_OC_Start+0x148>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a37      	ldr	r2, [pc, #220]	@ (8004b14 <HAL_TIM_OC_Start+0x204>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00e      	beq.n	8004a58 <HAL_TIM_OC_Start+0x148>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a36      	ldr	r2, [pc, #216]	@ (8004b18 <HAL_TIM_OC_Start+0x208>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d009      	beq.n	8004a58 <HAL_TIM_OC_Start+0x148>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a34      	ldr	r2, [pc, #208]	@ (8004b1c <HAL_TIM_OC_Start+0x20c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d004      	beq.n	8004a58 <HAL_TIM_OC_Start+0x148>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a33      	ldr	r2, [pc, #204]	@ (8004b20 <HAL_TIM_OC_Start+0x210>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d101      	bne.n	8004a5c <HAL_TIM_OC_Start+0x14c>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e000      	b.n	8004a5e <HAL_TIM_OC_Start+0x14e>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d007      	beq.n	8004a72 <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a25      	ldr	r2, [pc, #148]	@ (8004b0c <HAL_TIM_OC_Start+0x1fc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d022      	beq.n	8004ac2 <HAL_TIM_OC_Start+0x1b2>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a84:	d01d      	beq.n	8004ac2 <HAL_TIM_OC_Start+0x1b2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a26      	ldr	r2, [pc, #152]	@ (8004b24 <HAL_TIM_OC_Start+0x214>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d018      	beq.n	8004ac2 <HAL_TIM_OC_Start+0x1b2>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a24      	ldr	r2, [pc, #144]	@ (8004b28 <HAL_TIM_OC_Start+0x218>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d013      	beq.n	8004ac2 <HAL_TIM_OC_Start+0x1b2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a23      	ldr	r2, [pc, #140]	@ (8004b2c <HAL_TIM_OC_Start+0x21c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00e      	beq.n	8004ac2 <HAL_TIM_OC_Start+0x1b2>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a19      	ldr	r2, [pc, #100]	@ (8004b10 <HAL_TIM_OC_Start+0x200>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d009      	beq.n	8004ac2 <HAL_TIM_OC_Start+0x1b2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a18      	ldr	r2, [pc, #96]	@ (8004b14 <HAL_TIM_OC_Start+0x204>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d004      	beq.n	8004ac2 <HAL_TIM_OC_Start+0x1b2>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a18      	ldr	r2, [pc, #96]	@ (8004b20 <HAL_TIM_OC_Start+0x210>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d115      	bne.n	8004aee <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	4b19      	ldr	r3, [pc, #100]	@ (8004b30 <HAL_TIM_OC_Start+0x220>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b06      	cmp	r3, #6
 8004ad2:	d015      	beq.n	8004b00 <HAL_TIM_OC_Start+0x1f0>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ada:	d011      	beq.n	8004b00 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aec:	e008      	b.n	8004b00 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0201 	orr.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e000      	b.n	8004b02 <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40013400 	.word	0x40013400
 8004b14:	40014000 	.word	0x40014000
 8004b18:	40014400 	.word	0x40014400
 8004b1c:	40014800 	.word	0x40014800
 8004b20:	40015000 	.word	0x40015000
 8004b24:	40000400 	.word	0x40000400
 8004b28:	40000800 	.word	0x40000800
 8004b2c:	40000c00 	.word	0x40000c00
 8004b30:	00010007 	.word	0x00010007

08004b34 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d109      	bne.n	8004b5c <HAL_TIM_OC_Start_IT+0x28>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	bf14      	ite	ne
 8004b54:	2301      	movne	r3, #1
 8004b56:	2300      	moveq	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	e03c      	b.n	8004bd6 <HAL_TIM_OC_Start_IT+0xa2>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d109      	bne.n	8004b76 <HAL_TIM_OC_Start_IT+0x42>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	bf14      	ite	ne
 8004b6e:	2301      	movne	r3, #1
 8004b70:	2300      	moveq	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	e02f      	b.n	8004bd6 <HAL_TIM_OC_Start_IT+0xa2>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d109      	bne.n	8004b90 <HAL_TIM_OC_Start_IT+0x5c>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	e022      	b.n	8004bd6 <HAL_TIM_OC_Start_IT+0xa2>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b0c      	cmp	r3, #12
 8004b94:	d109      	bne.n	8004baa <HAL_TIM_OC_Start_IT+0x76>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	bf14      	ite	ne
 8004ba2:	2301      	movne	r3, #1
 8004ba4:	2300      	moveq	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	e015      	b.n	8004bd6 <HAL_TIM_OC_Start_IT+0xa2>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d109      	bne.n	8004bc4 <HAL_TIM_OC_Start_IT+0x90>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	bf14      	ite	ne
 8004bbc:	2301      	movne	r3, #1
 8004bbe:	2300      	moveq	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	e008      	b.n	8004bd6 <HAL_TIM_OC_Start_IT+0xa2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	bf14      	ite	ne
 8004bd0:	2301      	movne	r3, #1
 8004bd2:	2300      	moveq	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e0f1      	b.n	8004dc2 <HAL_TIM_OC_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d104      	bne.n	8004bee <HAL_TIM_OC_Start_IT+0xba>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bec:	e023      	b.n	8004c36 <HAL_TIM_OC_Start_IT+0x102>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d104      	bne.n	8004bfe <HAL_TIM_OC_Start_IT+0xca>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bfc:	e01b      	b.n	8004c36 <HAL_TIM_OC_Start_IT+0x102>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d104      	bne.n	8004c0e <HAL_TIM_OC_Start_IT+0xda>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c0c:	e013      	b.n	8004c36 <HAL_TIM_OC_Start_IT+0x102>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b0c      	cmp	r3, #12
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_OC_Start_IT+0xea>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c1c:	e00b      	b.n	8004c36 <HAL_TIM_OC_Start_IT+0x102>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b10      	cmp	r3, #16
 8004c22:	d104      	bne.n	8004c2e <HAL_TIM_OC_Start_IT+0xfa>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c2c:	e003      	b.n	8004c36 <HAL_TIM_OC_Start_IT+0x102>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b0c      	cmp	r3, #12
 8004c3a:	d841      	bhi.n	8004cc0 <HAL_TIM_OC_Start_IT+0x18c>
 8004c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c44 <HAL_TIM_OC_Start_IT+0x110>)
 8004c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c42:	bf00      	nop
 8004c44:	08004c79 	.word	0x08004c79
 8004c48:	08004cc1 	.word	0x08004cc1
 8004c4c:	08004cc1 	.word	0x08004cc1
 8004c50:	08004cc1 	.word	0x08004cc1
 8004c54:	08004c8b 	.word	0x08004c8b
 8004c58:	08004cc1 	.word	0x08004cc1
 8004c5c:	08004cc1 	.word	0x08004cc1
 8004c60:	08004cc1 	.word	0x08004cc1
 8004c64:	08004c9d 	.word	0x08004c9d
 8004c68:	08004cc1 	.word	0x08004cc1
 8004c6c:	08004cc1 	.word	0x08004cc1
 8004c70:	08004cc1 	.word	0x08004cc1
 8004c74:	08004caf 	.word	0x08004caf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0202 	orr.w	r2, r2, #2
 8004c86:	60da      	str	r2, [r3, #12]
      break;
 8004c88:	e01d      	b.n	8004cc6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0204 	orr.w	r2, r2, #4
 8004c98:	60da      	str	r2, [r3, #12]
      break;
 8004c9a:	e014      	b.n	8004cc6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0208 	orr.w	r2, r2, #8
 8004caa:	60da      	str	r2, [r3, #12]
      break;
 8004cac:	e00b      	b.n	8004cc6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0210 	orr.w	r2, r2, #16
 8004cbc:	60da      	str	r2, [r3, #12]
      break;
 8004cbe:	e002      	b.n	8004cc6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc4:	bf00      	nop
  }

  if (status == HAL_OK)
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d179      	bne.n	8004dc0 <HAL_TIM_OC_Start_IT+0x28c>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	6839      	ldr	r1, [r7, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f001 fbaf 	bl	8006438 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a3b      	ldr	r2, [pc, #236]	@ (8004dcc <HAL_TIM_OC_Start_IT+0x298>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d018      	beq.n	8004d16 <HAL_TIM_OC_Start_IT+0x1e2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a39      	ldr	r2, [pc, #228]	@ (8004dd0 <HAL_TIM_OC_Start_IT+0x29c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d013      	beq.n	8004d16 <HAL_TIM_OC_Start_IT+0x1e2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a38      	ldr	r2, [pc, #224]	@ (8004dd4 <HAL_TIM_OC_Start_IT+0x2a0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00e      	beq.n	8004d16 <HAL_TIM_OC_Start_IT+0x1e2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a36      	ldr	r2, [pc, #216]	@ (8004dd8 <HAL_TIM_OC_Start_IT+0x2a4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d009      	beq.n	8004d16 <HAL_TIM_OC_Start_IT+0x1e2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a35      	ldr	r2, [pc, #212]	@ (8004ddc <HAL_TIM_OC_Start_IT+0x2a8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d004      	beq.n	8004d16 <HAL_TIM_OC_Start_IT+0x1e2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a33      	ldr	r2, [pc, #204]	@ (8004de0 <HAL_TIM_OC_Start_IT+0x2ac>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d101      	bne.n	8004d1a <HAL_TIM_OC_Start_IT+0x1e6>
 8004d16:	2301      	movs	r3, #1
 8004d18:	e000      	b.n	8004d1c <HAL_TIM_OC_Start_IT+0x1e8>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <HAL_TIM_OC_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d2e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a25      	ldr	r2, [pc, #148]	@ (8004dcc <HAL_TIM_OC_Start_IT+0x298>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d022      	beq.n	8004d80 <HAL_TIM_OC_Start_IT+0x24c>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d42:	d01d      	beq.n	8004d80 <HAL_TIM_OC_Start_IT+0x24c>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a26      	ldr	r2, [pc, #152]	@ (8004de4 <HAL_TIM_OC_Start_IT+0x2b0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d018      	beq.n	8004d80 <HAL_TIM_OC_Start_IT+0x24c>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a25      	ldr	r2, [pc, #148]	@ (8004de8 <HAL_TIM_OC_Start_IT+0x2b4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d013      	beq.n	8004d80 <HAL_TIM_OC_Start_IT+0x24c>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a23      	ldr	r2, [pc, #140]	@ (8004dec <HAL_TIM_OC_Start_IT+0x2b8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00e      	beq.n	8004d80 <HAL_TIM_OC_Start_IT+0x24c>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1a      	ldr	r2, [pc, #104]	@ (8004dd0 <HAL_TIM_OC_Start_IT+0x29c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d009      	beq.n	8004d80 <HAL_TIM_OC_Start_IT+0x24c>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a18      	ldr	r2, [pc, #96]	@ (8004dd4 <HAL_TIM_OC_Start_IT+0x2a0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d004      	beq.n	8004d80 <HAL_TIM_OC_Start_IT+0x24c>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a19      	ldr	r2, [pc, #100]	@ (8004de0 <HAL_TIM_OC_Start_IT+0x2ac>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d115      	bne.n	8004dac <HAL_TIM_OC_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	4b1a      	ldr	r3, [pc, #104]	@ (8004df0 <HAL_TIM_OC_Start_IT+0x2bc>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b06      	cmp	r3, #6
 8004d90:	d015      	beq.n	8004dbe <HAL_TIM_OC_Start_IT+0x28a>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d98:	d011      	beq.n	8004dbe <HAL_TIM_OC_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0201 	orr.w	r2, r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004daa:	e008      	b.n	8004dbe <HAL_TIM_OC_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	e000      	b.n	8004dc0 <HAL_TIM_OC_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbe:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40012c00 	.word	0x40012c00
 8004dd0:	40013400 	.word	0x40013400
 8004dd4:	40014000 	.word	0x40014000
 8004dd8:	40014400 	.word	0x40014400
 8004ddc:	40014800 	.word	0x40014800
 8004de0:	40015000 	.word	0x40015000
 8004de4:	40000400 	.word	0x40000400
 8004de8:	40000800 	.word	0x40000800
 8004dec:	40000c00 	.word	0x40000c00
 8004df0:	00010007 	.word	0x00010007

08004df4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e049      	b.n	8004e9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f841 	bl	8004ea2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4619      	mov	r1, r3
 8004e32:	4610      	mov	r0, r2
 8004e34:	f000 fda6 	bl	8005984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
	...

08004eb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <HAL_TIM_PWM_Start+0x24>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	e03c      	b.n	8004f56 <HAL_TIM_PWM_Start+0x9e>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d109      	bne.n	8004ef6 <HAL_TIM_PWM_Start+0x3e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	bf14      	ite	ne
 8004eee:	2301      	movne	r3, #1
 8004ef0:	2300      	moveq	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	e02f      	b.n	8004f56 <HAL_TIM_PWM_Start+0x9e>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d109      	bne.n	8004f10 <HAL_TIM_PWM_Start+0x58>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	bf14      	ite	ne
 8004f08:	2301      	movne	r3, #1
 8004f0a:	2300      	moveq	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	e022      	b.n	8004f56 <HAL_TIM_PWM_Start+0x9e>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2b0c      	cmp	r3, #12
 8004f14:	d109      	bne.n	8004f2a <HAL_TIM_PWM_Start+0x72>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	bf14      	ite	ne
 8004f22:	2301      	movne	r3, #1
 8004f24:	2300      	moveq	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	e015      	b.n	8004f56 <HAL_TIM_PWM_Start+0x9e>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b10      	cmp	r3, #16
 8004f2e:	d109      	bne.n	8004f44 <HAL_TIM_PWM_Start+0x8c>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	bf14      	ite	ne
 8004f3c:	2301      	movne	r3, #1
 8004f3e:	2300      	moveq	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	e008      	b.n	8004f56 <HAL_TIM_PWM_Start+0x9e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	bf14      	ite	ne
 8004f50:	2301      	movne	r3, #1
 8004f52:	2300      	moveq	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e0a6      	b.n	80050ac <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d104      	bne.n	8004f6e <HAL_TIM_PWM_Start+0xb6>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f6c:	e023      	b.n	8004fb6 <HAL_TIM_PWM_Start+0xfe>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d104      	bne.n	8004f7e <HAL_TIM_PWM_Start+0xc6>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f7c:	e01b      	b.n	8004fb6 <HAL_TIM_PWM_Start+0xfe>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d104      	bne.n	8004f8e <HAL_TIM_PWM_Start+0xd6>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f8c:	e013      	b.n	8004fb6 <HAL_TIM_PWM_Start+0xfe>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b0c      	cmp	r3, #12
 8004f92:	d104      	bne.n	8004f9e <HAL_TIM_PWM_Start+0xe6>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f9c:	e00b      	b.n	8004fb6 <HAL_TIM_PWM_Start+0xfe>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b10      	cmp	r3, #16
 8004fa2:	d104      	bne.n	8004fae <HAL_TIM_PWM_Start+0xf6>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fac:	e003      	b.n	8004fb6 <HAL_TIM_PWM_Start+0xfe>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	6839      	ldr	r1, [r7, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f001 fa3a 	bl	8006438 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a3a      	ldr	r2, [pc, #232]	@ (80050b4 <HAL_TIM_PWM_Start+0x1fc>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d018      	beq.n	8005000 <HAL_TIM_PWM_Start+0x148>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a39      	ldr	r2, [pc, #228]	@ (80050b8 <HAL_TIM_PWM_Start+0x200>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d013      	beq.n	8005000 <HAL_TIM_PWM_Start+0x148>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a37      	ldr	r2, [pc, #220]	@ (80050bc <HAL_TIM_PWM_Start+0x204>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00e      	beq.n	8005000 <HAL_TIM_PWM_Start+0x148>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a36      	ldr	r2, [pc, #216]	@ (80050c0 <HAL_TIM_PWM_Start+0x208>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d009      	beq.n	8005000 <HAL_TIM_PWM_Start+0x148>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a34      	ldr	r2, [pc, #208]	@ (80050c4 <HAL_TIM_PWM_Start+0x20c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_TIM_PWM_Start+0x148>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a33      	ldr	r2, [pc, #204]	@ (80050c8 <HAL_TIM_PWM_Start+0x210>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d101      	bne.n	8005004 <HAL_TIM_PWM_Start+0x14c>
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <HAL_TIM_PWM_Start+0x14e>
 8005004:	2300      	movs	r3, #0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d007      	beq.n	800501a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005018:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a25      	ldr	r2, [pc, #148]	@ (80050b4 <HAL_TIM_PWM_Start+0x1fc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d022      	beq.n	800506a <HAL_TIM_PWM_Start+0x1b2>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800502c:	d01d      	beq.n	800506a <HAL_TIM_PWM_Start+0x1b2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a26      	ldr	r2, [pc, #152]	@ (80050cc <HAL_TIM_PWM_Start+0x214>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d018      	beq.n	800506a <HAL_TIM_PWM_Start+0x1b2>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a24      	ldr	r2, [pc, #144]	@ (80050d0 <HAL_TIM_PWM_Start+0x218>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d013      	beq.n	800506a <HAL_TIM_PWM_Start+0x1b2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a23      	ldr	r2, [pc, #140]	@ (80050d4 <HAL_TIM_PWM_Start+0x21c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00e      	beq.n	800506a <HAL_TIM_PWM_Start+0x1b2>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a19      	ldr	r2, [pc, #100]	@ (80050b8 <HAL_TIM_PWM_Start+0x200>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d009      	beq.n	800506a <HAL_TIM_PWM_Start+0x1b2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a18      	ldr	r2, [pc, #96]	@ (80050bc <HAL_TIM_PWM_Start+0x204>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d004      	beq.n	800506a <HAL_TIM_PWM_Start+0x1b2>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a18      	ldr	r2, [pc, #96]	@ (80050c8 <HAL_TIM_PWM_Start+0x210>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d115      	bne.n	8005096 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	4b19      	ldr	r3, [pc, #100]	@ (80050d8 <HAL_TIM_PWM_Start+0x220>)
 8005072:	4013      	ands	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b06      	cmp	r3, #6
 800507a:	d015      	beq.n	80050a8 <HAL_TIM_PWM_Start+0x1f0>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005082:	d011      	beq.n	80050a8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005094:	e008      	b.n	80050a8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0201 	orr.w	r2, r2, #1
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	e000      	b.n	80050aa <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40012c00 	.word	0x40012c00
 80050b8:	40013400 	.word	0x40013400
 80050bc:	40014000 	.word	0x40014000
 80050c0:	40014400 	.word	0x40014400
 80050c4:	40014800 	.word	0x40014800
 80050c8:	40015000 	.word	0x40015000
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	00010007 	.word	0x00010007

080050dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d020      	beq.n	8005140 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01b      	beq.n	8005140 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0202 	mvn.w	r2, #2
 8005110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fc0e 	bl	8005948 <HAL_TIM_IC_CaptureCallback>
 800512c:	e005      	b.n	800513a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fc fc46 	bl	80019c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fc11 	bl	800595c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d020      	beq.n	800518c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01b      	beq.n	800518c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0204 	mvn.w	r2, #4
 800515c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2202      	movs	r2, #2
 8005162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fbe8 	bl	8005948 <HAL_TIM_IC_CaptureCallback>
 8005178:	e005      	b.n	8005186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fc fc20 	bl	80019c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fbeb 	bl	800595c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d020      	beq.n	80051d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d01b      	beq.n	80051d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0208 	mvn.w	r2, #8
 80051a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2204      	movs	r2, #4
 80051ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fbc2 	bl	8005948 <HAL_TIM_IC_CaptureCallback>
 80051c4:	e005      	b.n	80051d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fc fbfa 	bl	80019c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 fbc5 	bl	800595c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d020      	beq.n	8005224 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01b      	beq.n	8005224 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0210 	mvn.w	r2, #16
 80051f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2208      	movs	r2, #8
 80051fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fb9c 	bl	8005948 <HAL_TIM_IC_CaptureCallback>
 8005210:	e005      	b.n	800521e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fc fbd4 	bl	80019c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fb9f 	bl	800595c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00c      	beq.n	8005248 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d007      	beq.n	8005248 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0201 	mvn.w	r2, #1
 8005240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fc fba6 	bl	8001994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800524e:	2b00      	cmp	r3, #0
 8005250:	d104      	bne.n	800525c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00c      	beq.n	8005276 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005262:	2b00      	cmp	r3, #0
 8005264:	d007      	beq.n	8005276 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800526e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f001 f9a7 	bl	80065c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00c      	beq.n	800529a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005286:	2b00      	cmp	r3, #0
 8005288:	d007      	beq.n	800529a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f001 f99f 	bl	80065d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00c      	beq.n	80052be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d007      	beq.n	80052be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fb59 	bl	8005970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00c      	beq.n	80052e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d007      	beq.n	80052e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f06f 0220 	mvn.w	r2, #32
 80052da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f001 f967 	bl	80065b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00c      	beq.n	8005306 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d007      	beq.n	8005306 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80052fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f001 f973 	bl	80065ec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00c      	beq.n	800532a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d007      	beq.n	800532a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f001 f96b 	bl	8006600 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00c      	beq.n	800534e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d007      	beq.n	800534e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f001 f963 	bl	8006614 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00c      	beq.n	8005372 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d007      	beq.n	8005372 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800536a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f001 f95b 	bl	8006628 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005372:	bf00      	nop
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005396:	2302      	movs	r3, #2
 8005398:	e066      	b.n	8005468 <HAL_TIM_OC_ConfigChannel+0xec>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b14      	cmp	r3, #20
 80053a6:	d857      	bhi.n	8005458 <HAL_TIM_OC_ConfigChannel+0xdc>
 80053a8:	a201      	add	r2, pc, #4	@ (adr r2, 80053b0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80053aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ae:	bf00      	nop
 80053b0:	08005405 	.word	0x08005405
 80053b4:	08005459 	.word	0x08005459
 80053b8:	08005459 	.word	0x08005459
 80053bc:	08005459 	.word	0x08005459
 80053c0:	08005413 	.word	0x08005413
 80053c4:	08005459 	.word	0x08005459
 80053c8:	08005459 	.word	0x08005459
 80053cc:	08005459 	.word	0x08005459
 80053d0:	08005421 	.word	0x08005421
 80053d4:	08005459 	.word	0x08005459
 80053d8:	08005459 	.word	0x08005459
 80053dc:	08005459 	.word	0x08005459
 80053e0:	0800542f 	.word	0x0800542f
 80053e4:	08005459 	.word	0x08005459
 80053e8:	08005459 	.word	0x08005459
 80053ec:	08005459 	.word	0x08005459
 80053f0:	0800543d 	.word	0x0800543d
 80053f4:	08005459 	.word	0x08005459
 80053f8:	08005459 	.word	0x08005459
 80053fc:	08005459 	.word	0x08005459
 8005400:	0800544b 	.word	0x0800544b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fb6e 	bl	8005aec <TIM_OC1_SetConfig>
      break;
 8005410:	e025      	b.n	800545e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fc01 	bl	8005c20 <TIM_OC2_SetConfig>
      break;
 800541e:	e01e      	b.n	800545e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fc8e 	bl	8005d48 <TIM_OC3_SetConfig>
      break;
 800542c:	e017      	b.n	800545e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68b9      	ldr	r1, [r7, #8]
 8005434:	4618      	mov	r0, r3
 8005436:	f000 fd19 	bl	8005e6c <TIM_OC4_SetConfig>
      break;
 800543a:	e010      	b.n	800545e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fda6 	bl	8005f94 <TIM_OC5_SetConfig>
      break;
 8005448:	e009      	b.n	800545e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fe09 	bl	8006068 <TIM_OC6_SetConfig>
      break;
 8005456:	e002      	b.n	800545e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	75fb      	strb	r3, [r7, #23]
      break;
 800545c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005466:	7dfb      	ldrb	r3, [r7, #23]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800548a:	2302      	movs	r3, #2
 800548c:	e0ff      	b.n	800568e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b14      	cmp	r3, #20
 800549a:	f200 80f0 	bhi.w	800567e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800549e:	a201      	add	r2, pc, #4	@ (adr r2, 80054a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a4:	080054f9 	.word	0x080054f9
 80054a8:	0800567f 	.word	0x0800567f
 80054ac:	0800567f 	.word	0x0800567f
 80054b0:	0800567f 	.word	0x0800567f
 80054b4:	08005539 	.word	0x08005539
 80054b8:	0800567f 	.word	0x0800567f
 80054bc:	0800567f 	.word	0x0800567f
 80054c0:	0800567f 	.word	0x0800567f
 80054c4:	0800557b 	.word	0x0800557b
 80054c8:	0800567f 	.word	0x0800567f
 80054cc:	0800567f 	.word	0x0800567f
 80054d0:	0800567f 	.word	0x0800567f
 80054d4:	080055bb 	.word	0x080055bb
 80054d8:	0800567f 	.word	0x0800567f
 80054dc:	0800567f 	.word	0x0800567f
 80054e0:	0800567f 	.word	0x0800567f
 80054e4:	080055fd 	.word	0x080055fd
 80054e8:	0800567f 	.word	0x0800567f
 80054ec:	0800567f 	.word	0x0800567f
 80054f0:	0800567f 	.word	0x0800567f
 80054f4:	0800563d 	.word	0x0800563d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 faf4 	bl	8005aec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0208 	orr.w	r2, r2, #8
 8005512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0204 	bic.w	r2, r2, #4
 8005522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6999      	ldr	r1, [r3, #24]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	619a      	str	r2, [r3, #24]
      break;
 8005536:	e0a5      	b.n	8005684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fb6e 	bl	8005c20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6999      	ldr	r1, [r3, #24]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	021a      	lsls	r2, r3, #8
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	619a      	str	r2, [r3, #24]
      break;
 8005578:	e084      	b.n	8005684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fbe1 	bl	8005d48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69da      	ldr	r2, [r3, #28]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f042 0208 	orr.w	r2, r2, #8
 8005594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69da      	ldr	r2, [r3, #28]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0204 	bic.w	r2, r2, #4
 80055a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69d9      	ldr	r1, [r3, #28]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	61da      	str	r2, [r3, #28]
      break;
 80055b8:	e064      	b.n	8005684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fc53 	bl	8005e6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69da      	ldr	r2, [r3, #28]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69d9      	ldr	r1, [r3, #28]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	021a      	lsls	r2, r3, #8
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	61da      	str	r2, [r3, #28]
      break;
 80055fa:	e043      	b.n	8005684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fcc6 	bl	8005f94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0208 	orr.w	r2, r2, #8
 8005616:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0204 	bic.w	r2, r2, #4
 8005626:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	691a      	ldr	r2, [r3, #16]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800563a:	e023      	b.n	8005684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fd10 	bl	8006068 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005656:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005666:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	021a      	lsls	r2, r3, #8
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800567c:	e002      	b.n	8005684 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	75fb      	strb	r3, [r7, #23]
      break;
 8005682:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800568c:	7dfb      	ldrb	r3, [r7, #23]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop

08005698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_TIM_ConfigClockSource+0x1c>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e0f6      	b.n	80058a2 <HAL_TIM_ConfigClockSource+0x20a>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80056d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80056d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a6f      	ldr	r2, [pc, #444]	@ (80058ac <HAL_TIM_ConfigClockSource+0x214>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	f000 80c1 	beq.w	8005876 <HAL_TIM_ConfigClockSource+0x1de>
 80056f4:	4a6d      	ldr	r2, [pc, #436]	@ (80058ac <HAL_TIM_ConfigClockSource+0x214>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	f200 80c6 	bhi.w	8005888 <HAL_TIM_ConfigClockSource+0x1f0>
 80056fc:	4a6c      	ldr	r2, [pc, #432]	@ (80058b0 <HAL_TIM_ConfigClockSource+0x218>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	f000 80b9 	beq.w	8005876 <HAL_TIM_ConfigClockSource+0x1de>
 8005704:	4a6a      	ldr	r2, [pc, #424]	@ (80058b0 <HAL_TIM_ConfigClockSource+0x218>)
 8005706:	4293      	cmp	r3, r2
 8005708:	f200 80be 	bhi.w	8005888 <HAL_TIM_ConfigClockSource+0x1f0>
 800570c:	4a69      	ldr	r2, [pc, #420]	@ (80058b4 <HAL_TIM_ConfigClockSource+0x21c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	f000 80b1 	beq.w	8005876 <HAL_TIM_ConfigClockSource+0x1de>
 8005714:	4a67      	ldr	r2, [pc, #412]	@ (80058b4 <HAL_TIM_ConfigClockSource+0x21c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	f200 80b6 	bhi.w	8005888 <HAL_TIM_ConfigClockSource+0x1f0>
 800571c:	4a66      	ldr	r2, [pc, #408]	@ (80058b8 <HAL_TIM_ConfigClockSource+0x220>)
 800571e:	4293      	cmp	r3, r2
 8005720:	f000 80a9 	beq.w	8005876 <HAL_TIM_ConfigClockSource+0x1de>
 8005724:	4a64      	ldr	r2, [pc, #400]	@ (80058b8 <HAL_TIM_ConfigClockSource+0x220>)
 8005726:	4293      	cmp	r3, r2
 8005728:	f200 80ae 	bhi.w	8005888 <HAL_TIM_ConfigClockSource+0x1f0>
 800572c:	4a63      	ldr	r2, [pc, #396]	@ (80058bc <HAL_TIM_ConfigClockSource+0x224>)
 800572e:	4293      	cmp	r3, r2
 8005730:	f000 80a1 	beq.w	8005876 <HAL_TIM_ConfigClockSource+0x1de>
 8005734:	4a61      	ldr	r2, [pc, #388]	@ (80058bc <HAL_TIM_ConfigClockSource+0x224>)
 8005736:	4293      	cmp	r3, r2
 8005738:	f200 80a6 	bhi.w	8005888 <HAL_TIM_ConfigClockSource+0x1f0>
 800573c:	4a60      	ldr	r2, [pc, #384]	@ (80058c0 <HAL_TIM_ConfigClockSource+0x228>)
 800573e:	4293      	cmp	r3, r2
 8005740:	f000 8099 	beq.w	8005876 <HAL_TIM_ConfigClockSource+0x1de>
 8005744:	4a5e      	ldr	r2, [pc, #376]	@ (80058c0 <HAL_TIM_ConfigClockSource+0x228>)
 8005746:	4293      	cmp	r3, r2
 8005748:	f200 809e 	bhi.w	8005888 <HAL_TIM_ConfigClockSource+0x1f0>
 800574c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005750:	f000 8091 	beq.w	8005876 <HAL_TIM_ConfigClockSource+0x1de>
 8005754:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005758:	f200 8096 	bhi.w	8005888 <HAL_TIM_ConfigClockSource+0x1f0>
 800575c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005760:	f000 8089 	beq.w	8005876 <HAL_TIM_ConfigClockSource+0x1de>
 8005764:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005768:	f200 808e 	bhi.w	8005888 <HAL_TIM_ConfigClockSource+0x1f0>
 800576c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005770:	d03e      	beq.n	80057f0 <HAL_TIM_ConfigClockSource+0x158>
 8005772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005776:	f200 8087 	bhi.w	8005888 <HAL_TIM_ConfigClockSource+0x1f0>
 800577a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800577e:	f000 8086 	beq.w	800588e <HAL_TIM_ConfigClockSource+0x1f6>
 8005782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005786:	d87f      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x1f0>
 8005788:	2b70      	cmp	r3, #112	@ 0x70
 800578a:	d01a      	beq.n	80057c2 <HAL_TIM_ConfigClockSource+0x12a>
 800578c:	2b70      	cmp	r3, #112	@ 0x70
 800578e:	d87b      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x1f0>
 8005790:	2b60      	cmp	r3, #96	@ 0x60
 8005792:	d050      	beq.n	8005836 <HAL_TIM_ConfigClockSource+0x19e>
 8005794:	2b60      	cmp	r3, #96	@ 0x60
 8005796:	d877      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x1f0>
 8005798:	2b50      	cmp	r3, #80	@ 0x50
 800579a:	d03c      	beq.n	8005816 <HAL_TIM_ConfigClockSource+0x17e>
 800579c:	2b50      	cmp	r3, #80	@ 0x50
 800579e:	d873      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x1f0>
 80057a0:	2b40      	cmp	r3, #64	@ 0x40
 80057a2:	d058      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0x1be>
 80057a4:	2b40      	cmp	r3, #64	@ 0x40
 80057a6:	d86f      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x1f0>
 80057a8:	2b30      	cmp	r3, #48	@ 0x30
 80057aa:	d064      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0x1de>
 80057ac:	2b30      	cmp	r3, #48	@ 0x30
 80057ae:	d86b      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x1f0>
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d060      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0x1de>
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d867      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x1f0>
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d05c      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0x1de>
 80057bc:	2b10      	cmp	r3, #16
 80057be:	d05a      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0x1de>
 80057c0:	e062      	b.n	8005888 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057d2:	f000 fe11 	bl	80063f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80057e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	609a      	str	r2, [r3, #8]
      break;
 80057ee:	e04f      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005800:	f000 fdfa 	bl	80063f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005812:	609a      	str	r2, [r3, #8]
      break;
 8005814:	e03c      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005822:	461a      	mov	r2, r3
 8005824:	f000 fd6c 	bl	8006300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2150      	movs	r1, #80	@ 0x50
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fdc5 	bl	80063be <TIM_ITRx_SetConfig>
      break;
 8005834:	e02c      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005842:	461a      	mov	r2, r3
 8005844:	f000 fd8b 	bl	800635e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2160      	movs	r1, #96	@ 0x60
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fdb5 	bl	80063be <TIM_ITRx_SetConfig>
      break;
 8005854:	e01c      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005862:	461a      	mov	r2, r3
 8005864:	f000 fd4c 	bl	8006300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2140      	movs	r1, #64	@ 0x40
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fda5 	bl	80063be <TIM_ITRx_SetConfig>
      break;
 8005874:	e00c      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4619      	mov	r1, r3
 8005880:	4610      	mov	r0, r2
 8005882:	f000 fd9c 	bl	80063be <TIM_ITRx_SetConfig>
      break;
 8005886:	e003      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	73fb      	strb	r3, [r7, #15]
      break;
 800588c:	e000      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800588e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	00100070 	.word	0x00100070
 80058b0:	00100060 	.word	0x00100060
 80058b4:	00100050 	.word	0x00100050
 80058b8:	00100040 	.word	0x00100040
 80058bc:	00100030 	.word	0x00100030
 80058c0:	00100020 	.word	0x00100020

080058c4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <HAL_TIM_SlaveConfigSynchro+0x18>
 80058d8:	2302      	movs	r3, #2
 80058da:	e031      	b.n	8005940 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80058ec:	6839      	ldr	r1, [r7, #0]
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fc26 	bl	8006140 <TIM_SlaveTimer_SetConfig>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e018      	b.n	8005940 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800591c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800592c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a4c      	ldr	r2, [pc, #304]	@ (8005ac8 <TIM_Base_SetConfig+0x144>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d017      	beq.n	80059cc <TIM_Base_SetConfig+0x48>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059a2:	d013      	beq.n	80059cc <TIM_Base_SetConfig+0x48>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a49      	ldr	r2, [pc, #292]	@ (8005acc <TIM_Base_SetConfig+0x148>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00f      	beq.n	80059cc <TIM_Base_SetConfig+0x48>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a48      	ldr	r2, [pc, #288]	@ (8005ad0 <TIM_Base_SetConfig+0x14c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00b      	beq.n	80059cc <TIM_Base_SetConfig+0x48>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a47      	ldr	r2, [pc, #284]	@ (8005ad4 <TIM_Base_SetConfig+0x150>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d007      	beq.n	80059cc <TIM_Base_SetConfig+0x48>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a46      	ldr	r2, [pc, #280]	@ (8005ad8 <TIM_Base_SetConfig+0x154>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_Base_SetConfig+0x48>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a45      	ldr	r2, [pc, #276]	@ (8005adc <TIM_Base_SetConfig+0x158>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d108      	bne.n	80059de <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a39      	ldr	r2, [pc, #228]	@ (8005ac8 <TIM_Base_SetConfig+0x144>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d023      	beq.n	8005a2e <TIM_Base_SetConfig+0xaa>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ec:	d01f      	beq.n	8005a2e <TIM_Base_SetConfig+0xaa>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a36      	ldr	r2, [pc, #216]	@ (8005acc <TIM_Base_SetConfig+0x148>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d01b      	beq.n	8005a2e <TIM_Base_SetConfig+0xaa>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a35      	ldr	r2, [pc, #212]	@ (8005ad0 <TIM_Base_SetConfig+0x14c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d017      	beq.n	8005a2e <TIM_Base_SetConfig+0xaa>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a34      	ldr	r2, [pc, #208]	@ (8005ad4 <TIM_Base_SetConfig+0x150>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d013      	beq.n	8005a2e <TIM_Base_SetConfig+0xaa>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a33      	ldr	r2, [pc, #204]	@ (8005ad8 <TIM_Base_SetConfig+0x154>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00f      	beq.n	8005a2e <TIM_Base_SetConfig+0xaa>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a33      	ldr	r2, [pc, #204]	@ (8005ae0 <TIM_Base_SetConfig+0x15c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00b      	beq.n	8005a2e <TIM_Base_SetConfig+0xaa>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a32      	ldr	r2, [pc, #200]	@ (8005ae4 <TIM_Base_SetConfig+0x160>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d007      	beq.n	8005a2e <TIM_Base_SetConfig+0xaa>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a31      	ldr	r2, [pc, #196]	@ (8005ae8 <TIM_Base_SetConfig+0x164>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d003      	beq.n	8005a2e <TIM_Base_SetConfig+0xaa>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a2c      	ldr	r2, [pc, #176]	@ (8005adc <TIM_Base_SetConfig+0x158>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d108      	bne.n	8005a40 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a18      	ldr	r2, [pc, #96]	@ (8005ac8 <TIM_Base_SetConfig+0x144>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d013      	beq.n	8005a94 <TIM_Base_SetConfig+0x110>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ad8 <TIM_Base_SetConfig+0x154>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d00f      	beq.n	8005a94 <TIM_Base_SetConfig+0x110>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a1a      	ldr	r2, [pc, #104]	@ (8005ae0 <TIM_Base_SetConfig+0x15c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d00b      	beq.n	8005a94 <TIM_Base_SetConfig+0x110>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a19      	ldr	r2, [pc, #100]	@ (8005ae4 <TIM_Base_SetConfig+0x160>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d007      	beq.n	8005a94 <TIM_Base_SetConfig+0x110>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a18      	ldr	r2, [pc, #96]	@ (8005ae8 <TIM_Base_SetConfig+0x164>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d003      	beq.n	8005a94 <TIM_Base_SetConfig+0x110>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a13      	ldr	r2, [pc, #76]	@ (8005adc <TIM_Base_SetConfig+0x158>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d103      	bne.n	8005a9c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d105      	bne.n	8005aba <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f023 0201 	bic.w	r2, r3, #1
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	611a      	str	r2, [r3, #16]
  }
}
 8005aba:	bf00      	nop
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40012c00 	.word	0x40012c00
 8005acc:	40000400 	.word	0x40000400
 8005ad0:	40000800 	.word	0x40000800
 8005ad4:	40000c00 	.word	0x40000c00
 8005ad8:	40013400 	.word	0x40013400
 8005adc:	40015000 	.word	0x40015000
 8005ae0:	40014000 	.word	0x40014000
 8005ae4:	40014400 	.word	0x40014400
 8005ae8:	40014800 	.word	0x40014800

08005aec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	f023 0201 	bic.w	r2, r3, #1
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0303 	bic.w	r3, r3, #3
 8005b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f023 0302 	bic.w	r3, r3, #2
 8005b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a30      	ldr	r2, [pc, #192]	@ (8005c08 <TIM_OC1_SetConfig+0x11c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d013      	beq.n	8005b74 <TIM_OC1_SetConfig+0x88>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a2f      	ldr	r2, [pc, #188]	@ (8005c0c <TIM_OC1_SetConfig+0x120>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00f      	beq.n	8005b74 <TIM_OC1_SetConfig+0x88>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a2e      	ldr	r2, [pc, #184]	@ (8005c10 <TIM_OC1_SetConfig+0x124>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00b      	beq.n	8005b74 <TIM_OC1_SetConfig+0x88>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8005c14 <TIM_OC1_SetConfig+0x128>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d007      	beq.n	8005b74 <TIM_OC1_SetConfig+0x88>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a2c      	ldr	r2, [pc, #176]	@ (8005c18 <TIM_OC1_SetConfig+0x12c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d003      	beq.n	8005b74 <TIM_OC1_SetConfig+0x88>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8005c1c <TIM_OC1_SetConfig+0x130>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d10c      	bne.n	8005b8e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f023 0308 	bic.w	r3, r3, #8
 8005b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f023 0304 	bic.w	r3, r3, #4
 8005b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a1d      	ldr	r2, [pc, #116]	@ (8005c08 <TIM_OC1_SetConfig+0x11c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d013      	beq.n	8005bbe <TIM_OC1_SetConfig+0xd2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a1c      	ldr	r2, [pc, #112]	@ (8005c0c <TIM_OC1_SetConfig+0x120>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00f      	beq.n	8005bbe <TIM_OC1_SetConfig+0xd2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c10 <TIM_OC1_SetConfig+0x124>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00b      	beq.n	8005bbe <TIM_OC1_SetConfig+0xd2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8005c14 <TIM_OC1_SetConfig+0x128>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d007      	beq.n	8005bbe <TIM_OC1_SetConfig+0xd2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a19      	ldr	r2, [pc, #100]	@ (8005c18 <TIM_OC1_SetConfig+0x12c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d003      	beq.n	8005bbe <TIM_OC1_SetConfig+0xd2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a18      	ldr	r2, [pc, #96]	@ (8005c1c <TIM_OC1_SetConfig+0x130>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d111      	bne.n	8005be2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	621a      	str	r2, [r3, #32]
}
 8005bfc:	bf00      	nop
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40012c00 	.word	0x40012c00
 8005c0c:	40013400 	.word	0x40013400
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40014400 	.word	0x40014400
 8005c18:	40014800 	.word	0x40014800
 8005c1c:	40015000 	.word	0x40015000

08005c20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	f023 0210 	bic.w	r2, r3, #16
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	021b      	lsls	r3, r3, #8
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f023 0320 	bic.w	r3, r3, #32
 8005c6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d30 <TIM_OC2_SetConfig+0x110>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d007      	beq.n	8005c94 <TIM_OC2_SetConfig+0x74>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a2b      	ldr	r2, [pc, #172]	@ (8005d34 <TIM_OC2_SetConfig+0x114>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d003      	beq.n	8005c94 <TIM_OC2_SetConfig+0x74>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8005d38 <TIM_OC2_SetConfig+0x118>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d10d      	bne.n	8005cb0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8005d30 <TIM_OC2_SetConfig+0x110>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d013      	beq.n	8005ce0 <TIM_OC2_SetConfig+0xc0>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a1e      	ldr	r2, [pc, #120]	@ (8005d34 <TIM_OC2_SetConfig+0x114>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00f      	beq.n	8005ce0 <TIM_OC2_SetConfig+0xc0>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8005d3c <TIM_OC2_SetConfig+0x11c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00b      	beq.n	8005ce0 <TIM_OC2_SetConfig+0xc0>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a1d      	ldr	r2, [pc, #116]	@ (8005d40 <TIM_OC2_SetConfig+0x120>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d007      	beq.n	8005ce0 <TIM_OC2_SetConfig+0xc0>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8005d44 <TIM_OC2_SetConfig+0x124>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d003      	beq.n	8005ce0 <TIM_OC2_SetConfig+0xc0>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a17      	ldr	r2, [pc, #92]	@ (8005d38 <TIM_OC2_SetConfig+0x118>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d113      	bne.n	8005d08 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	621a      	str	r2, [r3, #32]
}
 8005d22:	bf00      	nop
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40013400 	.word	0x40013400
 8005d38:	40015000 	.word	0x40015000
 8005d3c:	40014000 	.word	0x40014000
 8005d40:	40014400 	.word	0x40014400
 8005d44:	40014800 	.word	0x40014800

08005d48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0303 	bic.w	r3, r3, #3
 8005d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	021b      	lsls	r3, r3, #8
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a2b      	ldr	r2, [pc, #172]	@ (8005e54 <TIM_OC3_SetConfig+0x10c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d007      	beq.n	8005dba <TIM_OC3_SetConfig+0x72>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a2a      	ldr	r2, [pc, #168]	@ (8005e58 <TIM_OC3_SetConfig+0x110>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d003      	beq.n	8005dba <TIM_OC3_SetConfig+0x72>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a29      	ldr	r2, [pc, #164]	@ (8005e5c <TIM_OC3_SetConfig+0x114>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d10d      	bne.n	8005dd6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	021b      	lsls	r3, r3, #8
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a1e      	ldr	r2, [pc, #120]	@ (8005e54 <TIM_OC3_SetConfig+0x10c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d013      	beq.n	8005e06 <TIM_OC3_SetConfig+0xbe>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e58 <TIM_OC3_SetConfig+0x110>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00f      	beq.n	8005e06 <TIM_OC3_SetConfig+0xbe>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e60 <TIM_OC3_SetConfig+0x118>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00b      	beq.n	8005e06 <TIM_OC3_SetConfig+0xbe>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e64 <TIM_OC3_SetConfig+0x11c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d007      	beq.n	8005e06 <TIM_OC3_SetConfig+0xbe>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e68 <TIM_OC3_SetConfig+0x120>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d003      	beq.n	8005e06 <TIM_OC3_SetConfig+0xbe>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a16      	ldr	r2, [pc, #88]	@ (8005e5c <TIM_OC3_SetConfig+0x114>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d113      	bne.n	8005e2e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	621a      	str	r2, [r3, #32]
}
 8005e48:	bf00      	nop
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	40012c00 	.word	0x40012c00
 8005e58:	40013400 	.word	0x40013400
 8005e5c:	40015000 	.word	0x40015000
 8005e60:	40014000 	.word	0x40014000
 8005e64:	40014400 	.word	0x40014400
 8005e68:	40014800 	.word	0x40014800

08005e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	021b      	lsls	r3, r3, #8
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005eba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	031b      	lsls	r3, r3, #12
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a2c      	ldr	r2, [pc, #176]	@ (8005f7c <TIM_OC4_SetConfig+0x110>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d007      	beq.n	8005ee0 <TIM_OC4_SetConfig+0x74>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a2b      	ldr	r2, [pc, #172]	@ (8005f80 <TIM_OC4_SetConfig+0x114>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <TIM_OC4_SetConfig+0x74>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a2a      	ldr	r2, [pc, #168]	@ (8005f84 <TIM_OC4_SetConfig+0x118>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10d      	bne.n	8005efc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	031b      	lsls	r3, r3, #12
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005efa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a1f      	ldr	r2, [pc, #124]	@ (8005f7c <TIM_OC4_SetConfig+0x110>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d013      	beq.n	8005f2c <TIM_OC4_SetConfig+0xc0>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a1e      	ldr	r2, [pc, #120]	@ (8005f80 <TIM_OC4_SetConfig+0x114>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d00f      	beq.n	8005f2c <TIM_OC4_SetConfig+0xc0>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8005f88 <TIM_OC4_SetConfig+0x11c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00b      	beq.n	8005f2c <TIM_OC4_SetConfig+0xc0>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a1d      	ldr	r2, [pc, #116]	@ (8005f8c <TIM_OC4_SetConfig+0x120>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d007      	beq.n	8005f2c <TIM_OC4_SetConfig+0xc0>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8005f90 <TIM_OC4_SetConfig+0x124>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_OC4_SetConfig+0xc0>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a17      	ldr	r2, [pc, #92]	@ (8005f84 <TIM_OC4_SetConfig+0x118>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d113      	bne.n	8005f54 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f32:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f3a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	019b      	lsls	r3, r3, #6
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	019b      	lsls	r3, r3, #6
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	621a      	str	r2, [r3, #32]
}
 8005f6e:	bf00      	nop
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	40012c00 	.word	0x40012c00
 8005f80:	40013400 	.word	0x40013400
 8005f84:	40015000 	.word	0x40015000
 8005f88:	40014000 	.word	0x40014000
 8005f8c:	40014400 	.word	0x40014400
 8005f90:	40014800 	.word	0x40014800

08005f94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005fd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	041b      	lsls	r3, r3, #16
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a19      	ldr	r2, [pc, #100]	@ (8006050 <TIM_OC5_SetConfig+0xbc>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d013      	beq.n	8006016 <TIM_OC5_SetConfig+0x82>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a18      	ldr	r2, [pc, #96]	@ (8006054 <TIM_OC5_SetConfig+0xc0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d00f      	beq.n	8006016 <TIM_OC5_SetConfig+0x82>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a17      	ldr	r2, [pc, #92]	@ (8006058 <TIM_OC5_SetConfig+0xc4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d00b      	beq.n	8006016 <TIM_OC5_SetConfig+0x82>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a16      	ldr	r2, [pc, #88]	@ (800605c <TIM_OC5_SetConfig+0xc8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d007      	beq.n	8006016 <TIM_OC5_SetConfig+0x82>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a15      	ldr	r2, [pc, #84]	@ (8006060 <TIM_OC5_SetConfig+0xcc>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d003      	beq.n	8006016 <TIM_OC5_SetConfig+0x82>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a14      	ldr	r2, [pc, #80]	@ (8006064 <TIM_OC5_SetConfig+0xd0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d109      	bne.n	800602a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800601c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	021b      	lsls	r3, r3, #8
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	621a      	str	r2, [r3, #32]
}
 8006044:	bf00      	nop
 8006046:	371c      	adds	r7, #28
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	40012c00 	.word	0x40012c00
 8006054:	40013400 	.word	0x40013400
 8006058:	40014000 	.word	0x40014000
 800605c:	40014400 	.word	0x40014400
 8006060:	40014800 	.word	0x40014800
 8006064:	40015000 	.word	0x40015000

08006068 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800608e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800609a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	021b      	lsls	r3, r3, #8
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80060ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	051b      	lsls	r3, r3, #20
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a1a      	ldr	r2, [pc, #104]	@ (8006128 <TIM_OC6_SetConfig+0xc0>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d013      	beq.n	80060ec <TIM_OC6_SetConfig+0x84>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a19      	ldr	r2, [pc, #100]	@ (800612c <TIM_OC6_SetConfig+0xc4>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00f      	beq.n	80060ec <TIM_OC6_SetConfig+0x84>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a18      	ldr	r2, [pc, #96]	@ (8006130 <TIM_OC6_SetConfig+0xc8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d00b      	beq.n	80060ec <TIM_OC6_SetConfig+0x84>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a17      	ldr	r2, [pc, #92]	@ (8006134 <TIM_OC6_SetConfig+0xcc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d007      	beq.n	80060ec <TIM_OC6_SetConfig+0x84>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a16      	ldr	r2, [pc, #88]	@ (8006138 <TIM_OC6_SetConfig+0xd0>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d003      	beq.n	80060ec <TIM_OC6_SetConfig+0x84>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a15      	ldr	r2, [pc, #84]	@ (800613c <TIM_OC6_SetConfig+0xd4>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d109      	bne.n	8006100 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	029b      	lsls	r3, r3, #10
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	621a      	str	r2, [r3, #32]
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40012c00 	.word	0x40012c00
 800612c:	40013400 	.word	0x40013400
 8006130:	40014000 	.word	0x40014000
 8006134:	40014400 	.word	0x40014400
 8006138:	40014800 	.word	0x40014800
 800613c:	40015000 	.word	0x40015000

08006140 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800615c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006160:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006172:	f023 0307 	bic.w	r3, r3, #7
 8006176:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	4a56      	ldr	r2, [pc, #344]	@ (80062e8 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	f000 80a2 	beq.w	80062da <TIM_SlaveTimer_SetConfig+0x19a>
 8006196:	4a54      	ldr	r2, [pc, #336]	@ (80062e8 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	f200 809b 	bhi.w	80062d4 <TIM_SlaveTimer_SetConfig+0x194>
 800619e:	4a53      	ldr	r2, [pc, #332]	@ (80062ec <TIM_SlaveTimer_SetConfig+0x1ac>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	f000 809a 	beq.w	80062da <TIM_SlaveTimer_SetConfig+0x19a>
 80061a6:	4a51      	ldr	r2, [pc, #324]	@ (80062ec <TIM_SlaveTimer_SetConfig+0x1ac>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	f200 8093 	bhi.w	80062d4 <TIM_SlaveTimer_SetConfig+0x194>
 80061ae:	4a50      	ldr	r2, [pc, #320]	@ (80062f0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	f000 8092 	beq.w	80062da <TIM_SlaveTimer_SetConfig+0x19a>
 80061b6:	4a4e      	ldr	r2, [pc, #312]	@ (80062f0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	f200 808b 	bhi.w	80062d4 <TIM_SlaveTimer_SetConfig+0x194>
 80061be:	4a4d      	ldr	r2, [pc, #308]	@ (80062f4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	f000 808a 	beq.w	80062da <TIM_SlaveTimer_SetConfig+0x19a>
 80061c6:	4a4b      	ldr	r2, [pc, #300]	@ (80062f4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	f200 8083 	bhi.w	80062d4 <TIM_SlaveTimer_SetConfig+0x194>
 80061ce:	4a4a      	ldr	r2, [pc, #296]	@ (80062f8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	f000 8082 	beq.w	80062da <TIM_SlaveTimer_SetConfig+0x19a>
 80061d6:	4a48      	ldr	r2, [pc, #288]	@ (80062f8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d87b      	bhi.n	80062d4 <TIM_SlaveTimer_SetConfig+0x194>
 80061dc:	4a47      	ldr	r2, [pc, #284]	@ (80062fc <TIM_SlaveTimer_SetConfig+0x1bc>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d07b      	beq.n	80062da <TIM_SlaveTimer_SetConfig+0x19a>
 80061e2:	4a46      	ldr	r2, [pc, #280]	@ (80062fc <TIM_SlaveTimer_SetConfig+0x1bc>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d875      	bhi.n	80062d4 <TIM_SlaveTimer_SetConfig+0x194>
 80061e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80061ec:	d075      	beq.n	80062da <TIM_SlaveTimer_SetConfig+0x19a>
 80061ee:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80061f2:	d86f      	bhi.n	80062d4 <TIM_SlaveTimer_SetConfig+0x194>
 80061f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061f8:	d06f      	beq.n	80062da <TIM_SlaveTimer_SetConfig+0x19a>
 80061fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061fe:	d869      	bhi.n	80062d4 <TIM_SlaveTimer_SetConfig+0x194>
 8006200:	2b70      	cmp	r3, #112	@ 0x70
 8006202:	d01a      	beq.n	800623a <TIM_SlaveTimer_SetConfig+0xfa>
 8006204:	2b70      	cmp	r3, #112	@ 0x70
 8006206:	d865      	bhi.n	80062d4 <TIM_SlaveTimer_SetConfig+0x194>
 8006208:	2b60      	cmp	r3, #96	@ 0x60
 800620a:	d059      	beq.n	80062c0 <TIM_SlaveTimer_SetConfig+0x180>
 800620c:	2b60      	cmp	r3, #96	@ 0x60
 800620e:	d861      	bhi.n	80062d4 <TIM_SlaveTimer_SetConfig+0x194>
 8006210:	2b50      	cmp	r3, #80	@ 0x50
 8006212:	d04b      	beq.n	80062ac <TIM_SlaveTimer_SetConfig+0x16c>
 8006214:	2b50      	cmp	r3, #80	@ 0x50
 8006216:	d85d      	bhi.n	80062d4 <TIM_SlaveTimer_SetConfig+0x194>
 8006218:	2b40      	cmp	r3, #64	@ 0x40
 800621a:	d019      	beq.n	8006250 <TIM_SlaveTimer_SetConfig+0x110>
 800621c:	2b40      	cmp	r3, #64	@ 0x40
 800621e:	d859      	bhi.n	80062d4 <TIM_SlaveTimer_SetConfig+0x194>
 8006220:	2b30      	cmp	r3, #48	@ 0x30
 8006222:	d05a      	beq.n	80062da <TIM_SlaveTimer_SetConfig+0x19a>
 8006224:	2b30      	cmp	r3, #48	@ 0x30
 8006226:	d855      	bhi.n	80062d4 <TIM_SlaveTimer_SetConfig+0x194>
 8006228:	2b20      	cmp	r3, #32
 800622a:	d056      	beq.n	80062da <TIM_SlaveTimer_SetConfig+0x19a>
 800622c:	2b20      	cmp	r3, #32
 800622e:	d851      	bhi.n	80062d4 <TIM_SlaveTimer_SetConfig+0x194>
 8006230:	2b00      	cmp	r3, #0
 8006232:	d052      	beq.n	80062da <TIM_SlaveTimer_SetConfig+0x19a>
 8006234:	2b10      	cmp	r3, #16
 8006236:	d050      	beq.n	80062da <TIM_SlaveTimer_SetConfig+0x19a>
 8006238:	e04c      	b.n	80062d4 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800624a:	f000 f8d5 	bl	80063f8 <TIM_ETR_SetConfig>
      break;
 800624e:	e045      	b.n	80062dc <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b05      	cmp	r3, #5
 8006256:	d004      	beq.n	8006262 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800625c:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8006260:	d101      	bne.n	8006266 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e03b      	b.n	80062de <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6a1a      	ldr	r2, [r3, #32]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0201 	bic.w	r2, r2, #1
 800627c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800628c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	4313      	orrs	r3, r2
 8006298:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	621a      	str	r2, [r3, #32]
      break;
 80062aa:	e017      	b.n	80062dc <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062b8:	461a      	mov	r2, r3
 80062ba:	f000 f821 	bl	8006300 <TIM_TI1_ConfigInputStage>
      break;
 80062be:	e00d      	b.n	80062dc <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062cc:	461a      	mov	r2, r3
 80062ce:	f000 f846 	bl	800635e <TIM_TI2_ConfigInputStage>
      break;
 80062d2:	e003      	b.n	80062dc <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	75fb      	strb	r3, [r7, #23]
      break;
 80062d8:	e000      	b.n	80062dc <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 80062da:	bf00      	nop
  }

  return status;
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3718      	adds	r7, #24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	00100070 	.word	0x00100070
 80062ec:	00100060 	.word	0x00100060
 80062f0:	00100050 	.word	0x00100050
 80062f4:	00100040 	.word	0x00100040
 80062f8:	00100030 	.word	0x00100030
 80062fc:	00100020 	.word	0x00100020

08006300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f023 0201 	bic.w	r2, r3, #1
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800632a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	4313      	orrs	r3, r2
 8006334:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f023 030a 	bic.w	r3, r3, #10
 800633c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	621a      	str	r2, [r3, #32]
}
 8006352:	bf00      	nop
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800635e:	b480      	push	{r7}
 8006360:	b087      	sub	sp, #28
 8006362:	af00      	add	r7, sp, #0
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	60b9      	str	r1, [r7, #8]
 8006368:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	f023 0210 	bic.w	r2, r3, #16
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006388:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	031b      	lsls	r3, r3, #12
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	4313      	orrs	r3, r2
 8006392:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800639a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	621a      	str	r2, [r3, #32]
}
 80063b2:	bf00      	nop
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063be:	b480      	push	{r7}
 80063c0:	b085      	sub	sp, #20
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80063d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	f043 0307 	orr.w	r3, r3, #7
 80063e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	609a      	str	r2, [r3, #8]
}
 80063ec:	bf00      	nop
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006412:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	021a      	lsls	r2, r3, #8
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	431a      	orrs	r2, r3
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	4313      	orrs	r3, r2
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	609a      	str	r2, [r3, #8]
}
 800642c:	bf00      	nop
 800642e:	371c      	adds	r7, #28
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f003 031f 	and.w	r3, r3, #31
 800644a:	2201      	movs	r2, #1
 800644c:	fa02 f303 	lsl.w	r3, r2, r3
 8006450:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a1a      	ldr	r2, [r3, #32]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	43db      	mvns	r3, r3
 800645a:	401a      	ands	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6a1a      	ldr	r2, [r3, #32]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f003 031f 	and.w	r3, r3, #31
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	fa01 f303 	lsl.w	r3, r1, r3
 8006470:	431a      	orrs	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	621a      	str	r2, [r3, #32]
}
 8006476:	bf00      	nop
 8006478:	371c      	adds	r7, #28
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
	...

08006484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006498:	2302      	movs	r3, #2
 800649a:	e074      	b.n	8006586 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a34      	ldr	r2, [pc, #208]	@ (8006594 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d009      	beq.n	80064da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a33      	ldr	r2, [pc, #204]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d004      	beq.n	80064da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a31      	ldr	r2, [pc, #196]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d108      	bne.n	80064ec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80064f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	4313      	orrs	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a21      	ldr	r2, [pc, #132]	@ (8006594 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d022      	beq.n	800655a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800651c:	d01d      	beq.n	800655a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a1f      	ldr	r2, [pc, #124]	@ (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d018      	beq.n	800655a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a1d      	ldr	r2, [pc, #116]	@ (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d013      	beq.n	800655a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a1c      	ldr	r2, [pc, #112]	@ (80065a8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00e      	beq.n	800655a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a15      	ldr	r2, [pc, #84]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d009      	beq.n	800655a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a18      	ldr	r2, [pc, #96]	@ (80065ac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d004      	beq.n	800655a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a11      	ldr	r2, [pc, #68]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d10c      	bne.n	8006574 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006560:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	4313      	orrs	r3, r2
 800656a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40012c00 	.word	0x40012c00
 8006598:	40013400 	.word	0x40013400
 800659c:	40015000 	.word	0x40015000
 80065a0:	40000400 	.word	0x40000400
 80065a4:	40000800 	.word	0x40000800
 80065a8:	40000c00 	.word	0x40000c00
 80065ac:	40014000 	.word	0x40014000

080065b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <srand>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	4b10      	ldr	r3, [pc, #64]	@ (8006680 <srand+0x44>)
 8006640:	681d      	ldr	r5, [r3, #0]
 8006642:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006644:	4604      	mov	r4, r0
 8006646:	b9b3      	cbnz	r3, 8006676 <srand+0x3a>
 8006648:	2018      	movs	r0, #24
 800664a:	f000 fa4d 	bl	8006ae8 <malloc>
 800664e:	4602      	mov	r2, r0
 8006650:	6328      	str	r0, [r5, #48]	@ 0x30
 8006652:	b920      	cbnz	r0, 800665e <srand+0x22>
 8006654:	4b0b      	ldr	r3, [pc, #44]	@ (8006684 <srand+0x48>)
 8006656:	480c      	ldr	r0, [pc, #48]	@ (8006688 <srand+0x4c>)
 8006658:	2146      	movs	r1, #70	@ 0x46
 800665a:	f000 f9dd 	bl	8006a18 <__assert_func>
 800665e:	490b      	ldr	r1, [pc, #44]	@ (800668c <srand+0x50>)
 8006660:	4b0b      	ldr	r3, [pc, #44]	@ (8006690 <srand+0x54>)
 8006662:	e9c0 1300 	strd	r1, r3, [r0]
 8006666:	4b0b      	ldr	r3, [pc, #44]	@ (8006694 <srand+0x58>)
 8006668:	6083      	str	r3, [r0, #8]
 800666a:	230b      	movs	r3, #11
 800666c:	8183      	strh	r3, [r0, #12]
 800666e:	2100      	movs	r1, #0
 8006670:	2001      	movs	r0, #1
 8006672:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006676:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006678:	2200      	movs	r2, #0
 800667a:	611c      	str	r4, [r3, #16]
 800667c:	615a      	str	r2, [r3, #20]
 800667e:	bd38      	pop	{r3, r4, r5, pc}
 8006680:	200032c0 	.word	0x200032c0
 8006684:	080080b0 	.word	0x080080b0
 8006688:	080080c7 	.word	0x080080c7
 800668c:	abcd330e 	.word	0xabcd330e
 8006690:	e66d1234 	.word	0xe66d1234
 8006694:	0005deec 	.word	0x0005deec

08006698 <rand>:
 8006698:	4b16      	ldr	r3, [pc, #88]	@ (80066f4 <rand+0x5c>)
 800669a:	b510      	push	{r4, lr}
 800669c:	681c      	ldr	r4, [r3, #0]
 800669e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80066a0:	b9b3      	cbnz	r3, 80066d0 <rand+0x38>
 80066a2:	2018      	movs	r0, #24
 80066a4:	f000 fa20 	bl	8006ae8 <malloc>
 80066a8:	4602      	mov	r2, r0
 80066aa:	6320      	str	r0, [r4, #48]	@ 0x30
 80066ac:	b920      	cbnz	r0, 80066b8 <rand+0x20>
 80066ae:	4b12      	ldr	r3, [pc, #72]	@ (80066f8 <rand+0x60>)
 80066b0:	4812      	ldr	r0, [pc, #72]	@ (80066fc <rand+0x64>)
 80066b2:	2152      	movs	r1, #82	@ 0x52
 80066b4:	f000 f9b0 	bl	8006a18 <__assert_func>
 80066b8:	4911      	ldr	r1, [pc, #68]	@ (8006700 <rand+0x68>)
 80066ba:	4b12      	ldr	r3, [pc, #72]	@ (8006704 <rand+0x6c>)
 80066bc:	e9c0 1300 	strd	r1, r3, [r0]
 80066c0:	4b11      	ldr	r3, [pc, #68]	@ (8006708 <rand+0x70>)
 80066c2:	6083      	str	r3, [r0, #8]
 80066c4:	230b      	movs	r3, #11
 80066c6:	8183      	strh	r3, [r0, #12]
 80066c8:	2100      	movs	r1, #0
 80066ca:	2001      	movs	r0, #1
 80066cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80066d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80066d2:	480e      	ldr	r0, [pc, #56]	@ (800670c <rand+0x74>)
 80066d4:	690b      	ldr	r3, [r1, #16]
 80066d6:	694c      	ldr	r4, [r1, #20]
 80066d8:	4a0d      	ldr	r2, [pc, #52]	@ (8006710 <rand+0x78>)
 80066da:	4358      	muls	r0, r3
 80066dc:	fb02 0004 	mla	r0, r2, r4, r0
 80066e0:	fba3 3202 	umull	r3, r2, r3, r2
 80066e4:	3301      	adds	r3, #1
 80066e6:	eb40 0002 	adc.w	r0, r0, r2
 80066ea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80066ee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80066f2:	bd10      	pop	{r4, pc}
 80066f4:	200032c0 	.word	0x200032c0
 80066f8:	080080b0 	.word	0x080080b0
 80066fc:	080080c7 	.word	0x080080c7
 8006700:	abcd330e 	.word	0xabcd330e
 8006704:	e66d1234 	.word	0xe66d1234
 8006708:	0005deec 	.word	0x0005deec
 800670c:	5851f42d 	.word	0x5851f42d
 8006710:	4c957f2d 	.word	0x4c957f2d

08006714 <std>:
 8006714:	2300      	movs	r3, #0
 8006716:	b510      	push	{r4, lr}
 8006718:	4604      	mov	r4, r0
 800671a:	e9c0 3300 	strd	r3, r3, [r0]
 800671e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006722:	6083      	str	r3, [r0, #8]
 8006724:	8181      	strh	r1, [r0, #12]
 8006726:	6643      	str	r3, [r0, #100]	@ 0x64
 8006728:	81c2      	strh	r2, [r0, #14]
 800672a:	6183      	str	r3, [r0, #24]
 800672c:	4619      	mov	r1, r3
 800672e:	2208      	movs	r2, #8
 8006730:	305c      	adds	r0, #92	@ 0x5c
 8006732:	f000 f8f4 	bl	800691e <memset>
 8006736:	4b0d      	ldr	r3, [pc, #52]	@ (800676c <std+0x58>)
 8006738:	6263      	str	r3, [r4, #36]	@ 0x24
 800673a:	4b0d      	ldr	r3, [pc, #52]	@ (8006770 <std+0x5c>)
 800673c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800673e:	4b0d      	ldr	r3, [pc, #52]	@ (8006774 <std+0x60>)
 8006740:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006742:	4b0d      	ldr	r3, [pc, #52]	@ (8006778 <std+0x64>)
 8006744:	6323      	str	r3, [r4, #48]	@ 0x30
 8006746:	4b0d      	ldr	r3, [pc, #52]	@ (800677c <std+0x68>)
 8006748:	6224      	str	r4, [r4, #32]
 800674a:	429c      	cmp	r4, r3
 800674c:	d006      	beq.n	800675c <std+0x48>
 800674e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006752:	4294      	cmp	r4, r2
 8006754:	d002      	beq.n	800675c <std+0x48>
 8006756:	33d0      	adds	r3, #208	@ 0xd0
 8006758:	429c      	cmp	r4, r3
 800675a:	d105      	bne.n	8006768 <std+0x54>
 800675c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006764:	f000 b954 	b.w	8006a10 <__retarget_lock_init_recursive>
 8006768:	bd10      	pop	{r4, pc}
 800676a:	bf00      	nop
 800676c:	08006899 	.word	0x08006899
 8006770:	080068bb 	.word	0x080068bb
 8006774:	080068f3 	.word	0x080068f3
 8006778:	08006917 	.word	0x08006917
 800677c:	200035d8 	.word	0x200035d8

08006780 <stdio_exit_handler>:
 8006780:	4a02      	ldr	r2, [pc, #8]	@ (800678c <stdio_exit_handler+0xc>)
 8006782:	4903      	ldr	r1, [pc, #12]	@ (8006790 <stdio_exit_handler+0x10>)
 8006784:	4803      	ldr	r0, [pc, #12]	@ (8006794 <stdio_exit_handler+0x14>)
 8006786:	f000 b869 	b.w	800685c <_fwalk_sglue>
 800678a:	bf00      	nop
 800678c:	200032b4 	.word	0x200032b4
 8006790:	08006d5d 	.word	0x08006d5d
 8006794:	200032c4 	.word	0x200032c4

08006798 <cleanup_stdio>:
 8006798:	6841      	ldr	r1, [r0, #4]
 800679a:	4b0c      	ldr	r3, [pc, #48]	@ (80067cc <cleanup_stdio+0x34>)
 800679c:	4299      	cmp	r1, r3
 800679e:	b510      	push	{r4, lr}
 80067a0:	4604      	mov	r4, r0
 80067a2:	d001      	beq.n	80067a8 <cleanup_stdio+0x10>
 80067a4:	f000 fada 	bl	8006d5c <_fflush_r>
 80067a8:	68a1      	ldr	r1, [r4, #8]
 80067aa:	4b09      	ldr	r3, [pc, #36]	@ (80067d0 <cleanup_stdio+0x38>)
 80067ac:	4299      	cmp	r1, r3
 80067ae:	d002      	beq.n	80067b6 <cleanup_stdio+0x1e>
 80067b0:	4620      	mov	r0, r4
 80067b2:	f000 fad3 	bl	8006d5c <_fflush_r>
 80067b6:	68e1      	ldr	r1, [r4, #12]
 80067b8:	4b06      	ldr	r3, [pc, #24]	@ (80067d4 <cleanup_stdio+0x3c>)
 80067ba:	4299      	cmp	r1, r3
 80067bc:	d004      	beq.n	80067c8 <cleanup_stdio+0x30>
 80067be:	4620      	mov	r0, r4
 80067c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067c4:	f000 baca 	b.w	8006d5c <_fflush_r>
 80067c8:	bd10      	pop	{r4, pc}
 80067ca:	bf00      	nop
 80067cc:	200035d8 	.word	0x200035d8
 80067d0:	20003640 	.word	0x20003640
 80067d4:	200036a8 	.word	0x200036a8

080067d8 <global_stdio_init.part.0>:
 80067d8:	b510      	push	{r4, lr}
 80067da:	4b0b      	ldr	r3, [pc, #44]	@ (8006808 <global_stdio_init.part.0+0x30>)
 80067dc:	4c0b      	ldr	r4, [pc, #44]	@ (800680c <global_stdio_init.part.0+0x34>)
 80067de:	4a0c      	ldr	r2, [pc, #48]	@ (8006810 <global_stdio_init.part.0+0x38>)
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	4620      	mov	r0, r4
 80067e4:	2200      	movs	r2, #0
 80067e6:	2104      	movs	r1, #4
 80067e8:	f7ff ff94 	bl	8006714 <std>
 80067ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067f0:	2201      	movs	r2, #1
 80067f2:	2109      	movs	r1, #9
 80067f4:	f7ff ff8e 	bl	8006714 <std>
 80067f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067fc:	2202      	movs	r2, #2
 80067fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006802:	2112      	movs	r1, #18
 8006804:	f7ff bf86 	b.w	8006714 <std>
 8006808:	20003710 	.word	0x20003710
 800680c:	200035d8 	.word	0x200035d8
 8006810:	08006781 	.word	0x08006781

08006814 <__sfp_lock_acquire>:
 8006814:	4801      	ldr	r0, [pc, #4]	@ (800681c <__sfp_lock_acquire+0x8>)
 8006816:	f000 b8fc 	b.w	8006a12 <__retarget_lock_acquire_recursive>
 800681a:	bf00      	nop
 800681c:	20003719 	.word	0x20003719

08006820 <__sfp_lock_release>:
 8006820:	4801      	ldr	r0, [pc, #4]	@ (8006828 <__sfp_lock_release+0x8>)
 8006822:	f000 b8f7 	b.w	8006a14 <__retarget_lock_release_recursive>
 8006826:	bf00      	nop
 8006828:	20003719 	.word	0x20003719

0800682c <__sinit>:
 800682c:	b510      	push	{r4, lr}
 800682e:	4604      	mov	r4, r0
 8006830:	f7ff fff0 	bl	8006814 <__sfp_lock_acquire>
 8006834:	6a23      	ldr	r3, [r4, #32]
 8006836:	b11b      	cbz	r3, 8006840 <__sinit+0x14>
 8006838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800683c:	f7ff bff0 	b.w	8006820 <__sfp_lock_release>
 8006840:	4b04      	ldr	r3, [pc, #16]	@ (8006854 <__sinit+0x28>)
 8006842:	6223      	str	r3, [r4, #32]
 8006844:	4b04      	ldr	r3, [pc, #16]	@ (8006858 <__sinit+0x2c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1f5      	bne.n	8006838 <__sinit+0xc>
 800684c:	f7ff ffc4 	bl	80067d8 <global_stdio_init.part.0>
 8006850:	e7f2      	b.n	8006838 <__sinit+0xc>
 8006852:	bf00      	nop
 8006854:	08006799 	.word	0x08006799
 8006858:	20003710 	.word	0x20003710

0800685c <_fwalk_sglue>:
 800685c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006860:	4607      	mov	r7, r0
 8006862:	4688      	mov	r8, r1
 8006864:	4614      	mov	r4, r2
 8006866:	2600      	movs	r6, #0
 8006868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800686c:	f1b9 0901 	subs.w	r9, r9, #1
 8006870:	d505      	bpl.n	800687e <_fwalk_sglue+0x22>
 8006872:	6824      	ldr	r4, [r4, #0]
 8006874:	2c00      	cmp	r4, #0
 8006876:	d1f7      	bne.n	8006868 <_fwalk_sglue+0xc>
 8006878:	4630      	mov	r0, r6
 800687a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800687e:	89ab      	ldrh	r3, [r5, #12]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d907      	bls.n	8006894 <_fwalk_sglue+0x38>
 8006884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006888:	3301      	adds	r3, #1
 800688a:	d003      	beq.n	8006894 <_fwalk_sglue+0x38>
 800688c:	4629      	mov	r1, r5
 800688e:	4638      	mov	r0, r7
 8006890:	47c0      	blx	r8
 8006892:	4306      	orrs	r6, r0
 8006894:	3568      	adds	r5, #104	@ 0x68
 8006896:	e7e9      	b.n	800686c <_fwalk_sglue+0x10>

08006898 <__sread>:
 8006898:	b510      	push	{r4, lr}
 800689a:	460c      	mov	r4, r1
 800689c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a0:	f000 f868 	bl	8006974 <_read_r>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	bfab      	itete	ge
 80068a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068aa:	89a3      	ldrhlt	r3, [r4, #12]
 80068ac:	181b      	addge	r3, r3, r0
 80068ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068b2:	bfac      	ite	ge
 80068b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068b6:	81a3      	strhlt	r3, [r4, #12]
 80068b8:	bd10      	pop	{r4, pc}

080068ba <__swrite>:
 80068ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068be:	461f      	mov	r7, r3
 80068c0:	898b      	ldrh	r3, [r1, #12]
 80068c2:	05db      	lsls	r3, r3, #23
 80068c4:	4605      	mov	r5, r0
 80068c6:	460c      	mov	r4, r1
 80068c8:	4616      	mov	r6, r2
 80068ca:	d505      	bpl.n	80068d8 <__swrite+0x1e>
 80068cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d0:	2302      	movs	r3, #2
 80068d2:	2200      	movs	r2, #0
 80068d4:	f000 f83c 	bl	8006950 <_lseek_r>
 80068d8:	89a3      	ldrh	r3, [r4, #12]
 80068da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068e2:	81a3      	strh	r3, [r4, #12]
 80068e4:	4632      	mov	r2, r6
 80068e6:	463b      	mov	r3, r7
 80068e8:	4628      	mov	r0, r5
 80068ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ee:	f000 b853 	b.w	8006998 <_write_r>

080068f2 <__sseek>:
 80068f2:	b510      	push	{r4, lr}
 80068f4:	460c      	mov	r4, r1
 80068f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068fa:	f000 f829 	bl	8006950 <_lseek_r>
 80068fe:	1c43      	adds	r3, r0, #1
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	bf15      	itete	ne
 8006904:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006906:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800690a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800690e:	81a3      	strheq	r3, [r4, #12]
 8006910:	bf18      	it	ne
 8006912:	81a3      	strhne	r3, [r4, #12]
 8006914:	bd10      	pop	{r4, pc}

08006916 <__sclose>:
 8006916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800691a:	f000 b809 	b.w	8006930 <_close_r>

0800691e <memset>:
 800691e:	4402      	add	r2, r0
 8006920:	4603      	mov	r3, r0
 8006922:	4293      	cmp	r3, r2
 8006924:	d100      	bne.n	8006928 <memset+0xa>
 8006926:	4770      	bx	lr
 8006928:	f803 1b01 	strb.w	r1, [r3], #1
 800692c:	e7f9      	b.n	8006922 <memset+0x4>
	...

08006930 <_close_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4d06      	ldr	r5, [pc, #24]	@ (800694c <_close_r+0x1c>)
 8006934:	2300      	movs	r3, #0
 8006936:	4604      	mov	r4, r0
 8006938:	4608      	mov	r0, r1
 800693a:	602b      	str	r3, [r5, #0]
 800693c:	f7fb f8ee 	bl	8001b1c <_close>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	d102      	bne.n	800694a <_close_r+0x1a>
 8006944:	682b      	ldr	r3, [r5, #0]
 8006946:	b103      	cbz	r3, 800694a <_close_r+0x1a>
 8006948:	6023      	str	r3, [r4, #0]
 800694a:	bd38      	pop	{r3, r4, r5, pc}
 800694c:	20003714 	.word	0x20003714

08006950 <_lseek_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	4d07      	ldr	r5, [pc, #28]	@ (8006970 <_lseek_r+0x20>)
 8006954:	4604      	mov	r4, r0
 8006956:	4608      	mov	r0, r1
 8006958:	4611      	mov	r1, r2
 800695a:	2200      	movs	r2, #0
 800695c:	602a      	str	r2, [r5, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	f7fb f903 	bl	8001b6a <_lseek>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d102      	bne.n	800696e <_lseek_r+0x1e>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	b103      	cbz	r3, 800696e <_lseek_r+0x1e>
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	20003714 	.word	0x20003714

08006974 <_read_r>:
 8006974:	b538      	push	{r3, r4, r5, lr}
 8006976:	4d07      	ldr	r5, [pc, #28]	@ (8006994 <_read_r+0x20>)
 8006978:	4604      	mov	r4, r0
 800697a:	4608      	mov	r0, r1
 800697c:	4611      	mov	r1, r2
 800697e:	2200      	movs	r2, #0
 8006980:	602a      	str	r2, [r5, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	f7fb f891 	bl	8001aaa <_read>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	d102      	bne.n	8006992 <_read_r+0x1e>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	b103      	cbz	r3, 8006992 <_read_r+0x1e>
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	bd38      	pop	{r3, r4, r5, pc}
 8006994:	20003714 	.word	0x20003714

08006998 <_write_r>:
 8006998:	b538      	push	{r3, r4, r5, lr}
 800699a:	4d07      	ldr	r5, [pc, #28]	@ (80069b8 <_write_r+0x20>)
 800699c:	4604      	mov	r4, r0
 800699e:	4608      	mov	r0, r1
 80069a0:	4611      	mov	r1, r2
 80069a2:	2200      	movs	r2, #0
 80069a4:	602a      	str	r2, [r5, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	f7fb f89c 	bl	8001ae4 <_write>
 80069ac:	1c43      	adds	r3, r0, #1
 80069ae:	d102      	bne.n	80069b6 <_write_r+0x1e>
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	b103      	cbz	r3, 80069b6 <_write_r+0x1e>
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	bd38      	pop	{r3, r4, r5, pc}
 80069b8:	20003714 	.word	0x20003714

080069bc <__errno>:
 80069bc:	4b01      	ldr	r3, [pc, #4]	@ (80069c4 <__errno+0x8>)
 80069be:	6818      	ldr	r0, [r3, #0]
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	200032c0 	.word	0x200032c0

080069c8 <__libc_init_array>:
 80069c8:	b570      	push	{r4, r5, r6, lr}
 80069ca:	4d0d      	ldr	r5, [pc, #52]	@ (8006a00 <__libc_init_array+0x38>)
 80069cc:	4c0d      	ldr	r4, [pc, #52]	@ (8006a04 <__libc_init_array+0x3c>)
 80069ce:	1b64      	subs	r4, r4, r5
 80069d0:	10a4      	asrs	r4, r4, #2
 80069d2:	2600      	movs	r6, #0
 80069d4:	42a6      	cmp	r6, r4
 80069d6:	d109      	bne.n	80069ec <__libc_init_array+0x24>
 80069d8:	4d0b      	ldr	r5, [pc, #44]	@ (8006a08 <__libc_init_array+0x40>)
 80069da:	4c0c      	ldr	r4, [pc, #48]	@ (8006a0c <__libc_init_array+0x44>)
 80069dc:	f000 fe38 	bl	8007650 <_init>
 80069e0:	1b64      	subs	r4, r4, r5
 80069e2:	10a4      	asrs	r4, r4, #2
 80069e4:	2600      	movs	r6, #0
 80069e6:	42a6      	cmp	r6, r4
 80069e8:	d105      	bne.n	80069f6 <__libc_init_array+0x2e>
 80069ea:	bd70      	pop	{r4, r5, r6, pc}
 80069ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f0:	4798      	blx	r3
 80069f2:	3601      	adds	r6, #1
 80069f4:	e7ee      	b.n	80069d4 <__libc_init_array+0xc>
 80069f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069fa:	4798      	blx	r3
 80069fc:	3601      	adds	r6, #1
 80069fe:	e7f2      	b.n	80069e6 <__libc_init_array+0x1e>
 8006a00:	08008198 	.word	0x08008198
 8006a04:	08008198 	.word	0x08008198
 8006a08:	08008198 	.word	0x08008198
 8006a0c:	0800819c 	.word	0x0800819c

08006a10 <__retarget_lock_init_recursive>:
 8006a10:	4770      	bx	lr

08006a12 <__retarget_lock_acquire_recursive>:
 8006a12:	4770      	bx	lr

08006a14 <__retarget_lock_release_recursive>:
 8006a14:	4770      	bx	lr
	...

08006a18 <__assert_func>:
 8006a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a1a:	4614      	mov	r4, r2
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	4b09      	ldr	r3, [pc, #36]	@ (8006a44 <__assert_func+0x2c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4605      	mov	r5, r0
 8006a24:	68d8      	ldr	r0, [r3, #12]
 8006a26:	b14c      	cbz	r4, 8006a3c <__assert_func+0x24>
 8006a28:	4b07      	ldr	r3, [pc, #28]	@ (8006a48 <__assert_func+0x30>)
 8006a2a:	9100      	str	r1, [sp, #0]
 8006a2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a30:	4906      	ldr	r1, [pc, #24]	@ (8006a4c <__assert_func+0x34>)
 8006a32:	462b      	mov	r3, r5
 8006a34:	f000 f9ba 	bl	8006dac <fiprintf>
 8006a38:	f000 f9da 	bl	8006df0 <abort>
 8006a3c:	4b04      	ldr	r3, [pc, #16]	@ (8006a50 <__assert_func+0x38>)
 8006a3e:	461c      	mov	r4, r3
 8006a40:	e7f3      	b.n	8006a2a <__assert_func+0x12>
 8006a42:	bf00      	nop
 8006a44:	200032c0 	.word	0x200032c0
 8006a48:	0800811f 	.word	0x0800811f
 8006a4c:	0800812c 	.word	0x0800812c
 8006a50:	0800815a 	.word	0x0800815a

08006a54 <_free_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	4605      	mov	r5, r0
 8006a58:	2900      	cmp	r1, #0
 8006a5a:	d041      	beq.n	8006ae0 <_free_r+0x8c>
 8006a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a60:	1f0c      	subs	r4, r1, #4
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	bfb8      	it	lt
 8006a66:	18e4      	addlt	r4, r4, r3
 8006a68:	f000 f8e8 	bl	8006c3c <__malloc_lock>
 8006a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae4 <_free_r+0x90>)
 8006a6e:	6813      	ldr	r3, [r2, #0]
 8006a70:	b933      	cbnz	r3, 8006a80 <_free_r+0x2c>
 8006a72:	6063      	str	r3, [r4, #4]
 8006a74:	6014      	str	r4, [r2, #0]
 8006a76:	4628      	mov	r0, r5
 8006a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a7c:	f000 b8e4 	b.w	8006c48 <__malloc_unlock>
 8006a80:	42a3      	cmp	r3, r4
 8006a82:	d908      	bls.n	8006a96 <_free_r+0x42>
 8006a84:	6820      	ldr	r0, [r4, #0]
 8006a86:	1821      	adds	r1, r4, r0
 8006a88:	428b      	cmp	r3, r1
 8006a8a:	bf01      	itttt	eq
 8006a8c:	6819      	ldreq	r1, [r3, #0]
 8006a8e:	685b      	ldreq	r3, [r3, #4]
 8006a90:	1809      	addeq	r1, r1, r0
 8006a92:	6021      	streq	r1, [r4, #0]
 8006a94:	e7ed      	b.n	8006a72 <_free_r+0x1e>
 8006a96:	461a      	mov	r2, r3
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	b10b      	cbz	r3, 8006aa0 <_free_r+0x4c>
 8006a9c:	42a3      	cmp	r3, r4
 8006a9e:	d9fa      	bls.n	8006a96 <_free_r+0x42>
 8006aa0:	6811      	ldr	r1, [r2, #0]
 8006aa2:	1850      	adds	r0, r2, r1
 8006aa4:	42a0      	cmp	r0, r4
 8006aa6:	d10b      	bne.n	8006ac0 <_free_r+0x6c>
 8006aa8:	6820      	ldr	r0, [r4, #0]
 8006aaa:	4401      	add	r1, r0
 8006aac:	1850      	adds	r0, r2, r1
 8006aae:	4283      	cmp	r3, r0
 8006ab0:	6011      	str	r1, [r2, #0]
 8006ab2:	d1e0      	bne.n	8006a76 <_free_r+0x22>
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	6053      	str	r3, [r2, #4]
 8006aba:	4408      	add	r0, r1
 8006abc:	6010      	str	r0, [r2, #0]
 8006abe:	e7da      	b.n	8006a76 <_free_r+0x22>
 8006ac0:	d902      	bls.n	8006ac8 <_free_r+0x74>
 8006ac2:	230c      	movs	r3, #12
 8006ac4:	602b      	str	r3, [r5, #0]
 8006ac6:	e7d6      	b.n	8006a76 <_free_r+0x22>
 8006ac8:	6820      	ldr	r0, [r4, #0]
 8006aca:	1821      	adds	r1, r4, r0
 8006acc:	428b      	cmp	r3, r1
 8006ace:	bf04      	itt	eq
 8006ad0:	6819      	ldreq	r1, [r3, #0]
 8006ad2:	685b      	ldreq	r3, [r3, #4]
 8006ad4:	6063      	str	r3, [r4, #4]
 8006ad6:	bf04      	itt	eq
 8006ad8:	1809      	addeq	r1, r1, r0
 8006ada:	6021      	streq	r1, [r4, #0]
 8006adc:	6054      	str	r4, [r2, #4]
 8006ade:	e7ca      	b.n	8006a76 <_free_r+0x22>
 8006ae0:	bd38      	pop	{r3, r4, r5, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20003720 	.word	0x20003720

08006ae8 <malloc>:
 8006ae8:	4b02      	ldr	r3, [pc, #8]	@ (8006af4 <malloc+0xc>)
 8006aea:	4601      	mov	r1, r0
 8006aec:	6818      	ldr	r0, [r3, #0]
 8006aee:	f000 b825 	b.w	8006b3c <_malloc_r>
 8006af2:	bf00      	nop
 8006af4:	200032c0 	.word	0x200032c0

08006af8 <sbrk_aligned>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	4e0f      	ldr	r6, [pc, #60]	@ (8006b38 <sbrk_aligned+0x40>)
 8006afc:	460c      	mov	r4, r1
 8006afe:	6831      	ldr	r1, [r6, #0]
 8006b00:	4605      	mov	r5, r0
 8006b02:	b911      	cbnz	r1, 8006b0a <sbrk_aligned+0x12>
 8006b04:	f000 f964 	bl	8006dd0 <_sbrk_r>
 8006b08:	6030      	str	r0, [r6, #0]
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	f000 f95f 	bl	8006dd0 <_sbrk_r>
 8006b12:	1c43      	adds	r3, r0, #1
 8006b14:	d103      	bne.n	8006b1e <sbrk_aligned+0x26>
 8006b16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	bd70      	pop	{r4, r5, r6, pc}
 8006b1e:	1cc4      	adds	r4, r0, #3
 8006b20:	f024 0403 	bic.w	r4, r4, #3
 8006b24:	42a0      	cmp	r0, r4
 8006b26:	d0f8      	beq.n	8006b1a <sbrk_aligned+0x22>
 8006b28:	1a21      	subs	r1, r4, r0
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f000 f950 	bl	8006dd0 <_sbrk_r>
 8006b30:	3001      	adds	r0, #1
 8006b32:	d1f2      	bne.n	8006b1a <sbrk_aligned+0x22>
 8006b34:	e7ef      	b.n	8006b16 <sbrk_aligned+0x1e>
 8006b36:	bf00      	nop
 8006b38:	2000371c 	.word	0x2000371c

08006b3c <_malloc_r>:
 8006b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b40:	1ccd      	adds	r5, r1, #3
 8006b42:	f025 0503 	bic.w	r5, r5, #3
 8006b46:	3508      	adds	r5, #8
 8006b48:	2d0c      	cmp	r5, #12
 8006b4a:	bf38      	it	cc
 8006b4c:	250c      	movcc	r5, #12
 8006b4e:	2d00      	cmp	r5, #0
 8006b50:	4606      	mov	r6, r0
 8006b52:	db01      	blt.n	8006b58 <_malloc_r+0x1c>
 8006b54:	42a9      	cmp	r1, r5
 8006b56:	d904      	bls.n	8006b62 <_malloc_r+0x26>
 8006b58:	230c      	movs	r3, #12
 8006b5a:	6033      	str	r3, [r6, #0]
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c38 <_malloc_r+0xfc>
 8006b66:	f000 f869 	bl	8006c3c <__malloc_lock>
 8006b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b6e:	461c      	mov	r4, r3
 8006b70:	bb44      	cbnz	r4, 8006bc4 <_malloc_r+0x88>
 8006b72:	4629      	mov	r1, r5
 8006b74:	4630      	mov	r0, r6
 8006b76:	f7ff ffbf 	bl	8006af8 <sbrk_aligned>
 8006b7a:	1c43      	adds	r3, r0, #1
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	d158      	bne.n	8006c32 <_malloc_r+0xf6>
 8006b80:	f8d8 4000 	ldr.w	r4, [r8]
 8006b84:	4627      	mov	r7, r4
 8006b86:	2f00      	cmp	r7, #0
 8006b88:	d143      	bne.n	8006c12 <_malloc_r+0xd6>
 8006b8a:	2c00      	cmp	r4, #0
 8006b8c:	d04b      	beq.n	8006c26 <_malloc_r+0xea>
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	4639      	mov	r1, r7
 8006b92:	4630      	mov	r0, r6
 8006b94:	eb04 0903 	add.w	r9, r4, r3
 8006b98:	f000 f91a 	bl	8006dd0 <_sbrk_r>
 8006b9c:	4581      	cmp	r9, r0
 8006b9e:	d142      	bne.n	8006c26 <_malloc_r+0xea>
 8006ba0:	6821      	ldr	r1, [r4, #0]
 8006ba2:	1a6d      	subs	r5, r5, r1
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	f7ff ffa6 	bl	8006af8 <sbrk_aligned>
 8006bac:	3001      	adds	r0, #1
 8006bae:	d03a      	beq.n	8006c26 <_malloc_r+0xea>
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	442b      	add	r3, r5
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	bb62      	cbnz	r2, 8006c18 <_malloc_r+0xdc>
 8006bbe:	f8c8 7000 	str.w	r7, [r8]
 8006bc2:	e00f      	b.n	8006be4 <_malloc_r+0xa8>
 8006bc4:	6822      	ldr	r2, [r4, #0]
 8006bc6:	1b52      	subs	r2, r2, r5
 8006bc8:	d420      	bmi.n	8006c0c <_malloc_r+0xd0>
 8006bca:	2a0b      	cmp	r2, #11
 8006bcc:	d917      	bls.n	8006bfe <_malloc_r+0xc2>
 8006bce:	1961      	adds	r1, r4, r5
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	6025      	str	r5, [r4, #0]
 8006bd4:	bf18      	it	ne
 8006bd6:	6059      	strne	r1, [r3, #4]
 8006bd8:	6863      	ldr	r3, [r4, #4]
 8006bda:	bf08      	it	eq
 8006bdc:	f8c8 1000 	streq.w	r1, [r8]
 8006be0:	5162      	str	r2, [r4, r5]
 8006be2:	604b      	str	r3, [r1, #4]
 8006be4:	4630      	mov	r0, r6
 8006be6:	f000 f82f 	bl	8006c48 <__malloc_unlock>
 8006bea:	f104 000b 	add.w	r0, r4, #11
 8006bee:	1d23      	adds	r3, r4, #4
 8006bf0:	f020 0007 	bic.w	r0, r0, #7
 8006bf4:	1ac2      	subs	r2, r0, r3
 8006bf6:	bf1c      	itt	ne
 8006bf8:	1a1b      	subne	r3, r3, r0
 8006bfa:	50a3      	strne	r3, [r4, r2]
 8006bfc:	e7af      	b.n	8006b5e <_malloc_r+0x22>
 8006bfe:	6862      	ldr	r2, [r4, #4]
 8006c00:	42a3      	cmp	r3, r4
 8006c02:	bf0c      	ite	eq
 8006c04:	f8c8 2000 	streq.w	r2, [r8]
 8006c08:	605a      	strne	r2, [r3, #4]
 8006c0a:	e7eb      	b.n	8006be4 <_malloc_r+0xa8>
 8006c0c:	4623      	mov	r3, r4
 8006c0e:	6864      	ldr	r4, [r4, #4]
 8006c10:	e7ae      	b.n	8006b70 <_malloc_r+0x34>
 8006c12:	463c      	mov	r4, r7
 8006c14:	687f      	ldr	r7, [r7, #4]
 8006c16:	e7b6      	b.n	8006b86 <_malloc_r+0x4a>
 8006c18:	461a      	mov	r2, r3
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	d1fb      	bne.n	8006c18 <_malloc_r+0xdc>
 8006c20:	2300      	movs	r3, #0
 8006c22:	6053      	str	r3, [r2, #4]
 8006c24:	e7de      	b.n	8006be4 <_malloc_r+0xa8>
 8006c26:	230c      	movs	r3, #12
 8006c28:	6033      	str	r3, [r6, #0]
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	f000 f80c 	bl	8006c48 <__malloc_unlock>
 8006c30:	e794      	b.n	8006b5c <_malloc_r+0x20>
 8006c32:	6005      	str	r5, [r0, #0]
 8006c34:	e7d6      	b.n	8006be4 <_malloc_r+0xa8>
 8006c36:	bf00      	nop
 8006c38:	20003720 	.word	0x20003720

08006c3c <__malloc_lock>:
 8006c3c:	4801      	ldr	r0, [pc, #4]	@ (8006c44 <__malloc_lock+0x8>)
 8006c3e:	f7ff bee8 	b.w	8006a12 <__retarget_lock_acquire_recursive>
 8006c42:	bf00      	nop
 8006c44:	20003718 	.word	0x20003718

08006c48 <__malloc_unlock>:
 8006c48:	4801      	ldr	r0, [pc, #4]	@ (8006c50 <__malloc_unlock+0x8>)
 8006c4a:	f7ff bee3 	b.w	8006a14 <__retarget_lock_release_recursive>
 8006c4e:	bf00      	nop
 8006c50:	20003718 	.word	0x20003718

08006c54 <__sflush_r>:
 8006c54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5c:	0716      	lsls	r6, r2, #28
 8006c5e:	4605      	mov	r5, r0
 8006c60:	460c      	mov	r4, r1
 8006c62:	d454      	bmi.n	8006d0e <__sflush_r+0xba>
 8006c64:	684b      	ldr	r3, [r1, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	dc02      	bgt.n	8006c70 <__sflush_r+0x1c>
 8006c6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	dd48      	ble.n	8006d02 <__sflush_r+0xae>
 8006c70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c72:	2e00      	cmp	r6, #0
 8006c74:	d045      	beq.n	8006d02 <__sflush_r+0xae>
 8006c76:	2300      	movs	r3, #0
 8006c78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c7c:	682f      	ldr	r7, [r5, #0]
 8006c7e:	6a21      	ldr	r1, [r4, #32]
 8006c80:	602b      	str	r3, [r5, #0]
 8006c82:	d030      	beq.n	8006ce6 <__sflush_r+0x92>
 8006c84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c86:	89a3      	ldrh	r3, [r4, #12]
 8006c88:	0759      	lsls	r1, r3, #29
 8006c8a:	d505      	bpl.n	8006c98 <__sflush_r+0x44>
 8006c8c:	6863      	ldr	r3, [r4, #4]
 8006c8e:	1ad2      	subs	r2, r2, r3
 8006c90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c92:	b10b      	cbz	r3, 8006c98 <__sflush_r+0x44>
 8006c94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c96:	1ad2      	subs	r2, r2, r3
 8006c98:	2300      	movs	r3, #0
 8006c9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c9c:	6a21      	ldr	r1, [r4, #32]
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	47b0      	blx	r6
 8006ca2:	1c43      	adds	r3, r0, #1
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	d106      	bne.n	8006cb6 <__sflush_r+0x62>
 8006ca8:	6829      	ldr	r1, [r5, #0]
 8006caa:	291d      	cmp	r1, #29
 8006cac:	d82b      	bhi.n	8006d06 <__sflush_r+0xb2>
 8006cae:	4a2a      	ldr	r2, [pc, #168]	@ (8006d58 <__sflush_r+0x104>)
 8006cb0:	40ca      	lsrs	r2, r1
 8006cb2:	07d6      	lsls	r6, r2, #31
 8006cb4:	d527      	bpl.n	8006d06 <__sflush_r+0xb2>
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	6062      	str	r2, [r4, #4]
 8006cba:	04d9      	lsls	r1, r3, #19
 8006cbc:	6922      	ldr	r2, [r4, #16]
 8006cbe:	6022      	str	r2, [r4, #0]
 8006cc0:	d504      	bpl.n	8006ccc <__sflush_r+0x78>
 8006cc2:	1c42      	adds	r2, r0, #1
 8006cc4:	d101      	bne.n	8006cca <__sflush_r+0x76>
 8006cc6:	682b      	ldr	r3, [r5, #0]
 8006cc8:	b903      	cbnz	r3, 8006ccc <__sflush_r+0x78>
 8006cca:	6560      	str	r0, [r4, #84]	@ 0x54
 8006ccc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cce:	602f      	str	r7, [r5, #0]
 8006cd0:	b1b9      	cbz	r1, 8006d02 <__sflush_r+0xae>
 8006cd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006cd6:	4299      	cmp	r1, r3
 8006cd8:	d002      	beq.n	8006ce0 <__sflush_r+0x8c>
 8006cda:	4628      	mov	r0, r5
 8006cdc:	f7ff feba 	bl	8006a54 <_free_r>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ce4:	e00d      	b.n	8006d02 <__sflush_r+0xae>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	4628      	mov	r0, r5
 8006cea:	47b0      	blx	r6
 8006cec:	4602      	mov	r2, r0
 8006cee:	1c50      	adds	r0, r2, #1
 8006cf0:	d1c9      	bne.n	8006c86 <__sflush_r+0x32>
 8006cf2:	682b      	ldr	r3, [r5, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0c6      	beq.n	8006c86 <__sflush_r+0x32>
 8006cf8:	2b1d      	cmp	r3, #29
 8006cfa:	d001      	beq.n	8006d00 <__sflush_r+0xac>
 8006cfc:	2b16      	cmp	r3, #22
 8006cfe:	d11e      	bne.n	8006d3e <__sflush_r+0xea>
 8006d00:	602f      	str	r7, [r5, #0]
 8006d02:	2000      	movs	r0, #0
 8006d04:	e022      	b.n	8006d4c <__sflush_r+0xf8>
 8006d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d0a:	b21b      	sxth	r3, r3
 8006d0c:	e01b      	b.n	8006d46 <__sflush_r+0xf2>
 8006d0e:	690f      	ldr	r7, [r1, #16]
 8006d10:	2f00      	cmp	r7, #0
 8006d12:	d0f6      	beq.n	8006d02 <__sflush_r+0xae>
 8006d14:	0793      	lsls	r3, r2, #30
 8006d16:	680e      	ldr	r6, [r1, #0]
 8006d18:	bf08      	it	eq
 8006d1a:	694b      	ldreq	r3, [r1, #20]
 8006d1c:	600f      	str	r7, [r1, #0]
 8006d1e:	bf18      	it	ne
 8006d20:	2300      	movne	r3, #0
 8006d22:	eba6 0807 	sub.w	r8, r6, r7
 8006d26:	608b      	str	r3, [r1, #8]
 8006d28:	f1b8 0f00 	cmp.w	r8, #0
 8006d2c:	dde9      	ble.n	8006d02 <__sflush_r+0xae>
 8006d2e:	6a21      	ldr	r1, [r4, #32]
 8006d30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006d32:	4643      	mov	r3, r8
 8006d34:	463a      	mov	r2, r7
 8006d36:	4628      	mov	r0, r5
 8006d38:	47b0      	blx	r6
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	dc08      	bgt.n	8006d50 <__sflush_r+0xfc>
 8006d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d46:	81a3      	strh	r3, [r4, #12]
 8006d48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d50:	4407      	add	r7, r0
 8006d52:	eba8 0800 	sub.w	r8, r8, r0
 8006d56:	e7e7      	b.n	8006d28 <__sflush_r+0xd4>
 8006d58:	20400001 	.word	0x20400001

08006d5c <_fflush_r>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	690b      	ldr	r3, [r1, #16]
 8006d60:	4605      	mov	r5, r0
 8006d62:	460c      	mov	r4, r1
 8006d64:	b913      	cbnz	r3, 8006d6c <_fflush_r+0x10>
 8006d66:	2500      	movs	r5, #0
 8006d68:	4628      	mov	r0, r5
 8006d6a:	bd38      	pop	{r3, r4, r5, pc}
 8006d6c:	b118      	cbz	r0, 8006d76 <_fflush_r+0x1a>
 8006d6e:	6a03      	ldr	r3, [r0, #32]
 8006d70:	b90b      	cbnz	r3, 8006d76 <_fflush_r+0x1a>
 8006d72:	f7ff fd5b 	bl	800682c <__sinit>
 8006d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0f3      	beq.n	8006d66 <_fflush_r+0xa>
 8006d7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d80:	07d0      	lsls	r0, r2, #31
 8006d82:	d404      	bmi.n	8006d8e <_fflush_r+0x32>
 8006d84:	0599      	lsls	r1, r3, #22
 8006d86:	d402      	bmi.n	8006d8e <_fflush_r+0x32>
 8006d88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d8a:	f7ff fe42 	bl	8006a12 <__retarget_lock_acquire_recursive>
 8006d8e:	4628      	mov	r0, r5
 8006d90:	4621      	mov	r1, r4
 8006d92:	f7ff ff5f 	bl	8006c54 <__sflush_r>
 8006d96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d98:	07da      	lsls	r2, r3, #31
 8006d9a:	4605      	mov	r5, r0
 8006d9c:	d4e4      	bmi.n	8006d68 <_fflush_r+0xc>
 8006d9e:	89a3      	ldrh	r3, [r4, #12]
 8006da0:	059b      	lsls	r3, r3, #22
 8006da2:	d4e1      	bmi.n	8006d68 <_fflush_r+0xc>
 8006da4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006da6:	f7ff fe35 	bl	8006a14 <__retarget_lock_release_recursive>
 8006daa:	e7dd      	b.n	8006d68 <_fflush_r+0xc>

08006dac <fiprintf>:
 8006dac:	b40e      	push	{r1, r2, r3}
 8006dae:	b503      	push	{r0, r1, lr}
 8006db0:	4601      	mov	r1, r0
 8006db2:	ab03      	add	r3, sp, #12
 8006db4:	4805      	ldr	r0, [pc, #20]	@ (8006dcc <fiprintf+0x20>)
 8006db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dba:	6800      	ldr	r0, [r0, #0]
 8006dbc:	9301      	str	r3, [sp, #4]
 8006dbe:	f000 f847 	bl	8006e50 <_vfiprintf_r>
 8006dc2:	b002      	add	sp, #8
 8006dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dc8:	b003      	add	sp, #12
 8006dca:	4770      	bx	lr
 8006dcc:	200032c0 	.word	0x200032c0

08006dd0 <_sbrk_r>:
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	4d06      	ldr	r5, [pc, #24]	@ (8006dec <_sbrk_r+0x1c>)
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	4608      	mov	r0, r1
 8006dda:	602b      	str	r3, [r5, #0]
 8006ddc:	f7fa fed2 	bl	8001b84 <_sbrk>
 8006de0:	1c43      	adds	r3, r0, #1
 8006de2:	d102      	bne.n	8006dea <_sbrk_r+0x1a>
 8006de4:	682b      	ldr	r3, [r5, #0]
 8006de6:	b103      	cbz	r3, 8006dea <_sbrk_r+0x1a>
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	bd38      	pop	{r3, r4, r5, pc}
 8006dec:	20003714 	.word	0x20003714

08006df0 <abort>:
 8006df0:	b508      	push	{r3, lr}
 8006df2:	2006      	movs	r0, #6
 8006df4:	f000 fb8c 	bl	8007510 <raise>
 8006df8:	2001      	movs	r0, #1
 8006dfa:	f7fa fe4b 	bl	8001a94 <_exit>

08006dfe <__sfputc_r>:
 8006dfe:	6893      	ldr	r3, [r2, #8]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	b410      	push	{r4}
 8006e06:	6093      	str	r3, [r2, #8]
 8006e08:	da08      	bge.n	8006e1c <__sfputc_r+0x1e>
 8006e0a:	6994      	ldr	r4, [r2, #24]
 8006e0c:	42a3      	cmp	r3, r4
 8006e0e:	db01      	blt.n	8006e14 <__sfputc_r+0x16>
 8006e10:	290a      	cmp	r1, #10
 8006e12:	d103      	bne.n	8006e1c <__sfputc_r+0x1e>
 8006e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e18:	f000 babe 	b.w	8007398 <__swbuf_r>
 8006e1c:	6813      	ldr	r3, [r2, #0]
 8006e1e:	1c58      	adds	r0, r3, #1
 8006e20:	6010      	str	r0, [r2, #0]
 8006e22:	7019      	strb	r1, [r3, #0]
 8006e24:	4608      	mov	r0, r1
 8006e26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <__sfputs_r>:
 8006e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2e:	4606      	mov	r6, r0
 8006e30:	460f      	mov	r7, r1
 8006e32:	4614      	mov	r4, r2
 8006e34:	18d5      	adds	r5, r2, r3
 8006e36:	42ac      	cmp	r4, r5
 8006e38:	d101      	bne.n	8006e3e <__sfputs_r+0x12>
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	e007      	b.n	8006e4e <__sfputs_r+0x22>
 8006e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e42:	463a      	mov	r2, r7
 8006e44:	4630      	mov	r0, r6
 8006e46:	f7ff ffda 	bl	8006dfe <__sfputc_r>
 8006e4a:	1c43      	adds	r3, r0, #1
 8006e4c:	d1f3      	bne.n	8006e36 <__sfputs_r+0xa>
 8006e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e50 <_vfiprintf_r>:
 8006e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e54:	460d      	mov	r5, r1
 8006e56:	b09d      	sub	sp, #116	@ 0x74
 8006e58:	4614      	mov	r4, r2
 8006e5a:	4698      	mov	r8, r3
 8006e5c:	4606      	mov	r6, r0
 8006e5e:	b118      	cbz	r0, 8006e68 <_vfiprintf_r+0x18>
 8006e60:	6a03      	ldr	r3, [r0, #32]
 8006e62:	b90b      	cbnz	r3, 8006e68 <_vfiprintf_r+0x18>
 8006e64:	f7ff fce2 	bl	800682c <__sinit>
 8006e68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e6a:	07d9      	lsls	r1, r3, #31
 8006e6c:	d405      	bmi.n	8006e7a <_vfiprintf_r+0x2a>
 8006e6e:	89ab      	ldrh	r3, [r5, #12]
 8006e70:	059a      	lsls	r2, r3, #22
 8006e72:	d402      	bmi.n	8006e7a <_vfiprintf_r+0x2a>
 8006e74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e76:	f7ff fdcc 	bl	8006a12 <__retarget_lock_acquire_recursive>
 8006e7a:	89ab      	ldrh	r3, [r5, #12]
 8006e7c:	071b      	lsls	r3, r3, #28
 8006e7e:	d501      	bpl.n	8006e84 <_vfiprintf_r+0x34>
 8006e80:	692b      	ldr	r3, [r5, #16]
 8006e82:	b99b      	cbnz	r3, 8006eac <_vfiprintf_r+0x5c>
 8006e84:	4629      	mov	r1, r5
 8006e86:	4630      	mov	r0, r6
 8006e88:	f000 fac4 	bl	8007414 <__swsetup_r>
 8006e8c:	b170      	cbz	r0, 8006eac <_vfiprintf_r+0x5c>
 8006e8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e90:	07dc      	lsls	r4, r3, #31
 8006e92:	d504      	bpl.n	8006e9e <_vfiprintf_r+0x4e>
 8006e94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e98:	b01d      	add	sp, #116	@ 0x74
 8006e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e9e:	89ab      	ldrh	r3, [r5, #12]
 8006ea0:	0598      	lsls	r0, r3, #22
 8006ea2:	d4f7      	bmi.n	8006e94 <_vfiprintf_r+0x44>
 8006ea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ea6:	f7ff fdb5 	bl	8006a14 <__retarget_lock_release_recursive>
 8006eaa:	e7f3      	b.n	8006e94 <_vfiprintf_r+0x44>
 8006eac:	2300      	movs	r3, #0
 8006eae:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eb0:	2320      	movs	r3, #32
 8006eb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006eb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eba:	2330      	movs	r3, #48	@ 0x30
 8006ebc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800706c <_vfiprintf_r+0x21c>
 8006ec0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ec4:	f04f 0901 	mov.w	r9, #1
 8006ec8:	4623      	mov	r3, r4
 8006eca:	469a      	mov	sl, r3
 8006ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ed0:	b10a      	cbz	r2, 8006ed6 <_vfiprintf_r+0x86>
 8006ed2:	2a25      	cmp	r2, #37	@ 0x25
 8006ed4:	d1f9      	bne.n	8006eca <_vfiprintf_r+0x7a>
 8006ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8006eda:	d00b      	beq.n	8006ef4 <_vfiprintf_r+0xa4>
 8006edc:	465b      	mov	r3, fp
 8006ede:	4622      	mov	r2, r4
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f7ff ffa2 	bl	8006e2c <__sfputs_r>
 8006ee8:	3001      	adds	r0, #1
 8006eea:	f000 80a7 	beq.w	800703c <_vfiprintf_r+0x1ec>
 8006eee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ef0:	445a      	add	r2, fp
 8006ef2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 809f 	beq.w	800703c <_vfiprintf_r+0x1ec>
 8006efe:	2300      	movs	r3, #0
 8006f00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f08:	f10a 0a01 	add.w	sl, sl, #1
 8006f0c:	9304      	str	r3, [sp, #16]
 8006f0e:	9307      	str	r3, [sp, #28]
 8006f10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f14:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f16:	4654      	mov	r4, sl
 8006f18:	2205      	movs	r2, #5
 8006f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1e:	4853      	ldr	r0, [pc, #332]	@ (800706c <_vfiprintf_r+0x21c>)
 8006f20:	f7f9 f97e 	bl	8000220 <memchr>
 8006f24:	9a04      	ldr	r2, [sp, #16]
 8006f26:	b9d8      	cbnz	r0, 8006f60 <_vfiprintf_r+0x110>
 8006f28:	06d1      	lsls	r1, r2, #27
 8006f2a:	bf44      	itt	mi
 8006f2c:	2320      	movmi	r3, #32
 8006f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f32:	0713      	lsls	r3, r2, #28
 8006f34:	bf44      	itt	mi
 8006f36:	232b      	movmi	r3, #43	@ 0x2b
 8006f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006f40:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f42:	d015      	beq.n	8006f70 <_vfiprintf_r+0x120>
 8006f44:	9a07      	ldr	r2, [sp, #28]
 8006f46:	4654      	mov	r4, sl
 8006f48:	2000      	movs	r0, #0
 8006f4a:	f04f 0c0a 	mov.w	ip, #10
 8006f4e:	4621      	mov	r1, r4
 8006f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f54:	3b30      	subs	r3, #48	@ 0x30
 8006f56:	2b09      	cmp	r3, #9
 8006f58:	d94b      	bls.n	8006ff2 <_vfiprintf_r+0x1a2>
 8006f5a:	b1b0      	cbz	r0, 8006f8a <_vfiprintf_r+0x13a>
 8006f5c:	9207      	str	r2, [sp, #28]
 8006f5e:	e014      	b.n	8006f8a <_vfiprintf_r+0x13a>
 8006f60:	eba0 0308 	sub.w	r3, r0, r8
 8006f64:	fa09 f303 	lsl.w	r3, r9, r3
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	9304      	str	r3, [sp, #16]
 8006f6c:	46a2      	mov	sl, r4
 8006f6e:	e7d2      	b.n	8006f16 <_vfiprintf_r+0xc6>
 8006f70:	9b03      	ldr	r3, [sp, #12]
 8006f72:	1d19      	adds	r1, r3, #4
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	9103      	str	r1, [sp, #12]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	bfbb      	ittet	lt
 8006f7c:	425b      	neglt	r3, r3
 8006f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8006f82:	9307      	strge	r3, [sp, #28]
 8006f84:	9307      	strlt	r3, [sp, #28]
 8006f86:	bfb8      	it	lt
 8006f88:	9204      	strlt	r2, [sp, #16]
 8006f8a:	7823      	ldrb	r3, [r4, #0]
 8006f8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f8e:	d10a      	bne.n	8006fa6 <_vfiprintf_r+0x156>
 8006f90:	7863      	ldrb	r3, [r4, #1]
 8006f92:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f94:	d132      	bne.n	8006ffc <_vfiprintf_r+0x1ac>
 8006f96:	9b03      	ldr	r3, [sp, #12]
 8006f98:	1d1a      	adds	r2, r3, #4
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	9203      	str	r2, [sp, #12]
 8006f9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006fa2:	3402      	adds	r4, #2
 8006fa4:	9305      	str	r3, [sp, #20]
 8006fa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800707c <_vfiprintf_r+0x22c>
 8006faa:	7821      	ldrb	r1, [r4, #0]
 8006fac:	2203      	movs	r2, #3
 8006fae:	4650      	mov	r0, sl
 8006fb0:	f7f9 f936 	bl	8000220 <memchr>
 8006fb4:	b138      	cbz	r0, 8006fc6 <_vfiprintf_r+0x176>
 8006fb6:	9b04      	ldr	r3, [sp, #16]
 8006fb8:	eba0 000a 	sub.w	r0, r0, sl
 8006fbc:	2240      	movs	r2, #64	@ 0x40
 8006fbe:	4082      	lsls	r2, r0
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	3401      	adds	r4, #1
 8006fc4:	9304      	str	r3, [sp, #16]
 8006fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fca:	4829      	ldr	r0, [pc, #164]	@ (8007070 <_vfiprintf_r+0x220>)
 8006fcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006fd0:	2206      	movs	r2, #6
 8006fd2:	f7f9 f925 	bl	8000220 <memchr>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d03f      	beq.n	800705a <_vfiprintf_r+0x20a>
 8006fda:	4b26      	ldr	r3, [pc, #152]	@ (8007074 <_vfiprintf_r+0x224>)
 8006fdc:	bb1b      	cbnz	r3, 8007026 <_vfiprintf_r+0x1d6>
 8006fde:	9b03      	ldr	r3, [sp, #12]
 8006fe0:	3307      	adds	r3, #7
 8006fe2:	f023 0307 	bic.w	r3, r3, #7
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	9303      	str	r3, [sp, #12]
 8006fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fec:	443b      	add	r3, r7
 8006fee:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ff0:	e76a      	b.n	8006ec8 <_vfiprintf_r+0x78>
 8006ff2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	2001      	movs	r0, #1
 8006ffa:	e7a8      	b.n	8006f4e <_vfiprintf_r+0xfe>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	3401      	adds	r4, #1
 8007000:	9305      	str	r3, [sp, #20]
 8007002:	4619      	mov	r1, r3
 8007004:	f04f 0c0a 	mov.w	ip, #10
 8007008:	4620      	mov	r0, r4
 800700a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800700e:	3a30      	subs	r2, #48	@ 0x30
 8007010:	2a09      	cmp	r2, #9
 8007012:	d903      	bls.n	800701c <_vfiprintf_r+0x1cc>
 8007014:	2b00      	cmp	r3, #0
 8007016:	d0c6      	beq.n	8006fa6 <_vfiprintf_r+0x156>
 8007018:	9105      	str	r1, [sp, #20]
 800701a:	e7c4      	b.n	8006fa6 <_vfiprintf_r+0x156>
 800701c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007020:	4604      	mov	r4, r0
 8007022:	2301      	movs	r3, #1
 8007024:	e7f0      	b.n	8007008 <_vfiprintf_r+0x1b8>
 8007026:	ab03      	add	r3, sp, #12
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	462a      	mov	r2, r5
 800702c:	4b12      	ldr	r3, [pc, #72]	@ (8007078 <_vfiprintf_r+0x228>)
 800702e:	a904      	add	r1, sp, #16
 8007030:	4630      	mov	r0, r6
 8007032:	f3af 8000 	nop.w
 8007036:	4607      	mov	r7, r0
 8007038:	1c78      	adds	r0, r7, #1
 800703a:	d1d6      	bne.n	8006fea <_vfiprintf_r+0x19a>
 800703c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800703e:	07d9      	lsls	r1, r3, #31
 8007040:	d405      	bmi.n	800704e <_vfiprintf_r+0x1fe>
 8007042:	89ab      	ldrh	r3, [r5, #12]
 8007044:	059a      	lsls	r2, r3, #22
 8007046:	d402      	bmi.n	800704e <_vfiprintf_r+0x1fe>
 8007048:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800704a:	f7ff fce3 	bl	8006a14 <__retarget_lock_release_recursive>
 800704e:	89ab      	ldrh	r3, [r5, #12]
 8007050:	065b      	lsls	r3, r3, #25
 8007052:	f53f af1f 	bmi.w	8006e94 <_vfiprintf_r+0x44>
 8007056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007058:	e71e      	b.n	8006e98 <_vfiprintf_r+0x48>
 800705a:	ab03      	add	r3, sp, #12
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	462a      	mov	r2, r5
 8007060:	4b05      	ldr	r3, [pc, #20]	@ (8007078 <_vfiprintf_r+0x228>)
 8007062:	a904      	add	r1, sp, #16
 8007064:	4630      	mov	r0, r6
 8007066:	f000 f879 	bl	800715c <_printf_i>
 800706a:	e7e4      	b.n	8007036 <_vfiprintf_r+0x1e6>
 800706c:	0800815b 	.word	0x0800815b
 8007070:	08008165 	.word	0x08008165
 8007074:	00000000 	.word	0x00000000
 8007078:	08006e2d 	.word	0x08006e2d
 800707c:	08008161 	.word	0x08008161

08007080 <_printf_common>:
 8007080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007084:	4616      	mov	r6, r2
 8007086:	4698      	mov	r8, r3
 8007088:	688a      	ldr	r2, [r1, #8]
 800708a:	690b      	ldr	r3, [r1, #16]
 800708c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007090:	4293      	cmp	r3, r2
 8007092:	bfb8      	it	lt
 8007094:	4613      	movlt	r3, r2
 8007096:	6033      	str	r3, [r6, #0]
 8007098:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800709c:	4607      	mov	r7, r0
 800709e:	460c      	mov	r4, r1
 80070a0:	b10a      	cbz	r2, 80070a6 <_printf_common+0x26>
 80070a2:	3301      	adds	r3, #1
 80070a4:	6033      	str	r3, [r6, #0]
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	0699      	lsls	r1, r3, #26
 80070aa:	bf42      	ittt	mi
 80070ac:	6833      	ldrmi	r3, [r6, #0]
 80070ae:	3302      	addmi	r3, #2
 80070b0:	6033      	strmi	r3, [r6, #0]
 80070b2:	6825      	ldr	r5, [r4, #0]
 80070b4:	f015 0506 	ands.w	r5, r5, #6
 80070b8:	d106      	bne.n	80070c8 <_printf_common+0x48>
 80070ba:	f104 0a19 	add.w	sl, r4, #25
 80070be:	68e3      	ldr	r3, [r4, #12]
 80070c0:	6832      	ldr	r2, [r6, #0]
 80070c2:	1a9b      	subs	r3, r3, r2
 80070c4:	42ab      	cmp	r3, r5
 80070c6:	dc26      	bgt.n	8007116 <_printf_common+0x96>
 80070c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070cc:	6822      	ldr	r2, [r4, #0]
 80070ce:	3b00      	subs	r3, #0
 80070d0:	bf18      	it	ne
 80070d2:	2301      	movne	r3, #1
 80070d4:	0692      	lsls	r2, r2, #26
 80070d6:	d42b      	bmi.n	8007130 <_printf_common+0xb0>
 80070d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070dc:	4641      	mov	r1, r8
 80070de:	4638      	mov	r0, r7
 80070e0:	47c8      	blx	r9
 80070e2:	3001      	adds	r0, #1
 80070e4:	d01e      	beq.n	8007124 <_printf_common+0xa4>
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	6922      	ldr	r2, [r4, #16]
 80070ea:	f003 0306 	and.w	r3, r3, #6
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	bf02      	ittt	eq
 80070f2:	68e5      	ldreq	r5, [r4, #12]
 80070f4:	6833      	ldreq	r3, [r6, #0]
 80070f6:	1aed      	subeq	r5, r5, r3
 80070f8:	68a3      	ldr	r3, [r4, #8]
 80070fa:	bf0c      	ite	eq
 80070fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007100:	2500      	movne	r5, #0
 8007102:	4293      	cmp	r3, r2
 8007104:	bfc4      	itt	gt
 8007106:	1a9b      	subgt	r3, r3, r2
 8007108:	18ed      	addgt	r5, r5, r3
 800710a:	2600      	movs	r6, #0
 800710c:	341a      	adds	r4, #26
 800710e:	42b5      	cmp	r5, r6
 8007110:	d11a      	bne.n	8007148 <_printf_common+0xc8>
 8007112:	2000      	movs	r0, #0
 8007114:	e008      	b.n	8007128 <_printf_common+0xa8>
 8007116:	2301      	movs	r3, #1
 8007118:	4652      	mov	r2, sl
 800711a:	4641      	mov	r1, r8
 800711c:	4638      	mov	r0, r7
 800711e:	47c8      	blx	r9
 8007120:	3001      	adds	r0, #1
 8007122:	d103      	bne.n	800712c <_printf_common+0xac>
 8007124:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800712c:	3501      	adds	r5, #1
 800712e:	e7c6      	b.n	80070be <_printf_common+0x3e>
 8007130:	18e1      	adds	r1, r4, r3
 8007132:	1c5a      	adds	r2, r3, #1
 8007134:	2030      	movs	r0, #48	@ 0x30
 8007136:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800713a:	4422      	add	r2, r4
 800713c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007140:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007144:	3302      	adds	r3, #2
 8007146:	e7c7      	b.n	80070d8 <_printf_common+0x58>
 8007148:	2301      	movs	r3, #1
 800714a:	4622      	mov	r2, r4
 800714c:	4641      	mov	r1, r8
 800714e:	4638      	mov	r0, r7
 8007150:	47c8      	blx	r9
 8007152:	3001      	adds	r0, #1
 8007154:	d0e6      	beq.n	8007124 <_printf_common+0xa4>
 8007156:	3601      	adds	r6, #1
 8007158:	e7d9      	b.n	800710e <_printf_common+0x8e>
	...

0800715c <_printf_i>:
 800715c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007160:	7e0f      	ldrb	r7, [r1, #24]
 8007162:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007164:	2f78      	cmp	r7, #120	@ 0x78
 8007166:	4691      	mov	r9, r2
 8007168:	4680      	mov	r8, r0
 800716a:	460c      	mov	r4, r1
 800716c:	469a      	mov	sl, r3
 800716e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007172:	d807      	bhi.n	8007184 <_printf_i+0x28>
 8007174:	2f62      	cmp	r7, #98	@ 0x62
 8007176:	d80a      	bhi.n	800718e <_printf_i+0x32>
 8007178:	2f00      	cmp	r7, #0
 800717a:	f000 80d1 	beq.w	8007320 <_printf_i+0x1c4>
 800717e:	2f58      	cmp	r7, #88	@ 0x58
 8007180:	f000 80b8 	beq.w	80072f4 <_printf_i+0x198>
 8007184:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007188:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800718c:	e03a      	b.n	8007204 <_printf_i+0xa8>
 800718e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007192:	2b15      	cmp	r3, #21
 8007194:	d8f6      	bhi.n	8007184 <_printf_i+0x28>
 8007196:	a101      	add	r1, pc, #4	@ (adr r1, 800719c <_printf_i+0x40>)
 8007198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800719c:	080071f5 	.word	0x080071f5
 80071a0:	08007209 	.word	0x08007209
 80071a4:	08007185 	.word	0x08007185
 80071a8:	08007185 	.word	0x08007185
 80071ac:	08007185 	.word	0x08007185
 80071b0:	08007185 	.word	0x08007185
 80071b4:	08007209 	.word	0x08007209
 80071b8:	08007185 	.word	0x08007185
 80071bc:	08007185 	.word	0x08007185
 80071c0:	08007185 	.word	0x08007185
 80071c4:	08007185 	.word	0x08007185
 80071c8:	08007307 	.word	0x08007307
 80071cc:	08007233 	.word	0x08007233
 80071d0:	080072c1 	.word	0x080072c1
 80071d4:	08007185 	.word	0x08007185
 80071d8:	08007185 	.word	0x08007185
 80071dc:	08007329 	.word	0x08007329
 80071e0:	08007185 	.word	0x08007185
 80071e4:	08007233 	.word	0x08007233
 80071e8:	08007185 	.word	0x08007185
 80071ec:	08007185 	.word	0x08007185
 80071f0:	080072c9 	.word	0x080072c9
 80071f4:	6833      	ldr	r3, [r6, #0]
 80071f6:	1d1a      	adds	r2, r3, #4
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6032      	str	r2, [r6, #0]
 80071fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007200:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007204:	2301      	movs	r3, #1
 8007206:	e09c      	b.n	8007342 <_printf_i+0x1e6>
 8007208:	6833      	ldr	r3, [r6, #0]
 800720a:	6820      	ldr	r0, [r4, #0]
 800720c:	1d19      	adds	r1, r3, #4
 800720e:	6031      	str	r1, [r6, #0]
 8007210:	0606      	lsls	r6, r0, #24
 8007212:	d501      	bpl.n	8007218 <_printf_i+0xbc>
 8007214:	681d      	ldr	r5, [r3, #0]
 8007216:	e003      	b.n	8007220 <_printf_i+0xc4>
 8007218:	0645      	lsls	r5, r0, #25
 800721a:	d5fb      	bpl.n	8007214 <_printf_i+0xb8>
 800721c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007220:	2d00      	cmp	r5, #0
 8007222:	da03      	bge.n	800722c <_printf_i+0xd0>
 8007224:	232d      	movs	r3, #45	@ 0x2d
 8007226:	426d      	negs	r5, r5
 8007228:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800722c:	4858      	ldr	r0, [pc, #352]	@ (8007390 <_printf_i+0x234>)
 800722e:	230a      	movs	r3, #10
 8007230:	e011      	b.n	8007256 <_printf_i+0xfa>
 8007232:	6821      	ldr	r1, [r4, #0]
 8007234:	6833      	ldr	r3, [r6, #0]
 8007236:	0608      	lsls	r0, r1, #24
 8007238:	f853 5b04 	ldr.w	r5, [r3], #4
 800723c:	d402      	bmi.n	8007244 <_printf_i+0xe8>
 800723e:	0649      	lsls	r1, r1, #25
 8007240:	bf48      	it	mi
 8007242:	b2ad      	uxthmi	r5, r5
 8007244:	2f6f      	cmp	r7, #111	@ 0x6f
 8007246:	4852      	ldr	r0, [pc, #328]	@ (8007390 <_printf_i+0x234>)
 8007248:	6033      	str	r3, [r6, #0]
 800724a:	bf14      	ite	ne
 800724c:	230a      	movne	r3, #10
 800724e:	2308      	moveq	r3, #8
 8007250:	2100      	movs	r1, #0
 8007252:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007256:	6866      	ldr	r6, [r4, #4]
 8007258:	60a6      	str	r6, [r4, #8]
 800725a:	2e00      	cmp	r6, #0
 800725c:	db05      	blt.n	800726a <_printf_i+0x10e>
 800725e:	6821      	ldr	r1, [r4, #0]
 8007260:	432e      	orrs	r6, r5
 8007262:	f021 0104 	bic.w	r1, r1, #4
 8007266:	6021      	str	r1, [r4, #0]
 8007268:	d04b      	beq.n	8007302 <_printf_i+0x1a6>
 800726a:	4616      	mov	r6, r2
 800726c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007270:	fb03 5711 	mls	r7, r3, r1, r5
 8007274:	5dc7      	ldrb	r7, [r0, r7]
 8007276:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800727a:	462f      	mov	r7, r5
 800727c:	42bb      	cmp	r3, r7
 800727e:	460d      	mov	r5, r1
 8007280:	d9f4      	bls.n	800726c <_printf_i+0x110>
 8007282:	2b08      	cmp	r3, #8
 8007284:	d10b      	bne.n	800729e <_printf_i+0x142>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	07df      	lsls	r7, r3, #31
 800728a:	d508      	bpl.n	800729e <_printf_i+0x142>
 800728c:	6923      	ldr	r3, [r4, #16]
 800728e:	6861      	ldr	r1, [r4, #4]
 8007290:	4299      	cmp	r1, r3
 8007292:	bfde      	ittt	le
 8007294:	2330      	movle	r3, #48	@ 0x30
 8007296:	f806 3c01 	strble.w	r3, [r6, #-1]
 800729a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800729e:	1b92      	subs	r2, r2, r6
 80072a0:	6122      	str	r2, [r4, #16]
 80072a2:	f8cd a000 	str.w	sl, [sp]
 80072a6:	464b      	mov	r3, r9
 80072a8:	aa03      	add	r2, sp, #12
 80072aa:	4621      	mov	r1, r4
 80072ac:	4640      	mov	r0, r8
 80072ae:	f7ff fee7 	bl	8007080 <_printf_common>
 80072b2:	3001      	adds	r0, #1
 80072b4:	d14a      	bne.n	800734c <_printf_i+0x1f0>
 80072b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072ba:	b004      	add	sp, #16
 80072bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	f043 0320 	orr.w	r3, r3, #32
 80072c6:	6023      	str	r3, [r4, #0]
 80072c8:	4832      	ldr	r0, [pc, #200]	@ (8007394 <_printf_i+0x238>)
 80072ca:	2778      	movs	r7, #120	@ 0x78
 80072cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	6831      	ldr	r1, [r6, #0]
 80072d4:	061f      	lsls	r7, r3, #24
 80072d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80072da:	d402      	bmi.n	80072e2 <_printf_i+0x186>
 80072dc:	065f      	lsls	r7, r3, #25
 80072de:	bf48      	it	mi
 80072e0:	b2ad      	uxthmi	r5, r5
 80072e2:	6031      	str	r1, [r6, #0]
 80072e4:	07d9      	lsls	r1, r3, #31
 80072e6:	bf44      	itt	mi
 80072e8:	f043 0320 	orrmi.w	r3, r3, #32
 80072ec:	6023      	strmi	r3, [r4, #0]
 80072ee:	b11d      	cbz	r5, 80072f8 <_printf_i+0x19c>
 80072f0:	2310      	movs	r3, #16
 80072f2:	e7ad      	b.n	8007250 <_printf_i+0xf4>
 80072f4:	4826      	ldr	r0, [pc, #152]	@ (8007390 <_printf_i+0x234>)
 80072f6:	e7e9      	b.n	80072cc <_printf_i+0x170>
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	f023 0320 	bic.w	r3, r3, #32
 80072fe:	6023      	str	r3, [r4, #0]
 8007300:	e7f6      	b.n	80072f0 <_printf_i+0x194>
 8007302:	4616      	mov	r6, r2
 8007304:	e7bd      	b.n	8007282 <_printf_i+0x126>
 8007306:	6833      	ldr	r3, [r6, #0]
 8007308:	6825      	ldr	r5, [r4, #0]
 800730a:	6961      	ldr	r1, [r4, #20]
 800730c:	1d18      	adds	r0, r3, #4
 800730e:	6030      	str	r0, [r6, #0]
 8007310:	062e      	lsls	r6, r5, #24
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	d501      	bpl.n	800731a <_printf_i+0x1be>
 8007316:	6019      	str	r1, [r3, #0]
 8007318:	e002      	b.n	8007320 <_printf_i+0x1c4>
 800731a:	0668      	lsls	r0, r5, #25
 800731c:	d5fb      	bpl.n	8007316 <_printf_i+0x1ba>
 800731e:	8019      	strh	r1, [r3, #0]
 8007320:	2300      	movs	r3, #0
 8007322:	6123      	str	r3, [r4, #16]
 8007324:	4616      	mov	r6, r2
 8007326:	e7bc      	b.n	80072a2 <_printf_i+0x146>
 8007328:	6833      	ldr	r3, [r6, #0]
 800732a:	1d1a      	adds	r2, r3, #4
 800732c:	6032      	str	r2, [r6, #0]
 800732e:	681e      	ldr	r6, [r3, #0]
 8007330:	6862      	ldr	r2, [r4, #4]
 8007332:	2100      	movs	r1, #0
 8007334:	4630      	mov	r0, r6
 8007336:	f7f8 ff73 	bl	8000220 <memchr>
 800733a:	b108      	cbz	r0, 8007340 <_printf_i+0x1e4>
 800733c:	1b80      	subs	r0, r0, r6
 800733e:	6060      	str	r0, [r4, #4]
 8007340:	6863      	ldr	r3, [r4, #4]
 8007342:	6123      	str	r3, [r4, #16]
 8007344:	2300      	movs	r3, #0
 8007346:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800734a:	e7aa      	b.n	80072a2 <_printf_i+0x146>
 800734c:	6923      	ldr	r3, [r4, #16]
 800734e:	4632      	mov	r2, r6
 8007350:	4649      	mov	r1, r9
 8007352:	4640      	mov	r0, r8
 8007354:	47d0      	blx	sl
 8007356:	3001      	adds	r0, #1
 8007358:	d0ad      	beq.n	80072b6 <_printf_i+0x15a>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	079b      	lsls	r3, r3, #30
 800735e:	d413      	bmi.n	8007388 <_printf_i+0x22c>
 8007360:	68e0      	ldr	r0, [r4, #12]
 8007362:	9b03      	ldr	r3, [sp, #12]
 8007364:	4298      	cmp	r0, r3
 8007366:	bfb8      	it	lt
 8007368:	4618      	movlt	r0, r3
 800736a:	e7a6      	b.n	80072ba <_printf_i+0x15e>
 800736c:	2301      	movs	r3, #1
 800736e:	4632      	mov	r2, r6
 8007370:	4649      	mov	r1, r9
 8007372:	4640      	mov	r0, r8
 8007374:	47d0      	blx	sl
 8007376:	3001      	adds	r0, #1
 8007378:	d09d      	beq.n	80072b6 <_printf_i+0x15a>
 800737a:	3501      	adds	r5, #1
 800737c:	68e3      	ldr	r3, [r4, #12]
 800737e:	9903      	ldr	r1, [sp, #12]
 8007380:	1a5b      	subs	r3, r3, r1
 8007382:	42ab      	cmp	r3, r5
 8007384:	dcf2      	bgt.n	800736c <_printf_i+0x210>
 8007386:	e7eb      	b.n	8007360 <_printf_i+0x204>
 8007388:	2500      	movs	r5, #0
 800738a:	f104 0619 	add.w	r6, r4, #25
 800738e:	e7f5      	b.n	800737c <_printf_i+0x220>
 8007390:	0800816c 	.word	0x0800816c
 8007394:	0800817d 	.word	0x0800817d

08007398 <__swbuf_r>:
 8007398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739a:	460e      	mov	r6, r1
 800739c:	4614      	mov	r4, r2
 800739e:	4605      	mov	r5, r0
 80073a0:	b118      	cbz	r0, 80073aa <__swbuf_r+0x12>
 80073a2:	6a03      	ldr	r3, [r0, #32]
 80073a4:	b90b      	cbnz	r3, 80073aa <__swbuf_r+0x12>
 80073a6:	f7ff fa41 	bl	800682c <__sinit>
 80073aa:	69a3      	ldr	r3, [r4, #24]
 80073ac:	60a3      	str	r3, [r4, #8]
 80073ae:	89a3      	ldrh	r3, [r4, #12]
 80073b0:	071a      	lsls	r2, r3, #28
 80073b2:	d501      	bpl.n	80073b8 <__swbuf_r+0x20>
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	b943      	cbnz	r3, 80073ca <__swbuf_r+0x32>
 80073b8:	4621      	mov	r1, r4
 80073ba:	4628      	mov	r0, r5
 80073bc:	f000 f82a 	bl	8007414 <__swsetup_r>
 80073c0:	b118      	cbz	r0, 80073ca <__swbuf_r+0x32>
 80073c2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80073c6:	4638      	mov	r0, r7
 80073c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	6922      	ldr	r2, [r4, #16]
 80073ce:	1a98      	subs	r0, r3, r2
 80073d0:	6963      	ldr	r3, [r4, #20]
 80073d2:	b2f6      	uxtb	r6, r6
 80073d4:	4283      	cmp	r3, r0
 80073d6:	4637      	mov	r7, r6
 80073d8:	dc05      	bgt.n	80073e6 <__swbuf_r+0x4e>
 80073da:	4621      	mov	r1, r4
 80073dc:	4628      	mov	r0, r5
 80073de:	f7ff fcbd 	bl	8006d5c <_fflush_r>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d1ed      	bne.n	80073c2 <__swbuf_r+0x2a>
 80073e6:	68a3      	ldr	r3, [r4, #8]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	60a3      	str	r3, [r4, #8]
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	6022      	str	r2, [r4, #0]
 80073f2:	701e      	strb	r6, [r3, #0]
 80073f4:	6962      	ldr	r2, [r4, #20]
 80073f6:	1c43      	adds	r3, r0, #1
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d004      	beq.n	8007406 <__swbuf_r+0x6e>
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	07db      	lsls	r3, r3, #31
 8007400:	d5e1      	bpl.n	80073c6 <__swbuf_r+0x2e>
 8007402:	2e0a      	cmp	r6, #10
 8007404:	d1df      	bne.n	80073c6 <__swbuf_r+0x2e>
 8007406:	4621      	mov	r1, r4
 8007408:	4628      	mov	r0, r5
 800740a:	f7ff fca7 	bl	8006d5c <_fflush_r>
 800740e:	2800      	cmp	r0, #0
 8007410:	d0d9      	beq.n	80073c6 <__swbuf_r+0x2e>
 8007412:	e7d6      	b.n	80073c2 <__swbuf_r+0x2a>

08007414 <__swsetup_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	4b29      	ldr	r3, [pc, #164]	@ (80074bc <__swsetup_r+0xa8>)
 8007418:	4605      	mov	r5, r0
 800741a:	6818      	ldr	r0, [r3, #0]
 800741c:	460c      	mov	r4, r1
 800741e:	b118      	cbz	r0, 8007428 <__swsetup_r+0x14>
 8007420:	6a03      	ldr	r3, [r0, #32]
 8007422:	b90b      	cbnz	r3, 8007428 <__swsetup_r+0x14>
 8007424:	f7ff fa02 	bl	800682c <__sinit>
 8007428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800742c:	0719      	lsls	r1, r3, #28
 800742e:	d422      	bmi.n	8007476 <__swsetup_r+0x62>
 8007430:	06da      	lsls	r2, r3, #27
 8007432:	d407      	bmi.n	8007444 <__swsetup_r+0x30>
 8007434:	2209      	movs	r2, #9
 8007436:	602a      	str	r2, [r5, #0]
 8007438:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800743c:	81a3      	strh	r3, [r4, #12]
 800743e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007442:	e033      	b.n	80074ac <__swsetup_r+0x98>
 8007444:	0758      	lsls	r0, r3, #29
 8007446:	d512      	bpl.n	800746e <__swsetup_r+0x5a>
 8007448:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800744a:	b141      	cbz	r1, 800745e <__swsetup_r+0x4a>
 800744c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007450:	4299      	cmp	r1, r3
 8007452:	d002      	beq.n	800745a <__swsetup_r+0x46>
 8007454:	4628      	mov	r0, r5
 8007456:	f7ff fafd 	bl	8006a54 <_free_r>
 800745a:	2300      	movs	r3, #0
 800745c:	6363      	str	r3, [r4, #52]	@ 0x34
 800745e:	89a3      	ldrh	r3, [r4, #12]
 8007460:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007464:	81a3      	strh	r3, [r4, #12]
 8007466:	2300      	movs	r3, #0
 8007468:	6063      	str	r3, [r4, #4]
 800746a:	6923      	ldr	r3, [r4, #16]
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	89a3      	ldrh	r3, [r4, #12]
 8007470:	f043 0308 	orr.w	r3, r3, #8
 8007474:	81a3      	strh	r3, [r4, #12]
 8007476:	6923      	ldr	r3, [r4, #16]
 8007478:	b94b      	cbnz	r3, 800748e <__swsetup_r+0x7a>
 800747a:	89a3      	ldrh	r3, [r4, #12]
 800747c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007484:	d003      	beq.n	800748e <__swsetup_r+0x7a>
 8007486:	4621      	mov	r1, r4
 8007488:	4628      	mov	r0, r5
 800748a:	f000 f883 	bl	8007594 <__smakebuf_r>
 800748e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007492:	f013 0201 	ands.w	r2, r3, #1
 8007496:	d00a      	beq.n	80074ae <__swsetup_r+0x9a>
 8007498:	2200      	movs	r2, #0
 800749a:	60a2      	str	r2, [r4, #8]
 800749c:	6962      	ldr	r2, [r4, #20]
 800749e:	4252      	negs	r2, r2
 80074a0:	61a2      	str	r2, [r4, #24]
 80074a2:	6922      	ldr	r2, [r4, #16]
 80074a4:	b942      	cbnz	r2, 80074b8 <__swsetup_r+0xa4>
 80074a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80074aa:	d1c5      	bne.n	8007438 <__swsetup_r+0x24>
 80074ac:	bd38      	pop	{r3, r4, r5, pc}
 80074ae:	0799      	lsls	r1, r3, #30
 80074b0:	bf58      	it	pl
 80074b2:	6962      	ldrpl	r2, [r4, #20]
 80074b4:	60a2      	str	r2, [r4, #8]
 80074b6:	e7f4      	b.n	80074a2 <__swsetup_r+0x8e>
 80074b8:	2000      	movs	r0, #0
 80074ba:	e7f7      	b.n	80074ac <__swsetup_r+0x98>
 80074bc:	200032c0 	.word	0x200032c0

080074c0 <_raise_r>:
 80074c0:	291f      	cmp	r1, #31
 80074c2:	b538      	push	{r3, r4, r5, lr}
 80074c4:	4605      	mov	r5, r0
 80074c6:	460c      	mov	r4, r1
 80074c8:	d904      	bls.n	80074d4 <_raise_r+0x14>
 80074ca:	2316      	movs	r3, #22
 80074cc:	6003      	str	r3, [r0, #0]
 80074ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
 80074d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80074d6:	b112      	cbz	r2, 80074de <_raise_r+0x1e>
 80074d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074dc:	b94b      	cbnz	r3, 80074f2 <_raise_r+0x32>
 80074de:	4628      	mov	r0, r5
 80074e0:	f000 f830 	bl	8007544 <_getpid_r>
 80074e4:	4622      	mov	r2, r4
 80074e6:	4601      	mov	r1, r0
 80074e8:	4628      	mov	r0, r5
 80074ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ee:	f000 b817 	b.w	8007520 <_kill_r>
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d00a      	beq.n	800750c <_raise_r+0x4c>
 80074f6:	1c59      	adds	r1, r3, #1
 80074f8:	d103      	bne.n	8007502 <_raise_r+0x42>
 80074fa:	2316      	movs	r3, #22
 80074fc:	6003      	str	r3, [r0, #0]
 80074fe:	2001      	movs	r0, #1
 8007500:	e7e7      	b.n	80074d2 <_raise_r+0x12>
 8007502:	2100      	movs	r1, #0
 8007504:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007508:	4620      	mov	r0, r4
 800750a:	4798      	blx	r3
 800750c:	2000      	movs	r0, #0
 800750e:	e7e0      	b.n	80074d2 <_raise_r+0x12>

08007510 <raise>:
 8007510:	4b02      	ldr	r3, [pc, #8]	@ (800751c <raise+0xc>)
 8007512:	4601      	mov	r1, r0
 8007514:	6818      	ldr	r0, [r3, #0]
 8007516:	f7ff bfd3 	b.w	80074c0 <_raise_r>
 800751a:	bf00      	nop
 800751c:	200032c0 	.word	0x200032c0

08007520 <_kill_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	4d07      	ldr	r5, [pc, #28]	@ (8007540 <_kill_r+0x20>)
 8007524:	2300      	movs	r3, #0
 8007526:	4604      	mov	r4, r0
 8007528:	4608      	mov	r0, r1
 800752a:	4611      	mov	r1, r2
 800752c:	602b      	str	r3, [r5, #0]
 800752e:	f7fa faa1 	bl	8001a74 <_kill>
 8007532:	1c43      	adds	r3, r0, #1
 8007534:	d102      	bne.n	800753c <_kill_r+0x1c>
 8007536:	682b      	ldr	r3, [r5, #0]
 8007538:	b103      	cbz	r3, 800753c <_kill_r+0x1c>
 800753a:	6023      	str	r3, [r4, #0]
 800753c:	bd38      	pop	{r3, r4, r5, pc}
 800753e:	bf00      	nop
 8007540:	20003714 	.word	0x20003714

08007544 <_getpid_r>:
 8007544:	f7fa ba8e 	b.w	8001a64 <_getpid>

08007548 <__swhatbuf_r>:
 8007548:	b570      	push	{r4, r5, r6, lr}
 800754a:	460c      	mov	r4, r1
 800754c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007550:	2900      	cmp	r1, #0
 8007552:	b096      	sub	sp, #88	@ 0x58
 8007554:	4615      	mov	r5, r2
 8007556:	461e      	mov	r6, r3
 8007558:	da0d      	bge.n	8007576 <__swhatbuf_r+0x2e>
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007560:	f04f 0100 	mov.w	r1, #0
 8007564:	bf14      	ite	ne
 8007566:	2340      	movne	r3, #64	@ 0x40
 8007568:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800756c:	2000      	movs	r0, #0
 800756e:	6031      	str	r1, [r6, #0]
 8007570:	602b      	str	r3, [r5, #0]
 8007572:	b016      	add	sp, #88	@ 0x58
 8007574:	bd70      	pop	{r4, r5, r6, pc}
 8007576:	466a      	mov	r2, sp
 8007578:	f000 f848 	bl	800760c <_fstat_r>
 800757c:	2800      	cmp	r0, #0
 800757e:	dbec      	blt.n	800755a <__swhatbuf_r+0x12>
 8007580:	9901      	ldr	r1, [sp, #4]
 8007582:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007586:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800758a:	4259      	negs	r1, r3
 800758c:	4159      	adcs	r1, r3
 800758e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007592:	e7eb      	b.n	800756c <__swhatbuf_r+0x24>

08007594 <__smakebuf_r>:
 8007594:	898b      	ldrh	r3, [r1, #12]
 8007596:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007598:	079d      	lsls	r5, r3, #30
 800759a:	4606      	mov	r6, r0
 800759c:	460c      	mov	r4, r1
 800759e:	d507      	bpl.n	80075b0 <__smakebuf_r+0x1c>
 80075a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	6123      	str	r3, [r4, #16]
 80075a8:	2301      	movs	r3, #1
 80075aa:	6163      	str	r3, [r4, #20]
 80075ac:	b003      	add	sp, #12
 80075ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075b0:	ab01      	add	r3, sp, #4
 80075b2:	466a      	mov	r2, sp
 80075b4:	f7ff ffc8 	bl	8007548 <__swhatbuf_r>
 80075b8:	9f00      	ldr	r7, [sp, #0]
 80075ba:	4605      	mov	r5, r0
 80075bc:	4639      	mov	r1, r7
 80075be:	4630      	mov	r0, r6
 80075c0:	f7ff fabc 	bl	8006b3c <_malloc_r>
 80075c4:	b948      	cbnz	r0, 80075da <__smakebuf_r+0x46>
 80075c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ca:	059a      	lsls	r2, r3, #22
 80075cc:	d4ee      	bmi.n	80075ac <__smakebuf_r+0x18>
 80075ce:	f023 0303 	bic.w	r3, r3, #3
 80075d2:	f043 0302 	orr.w	r3, r3, #2
 80075d6:	81a3      	strh	r3, [r4, #12]
 80075d8:	e7e2      	b.n	80075a0 <__smakebuf_r+0xc>
 80075da:	89a3      	ldrh	r3, [r4, #12]
 80075dc:	6020      	str	r0, [r4, #0]
 80075de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075e2:	81a3      	strh	r3, [r4, #12]
 80075e4:	9b01      	ldr	r3, [sp, #4]
 80075e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80075ea:	b15b      	cbz	r3, 8007604 <__smakebuf_r+0x70>
 80075ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075f0:	4630      	mov	r0, r6
 80075f2:	f000 f81d 	bl	8007630 <_isatty_r>
 80075f6:	b128      	cbz	r0, 8007604 <__smakebuf_r+0x70>
 80075f8:	89a3      	ldrh	r3, [r4, #12]
 80075fa:	f023 0303 	bic.w	r3, r3, #3
 80075fe:	f043 0301 	orr.w	r3, r3, #1
 8007602:	81a3      	strh	r3, [r4, #12]
 8007604:	89a3      	ldrh	r3, [r4, #12]
 8007606:	431d      	orrs	r5, r3
 8007608:	81a5      	strh	r5, [r4, #12]
 800760a:	e7cf      	b.n	80075ac <__smakebuf_r+0x18>

0800760c <_fstat_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d07      	ldr	r5, [pc, #28]	@ (800762c <_fstat_r+0x20>)
 8007610:	2300      	movs	r3, #0
 8007612:	4604      	mov	r4, r0
 8007614:	4608      	mov	r0, r1
 8007616:	4611      	mov	r1, r2
 8007618:	602b      	str	r3, [r5, #0]
 800761a:	f7fa fa8b 	bl	8001b34 <_fstat>
 800761e:	1c43      	adds	r3, r0, #1
 8007620:	d102      	bne.n	8007628 <_fstat_r+0x1c>
 8007622:	682b      	ldr	r3, [r5, #0]
 8007624:	b103      	cbz	r3, 8007628 <_fstat_r+0x1c>
 8007626:	6023      	str	r3, [r4, #0]
 8007628:	bd38      	pop	{r3, r4, r5, pc}
 800762a:	bf00      	nop
 800762c:	20003714 	.word	0x20003714

08007630 <_isatty_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d06      	ldr	r5, [pc, #24]	@ (800764c <_isatty_r+0x1c>)
 8007634:	2300      	movs	r3, #0
 8007636:	4604      	mov	r4, r0
 8007638:	4608      	mov	r0, r1
 800763a:	602b      	str	r3, [r5, #0]
 800763c:	f7fa fa8a 	bl	8001b54 <_isatty>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d102      	bne.n	800764a <_isatty_r+0x1a>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b103      	cbz	r3, 800764a <_isatty_r+0x1a>
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	20003714 	.word	0x20003714

08007650 <_init>:
 8007650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007652:	bf00      	nop
 8007654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007656:	bc08      	pop	{r3}
 8007658:	469e      	mov	lr, r3
 800765a:	4770      	bx	lr

0800765c <_fini>:
 800765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765e:	bf00      	nop
 8007660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007662:	bc08      	pop	{r3}
 8007664:	469e      	mov	lr, r3
 8007666:	4770      	bx	lr
