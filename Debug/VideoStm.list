
VideoStm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .screen       00002760  20000000  20000000  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006c5c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000060c  08006e3c  08006e3c  00007e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08007448  08007448  0005ac00  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  08007448  08007448  00008448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08007450  08007450  0005ac00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08007450  08007450  00008450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08007454  08007454  00008454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000006c  20002760  08007458  00008760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000414  200027cc  080074c4  000087cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002be0  080074c4  00008be0  2**0
                  ALLOC
 12 .screenBB     0004ec00  22000000  22000000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 00000030  00000000  00000000  0005ac00  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ef94  00000000  00000000  0005ac30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002876  00000000  00000000  00069bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ff8  00000000  00000000  0006c440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ac3  00000000  00000000  0006d438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116fe  00000000  00000000  00094efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9d61  00000000  00000000  000a65f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a035a  2**0
                  CONTENTS, READONLY
 21 .debug_rnglists 00000c23  00000000  00000000  001a039d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004a9c  00000000  00000000  001a0fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000061  00000000  00000000  001a5a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200027cc 	.word	0x200027cc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006e24 	.word	0x08006e24

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200027d0 	.word	0x200027d0
 800021c:	08006e24 	.word	0x08006e24

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <gdiBitBlt>:
		h			Bitmap height, in pixels
		bm			Pointer to the bitmap start position

	return			none
*/
void gdiBitBlt(PGDI_RECT prc, int16_t x, int16_t y, int16_t w, int16_t h, pBMP bm) {
 80002c0:	b490      	push	{r4, r7}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	4608      	mov	r0, r1
 80002ca:	4611      	mov	r1, r2
 80002cc:	461a      	mov	r2, r3
 80002ce:	4603      	mov	r3, r0
 80002d0:	817b      	strh	r3, [r7, #10]
 80002d2:	460b      	mov	r3, r1
 80002d4:	813b      	strh	r3, [r7, #8]
 80002d6:	4613      	mov	r3, r2
 80002d8:	80fb      	strh	r3, [r7, #6]
int16_t todo;
uint16_t alignment;

//	Calculate clipping region

	if (prc != NULL) {
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d00f      	beq.n	8000300 <gdiBitBlt+0x40>
		x += prc->x;
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	897b      	ldrh	r3, [r7, #10]
 80002ea:	4413      	add	r3, r2
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	817b      	strh	r3, [r7, #10]
		y += prc->y;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80002f6:	b29a      	uxth	r2, r3
 80002f8:	893b      	ldrh	r3, [r7, #8]
 80002fa:	4413      	add	r3, r2
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	813b      	strh	r3, [r7, #8]
//??		w = min(prc->w, VID_PIXELS_X-x);	// clip X
//??		h = min(prc->w, VID_PIXELS_Y-y);	// clip Y
	}
	alignment = x & 0b0000000000001111;
 8000300:	897b      	ldrh	r3, [r7, #10]
 8000302:	f003 030f 	and.w	r3, r3, #15
 8000306:	82bb      	strh	r3, [r7, #20]
	for(;--h >= 0; y++) {
 8000308:	e2cc      	b.n	80008a4 <gdiBitBlt+0x5e4>
		for (todo = w; todo>0;) {
 800030a:	88fb      	ldrh	r3, [r7, #6]
 800030c:	82fb      	strh	r3, [r7, #22]
 800030e:	e2be      	b.n	800088e <gdiBitBlt+0x5ce>
			if (todo >= 9) {
 8000310:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000314:	2b08      	cmp	r3, #8
 8000316:	dd2d      	ble.n	8000374 <gdiBitBlt+0xb4>
				bitmask.word = (todo >= 16) ?
									0xFFFF		<< (16-alignment):
 8000318:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800031c:	2b0f      	cmp	r3, #15
 800031e:	dd08      	ble.n	8000332 <gdiBitBlt+0x72>
 8000320:	8abb      	ldrh	r3, [r7, #20]
 8000322:	f1c3 0310 	rsb	r3, r3, #16
 8000326:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800032a:	fa02 f303 	lsl.w	r3, r2, r3
 800032e:	461a      	mov	r2, r3
 8000330:	e00c      	b.n	800034c <gdiBitBlt+0x8c>
						masktable[todo-1]		<< (16-alignment);
 8000332:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000336:	3b01      	subs	r3, #1
 8000338:	4a79      	ldr	r2, [pc, #484]	@ (8000520 <gdiBitBlt+0x260>)
 800033a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800033e:	461a      	mov	r2, r3
 8000340:	8abb      	ldrh	r3, [r7, #20]
 8000342:	f1c3 0310 	rsb	r3, r3, #16
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
									0xFFFF		<< (16-alignment):
 800034a:	461a      	mov	r2, r3
				bitmask.word = (todo >= 16) ?
 800034c:	4b75      	ldr	r3, [pc, #468]	@ (8000524 <gdiBitBlt+0x264>)
 800034e:	601a      	str	r2, [r3, #0]
				pattern.word = *bm.halfwords++	<< (16-alignment);
 8000350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000352:	1c9a      	adds	r2, r3, #2
 8000354:	627a      	str	r2, [r7, #36]	@ 0x24
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	461a      	mov	r2, r3
 800035a:	8abb      	ldrh	r3, [r7, #20]
 800035c:	f1c3 0310 	rsb	r3, r3, #16
 8000360:	fa02 f303 	lsl.w	r3, r2, r3
 8000364:	461a      	mov	r2, r3
 8000366:	4b70      	ldr	r3, [pc, #448]	@ (8000528 <gdiBitBlt+0x268>)
 8000368:	601a      	str	r2, [r3, #0]
				todo -= 16;
 800036a:	8afb      	ldrh	r3, [r7, #22]
 800036c:	3b10      	subs	r3, #16
 800036e:	b29b      	uxth	r3, r3
 8000370:	82fb      	strh	r3, [r7, #22]
 8000372:	e01f      	b.n	80003b4 <gdiBitBlt+0xf4>
			} else {
				bitmask.word = masktable[todo-1] << (16-alignment);
 8000374:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000378:	3b01      	subs	r3, #1
 800037a:	4a69      	ldr	r2, [pc, #420]	@ (8000520 <gdiBitBlt+0x260>)
 800037c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000380:	461a      	mov	r2, r3
 8000382:	8abb      	ldrh	r3, [r7, #20]
 8000384:	f1c3 0310 	rsb	r3, r3, #16
 8000388:	fa02 f303 	lsl.w	r3, r2, r3
 800038c:	461a      	mov	r2, r3
 800038e:	4b65      	ldr	r3, [pc, #404]	@ (8000524 <gdiBitBlt+0x264>)
 8000390:	601a      	str	r2, [r3, #0]
				pattern.word = *bm.bytesinROM++  << (24-alignment);
 8000392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000394:	1c5a      	adds	r2, r3, #1
 8000396:	627a      	str	r2, [r7, #36]	@ 0x24
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	461a      	mov	r2, r3
 800039c:	8abb      	ldrh	r3, [r7, #20]
 800039e:	f1c3 0318 	rsb	r3, r3, #24
 80003a2:	fa02 f303 	lsl.w	r3, r2, r3
 80003a6:	461a      	mov	r2, r3
 80003a8:	4b5f      	ldr	r3, [pc, #380]	@ (8000528 <gdiBitBlt+0x268>)
 80003aa:	601a      	str	r2, [r3, #0]
				todo -= 8;
 80003ac:	8afb      	ldrh	r3, [r7, #22]
 80003ae:	3b08      	subs	r3, #8
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	82fb      	strh	r3, [r7, #22]
			}
			switch(rop) {
 80003b4:	4b5d      	ldr	r3, [pc, #372]	@ (800052c <gdiBitBlt+0x26c>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b04      	cmp	r3, #4
 80003ba:	f200 8268 	bhi.w	800088e <gdiBitBlt+0x5ce>
 80003be:	a201      	add	r2, pc, #4	@ (adr r2, 80003c4 <gdiBitBlt+0x104>)
 80003c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c4:	080003d9 	.word	0x080003d9
 80003c8:	08000535 	.word	0x08000535
 80003cc:	080007bd 	.word	0x080007bd
 80003d0:	0800067d 	.word	0x0800067d
 80003d4:	0800071d 	.word	0x0800071d
				case GDI_ROP_COPY:
					screen[y][x>>4] &= ~bitmask.halfword[1];
 80003d8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80003dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80003e0:	111b      	asrs	r3, r3, #4
 80003e2:	b21b      	sxth	r3, r3
 80003e4:	4618      	mov	r0, r3
 80003e6:	4952      	ldr	r1, [pc, #328]	@ (8000530 <gdiBitBlt+0x270>)
 80003e8:	4613      	mov	r3, r2
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	4413      	add	r3, r2
 80003ee:	00da      	lsls	r2, r3, #3
 80003f0:	1ad2      	subs	r2, r2, r3
 80003f2:	1813      	adds	r3, r2, r0
 80003f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80003f8:	b21a      	sxth	r2, r3
 80003fa:	4b4a      	ldr	r3, [pc, #296]	@ (8000524 <gdiBitBlt+0x264>)
 80003fc:	885b      	ldrh	r3, [r3, #2]
 80003fe:	b21b      	sxth	r3, r3
 8000400:	43db      	mvns	r3, r3
 8000402:	b21b      	sxth	r3, r3
 8000404:	4013      	ands	r3, r2
 8000406:	b219      	sxth	r1, r3
 8000408:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800040c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000410:	111b      	asrs	r3, r3, #4
 8000412:	b21b      	sxth	r3, r3
 8000414:	461c      	mov	r4, r3
 8000416:	b288      	uxth	r0, r1
 8000418:	4945      	ldr	r1, [pc, #276]	@ (8000530 <gdiBitBlt+0x270>)
 800041a:	4613      	mov	r3, r2
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	4413      	add	r3, r2
 8000420:	00da      	lsls	r2, r3, #3
 8000422:	1ad2      	subs	r2, r2, r3
 8000424:	1913      	adds	r3, r2, r4
 8000426:	4602      	mov	r2, r0
 8000428:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					screen[y][x>>4] |=  pattern.halfword[1];
 800042c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000430:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000434:	111b      	asrs	r3, r3, #4
 8000436:	b21b      	sxth	r3, r3
 8000438:	4618      	mov	r0, r3
 800043a:	493d      	ldr	r1, [pc, #244]	@ (8000530 <gdiBitBlt+0x270>)
 800043c:	4613      	mov	r3, r2
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	4413      	add	r3, r2
 8000442:	00da      	lsls	r2, r3, #3
 8000444:	1ad2      	subs	r2, r2, r3
 8000446:	1813      	adds	r3, r2, r0
 8000448:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800044c:	4b36      	ldr	r3, [pc, #216]	@ (8000528 <gdiBitBlt+0x268>)
 800044e:	885b      	ldrh	r3, [r3, #2]
 8000450:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000454:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000458:	1100      	asrs	r0, r0, #4
 800045a:	b200      	sxth	r0, r0
 800045c:	4604      	mov	r4, r0
 800045e:	430b      	orrs	r3, r1
 8000460:	b298      	uxth	r0, r3
 8000462:	4933      	ldr	r1, [pc, #204]	@ (8000530 <gdiBitBlt+0x270>)
 8000464:	4613      	mov	r3, r2
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	4413      	add	r3, r2
 800046a:	00da      	lsls	r2, r3, #3
 800046c:	1ad2      	subs	r2, r2, r3
 800046e:	1913      	adds	r3, r2, r4
 8000470:	4602      	mov	r2, r0
 8000472:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (bitmask.halfword[0] != 0) {
 8000476:	4b2b      	ldr	r3, [pc, #172]	@ (8000524 <gdiBitBlt+0x264>)
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	f000 81fe 	beq.w	800087c <gdiBitBlt+0x5bc>
						screen[y][(x>>4)+1] &= ~bitmask.halfword[0];
 8000480:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000484:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000488:	111b      	asrs	r3, r3, #4
 800048a:	b21b      	sxth	r3, r3
 800048c:	1c59      	adds	r1, r3, #1
 800048e:	4828      	ldr	r0, [pc, #160]	@ (8000530 <gdiBitBlt+0x270>)
 8000490:	4613      	mov	r3, r2
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	4413      	add	r3, r2
 8000496:	00da      	lsls	r2, r3, #3
 8000498:	1ad2      	subs	r2, r2, r3
 800049a:	1853      	adds	r3, r2, r1
 800049c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80004a0:	b21a      	sxth	r2, r3
 80004a2:	4b20      	ldr	r3, [pc, #128]	@ (8000524 <gdiBitBlt+0x264>)
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	b21b      	sxth	r3, r3
 80004a8:	43db      	mvns	r3, r3
 80004aa:	b21b      	sxth	r3, r3
 80004ac:	4013      	ands	r3, r2
 80004ae:	b218      	sxth	r0, r3
 80004b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004b8:	111b      	asrs	r3, r3, #4
 80004ba:	b21b      	sxth	r3, r3
 80004bc:	1c59      	adds	r1, r3, #1
 80004be:	b284      	uxth	r4, r0
 80004c0:	481b      	ldr	r0, [pc, #108]	@ (8000530 <gdiBitBlt+0x270>)
 80004c2:	4613      	mov	r3, r2
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	4413      	add	r3, r2
 80004c8:	00da      	lsls	r2, r3, #3
 80004ca:	1ad2      	subs	r2, r2, r3
 80004cc:	1853      	adds	r3, r2, r1
 80004ce:	4622      	mov	r2, r4
 80004d0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						screen[y][(x>>4)+1] |=  pattern.halfword[0];
 80004d4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004dc:	111b      	asrs	r3, r3, #4
 80004de:	b21b      	sxth	r3, r3
 80004e0:	1c59      	adds	r1, r3, #1
 80004e2:	4813      	ldr	r0, [pc, #76]	@ (8000530 <gdiBitBlt+0x270>)
 80004e4:	4613      	mov	r3, r2
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	4413      	add	r3, r2
 80004ea:	00da      	lsls	r2, r3, #3
 80004ec:	1ad2      	subs	r2, r2, r3
 80004ee:	1853      	adds	r3, r2, r1
 80004f0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80004f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <gdiBitBlt+0x268>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004fc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000500:	1109      	asrs	r1, r1, #4
 8000502:	b209      	sxth	r1, r1
 8000504:	3101      	adds	r1, #1
 8000506:	4303      	orrs	r3, r0
 8000508:	b29c      	uxth	r4, r3
 800050a:	4809      	ldr	r0, [pc, #36]	@ (8000530 <gdiBitBlt+0x270>)
 800050c:	4613      	mov	r3, r2
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	4413      	add	r3, r2
 8000512:	00da      	lsls	r2, r3, #3
 8000514:	1ad2      	subs	r2, r2, r3
 8000516:	1853      	adds	r3, r2, r1
 8000518:	4622      	mov	r2, r4
 800051a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					}
					break;
 800051e:	e1ad      	b.n	800087c <gdiBitBlt+0x5bc>
 8000520:	080072e8 	.word	0x080072e8
 8000524:	200027ec 	.word	0x200027ec
 8000528:	200027e8 	.word	0x200027e8
 800052c:	20002760 	.word	0x20002760
 8000530:	20000000 	.word	0x20000000
				case GDI_ROP_BONW:	// inverse video
					screen[y][x>>4] |=  bitmask.halfword[1];
 8000534:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000538:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800053c:	111b      	asrs	r3, r3, #4
 800053e:	b21b      	sxth	r3, r3
 8000540:	4618      	mov	r0, r3
 8000542:	49cb      	ldr	r1, [pc, #812]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000544:	4613      	mov	r3, r2
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	4413      	add	r3, r2
 800054a:	00da      	lsls	r2, r3, #3
 800054c:	1ad2      	subs	r2, r2, r3
 800054e:	1813      	adds	r3, r2, r0
 8000550:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000554:	4bc7      	ldr	r3, [pc, #796]	@ (8000874 <gdiBitBlt+0x5b4>)
 8000556:	885b      	ldrh	r3, [r3, #2]
 8000558:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800055c:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000560:	1100      	asrs	r0, r0, #4
 8000562:	b200      	sxth	r0, r0
 8000564:	4604      	mov	r4, r0
 8000566:	430b      	orrs	r3, r1
 8000568:	b298      	uxth	r0, r3
 800056a:	49c1      	ldr	r1, [pc, #772]	@ (8000870 <gdiBitBlt+0x5b0>)
 800056c:	4613      	mov	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	4413      	add	r3, r2
 8000572:	00da      	lsls	r2, r3, #3
 8000574:	1ad2      	subs	r2, r2, r3
 8000576:	1913      	adds	r3, r2, r4
 8000578:	4602      	mov	r2, r0
 800057a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					screen[y][x>>4] &= ~pattern.halfword[1];
 800057e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000582:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000586:	111b      	asrs	r3, r3, #4
 8000588:	b21b      	sxth	r3, r3
 800058a:	4618      	mov	r0, r3
 800058c:	49b8      	ldr	r1, [pc, #736]	@ (8000870 <gdiBitBlt+0x5b0>)
 800058e:	4613      	mov	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	4413      	add	r3, r2
 8000594:	00da      	lsls	r2, r3, #3
 8000596:	1ad2      	subs	r2, r2, r3
 8000598:	1813      	adds	r3, r2, r0
 800059a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800059e:	b21a      	sxth	r2, r3
 80005a0:	4bb5      	ldr	r3, [pc, #724]	@ (8000878 <gdiBitBlt+0x5b8>)
 80005a2:	885b      	ldrh	r3, [r3, #2]
 80005a4:	b21b      	sxth	r3, r3
 80005a6:	43db      	mvns	r3, r3
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	4013      	ands	r3, r2
 80005ac:	b219      	sxth	r1, r3
 80005ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005b6:	111b      	asrs	r3, r3, #4
 80005b8:	b21b      	sxth	r3, r3
 80005ba:	461c      	mov	r4, r3
 80005bc:	b288      	uxth	r0, r1
 80005be:	49ac      	ldr	r1, [pc, #688]	@ (8000870 <gdiBitBlt+0x5b0>)
 80005c0:	4613      	mov	r3, r2
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	4413      	add	r3, r2
 80005c6:	00da      	lsls	r2, r3, #3
 80005c8:	1ad2      	subs	r2, r2, r3
 80005ca:	1913      	adds	r3, r2, r4
 80005cc:	4602      	mov	r2, r0
 80005ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (bitmask.halfword[0] != 0) {
 80005d2:	4ba8      	ldr	r3, [pc, #672]	@ (8000874 <gdiBitBlt+0x5b4>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	f000 8152 	beq.w	8000880 <gdiBitBlt+0x5c0>
						screen[y][(x>>4)+1] |=  bitmask.halfword[0];
 80005dc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005e4:	111b      	asrs	r3, r3, #4
 80005e6:	b21b      	sxth	r3, r3
 80005e8:	1c59      	adds	r1, r3, #1
 80005ea:	48a1      	ldr	r0, [pc, #644]	@ (8000870 <gdiBitBlt+0x5b0>)
 80005ec:	4613      	mov	r3, r2
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	4413      	add	r3, r2
 80005f2:	00da      	lsls	r2, r3, #3
 80005f4:	1ad2      	subs	r2, r2, r3
 80005f6:	1853      	adds	r3, r2, r1
 80005f8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80005fc:	4b9d      	ldr	r3, [pc, #628]	@ (8000874 <gdiBitBlt+0x5b4>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000604:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000608:	1109      	asrs	r1, r1, #4
 800060a:	b209      	sxth	r1, r1
 800060c:	3101      	adds	r1, #1
 800060e:	4303      	orrs	r3, r0
 8000610:	b29c      	uxth	r4, r3
 8000612:	4897      	ldr	r0, [pc, #604]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000614:	4613      	mov	r3, r2
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	4413      	add	r3, r2
 800061a:	00da      	lsls	r2, r3, #3
 800061c:	1ad2      	subs	r2, r2, r3
 800061e:	1853      	adds	r3, r2, r1
 8000620:	4622      	mov	r2, r4
 8000622:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						screen[y][(x>>4)+1] &= ~pattern.halfword[0];
 8000626:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800062a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800062e:	111b      	asrs	r3, r3, #4
 8000630:	b21b      	sxth	r3, r3
 8000632:	1c59      	adds	r1, r3, #1
 8000634:	488e      	ldr	r0, [pc, #568]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000636:	4613      	mov	r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	4413      	add	r3, r2
 800063c:	00da      	lsls	r2, r3, #3
 800063e:	1ad2      	subs	r2, r2, r3
 8000640:	1853      	adds	r3, r2, r1
 8000642:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000646:	b21a      	sxth	r2, r3
 8000648:	4b8b      	ldr	r3, [pc, #556]	@ (8000878 <gdiBitBlt+0x5b8>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	b21b      	sxth	r3, r3
 800064e:	43db      	mvns	r3, r3
 8000650:	b21b      	sxth	r3, r3
 8000652:	4013      	ands	r3, r2
 8000654:	b218      	sxth	r0, r3
 8000656:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800065a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800065e:	111b      	asrs	r3, r3, #4
 8000660:	b21b      	sxth	r3, r3
 8000662:	1c59      	adds	r1, r3, #1
 8000664:	b284      	uxth	r4, r0
 8000666:	4882      	ldr	r0, [pc, #520]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	00da      	lsls	r2, r3, #3
 8000670:	1ad2      	subs	r2, r2, r3
 8000672:	1853      	adds	r3, r2, r1
 8000674:	4622      	mov	r2, r4
 8000676:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					}
					break;
 800067a:	e101      	b.n	8000880 <gdiBitBlt+0x5c0>
				case GDI_ROP_XOR:
					screen[y][x>>4] ^= pattern.halfword[1];
 800067c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000680:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000684:	111b      	asrs	r3, r3, #4
 8000686:	b21b      	sxth	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	4979      	ldr	r1, [pc, #484]	@ (8000870 <gdiBitBlt+0x5b0>)
 800068c:	4613      	mov	r3, r2
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	4413      	add	r3, r2
 8000692:	00da      	lsls	r2, r3, #3
 8000694:	1ad2      	subs	r2, r2, r3
 8000696:	1813      	adds	r3, r2, r0
 8000698:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800069c:	4b76      	ldr	r3, [pc, #472]	@ (8000878 <gdiBitBlt+0x5b8>)
 800069e:	885b      	ldrh	r3, [r3, #2]
 80006a0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006a4:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80006a8:	1100      	asrs	r0, r0, #4
 80006aa:	b200      	sxth	r0, r0
 80006ac:	4604      	mov	r4, r0
 80006ae:	404b      	eors	r3, r1
 80006b0:	b298      	uxth	r0, r3
 80006b2:	496f      	ldr	r1, [pc, #444]	@ (8000870 <gdiBitBlt+0x5b0>)
 80006b4:	4613      	mov	r3, r2
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	4413      	add	r3, r2
 80006ba:	00da      	lsls	r2, r3, #3
 80006bc:	1ad2      	subs	r2, r2, r3
 80006be:	1913      	adds	r3, r2, r4
 80006c0:	4602      	mov	r2, r0
 80006c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 80006c6:	4b6c      	ldr	r3, [pc, #432]	@ (8000878 <gdiBitBlt+0x5b8>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	f000 80da 	beq.w	8000884 <gdiBitBlt+0x5c4>
						screen[y][(x>>4)+1] ^= pattern.halfword[0];
 80006d0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80006d8:	111b      	asrs	r3, r3, #4
 80006da:	b21b      	sxth	r3, r3
 80006dc:	1c59      	adds	r1, r3, #1
 80006de:	4864      	ldr	r0, [pc, #400]	@ (8000870 <gdiBitBlt+0x5b0>)
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	00da      	lsls	r2, r3, #3
 80006e8:	1ad2      	subs	r2, r2, r3
 80006ea:	1853      	adds	r3, r2, r1
 80006ec:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80006f0:	4b61      	ldr	r3, [pc, #388]	@ (8000878 <gdiBitBlt+0x5b8>)
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006f8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80006fc:	1109      	asrs	r1, r1, #4
 80006fe:	b209      	sxth	r1, r1
 8000700:	3101      	adds	r1, #1
 8000702:	4043      	eors	r3, r0
 8000704:	b29c      	uxth	r4, r3
 8000706:	485a      	ldr	r0, [pc, #360]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000708:	4613      	mov	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	4413      	add	r3, r2
 800070e:	00da      	lsls	r2, r3, #3
 8000710:	1ad2      	subs	r2, r2, r3
 8000712:	1853      	adds	r3, r2, r1
 8000714:	4622      	mov	r2, r4
 8000716:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 800071a:	e0b3      	b.n	8000884 <gdiBitBlt+0x5c4>
				case GDI_ROP_OR:
					screen[y][x>>4] |= pattern.halfword[1];
 800071c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000720:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000724:	111b      	asrs	r3, r3, #4
 8000726:	b21b      	sxth	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	4951      	ldr	r1, [pc, #324]	@ (8000870 <gdiBitBlt+0x5b0>)
 800072c:	4613      	mov	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4413      	add	r3, r2
 8000732:	00da      	lsls	r2, r3, #3
 8000734:	1ad2      	subs	r2, r2, r3
 8000736:	1813      	adds	r3, r2, r0
 8000738:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800073c:	4b4e      	ldr	r3, [pc, #312]	@ (8000878 <gdiBitBlt+0x5b8>)
 800073e:	885b      	ldrh	r3, [r3, #2]
 8000740:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000744:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000748:	1100      	asrs	r0, r0, #4
 800074a:	b200      	sxth	r0, r0
 800074c:	4604      	mov	r4, r0
 800074e:	430b      	orrs	r3, r1
 8000750:	b298      	uxth	r0, r3
 8000752:	4947      	ldr	r1, [pc, #284]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	00da      	lsls	r2, r3, #3
 800075c:	1ad2      	subs	r2, r2, r3
 800075e:	1913      	adds	r3, r2, r4
 8000760:	4602      	mov	r2, r0
 8000762:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 8000766:	4b44      	ldr	r3, [pc, #272]	@ (8000878 <gdiBitBlt+0x5b8>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	f000 808c 	beq.w	8000888 <gdiBitBlt+0x5c8>
						screen[y][(x>>4)+1] |= pattern.halfword[0];
 8000770:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000774:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000778:	111b      	asrs	r3, r3, #4
 800077a:	b21b      	sxth	r3, r3
 800077c:	1c59      	adds	r1, r3, #1
 800077e:	483c      	ldr	r0, [pc, #240]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	00da      	lsls	r2, r3, #3
 8000788:	1ad2      	subs	r2, r2, r3
 800078a:	1853      	adds	r3, r2, r1
 800078c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000790:	4b39      	ldr	r3, [pc, #228]	@ (8000878 <gdiBitBlt+0x5b8>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000798:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800079c:	1109      	asrs	r1, r1, #4
 800079e:	b209      	sxth	r1, r1
 80007a0:	3101      	adds	r1, #1
 80007a2:	4303      	orrs	r3, r0
 80007a4:	b29c      	uxth	r4, r3
 80007a6:	4832      	ldr	r0, [pc, #200]	@ (8000870 <gdiBitBlt+0x5b0>)
 80007a8:	4613      	mov	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	00da      	lsls	r2, r3, #3
 80007b0:	1ad2      	subs	r2, r2, r3
 80007b2:	1853      	adds	r3, r2, r1
 80007b4:	4622      	mov	r2, r4
 80007b6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 80007ba:	e065      	b.n	8000888 <gdiBitBlt+0x5c8>
				case GDI_ROP_NAND:
					screen[y][x>>4] &= ~pattern.halfword[1];
 80007bc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80007c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007c4:	111b      	asrs	r3, r3, #4
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	4929      	ldr	r1, [pc, #164]	@ (8000870 <gdiBitBlt+0x5b0>)
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	00da      	lsls	r2, r3, #3
 80007d4:	1ad2      	subs	r2, r2, r3
 80007d6:	1813      	adds	r3, r2, r0
 80007d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007dc:	b21a      	sxth	r2, r3
 80007de:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <gdiBitBlt+0x5b8>)
 80007e0:	885b      	ldrh	r3, [r3, #2]
 80007e2:	b21b      	sxth	r3, r3
 80007e4:	43db      	mvns	r3, r3
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	4013      	ands	r3, r2
 80007ea:	b219      	sxth	r1, r3
 80007ec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80007f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007f4:	111b      	asrs	r3, r3, #4
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	461c      	mov	r4, r3
 80007fa:	b288      	uxth	r0, r1
 80007fc:	491c      	ldr	r1, [pc, #112]	@ (8000870 <gdiBitBlt+0x5b0>)
 80007fe:	4613      	mov	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	4413      	add	r3, r2
 8000804:	00da      	lsls	r2, r3, #3
 8000806:	1ad2      	subs	r2, r2, r3
 8000808:	1913      	adds	r3, r2, r4
 800080a:	4602      	mov	r2, r0
 800080c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <gdiBitBlt+0x5b8>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d039      	beq.n	800088c <gdiBitBlt+0x5cc>
						screen[y][(x>>4)+1] &= ~pattern.halfword[0];
 8000818:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800081c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000820:	111b      	asrs	r3, r3, #4
 8000822:	b21b      	sxth	r3, r3
 8000824:	1c59      	adds	r1, r3, #1
 8000826:	4812      	ldr	r0, [pc, #72]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000828:	4613      	mov	r3, r2
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	4413      	add	r3, r2
 800082e:	00da      	lsls	r2, r3, #3
 8000830:	1ad2      	subs	r2, r2, r3
 8000832:	1853      	adds	r3, r2, r1
 8000834:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000838:	b21a      	sxth	r2, r3
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <gdiBitBlt+0x5b8>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	b21b      	sxth	r3, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	b21b      	sxth	r3, r3
 8000844:	4013      	ands	r3, r2
 8000846:	b218      	sxth	r0, r3
 8000848:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800084c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000850:	111b      	asrs	r3, r3, #4
 8000852:	b21b      	sxth	r3, r3
 8000854:	1c59      	adds	r1, r3, #1
 8000856:	b284      	uxth	r4, r0
 8000858:	4805      	ldr	r0, [pc, #20]	@ (8000870 <gdiBitBlt+0x5b0>)
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00da      	lsls	r2, r3, #3
 8000862:	1ad2      	subs	r2, r2, r3
 8000864:	1853      	adds	r3, r2, r1
 8000866:	4622      	mov	r2, r4
 8000868:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 800086c:	e00e      	b.n	800088c <gdiBitBlt+0x5cc>
 800086e:	bf00      	nop
 8000870:	20000000 	.word	0x20000000
 8000874:	200027ec 	.word	0x200027ec
 8000878:	200027e8 	.word	0x200027e8
					break;
 800087c:	bf00      	nop
 800087e:	e006      	b.n	800088e <gdiBitBlt+0x5ce>
					break;
 8000880:	bf00      	nop
 8000882:	e004      	b.n	800088e <gdiBitBlt+0x5ce>
					break;
 8000884:	bf00      	nop
 8000886:	e002      	b.n	800088e <gdiBitBlt+0x5ce>
					break;
 8000888:	bf00      	nop
 800088a:	e000      	b.n	800088e <gdiBitBlt+0x5ce>
					break;
 800088c:	bf00      	nop
		for (todo = w; todo>0;) {
 800088e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000892:	2b00      	cmp	r3, #0
 8000894:	f73f ad3c 	bgt.w	8000310 <gdiBitBlt+0x50>
	for(;--h >= 0; y++) {
 8000898:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800089c:	b29b      	uxth	r3, r3
 800089e:	3301      	adds	r3, #1
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	813b      	strh	r3, [r7, #8]
 80008a4:	8c3b      	ldrh	r3, [r7, #32]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	843b      	strh	r3, [r7, #32]
 80008ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	f6bf ad2a 	bge.w	800030a <gdiBitBlt+0x4a>
			}
		}
	}
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc90      	pop	{r4, r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop

080008c4 <gdiPoint>:
		x			X position
		y			Y position

	return:			none
*/
void gdiPoint(PGDI_RECT rc, uint16_t x, uint16_t y) {
 80008c4:	b490      	push	{r4, r7}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	807b      	strh	r3, [r7, #2]
 80008d0:	4613      	mov	r3, r2
 80008d2:	803b      	strh	r3, [r7, #0]
	/* The bit addressing of pixels is MSB first (I2S property).
	 * so invert the lower nibble, indexing 16 pixels
	 */
	uint16_t nibble = x & 0b1111;
 80008d4:	887b      	ldrh	r3, [r7, #2]
 80008d6:	f003 030f 	and.w	r3, r3, #15
 80008da:	81fb      	strh	r3, [r7, #14]
	x = (x & ~0b1111) + 0b1111 - nibble;
 80008dc:	887b      	ldrh	r3, [r7, #2]
 80008de:	f023 030f 	bic.w	r3, r3, #15
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	89fb      	ldrh	r3, [r7, #14]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	330f      	adds	r3, #15
 80008ec:	807b      	strh	r3, [r7, #2]
	if (x < VID_PIXELS_X && y < VID_PIXELS_Y)	// Check display area bounds
 80008ee:	887b      	ldrh	r3, [r7, #2]
 80008f0:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 80008f4:	d243      	bcs.n	800097e <gdiPoint+0xba>
 80008f6:	883b      	ldrh	r3, [r7, #0]
 80008f8:	2bef      	cmp	r3, #239	@ 0xef
 80008fa:	d840      	bhi.n	800097e <gdiPoint+0xba>
	{
		switch(rop) {
 80008fc:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <gdiPoint+0xc4>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b04      	cmp	r3, #4
 8000902:	d83c      	bhi.n	800097e <gdiPoint+0xba>
 8000904:	a201      	add	r2, pc, #4	@ (adr r2, 800090c <gdiPoint+0x48>)
 8000906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090a:	bf00      	nop
 800090c:	08000921 	.word	0x08000921
 8000910:	08000939 	.word	0x08000939
 8000914:	08000939 	.word	0x08000939
 8000918:	08000951 	.word	0x08000951
 800091c:	08000921 	.word	0x08000921
			case GDI_ROP_COPY:
			case GDI_ROP_OR:	screenBB[y][x] = 1;
 8000920:	883a      	ldrh	r2, [r7, #0]
 8000922:	887b      	ldrh	r3, [r7, #2]
 8000924:	4919      	ldr	r1, [pc, #100]	@ (800098c <gdiPoint+0xc8>)
 8000926:	f44f 70a8 	mov.w	r0, #336	@ 0x150
 800092a:	fb00 f202 	mul.w	r2, r0, r2
 800092e:	4413      	add	r3, r2
 8000930:	2201      	movs	r2, #1
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
								break;
 8000936:	e022      	b.n	800097e <gdiPoint+0xba>
			case GDI_ROP_BONW:
			case GDI_ROP_NAND:	screenBB[y][x] = 0;
 8000938:	883a      	ldrh	r2, [r7, #0]
 800093a:	887b      	ldrh	r3, [r7, #2]
 800093c:	4913      	ldr	r1, [pc, #76]	@ (800098c <gdiPoint+0xc8>)
 800093e:	f44f 70a8 	mov.w	r0, #336	@ 0x150
 8000942:	fb00 f202 	mul.w	r2, r0, r2
 8000946:	4413      	add	r3, r2
 8000948:	2200      	movs	r2, #0
 800094a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
								break;
 800094e:	e016      	b.n	800097e <gdiPoint+0xba>
			case GDI_ROP_XOR:	screenBB[y][x] ^= 1;
 8000950:	883a      	ldrh	r2, [r7, #0]
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	490d      	ldr	r1, [pc, #52]	@ (800098c <gdiPoint+0xc8>)
 8000956:	f44f 70a8 	mov.w	r0, #336	@ 0x150
 800095a:	fb00 f202 	mul.w	r2, r0, r2
 800095e:	4413      	add	r3, r2
 8000960:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000964:	8839      	ldrh	r1, [r7, #0]
 8000966:	887b      	ldrh	r3, [r7, #2]
 8000968:	f082 0201 	eor.w	r2, r2, #1
 800096c:	4807      	ldr	r0, [pc, #28]	@ (800098c <gdiPoint+0xc8>)
 800096e:	f44f 74a8 	mov.w	r4, #336	@ 0x150
 8000972:	fb04 f101 	mul.w	r1, r4, r1
 8000976:	440b      	add	r3, r1
 8000978:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		}
	}
}
 800097c:	e7ff      	b.n	800097e <gdiPoint+0xba>
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bc90      	pop	{r4, r7}
 8000986:	4770      	bx	lr
 8000988:	20002760 	.word	0x20002760
 800098c:	22000000 	.word	0x22000000

08000990 <gdiLine>:
		x2			X end position
		y2			Y end position

	return			none
*/
void gdiLine(PGDI_RECT prc, int16_t x1, int16_t y1, int16_t x2, int16_t y2) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	4608      	mov	r0, r1
 800099a:	4611      	mov	r1, r2
 800099c:	461a      	mov	r2, r3
 800099e:	4603      	mov	r3, r0
 80009a0:	817b      	strh	r3, [r7, #10]
 80009a2:	460b      	mov	r3, r1
 80009a4:	813b      	strh	r3, [r7, #8]
 80009a6:	4613      	mov	r3, r2
 80009a8:	80fb      	strh	r3, [r7, #6]

int16_t		dx, dy, i, e;
int16_t		incx, incy, inc1, inc2;
int16_t		x, y;

	dx = x2 - x1;
 80009aa:	88fa      	ldrh	r2, [r7, #6]
 80009ac:	897b      	ldrh	r3, [r7, #10]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	dy = y2 - y1;
 80009b4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80009b6:	893b      	ldrh	r3, [r7, #8]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	84bb      	strh	r3, [r7, #36]	@ 0x24

	if(dx < 0) dx = -dx;
 80009be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	da03      	bge.n	80009ce <gdiLine+0x3e>
 80009c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80009c8:	425b      	negs	r3, r3
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	if(dy < 0) dy = -dy;
 80009ce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	da03      	bge.n	80009de <gdiLine+0x4e>
 80009d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80009d8:	425b      	negs	r3, r3
 80009da:	b29b      	uxth	r3, r3
 80009dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
	incx = 1;
 80009de:	2301      	movs	r3, #1
 80009e0:	83fb      	strh	r3, [r7, #30]
	if(x2 < x1) incx = -1;
 80009e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80009e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	da02      	bge.n	80009f4 <gdiLine+0x64>
 80009ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009f2:	83fb      	strh	r3, [r7, #30]
	incy = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	83bb      	strh	r3, [r7, #28]
	if(y2 < y1) incy = -1;
 80009f8:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 80009fc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	da02      	bge.n	8000a0a <gdiLine+0x7a>
 8000a04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a08:	83bb      	strh	r3, [r7, #28]
	x = x1;
 8000a0a:	897b      	ldrh	r3, [r7, #10]
 8000a0c:	837b      	strh	r3, [r7, #26]
	y = y1;
 8000a0e:	893b      	ldrh	r3, [r7, #8]
 8000a10:	833b      	strh	r3, [r7, #24]

	if (dx > dy) {
 8000a12:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8000a16:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	dd48      	ble.n	8000ab0 <gdiLine+0x120>
		gdiPoint(prc, x, y);
 8000a1e:	8b7b      	ldrh	r3, [r7, #26]
 8000a20:	8b3a      	ldrh	r2, [r7, #24]
 8000a22:	4619      	mov	r1, r3
 8000a24:	68f8      	ldr	r0, [r7, #12]
 8000a26:	f7ff ff4d 	bl	80008c4 <gdiPoint>
		e = 2*dy - dx;
 8000a2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	843b      	strh	r3, [r7, #32]
		inc1 = 2 * (dy - dx);
 8000a38:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8000a3c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	82fb      	strh	r3, [r7, #22]
		inc2 = 2 * dy;
 8000a4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	82bb      	strh	r3, [r7, #20]
		for (i = 0; i < dx; i++) {
 8000a52:	2300      	movs	r3, #0
 8000a54:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000a56:	e024      	b.n	8000aa2 <gdiLine+0x112>
			if (e >= 0) {
 8000a58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <gdiLine+0xe6>
				y += incy;
 8000a60:	8b3a      	ldrh	r2, [r7, #24]
 8000a62:	8bbb      	ldrh	r3, [r7, #28]
 8000a64:	4413      	add	r3, r2
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	833b      	strh	r3, [r7, #24]
				e += inc1;
 8000a6a:	8c3a      	ldrh	r2, [r7, #32]
 8000a6c:	8afb      	ldrh	r3, [r7, #22]
 8000a6e:	4413      	add	r3, r2
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	843b      	strh	r3, [r7, #32]
 8000a74:	e004      	b.n	8000a80 <gdiLine+0xf0>
			}
			else {
				e += inc2;
 8000a76:	8c3a      	ldrh	r2, [r7, #32]
 8000a78:	8abb      	ldrh	r3, [r7, #20]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	843b      	strh	r3, [r7, #32]
			}
			x += incx;
 8000a80:	8b7a      	ldrh	r2, [r7, #26]
 8000a82:	8bfb      	ldrh	r3, [r7, #30]
 8000a84:	4413      	add	r3, r2
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	837b      	strh	r3, [r7, #26]
			gdiPoint(prc, x, y);
 8000a8a:	8b7b      	ldrh	r3, [r7, #26]
 8000a8c:	8b3a      	ldrh	r2, [r7, #24]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f7ff ff17 	bl	80008c4 <gdiPoint>
		for (i = 0; i < dx; i++) {
 8000a96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000aa2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8000aa6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	dbd4      	blt.n	8000a58 <gdiLine+0xc8>
			}
			y += incy;
			gdiPoint(prc, x, y);
		}
	}
}
 8000aae:	e047      	b.n	8000b40 <gdiLine+0x1b0>
		gdiPoint(prc, x, y);
 8000ab0:	8b7b      	ldrh	r3, [r7, #26]
 8000ab2:	8b3a      	ldrh	r2, [r7, #24]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff ff04 	bl	80008c4 <gdiPoint>
		e = 2 * dx - dy;
 8000abc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	843b      	strh	r3, [r7, #32]
		inc1 = 2 * (dx - dy);
 8000aca:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8000ace:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	82fb      	strh	r3, [r7, #22]
		inc2 = 2 * dx;
 8000adc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	82bb      	strh	r3, [r7, #20]
		for(i = 0; i < dy; i++) {
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000ae8:	e024      	b.n	8000b34 <gdiLine+0x1a4>
			if (e >= 0) {
 8000aea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db0a      	blt.n	8000b08 <gdiLine+0x178>
				x += incx;
 8000af2:	8b7a      	ldrh	r2, [r7, #26]
 8000af4:	8bfb      	ldrh	r3, [r7, #30]
 8000af6:	4413      	add	r3, r2
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	837b      	strh	r3, [r7, #26]
				e += inc1;
 8000afc:	8c3a      	ldrh	r2, [r7, #32]
 8000afe:	8afb      	ldrh	r3, [r7, #22]
 8000b00:	4413      	add	r3, r2
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	843b      	strh	r3, [r7, #32]
 8000b06:	e004      	b.n	8000b12 <gdiLine+0x182>
				e += inc2;
 8000b08:	8c3a      	ldrh	r2, [r7, #32]
 8000b0a:	8abb      	ldrh	r3, [r7, #20]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	843b      	strh	r3, [r7, #32]
			y += incy;
 8000b12:	8b3a      	ldrh	r2, [r7, #24]
 8000b14:	8bbb      	ldrh	r3, [r7, #28]
 8000b16:	4413      	add	r3, r2
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	833b      	strh	r3, [r7, #24]
			gdiPoint(prc, x, y);
 8000b1c:	8b7b      	ldrh	r3, [r7, #26]
 8000b1e:	8b3a      	ldrh	r2, [r7, #24]
 8000b20:	4619      	mov	r1, r3
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f7ff fece 	bl	80008c4 <gdiPoint>
		for(i = 0; i < dy; i++) {
 8000b28:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	3301      	adds	r3, #1
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000b34:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8000b38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dbd4      	blt.n	8000aea <gdiLine+0x15a>
}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	@ 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <gdiRectangle>:
		y2			Y end position

	return			none
*/
void	gdiRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	4604      	mov	r4, r0
 8000b50:	4608      	mov	r0, r1
 8000b52:	4611      	mov	r1, r2
 8000b54:	461a      	mov	r2, r3
 8000b56:	4623      	mov	r3, r4
 8000b58:	80fb      	strh	r3, [r7, #6]
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80bb      	strh	r3, [r7, #4]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	807b      	strh	r3, [r7, #2]
 8000b62:	4613      	mov	r3, r2
 8000b64:	803b      	strh	r3, [r7, #0]
	gdiLine(NULL,x0,y0,x1,y0);
 8000b66:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000b6a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b6e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff ff08 	bl	8000990 <gdiLine>
	gdiLine(NULL,x0,y1,x1,y1);
 8000b80:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000b84:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b88:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	4603      	mov	r3, r0
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff fefb 	bl	8000990 <gdiLine>
	gdiLine(NULL,x0,y0,x0,y1);
 8000b9a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b9e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ba2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ba6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	4603      	mov	r3, r0
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff feee 	bl	8000990 <gdiLine>
	gdiLine(NULL,x1,y0,x1,y1);
 8000bb4:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000bb8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000bbc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000bc0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff fee1 	bl	8000990 <gdiLine>
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd90      	pop	{r4, r7, pc}
	...

08000bd8 <gdiDrawTextEx>:
		ptext		Pointer to text

	return			none
*/
void gdiDrawTextEx(int16_t x, int16_t y, char *ptext)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	4603      	mov	r3, r0
 8000be0:	603a      	str	r2, [r7, #0]
 8000be2:	80fb      	strh	r3, [r7, #6]
 8000be4:	460b      	mov	r3, r1
 8000be6:	80bb      	strh	r3, [r7, #4]
	char		c;

	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH)
 8000be8:	e01a      	b.n	8000c20 <gdiDrawTextEx+0x48>
		if (c >= GDI_SYSFONT_OFFSET)
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	2b1f      	cmp	r3, #31
 8000bee:	d913      	bls.n	8000c18 <gdiDrawTextEx+0x40>
			gdiBitBlt(NULL, x, y, GDI_SYSFONT_WIDTH, GDI_SYSFONT_HEIGHT, (pBMP) gdiSystemFont[c-GDI_SYSFONT_OFFSET]);
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	f1a3 0220 	sub.w	r2, r3, #32
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	4413      	add	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8000c3c <gdiDrawTextEx+0x64>)
 8000c00:	4413      	add	r3, r2
 8000c02:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c06:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	230a      	movs	r3, #10
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2306      	movs	r3, #6
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff fb54 	bl	80002c0 <gdiBitBlt>
	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH)
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	3306      	adds	r3, #6
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	80fb      	strh	r3, [r7, #6]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	603a      	str	r2, [r7, #0]
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d1dc      	bne.n	8000bea <gdiDrawTextEx+0x12>
//	clip here if		if (x >= VID_PIXELS_X - GDI_SYSFONT_WIDTH)
		// else control character handling ...
}
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08006f28 	.word	0x08006f28

08000c40 <DelayMs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DelayMs(uint32_t nTime) // delay function
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 8000c48:	4a09      	ldr	r2, [pc, #36]	@ (8000c70 <DelayMs+0x30>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  while((TimingDelay != 0));
 8000c4e:	bf00      	nop
 8000c50:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <DelayMs+0x30>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1fb      	bne.n	8000c50 <DelayMs+0x10>
  while(Paused);
 8000c58:	bf00      	nop
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <DelayMs+0x34>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1fb      	bne.n	8000c5a <DelayMs+0x1a>
}
 8000c62:	bf00      	nop
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	20002a48 	.word	0x20002a48
 8000c74:	20002a44 	.word	0x20002a44

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7c:	f000 ff41 	bl	8001b02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c80:	f000 f838 	bl	8000cf4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c84:	f000 fa20 	bl	80010c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c88:	f000 f9dc 	bl	8001044 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c8c:	f000 f89a 	bl	8000dc4 <MX_TIM2_Init>
  MX_I2S2_Init();
 8000c90:	f000 f870 	bl	8000d74 <MX_I2S2_Init>
  MX_TIM3_Init();
 8000c94:	f000 f912 	bl	8000ebc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //do know if it is necessary

  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4811      	ldr	r0, [pc, #68]	@ (8000ce0 <main+0x68>)
 8000c9c:	f003 fd36 	bl	800470c <HAL_TIM_OC_Start>
  // --------------------------------------------------------------
  // may be to start line that ?
  //HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_2); // this the same as
  // or
  // maybe to start like that :
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // this the same
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	480f      	ldr	r0, [pc, #60]	@ (8000ce0 <main+0x68>)
 8000ca4:	f003 fea6 	bl	80049f4 <HAL_TIM_PWM_Start>
  // --------------------------------------------------------------

  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3);
 8000ca8:	2108      	movs	r1, #8
 8000caa:	480d      	ldr	r0, [pc, #52]	@ (8000ce0 <main+0x68>)
 8000cac:	f003 fd2e 	bl	800470c <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_4);
 8000cb0:	210c      	movs	r1, #12
 8000cb2:	480b      	ldr	r0, [pc, #44]	@ (8000ce0 <main+0x68>)
 8000cb4:	f003 fd2a 	bl	800470c <HAL_TIM_OC_Start>
  HAL_TIM_Base_Start(&htim2); // start the timer for the video sync
 8000cb8:	480a      	ldr	r0, [pc, #40]	@ (8000ce4 <main+0x6c>)
 8000cba:	f003 fc55 	bl	8004568 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // i am not sure if i need to start this PWM
 8000cbe:	210c      	movs	r1, #12
 8000cc0:	4808      	ldr	r0, [pc, #32]	@ (8000ce4 <main+0x6c>)
 8000cc2:	f003 fe97 	bl	80049f4 <HAL_TIM_PWM_Start>


  HAL_I2S_Transmit_DMA(&hi2s2, Vblack, VID_HSIZE);
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	4907      	ldr	r1, [pc, #28]	@ (8000ce8 <main+0x70>)
 8000cca:	4808      	ldr	r0, [pc, #32]	@ (8000cec <main+0x74>)
 8000ccc:	f001 fd6e 	bl	80027ac <HAL_I2S_Transmit_DMA>
//
//    // Now the buffer will be replayed over and over at the I2S bitrate.
//}

  // also i added a function for handleing
  srand(SysTick->VAL);
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <main+0x78>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f005 f89b 	bl	8005e10 <srand>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  show();
 8000cda:	f000 fa45 	bl	8001168 <show>
 8000cde:	e7fc      	b.n	8000cda <main+0x62>
 8000ce0:	200028d8 	.word	0x200028d8
 8000ce4:	2000288c 	.word	0x2000288c
 8000ce8:	20002a50 	.word	0x20002a50
 8000cec:	200027f0 	.word	0x200027f0
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b094      	sub	sp, #80	@ 0x50
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 0318 	add.w	r3, r7, #24
 8000cfe:	2238      	movs	r2, #56	@ 0x38
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f005 f9f5 	bl	80060f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d16:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d1a:	f001 fe5f 	bl	80029dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d28:	2340      	movs	r3, #64	@ 0x40
 8000d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d30:	f107 0318 	add.w	r3, r7, #24
 8000d34:	4618      	mov	r0, r3
 8000d36:	f001 ff05 	bl	8002b44 <HAL_RCC_OscConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d40:	f000 f9e6 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d44:	230f      	movs	r3, #15
 8000d46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f002 fa03 	bl	8003168 <HAL_RCC_ClockConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000d68:	f000 f9d2 	bl	8001110 <Error_Handler>
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3750      	adds	r7, #80	@ 0x50
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2S2_Init 1 */
	//hi2s2.Init.CPOL = I2S_CPOL_HIGH;

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000d78:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <MX_I2S2_Init+0x48>)
 8000d7a:	4a11      	ldr	r2, [pc, #68]	@ (8000dc0 <MX_I2S2_Init+0x4c>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <MX_I2S2_Init+0x48>)
 8000d80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d84:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d86:	4b0d      	ldr	r3, [pc, #52]	@ (8000dbc <MX_I2S2_Init+0x48>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <MX_I2S2_Init+0x48>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000d92:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <MX_I2S2_Init+0x48>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000d98:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <MX_I2S2_Init+0x48>)
 8000d9a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000d9e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <MX_I2S2_Init+0x48>)
 8000da2:	2208      	movs	r2, #8
 8000da4:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <MX_I2S2_Init+0x48>)
 8000da8:	f001 fc20 	bl	80025ec <HAL_I2S_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8000db2:	f000 f9ad 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200027f0 	.word	0x200027f0
 8000dc0:	40003800 	.word	0x40003800

08000dc4 <MX_TIM2_Init>:
  * @param None
  * @retval None
  */

static void MX_TIM2_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08e      	sub	sp, #56	@ 0x38
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
  //TIM_SlaveConfigTypeDef sSlaveConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de4:	463b      	mov	r3, r7
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
 8000df2:	615a      	str	r2, [r3, #20]
 8000df4:	619a      	str	r2, [r3, #24]
  //htim2.Init.Prescaler         = VID_HSIZE/4 - 1;
  //htim2.Init.Period            = 2*VID_VSIZE - 1;
  //sConfigOC.Pulse      = VID_VSIZE - 1;

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000df6:	4b30      	ldr	r3, [pc, #192]	@ (8000eb8 <MX_TIM2_Init+0xf4>)
 8000df8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dfc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VID_HSIZE/4 - 1;
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb8 <MX_TIM2_Init+0xf4>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb8 <MX_TIM2_Init+0xf4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2*VID_VSIZE - 1;
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb8 <MX_TIM2_Init+0xf4>)
 8000e0c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8000e10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e12:	4b29      	ldr	r3, [pc, #164]	@ (8000eb8 <MX_TIM2_Init+0xf4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e18:	4b27      	ldr	r3, [pc, #156]	@ (8000eb8 <MX_TIM2_Init+0xf4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e1e:	4826      	ldr	r0, [pc, #152]	@ (8000eb8 <MX_TIM2_Init+0xf4>)
 8000e20:	f003 fb4a 	bl	80044b8 <HAL_TIM_Base_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000e2a:	f000 f971 	bl	8001110 <Error_Handler>
  }
  // chat told me to add - this is external then the ioc aoutumatics
  sClockSourceConfig.ClockSource    = TIM_CLOCKSOURCE_ETRMODE1;  // CHANGE it from INTERNAL to ETRMODE1
 8000e2e:	2370      	movs	r3, #112	@ 0x70
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockPolarity  = TIM_CLOCKPOLARITY_NONINVERTED;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	633b      	str	r3, [r7, #48]	@ 0x30
  sClockSourceConfig.ClockFilter    = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	637b      	str	r3, [r7, #52]	@ 0x34


  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e42:	4619      	mov	r1, r3
 8000e44:	481c      	ldr	r0, [pc, #112]	@ (8000eb8 <MX_TIM2_Init+0xf4>)
 8000e46:	f004 f875 	bl	8004f34 <HAL_TIM_ConfigClockSource>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000e50:	f000 f95e 	bl	8001110 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e54:	4818      	ldr	r0, [pc, #96]	@ (8000eb8 <MX_TIM2_Init+0xf4>)
 8000e56:	f003 fd6b 	bl	8004930 <HAL_TIM_PWM_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e60:	f000 f956 	bl	8001110 <Error_Handler>
//  sSlaveConfig.TriggerFilter = 0;
//  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
//  {
//    Error_Handler();
//  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000e64:	2370      	movs	r3, #112	@ 0x70
 8000e66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	4811      	ldr	r0, [pc, #68]	@ (8000eb8 <MX_TIM2_Init+0xf4>)
 8000e74:	f004 ff36 	bl	8005ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8000e7e:	f000 f947 	bl	8001110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e82:	2360      	movs	r3, #96	@ 0x60
 8000e84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = VID_VSIZE - 1;
 8000e86:	f44f 731c 	mov.w	r3, #624	@ 0x270
 8000e8a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	220c      	movs	r2, #12
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4807      	ldr	r0, [pc, #28]	@ (8000eb8 <MX_TIM2_Init+0xf4>)
 8000e9c:	f003 ff36 	bl	8004d0c <HAL_TIM_PWM_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000ea6:	f000 f933 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000eaa:	4803      	ldr	r0, [pc, #12]	@ (8000eb8 <MX_TIM2_Init+0xf4>)
 8000eac:	f000 fc5e 	bl	800176c <HAL_TIM_MspPostInit>

}
 8000eb0:	bf00      	nop
 8000eb2:	3738      	adds	r7, #56	@ 0x38
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2000288c 	.word	0x2000288c

08000ebc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b094      	sub	sp, #80	@ 0x50
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ed0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	f107 0320 	add.w	r3, r7, #32
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]
 8000efa:	615a      	str	r2, [r3, #20]
 8000efc:	619a      	str	r2, [r3, #24]

  //FOR CHANNEL 2:
  //sConfigOC.Pulse = HSYNCCOUNTS;

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000efe:	4b4f      	ldr	r3, [pc, #316]	@ (800103c <MX_TIM3_Init+0x180>)
 8000f00:	4a4f      	ldr	r2, [pc, #316]	@ (8001040 <MX_TIM3_Init+0x184>)
 8000f02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f04:	4b4d      	ldr	r3, [pc, #308]	@ (800103c <MX_TIM3_Init+0x180>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800103c <MX_TIM3_Init+0x180>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIMERCOUNTS - 1;
 8000f10:	4b4a      	ldr	r3, [pc, #296]	@ (800103c <MX_TIM3_Init+0x180>)
 8000f12:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000f16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f18:	4b48      	ldr	r3, [pc, #288]	@ (800103c <MX_TIM3_Init+0x180>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1e:	4b47      	ldr	r3, [pc, #284]	@ (800103c <MX_TIM3_Init+0x180>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f24:	4845      	ldr	r0, [pc, #276]	@ (800103c <MX_TIM3_Init+0x180>)
 8000f26:	f003 fac7 	bl	80044b8 <HAL_TIM_Base_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f30:	f000 f8ee 	bl	8001110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f38:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f3a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f3e:	4619      	mov	r1, r3
 8000f40:	483e      	ldr	r0, [pc, #248]	@ (800103c <MX_TIM3_Init+0x180>)
 8000f42:	f003 fff7 	bl	8004f34 <HAL_TIM_ConfigClockSource>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f4c:	f000 f8e0 	bl	8001110 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000f50:	483a      	ldr	r0, [pc, #232]	@ (800103c <MX_TIM3_Init+0x180>)
 8000f52:	f003 fb79 	bl	8004648 <HAL_TIM_OC_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8000f5c:	f000 f8d8 	bl	8001110 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f60:	4836      	ldr	r0, [pc, #216]	@ (800103c <MX_TIM3_Init+0x180>)
 8000f62:	f003 fce5 	bl	8004930 <HAL_TIM_PWM_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000f6c:	f000 f8d0 	bl	8001110 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000f70:	2306      	movs	r3, #6
 8000f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000f74:	2310      	movs	r3, #16
 8000f76:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000f78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	482f      	ldr	r0, [pc, #188]	@ (800103c <MX_TIM3_Init+0x180>)
 8000f80:	f004 f8ee 	bl	8005160 <HAL_TIM_SlaveConfigSynchro>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000f8a:	f000 f8c1 	bl	8001110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f96:	f107 0320 	add.w	r3, r7, #32
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4827      	ldr	r0, [pc, #156]	@ (800103c <MX_TIM3_Init+0x180>)
 8000f9e:	f004 fea1 	bl	8005ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000fa8:	f000 f8b2 	bl	8001110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000fac:	2330      	movs	r3, #48	@ 0x30
 8000fae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = NO_TOG;
 8000fb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481d      	ldr	r0, [pc, #116]	@ (800103c <MX_TIM3_Init+0x180>)
 8000fc6:	f003 fe27 	bl	8004c18 <HAL_TIM_OC_ConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000fd0:	f000 f89e 	bl	8001110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd4:	2360      	movs	r3, #96	@ 0x60
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = HSYNCCOUNTS;
 8000fd8:	234b      	movs	r3, #75	@ 0x4b
 8000fda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2204      	movs	r2, #4
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4816      	ldr	r0, [pc, #88]	@ (800103c <MX_TIM3_Init+0x180>)
 8000fe4:	f003 fe92 	bl	8004d0c <HAL_TIM_PWM_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM3_Init+0x136>
  {
    Error_Handler();
 8000fee:	f000 f88f 	bl	8001110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 208;
 8000ff6:	23d0      	movs	r3, #208	@ 0xd0
 8000ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2208      	movs	r2, #8
 8000ffe:	4619      	mov	r1, r3
 8001000:	480e      	ldr	r0, [pc, #56]	@ (800103c <MX_TIM3_Init+0x180>)
 8001002:	f003 fe09 	bl	8004c18 <HAL_TIM_OC_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM3_Init+0x154>
  {
    Error_Handler();
 800100c:	f000 f880 	bl	8001110 <Error_Handler>
  }
  sConfigOC.Pulse = 880;
 8001010:	f44f 735c 	mov.w	r3, #880	@ 0x370
 8001014:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	220c      	movs	r2, #12
 800101a:	4619      	mov	r1, r3
 800101c:	4807      	ldr	r0, [pc, #28]	@ (800103c <MX_TIM3_Init+0x180>)
 800101e:	f003 fdfb 	bl	8004c18 <HAL_TIM_OC_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM3_Init+0x170>
  {
    Error_Handler();
 8001028:	f000 f872 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800102c:	4803      	ldr	r0, [pc, #12]	@ (800103c <MX_TIM3_Init+0x180>)
 800102e:	f000 fb9d 	bl	800176c <HAL_TIM_MspPostInit>

}
 8001032:	bf00      	nop
 8001034:	3750      	adds	r7, #80	@ 0x50
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200028d8 	.word	0x200028d8
 8001040:	40000400 	.word	0x40000400

08001044 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800104a:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <MX_DMA_Init+0x80>)
 800104c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800104e:	4a1d      	ldr	r2, [pc, #116]	@ (80010c4 <MX_DMA_Init+0x80>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6493      	str	r3, [r2, #72]	@ 0x48
 8001056:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <MX_DMA_Init+0x80>)
 8001058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <MX_DMA_Init+0x80>)
 8001064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001066:	4a17      	ldr	r2, [pc, #92]	@ (80010c4 <MX_DMA_Init+0x80>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6493      	str	r3, [r2, #72]	@ 0x48
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <MX_DMA_Init+0x80>)
 8001070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	200c      	movs	r0, #12
 8001080:	f000 fe8b 	bl	8001d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001084:	200c      	movs	r0, #12
 8001086:	f000 fea2 	bl	8001dce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	200d      	movs	r0, #13
 8001090:	f000 fe83 	bl	8001d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001094:	200d      	movs	r0, #13
 8001096:	f000 fe9a 	bl	8001dce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	200f      	movs	r0, #15
 80010a0:	f000 fe7b 	bl	8001d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010a4:	200f      	movs	r0, #15
 80010a6:	f000 fe92 	bl	8001dce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	2010      	movs	r0, #16
 80010b0:	f000 fe73 	bl	8001d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80010b4:	2010      	movs	r0, #16
 80010b6:	f000 fe8a 	bl	8001dce <HAL_NVIC_EnableIRQ>

}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <MX_GPIO_Init+0x44>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	4a0e      	ldr	r2, [pc, #56]	@ (800110c <MX_GPIO_Init+0x44>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010da:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <MX_GPIO_Init+0x44>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	4b09      	ldr	r3, [pc, #36]	@ (800110c <MX_GPIO_Init+0x44>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	4a08      	ldr	r2, [pc, #32]	@ (800110c <MX_GPIO_Init+0x44>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <MX_GPIO_Init+0x44>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <Error_Handler+0x8>

0800111c <introScreen>:
	}
	Paused = !Paused;
}

void introScreen(char *subtitle)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	vidClearScreen();
 8001124:	f000 fcb8 	bl	8001a98 <vidClearScreen>
	gdiDrawTextEx(120, 40, KOPTEKST);
 8001128:	4a0d      	ldr	r2, [pc, #52]	@ (8001160 <introScreen+0x44>)
 800112a:	2128      	movs	r1, #40	@ 0x28
 800112c:	2078      	movs	r0, #120	@ 0x78
 800112e:	f7ff fd53 	bl	8000bd8 <gdiDrawTextEx>
	gdiDrawTextEx(100, 50, SUBTITEL);
 8001132:	4a0c      	ldr	r2, [pc, #48]	@ (8001164 <introScreen+0x48>)
 8001134:	2132      	movs	r1, #50	@ 0x32
 8001136:	2064      	movs	r0, #100	@ 0x64
 8001138:	f7ff fd4e 	bl	8000bd8 <gdiDrawTextEx>
	DelayMs(2000); gdiDrawTextEx(110, 60, subtitle);
 800113c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001140:	f7ff fd7e 	bl	8000c40 <DelayMs>
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	213c      	movs	r1, #60	@ 0x3c
 8001148:	206e      	movs	r0, #110	@ 0x6e
 800114a:	f7ff fd45 	bl	8000bd8 <gdiDrawTextEx>
	DelayMs(3000);
 800114e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001152:	f7ff fd75 	bl	8000c40 <DelayMs>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	08006e50 	.word	0x08006e50
 8001164:	08006e5c 	.word	0x08006e5c

08001168 <show>:

void show(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af02      	add	r7, sp, #8
	int16_t		x1, y1, x2, y2, i;

//	Demo Point
	introScreen("point demonstration");
 800116e:	48a7      	ldr	r0, [pc, #668]	@ (800140c <show+0x2a4>)
 8001170:	f7ff ffd4 	bl	800111c <introScreen>
	for (i = 0; i < 500; i++) {
 8001174:	2300      	movs	r3, #0
 8001176:	81bb      	strh	r3, [r7, #12]
 8001178:	e02e      	b.n	80011d8 <show+0x70>
		DelayMs(10);
 800117a:	200a      	movs	r0, #10
 800117c:	f7ff fd60 	bl	8000c40 <DelayMs>
		x1 = rand() % VID_PIXELS_X;
 8001180:	f004 fe74 	bl	8005e6c <rand>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	0913      	lsrs	r3, r2, #4
 800118a:	49a1      	ldr	r1, [pc, #644]	@ (8001410 <show+0x2a8>)
 800118c:	fba1 1303 	umull	r1, r3, r1, r3
 8001190:	085b      	lsrs	r3, r3, #1
 8001192:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8001196:	fb01 f303 	mul.w	r3, r1, r3
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	81fb      	strh	r3, [r7, #14]
		y1 = rand() % VID_PIXELS_Y;
 800119e:	f004 fe65 	bl	8005e6c <rand>
 80011a2:	4602      	mov	r2, r0
 80011a4:	4b9b      	ldr	r3, [pc, #620]	@ (8001414 <show+0x2ac>)
 80011a6:	fb83 1302 	smull	r1, r3, r3, r2
 80011aa:	4413      	add	r3, r2
 80011ac:	11d9      	asrs	r1, r3, #7
 80011ae:	17d3      	asrs	r3, r2, #31
 80011b0:	1ac9      	subs	r1, r1, r3
 80011b2:	460b      	mov	r3, r1
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	1a5b      	subs	r3, r3, r1
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	1ad1      	subs	r1, r2, r3
 80011bc:	460b      	mov	r3, r1
 80011be:	817b      	strh	r3, [r7, #10]
		gdiPoint(NULL,x1,y1);
 80011c0:	89fb      	ldrh	r3, [r7, #14]
 80011c2:	897a      	ldrh	r2, [r7, #10]
 80011c4:	4619      	mov	r1, r3
 80011c6:	2000      	movs	r0, #0
 80011c8:	f7ff fb7c 	bl	80008c4 <gdiPoint>
	for (i = 0; i < 500; i++) {
 80011cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	3301      	adds	r3, #1
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	81bb      	strh	r3, [r7, #12]
 80011d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011dc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011e0:	dbcb      	blt.n	800117a <show+0x12>
	}
	DelayMs(3000);
 80011e2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80011e6:	f7ff fd2b 	bl	8000c40 <DelayMs>

//	Demo Line
	introScreen("line demonstration");
 80011ea:	488b      	ldr	r0, [pc, #556]	@ (8001418 <show+0x2b0>)
 80011ec:	f7ff ff96 	bl	800111c <introScreen>
	for (i = 0; i < 50; i++) {
 80011f0:	2300      	movs	r3, #0
 80011f2:	81bb      	strh	r3, [r7, #12]
 80011f4:	e055      	b.n	80012a2 <show+0x13a>
		DelayMs(150);
 80011f6:	2096      	movs	r0, #150	@ 0x96
 80011f8:	f7ff fd22 	bl	8000c40 <DelayMs>
		x1 = rand() % VID_PIXELS_X;
 80011fc:	f004 fe36 	bl	8005e6c <rand>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	0913      	lsrs	r3, r2, #4
 8001206:	4982      	ldr	r1, [pc, #520]	@ (8001410 <show+0x2a8>)
 8001208:	fba1 1303 	umull	r1, r3, r1, r3
 800120c:	085b      	lsrs	r3, r3, #1
 800120e:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8001212:	fb01 f303 	mul.w	r3, r1, r3
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	81fb      	strh	r3, [r7, #14]
		y1 = rand() % VID_PIXELS_Y;
 800121a:	f004 fe27 	bl	8005e6c <rand>
 800121e:	4602      	mov	r2, r0
 8001220:	4b7c      	ldr	r3, [pc, #496]	@ (8001414 <show+0x2ac>)
 8001222:	fb83 1302 	smull	r1, r3, r3, r2
 8001226:	4413      	add	r3, r2
 8001228:	11d9      	asrs	r1, r3, #7
 800122a:	17d3      	asrs	r3, r2, #31
 800122c:	1ac9      	subs	r1, r1, r3
 800122e:	460b      	mov	r3, r1
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	1a5b      	subs	r3, r3, r1
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	1ad1      	subs	r1, r2, r3
 8001238:	460b      	mov	r3, r1
 800123a:	817b      	strh	r3, [r7, #10]
		x2 = rand() % VID_PIXELS_X;
 800123c:	f004 fe16 	bl	8005e6c <rand>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	0913      	lsrs	r3, r2, #4
 8001246:	4972      	ldr	r1, [pc, #456]	@ (8001410 <show+0x2a8>)
 8001248:	fba1 1303 	umull	r1, r3, r1, r3
 800124c:	085b      	lsrs	r3, r3, #1
 800124e:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8001252:	fb01 f303 	mul.w	r3, r1, r3
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	813b      	strh	r3, [r7, #8]
		y2 = rand() % VID_PIXELS_Y;
 800125a:	f004 fe07 	bl	8005e6c <rand>
 800125e:	4602      	mov	r2, r0
 8001260:	4b6c      	ldr	r3, [pc, #432]	@ (8001414 <show+0x2ac>)
 8001262:	fb83 1302 	smull	r1, r3, r3, r2
 8001266:	4413      	add	r3, r2
 8001268:	11d9      	asrs	r1, r3, #7
 800126a:	17d3      	asrs	r3, r2, #31
 800126c:	1ac9      	subs	r1, r1, r3
 800126e:	460b      	mov	r3, r1
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	1a5b      	subs	r3, r3, r1
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	1ad1      	subs	r1, r2, r3
 8001278:	460b      	mov	r3, r1
 800127a:	80fb      	strh	r3, [r7, #6]
		gdiLine(NULL,x1,y1,x2,y2);
 800127c:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8001280:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001284:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	4603      	mov	r3, r0
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fb7d 	bl	8000990 <gdiLine>
	for (i = 0; i < 50; i++) {
 8001296:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800129a:	b29b      	uxth	r3, r3
 800129c:	3301      	adds	r3, #1
 800129e:	b29b      	uxth	r3, r3
 80012a0:	81bb      	strh	r3, [r7, #12]
 80012a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012a6:	2b31      	cmp	r3, #49	@ 0x31
 80012a8:	dda5      	ble.n	80011f6 <show+0x8e>
	}
	DelayMs(3000);
 80012aa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80012ae:	f7ff fcc7 	bl	8000c40 <DelayMs>

//	Demo Rectangle
	introScreen("rectangle demonstration");
 80012b2:	485a      	ldr	r0, [pc, #360]	@ (800141c <show+0x2b4>)
 80012b4:	f7ff ff32 	bl	800111c <introScreen>
	for (i = 0; i < 15; i++) {
 80012b8:	2300      	movs	r3, #0
 80012ba:	81bb      	strh	r3, [r7, #12]
 80012bc:	e051      	b.n	8001362 <show+0x1fa>
		DelayMs(600);
 80012be:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80012c2:	f7ff fcbd 	bl	8000c40 <DelayMs>
		x1 = rand() % VID_PIXELS_X;
 80012c6:	f004 fdd1 	bl	8005e6c <rand>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	0913      	lsrs	r3, r2, #4
 80012d0:	494f      	ldr	r1, [pc, #316]	@ (8001410 <show+0x2a8>)
 80012d2:	fba1 1303 	umull	r1, r3, r1, r3
 80012d6:	085b      	lsrs	r3, r3, #1
 80012d8:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80012dc:	fb01 f303 	mul.w	r3, r1, r3
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	81fb      	strh	r3, [r7, #14]
		y1 = rand() % VID_PIXELS_Y;
 80012e4:	f004 fdc2 	bl	8005e6c <rand>
 80012e8:	4602      	mov	r2, r0
 80012ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001414 <show+0x2ac>)
 80012ec:	fb83 1302 	smull	r1, r3, r3, r2
 80012f0:	4413      	add	r3, r2
 80012f2:	11d9      	asrs	r1, r3, #7
 80012f4:	17d3      	asrs	r3, r2, #31
 80012f6:	1ac9      	subs	r1, r1, r3
 80012f8:	460b      	mov	r3, r1
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	1a5b      	subs	r3, r3, r1
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	1ad1      	subs	r1, r2, r3
 8001302:	460b      	mov	r3, r1
 8001304:	817b      	strh	r3, [r7, #10]
		x2 = rand() % 100;
 8001306:	f004 fdb1 	bl	8005e6c <rand>
 800130a:	4603      	mov	r3, r0
 800130c:	4a44      	ldr	r2, [pc, #272]	@ (8001420 <show+0x2b8>)
 800130e:	fb82 1203 	smull	r1, r2, r2, r3
 8001312:	1151      	asrs	r1, r2, #5
 8001314:	17da      	asrs	r2, r3, #31
 8001316:	1a8a      	subs	r2, r1, r2
 8001318:	2164      	movs	r1, #100	@ 0x64
 800131a:	fb01 f202 	mul.w	r2, r1, r2
 800131e:	1a9a      	subs	r2, r3, r2
 8001320:	4613      	mov	r3, r2
 8001322:	813b      	strh	r3, [r7, #8]
		y2 = rand() % 100;
 8001324:	f004 fda2 	bl	8005e6c <rand>
 8001328:	4603      	mov	r3, r0
 800132a:	4a3d      	ldr	r2, [pc, #244]	@ (8001420 <show+0x2b8>)
 800132c:	fb82 1203 	smull	r1, r2, r2, r3
 8001330:	1151      	asrs	r1, r2, #5
 8001332:	17da      	asrs	r2, r3, #31
 8001334:	1a8a      	subs	r2, r1, r2
 8001336:	2164      	movs	r1, #100	@ 0x64
 8001338:	fb01 f202 	mul.w	r2, r1, r2
 800133c:	1a9a      	subs	r2, r3, r2
 800133e:	4613      	mov	r3, r2
 8001340:	80fb      	strh	r3, [r7, #6]
		gdiRectangle(x1,y1,x2,y2);
 8001342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001346:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800134a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800134e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001352:	f7ff fbf9 	bl	8000b48 <gdiRectangle>
	for (i = 0; i < 15; i++) {
 8001356:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800135a:	b29b      	uxth	r3, r3
 800135c:	3301      	adds	r3, #1
 800135e:	b29b      	uxth	r3, r3
 8001360:	81bb      	strh	r3, [r7, #12]
 8001362:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001366:	2b0e      	cmp	r3, #14
 8001368:	dda9      	ble.n	80012be <show+0x156>
	}
	DelayMs(3000);
 800136a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800136e:	f7ff fc67 	bl	8000c40 <DelayMs>
		gdiCircle(x,y,x1,GDI_ROP_COPY);
	}
	DelayMs(3000);
#endif
//	Demo Bitmap
	introScreen("bitmap demonstration");
 8001372:	482c      	ldr	r0, [pc, #176]	@ (8001424 <show+0x2bc>)
 8001374:	f7ff fed2 	bl	800111c <introScreen>
	x1 = VID_PIXELS_X / 8;
 8001378:	232a      	movs	r3, #42	@ 0x2a
 800137a:	81fb      	strh	r3, [r7, #14]
	y1 = 220;
 800137c:	23dc      	movs	r3, #220	@ 0xdc
 800137e:	817b      	strh	r3, [r7, #10]
	do {
		gdiBitBlt(NULL,x1,y1,15,12,(pBMP)((x1&1)?deBadBoys1:
 8001380:	89fb      	ldrh	r3, [r7, #14]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d108      	bne.n	800139c <show+0x234>
				((x1&3)?deBadBoys2:deBadBoys0)));
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <show+0x230>
 8001394:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <show+0x2c0>)
 8001396:	e002      	b.n	800139e <show+0x236>
 8001398:	4b24      	ldr	r3, [pc, #144]	@ (800142c <show+0x2c4>)
 800139a:	e000      	b.n	800139e <show+0x236>
		gdiBitBlt(NULL,x1,y1,15,12,(pBMP)((x1&1)?deBadBoys1:
 800139c:	4b24      	ldr	r3, [pc, #144]	@ (8001430 <show+0x2c8>)
 800139e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80013a2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	230c      	movs	r3, #12
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	230f      	movs	r3, #15
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7fe ff86 	bl	80002c0 <gdiBitBlt>
		DelayMs(100);
 80013b4:	2064      	movs	r0, #100	@ 0x64
 80013b6:	f7ff fc43 	bl	8000c40 <DelayMs>
	} while (x1++ < (VID_PIXELS_X * 7 / 8));
 80013ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013be:	b293      	uxth	r3, r2
 80013c0:	3301      	adds	r3, #1
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	81fb      	strh	r3, [r7, #14]
 80013c6:	b293      	uxth	r3, r2
 80013c8:	f5b3 7f93 	cmp.w	r3, #294	@ 0x126
 80013cc:	d3d8      	bcc.n	8001380 <show+0x218>
	DelayMs(3000);
 80013ce:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80013d2:	f7ff fc35 	bl	8000c40 <DelayMs>

// Goodbye
	introScreen("font size 6x10, 42 * 24 text");
 80013d6:	4817      	ldr	r0, [pc, #92]	@ (8001434 <show+0x2cc>)
 80013d8:	f7ff fea0 	bl	800111c <introScreen>

	gdiDrawTextEx(80, 90, "ARM MCU development");
 80013dc:	4a16      	ldr	r2, [pc, #88]	@ (8001438 <show+0x2d0>)
 80013de:	215a      	movs	r1, #90	@ 0x5a
 80013e0:	2050      	movs	r0, #80	@ 0x50
 80013e2:	f7ff fbf9 	bl	8000bd8 <gdiDrawTextEx>
	gdiDrawTextEx(95, 120, "by E.J.W. VRIEZE");
 80013e6:	4a15      	ldr	r2, [pc, #84]	@ (800143c <show+0x2d4>)
 80013e8:	2178      	movs	r1, #120	@ 0x78
 80013ea:	205f      	movs	r0, #95	@ 0x5f
 80013ec:	f7ff fbf4 	bl	8000bd8 <gdiDrawTextEx>
	gdiDrawTextEx(95, 130, "~~~~~ 2016 ~~~~~");
 80013f0:	4a13      	ldr	r2, [pc, #76]	@ (8001440 <show+0x2d8>)
 80013f2:	2182      	movs	r1, #130	@ 0x82
 80013f4:	205f      	movs	r0, #95	@ 0x5f
 80013f6:	f7ff fbef 	bl	8000bd8 <gdiDrawTextEx>
	DelayMs(9000);
 80013fa:	f242 3028 	movw	r0, #9000	@ 0x2328
 80013fe:	f7ff fc1f 	bl	8000c40 <DelayMs>
}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	08006e74 	.word	0x08006e74
 8001410:	18618619 	.word	0x18618619
 8001414:	88888889 	.word	0x88888889
 8001418:	08006e88 	.word	0x08006e88
 800141c:	08006e9c 	.word	0x08006e9c
 8001420:	51eb851f 	.word	0x51eb851f
 8001424:	08006eb4 	.word	0x08006eb4
 8001428:	08007338 	.word	0x08007338
 800142c:	08007308 	.word	0x08007308
 8001430:	08007320 	.word	0x08007320
 8001434:	08006ecc 	.word	0x08006ecc
 8001438:	08006eec 	.word	0x08006eec
 800143c:	08006f00 	.word	0x08006f00
 8001440:	08006f14 	.word	0x08006f14

08001444 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <HAL_MspInit+0x44>)
 800144c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800144e:	4a0e      	ldr	r2, [pc, #56]	@ (8001488 <HAL_MspInit+0x44>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6613      	str	r3, [r2, #96]	@ 0x60
 8001456:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <HAL_MspInit+0x44>)
 8001458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <HAL_MspInit+0x44>)
 8001464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001466:	4a08      	ldr	r2, [pc, #32]	@ (8001488 <HAL_MspInit+0x44>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800146c:	6593      	str	r3, [r2, #88]	@ 0x58
 800146e:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <HAL_MspInit+0x44>)
 8001470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800147a:	f001 fb53 	bl	8002b24 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000

0800148c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b09e      	sub	sp, #120	@ 0x78
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	2254      	movs	r2, #84	@ 0x54
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f004 fe20 	bl	80060f2 <memset>
  if(hi2s->Instance==SPI2)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a35      	ldr	r2, [pc, #212]	@ (800158c <HAL_I2S_MspInit+0x100>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d163      	bne.n	8001584 <HAL_I2S_MspInit+0xf8>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80014bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014c0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 f868 	bl	80035a0 <HAL_RCCEx_PeriphCLKConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 80014d6:	f7ff fe1b 	bl	8001110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014da:	4b2d      	ldr	r3, [pc, #180]	@ (8001590 <HAL_I2S_MspInit+0x104>)
 80014dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014de:	4a2c      	ldr	r2, [pc, #176]	@ (8001590 <HAL_I2S_MspInit+0x104>)
 80014e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001590 <HAL_I2S_MspInit+0x104>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <HAL_I2S_MspInit+0x104>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	4a26      	ldr	r2, [pc, #152]	@ (8001590 <HAL_I2S_MspInit+0x104>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fe:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <HAL_I2S_MspInit+0x104>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800150a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800150e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800151c:	2305      	movs	r3, #5
 800151e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001524:	4619      	mov	r1, r3
 8001526:	481b      	ldr	r0, [pc, #108]	@ (8001594 <HAL_I2S_MspInit+0x108>)
 8001528:	f000 fede 	bl	80022e8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800152c:	4b1a      	ldr	r3, [pc, #104]	@ (8001598 <HAL_I2S_MspInit+0x10c>)
 800152e:	4a1b      	ldr	r2, [pc, #108]	@ (800159c <HAL_I2S_MspInit+0x110>)
 8001530:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001532:	4b19      	ldr	r3, [pc, #100]	@ (8001598 <HAL_I2S_MspInit+0x10c>)
 8001534:	220d      	movs	r2, #13
 8001536:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001538:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <HAL_I2S_MspInit+0x10c>)
 800153a:	2210      	movs	r2, #16
 800153c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800153e:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <HAL_I2S_MspInit+0x10c>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001544:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <HAL_I2S_MspInit+0x10c>)
 8001546:	2280      	movs	r2, #128	@ 0x80
 8001548:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800154a:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <HAL_I2S_MspInit+0x10c>)
 800154c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001550:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <HAL_I2S_MspInit+0x10c>)
 8001554:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001558:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <HAL_I2S_MspInit+0x10c>)
 800155c:	2220      	movs	r2, #32
 800155e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001560:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <HAL_I2S_MspInit+0x10c>)
 8001562:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001566:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001568:	480b      	ldr	r0, [pc, #44]	@ (8001598 <HAL_I2S_MspInit+0x10c>)
 800156a:	f000 fc4b 	bl	8001e04 <HAL_DMA_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_I2S_MspInit+0xec>
    {
      Error_Handler();
 8001574:	f7ff fdcc 	bl	8001110 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a07      	ldr	r2, [pc, #28]	@ (8001598 <HAL_I2S_MspInit+0x10c>)
 800157c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800157e:	4a06      	ldr	r2, [pc, #24]	@ (8001598 <HAL_I2S_MspInit+0x10c>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001584:	bf00      	nop
 8001586:	3778      	adds	r7, #120	@ 0x78
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40003800 	.word	0x40003800
 8001590:	40021000 	.word	0x40021000
 8001594:	48000400 	.word	0x48000400
 8001598:	2000282c 	.word	0x2000282c
 800159c:	40020058 	.word	0x40020058

080015a0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	@ 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015c0:	d129      	bne.n	8001616 <HAL_TIM_Base_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015c2:	4b62      	ldr	r3, [pc, #392]	@ (800174c <HAL_TIM_Base_MspInit+0x1ac>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c6:	4a61      	ldr	r2, [pc, #388]	@ (800174c <HAL_TIM_Base_MspInit+0x1ac>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ce:	4b5f      	ldr	r3, [pc, #380]	@ (800174c <HAL_TIM_Base_MspInit+0x1ac>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	4b5c      	ldr	r3, [pc, #368]	@ (800174c <HAL_TIM_Base_MspInit+0x1ac>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	4a5b      	ldr	r2, [pc, #364]	@ (800174c <HAL_TIM_Base_MspInit+0x1ac>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e6:	4b59      	ldr	r3, [pc, #356]	@ (800174c <HAL_TIM_Base_MspInit+0x1ac>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015f2:	2301      	movs	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8001602:	230e      	movs	r3, #14
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001610:	f000 fe6a 	bl	80022e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001614:	e095      	b.n	8001742 <HAL_TIM_Base_MspInit+0x1a2>
  else if(htim_base->Instance==TIM3)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a4d      	ldr	r2, [pc, #308]	@ (8001750 <HAL_TIM_Base_MspInit+0x1b0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	f040 8090 	bne.w	8001742 <HAL_TIM_Base_MspInit+0x1a2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001622:	4b4a      	ldr	r3, [pc, #296]	@ (800174c <HAL_TIM_Base_MspInit+0x1ac>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001626:	4a49      	ldr	r2, [pc, #292]	@ (800174c <HAL_TIM_Base_MspInit+0x1ac>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	6593      	str	r3, [r2, #88]	@ 0x58
 800162e:	4b47      	ldr	r3, [pc, #284]	@ (800174c <HAL_TIM_Base_MspInit+0x1ac>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Channel6;
 800163a:	4b46      	ldr	r3, [pc, #280]	@ (8001754 <HAL_TIM_Base_MspInit+0x1b4>)
 800163c:	4a46      	ldr	r2, [pc, #280]	@ (8001758 <HAL_TIM_Base_MspInit+0x1b8>)
 800163e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001640:	4b44      	ldr	r3, [pc, #272]	@ (8001754 <HAL_TIM_Base_MspInit+0x1b4>)
 8001642:	223d      	movs	r2, #61	@ 0x3d
 8001644:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001646:	4b43      	ldr	r3, [pc, #268]	@ (8001754 <HAL_TIM_Base_MspInit+0x1b4>)
 8001648:	2210      	movs	r2, #16
 800164a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800164c:	4b41      	ldr	r3, [pc, #260]	@ (8001754 <HAL_TIM_Base_MspInit+0x1b4>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001652:	4b40      	ldr	r3, [pc, #256]	@ (8001754 <HAL_TIM_Base_MspInit+0x1b4>)
 8001654:	2280      	movs	r2, #128	@ 0x80
 8001656:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001658:	4b3e      	ldr	r3, [pc, #248]	@ (8001754 <HAL_TIM_Base_MspInit+0x1b4>)
 800165a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800165e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001660:	4b3c      	ldr	r3, [pc, #240]	@ (8001754 <HAL_TIM_Base_MspInit+0x1b4>)
 8001662:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001666:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_CIRCULAR;
 8001668:	4b3a      	ldr	r3, [pc, #232]	@ (8001754 <HAL_TIM_Base_MspInit+0x1b4>)
 800166a:	2220      	movs	r2, #32
 800166c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800166e:	4b39      	ldr	r3, [pc, #228]	@ (8001754 <HAL_TIM_Base_MspInit+0x1b4>)
 8001670:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001674:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8001676:	4837      	ldr	r0, [pc, #220]	@ (8001754 <HAL_TIM_Base_MspInit+0x1b4>)
 8001678:	f000 fbc4 	bl	8001e04 <HAL_DMA_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_TIM_Base_MspInit+0xe6>
      Error_Handler();
 8001682:	f7ff fd45 	bl	8001110 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a32      	ldr	r2, [pc, #200]	@ (8001754 <HAL_TIM_Base_MspInit+0x1b4>)
 800168a:	625a      	str	r2, [r3, #36]	@ 0x24
 800168c:	4a31      	ldr	r2, [pc, #196]	@ (8001754 <HAL_TIM_Base_MspInit+0x1b4>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 8001692:	4b32      	ldr	r3, [pc, #200]	@ (800175c <HAL_TIM_Base_MspInit+0x1bc>)
 8001694:	4a32      	ldr	r2, [pc, #200]	@ (8001760 <HAL_TIM_Base_MspInit+0x1c0>)
 8001696:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 8001698:	4b30      	ldr	r3, [pc, #192]	@ (800175c <HAL_TIM_Base_MspInit+0x1bc>)
 800169a:	223f      	movs	r2, #63	@ 0x3f
 800169c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800169e:	4b2f      	ldr	r3, [pc, #188]	@ (800175c <HAL_TIM_Base_MspInit+0x1bc>)
 80016a0:	2210      	movs	r2, #16
 80016a2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a4:	4b2d      	ldr	r3, [pc, #180]	@ (800175c <HAL_TIM_Base_MspInit+0x1bc>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80016aa:	4b2c      	ldr	r3, [pc, #176]	@ (800175c <HAL_TIM_Base_MspInit+0x1bc>)
 80016ac:	2280      	movs	r2, #128	@ 0x80
 80016ae:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016b0:	4b2a      	ldr	r3, [pc, #168]	@ (800175c <HAL_TIM_Base_MspInit+0x1bc>)
 80016b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016b6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016b8:	4b28      	ldr	r3, [pc, #160]	@ (800175c <HAL_TIM_Base_MspInit+0x1bc>)
 80016ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016be:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 80016c0:	4b26      	ldr	r3, [pc, #152]	@ (800175c <HAL_TIM_Base_MspInit+0x1bc>)
 80016c2:	2220      	movs	r2, #32
 80016c4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016c6:	4b25      	ldr	r3, [pc, #148]	@ (800175c <HAL_TIM_Base_MspInit+0x1bc>)
 80016c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 80016ce:	4823      	ldr	r0, [pc, #140]	@ (800175c <HAL_TIM_Base_MspInit+0x1bc>)
 80016d0:	f000 fb98 	bl	8001e04 <HAL_DMA_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_TIM_Base_MspInit+0x13e>
      Error_Handler();
 80016da:	f7ff fd19 	bl	8001110 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a1e      	ldr	r2, [pc, #120]	@ (800175c <HAL_TIM_Base_MspInit+0x1bc>)
 80016e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016e4:	4a1d      	ldr	r2, [pc, #116]	@ (800175c <HAL_TIM_Base_MspInit+0x1bc>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim3_ch4.Instance = DMA1_Channel3;
 80016ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001764 <HAL_TIM_Base_MspInit+0x1c4>)
 80016ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001768 <HAL_TIM_Base_MspInit+0x1c8>)
 80016ee:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 80016f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <HAL_TIM_Base_MspInit+0x1c4>)
 80016f2:	2240      	movs	r2, #64	@ 0x40
 80016f4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <HAL_TIM_Base_MspInit+0x1c4>)
 80016f8:	2210      	movs	r2, #16
 80016fa:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80016fc:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <HAL_TIM_Base_MspInit+0x1c4>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001702:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <HAL_TIM_Base_MspInit+0x1c4>)
 8001704:	2280      	movs	r2, #128	@ 0x80
 8001706:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001708:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <HAL_TIM_Base_MspInit+0x1c4>)
 800170a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800170e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001710:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <HAL_TIM_Base_MspInit+0x1c4>)
 8001712:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001716:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_CIRCULAR;
 8001718:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <HAL_TIM_Base_MspInit+0x1c4>)
 800171a:	2220      	movs	r2, #32
 800171c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <HAL_TIM_Base_MspInit+0x1c4>)
 8001720:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001724:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 8001726:	480f      	ldr	r0, [pc, #60]	@ (8001764 <HAL_TIM_Base_MspInit+0x1c4>)
 8001728:	f000 fb6c 	bl	8001e04 <HAL_DMA_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_TIM_Base_MspInit+0x196>
      Error_Handler();
 8001732:	f7ff fced 	bl	8001110 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <HAL_TIM_Base_MspInit+0x1c4>)
 800173a:	631a      	str	r2, [r3, #48]	@ 0x30
 800173c:	4a09      	ldr	r2, [pc, #36]	@ (8001764 <HAL_TIM_Base_MspInit+0x1c4>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	@ 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
 8001750:	40000400 	.word	0x40000400
 8001754:	20002924 	.word	0x20002924
 8001758:	4002006c 	.word	0x4002006c
 800175c:	20002984 	.word	0x20002984
 8001760:	4002001c 	.word	0x4002001c
 8001764:	200029e4 	.word	0x200029e4
 8001768:	40020030 	.word	0x40020030

0800176c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	@ 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800178c:	d11d      	bne.n	80017ca <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	4b22      	ldr	r3, [pc, #136]	@ (8001818 <HAL_TIM_MspPostInit+0xac>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001792:	4a21      	ldr	r2, [pc, #132]	@ (8001818 <HAL_TIM_MspPostInit+0xac>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800179a:	4b1f      	ldr	r3, [pc, #124]	@ (8001818 <HAL_TIM_MspPostInit+0xac>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017a6:	2308      	movs	r3, #8
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017b6:	2301      	movs	r3, #1
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c4:	f000 fd90 	bl	80022e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017c8:	e021      	b.n	800180e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a13      	ldr	r2, [pc, #76]	@ (800181c <HAL_TIM_MspPostInit+0xb0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d11c      	bne.n	800180e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <HAL_TIM_MspPostInit+0xac>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001818 <HAL_TIM_MspPostInit+0xac>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <HAL_TIM_MspPostInit+0xac>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80017ec:	2350      	movs	r3, #80	@ 0x50
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017fc:	2302      	movs	r3, #2
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180a:	f000 fd6d 	bl	80022e8 <HAL_GPIO_Init>
}
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	@ 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000
 800181c:	40000400 	.word	0x40000400

08001820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <NMI_Handler+0x4>

08001828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <HardFault_Handler+0x4>

08001830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <MemManage_Handler+0x4>

08001838 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <BusFault_Handler+0x4>

08001840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <UsageFault_Handler+0x4>

08001848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001878:	f000 f996 	bl	8001ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (TimingDelay) {
 800187c:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <SysTick_Handler+0x20>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d004      	beq.n	800188e <SysTick_Handler+0x1a>
    TimingDelay--;
 8001884:	4b03      	ldr	r3, [pc, #12]	@ (8001894 <SysTick_Handler+0x20>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3b01      	subs	r3, #1
 800188a:	4a02      	ldr	r2, [pc, #8]	@ (8001894 <SysTick_Handler+0x20>)
 800188c:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20002a48 	.word	0x20002a48

08001898 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 800189c:	4802      	ldr	r0, [pc, #8]	@ (80018a8 <DMA1_Channel2_IRQHandler+0x10>)
 800189e:	f000 fbd4 	bl	800204a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20002984 	.word	0x20002984

080018ac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 80018b0:	4802      	ldr	r0, [pc, #8]	@ (80018bc <DMA1_Channel3_IRQHandler+0x10>)
 80018b2:	f000 fbca 	bl	800204a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200029e4 	.word	0x200029e4

080018c0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80018c4:	4802      	ldr	r0, [pc, #8]	@ (80018d0 <DMA1_Channel5_IRQHandler+0x10>)
 80018c6:	f000 fbc0 	bl	800204a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000282c 	.word	0x2000282c

080018d4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80018d8:	4802      	ldr	r0, [pc, #8]	@ (80018e4 <DMA1_Channel6_IRQHandler+0x10>)
 80018da:	f000 fbb6 	bl	800204a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20002924 	.word	0x20002924

080018e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return 1;
 80018ec:	2301      	movs	r3, #1
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_kill>:

int _kill(int pid, int sig)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001902:	f004 fc45 	bl	8006190 <__errno>
 8001906:	4603      	mov	r3, r0
 8001908:	2216      	movs	r2, #22
 800190a:	601a      	str	r2, [r3, #0]
  return -1;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_exit>:

void _exit (int status)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001920:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ffe7 	bl	80018f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800192a:	bf00      	nop
 800192c:	e7fd      	b.n	800192a <_exit+0x12>

0800192e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e00a      	b.n	8001956 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001940:	f3af 8000 	nop.w
 8001944:	4601      	mov	r1, r0
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	60ba      	str	r2, [r7, #8]
 800194c:	b2ca      	uxtb	r2, r1
 800194e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	429a      	cmp	r2, r3
 800195c:	dbf0      	blt.n	8001940 <_read+0x12>
  }

  return len;
 800195e:	687b      	ldr	r3, [r7, #4]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e009      	b.n	800198e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	60ba      	str	r2, [r7, #8]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	429a      	cmp	r2, r3
 8001994:	dbf1      	blt.n	800197a <_write+0x12>
  }
  return len;
 8001996:	687b      	ldr	r3, [r7, #4]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_close>:

int _close(int file)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019c8:	605a      	str	r2, [r3, #4]
  return 0;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_isatty>:

int _isatty(int file)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019e0:	2301      	movs	r3, #1
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a10:	4a14      	ldr	r2, [pc, #80]	@ (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	@ (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a38:	f004 fbaa 	bl	8006190 <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	220c      	movs	r2, #12
 8001a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a46:	e009      	b.n	8001a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	@ (8001a6c <_sbrk+0x64>)
 8001a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20020000 	.word	0x20020000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	20002a4c 	.word	0x20002a4c
 8001a70:	20002be0 	.word	0x20002be0

08001a74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <SystemInit+0x20>)
 8001a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a7e:	4a05      	ldr	r2, [pc, #20]	@ (8001a94 <SystemInit+0x20>)
 8001a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <vidClearScreen>:

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

void vidClearScreen(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	{
		fb[line]				[0] = 0b1111111111111110;
		fb[line]  [XFERS_PERLINE-1] = 0b1111111111111110;
	}
#else
	memset(screen,0xFF,sizeof(screen));
 8001a9c:	f242 7260 	movw	r2, #10080	@ 0x2760
 8001aa0:	21ff      	movs	r1, #255	@ 0xff
 8001aa2:	4802      	ldr	r0, [pc, #8]	@ (8001aac <vidClearScreen+0x14>)
 8001aa4:	f004 fb25 	bl	80060f2 <memset>
#endif

}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000000 	.word	0x20000000

08001ab0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ab0:	480d      	ldr	r0, [pc, #52]	@ (8001ae8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ab2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ab4:	f7ff ffde 	bl	8001a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab8:	480c      	ldr	r0, [pc, #48]	@ (8001aec <LoopForever+0x6>)
  ldr r1, =_edata
 8001aba:	490d      	ldr	r1, [pc, #52]	@ (8001af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001abc:	4a0d      	ldr	r2, [pc, #52]	@ (8001af4 <LoopForever+0xe>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8001afc <LoopForever+0x16>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ade:	f004 fb5d 	bl	800619c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ae2:	f7ff f8c9 	bl	8000c78 <main>

08001ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ae6:	e7fe      	b.n	8001ae6 <LoopForever>
  ldr   r0, =_estack
 8001ae8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aec:	20002760 	.word	0x20002760
  ldr r1, =_edata
 8001af0:	200027cc 	.word	0x200027cc
  ldr r2, =_sidata
 8001af4:	08007458 	.word	0x08007458
  ldr r2, =_sbss
 8001af8:	200027cc 	.word	0x200027cc
  ldr r4, =_ebss
 8001afc:	20002be0 	.word	0x20002be0

08001b00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <ADC1_2_IRQHandler>

08001b02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 f939 	bl	8001d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b12:	200f      	movs	r0, #15
 8001b14:	f000 f80e 	bl	8001b34 <HAL_InitTick>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	71fb      	strb	r3, [r7, #7]
 8001b22:	e001      	b.n	8001b28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b24:	f7ff fc8e 	bl	8001444 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b28:	79fb      	ldrb	r3, [r7, #7]

}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b40:	4b16      	ldr	r3, [pc, #88]	@ (8001b9c <HAL_InitTick+0x68>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d022      	beq.n	8001b8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b48:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <HAL_InitTick+0x6c>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <HAL_InitTick+0x68>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 f944 	bl	8001dea <HAL_SYSTICK_Config>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10f      	bne.n	8001b88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b0f      	cmp	r3, #15
 8001b6c:	d809      	bhi.n	8001b82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b76:	f000 f910 	bl	8001d9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba4 <HAL_InitTick+0x70>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	e007      	b.n	8001b92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	73fb      	strb	r3, [r7, #15]
 8001b86:	e004      	b.n	8001b92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e001      	b.n	8001b92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	2000276c 	.word	0x2000276c
 8001ba0:	20002764 	.word	0x20002764
 8001ba4:	20002768 	.word	0x20002768

08001ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <HAL_IncTick+0x1c>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <HAL_IncTick+0x20>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a03      	ldr	r2, [pc, #12]	@ (8001bc4 <HAL_IncTick+0x1c>)
 8001bb8:	6013      	str	r3, [r2, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	20002a90 	.word	0x20002a90
 8001bc8:	2000276c 	.word	0x2000276c

08001bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	@ (8001be0 <HAL_GetTick+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20002a90 	.word	0x20002a90

08001be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c00:	4013      	ands	r3, r2
 8001c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c16:	4a04      	ldr	r2, [pc, #16]	@ (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	60d3      	str	r3, [r2, #12]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c30:	4b04      	ldr	r3, [pc, #16]	@ (8001c44 <__NVIC_GetPriorityGrouping+0x18>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	f003 0307 	and.w	r3, r3, #7
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db0b      	blt.n	8001c72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	f003 021f 	and.w	r2, r3, #31
 8001c60:	4907      	ldr	r1, [pc, #28]	@ (8001c80 <__NVIC_EnableIRQ+0x38>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	2001      	movs	r0, #1
 8001c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e100 	.word	0xe000e100

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0a      	blt.n	8001cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	490c      	ldr	r1, [pc, #48]	@ (8001cd0 <__NVIC_SetPriority+0x4c>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	0112      	lsls	r2, r2, #4
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cac:	e00a      	b.n	8001cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4908      	ldr	r1, [pc, #32]	@ (8001cd4 <__NVIC_SetPriority+0x50>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	@ 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf28      	it	cs
 8001cf6:	2304      	movcs	r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <NVIC_EncodePriority+0x30>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	e000      	b.n	8001d0a <NVIC_EncodePriority+0x32>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	4313      	orrs	r3, r2
         );
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	@ 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d50:	d301      	bcc.n	8001d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00f      	b.n	8001d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d56:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <SysTick_Config+0x40>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5e:	210f      	movs	r1, #15
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d64:	f7ff ff8e 	bl	8001c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <SysTick_Config+0x40>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6e:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <SysTick_Config+0x40>)
 8001d70:	2207      	movs	r2, #7
 8001d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	e000e010 	.word	0xe000e010

08001d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff29 	bl	8001be4 <__NVIC_SetPriorityGrouping>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001da8:	f7ff ff40 	bl	8001c2c <__NVIC_GetPriorityGrouping>
 8001dac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	6978      	ldr	r0, [r7, #20]
 8001db4:	f7ff ff90 	bl	8001cd8 <NVIC_EncodePriority>
 8001db8:	4602      	mov	r2, r0
 8001dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff5f 	bl	8001c84 <__NVIC_SetPriority>
}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff33 	bl	8001c48 <__NVIC_EnableIRQ>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff ffa4 	bl	8001d40 <SysTick_Config>
 8001df8:	4603      	mov	r3, r0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e08d      	b.n	8001f32 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b47      	ldr	r3, [pc, #284]	@ (8001f3c <HAL_DMA_Init+0x138>)
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d80f      	bhi.n	8001e42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b45      	ldr	r3, [pc, #276]	@ (8001f40 <HAL_DMA_Init+0x13c>)
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a45      	ldr	r2, [pc, #276]	@ (8001f44 <HAL_DMA_Init+0x140>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	091b      	lsrs	r3, r3, #4
 8001e34:	009a      	lsls	r2, r3, #2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a42      	ldr	r2, [pc, #264]	@ (8001f48 <HAL_DMA_Init+0x144>)
 8001e3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e40:	e00e      	b.n	8001e60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b40      	ldr	r3, [pc, #256]	@ (8001f4c <HAL_DMA_Init+0x148>)
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a3d      	ldr	r2, [pc, #244]	@ (8001f44 <HAL_DMA_Init+0x140>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	009a      	lsls	r2, r3, #2
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f50 <HAL_DMA_Init+0x14c>)
 8001e5e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f9b6 	bl	8002224 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ec0:	d102      	bne.n	8001ec8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001edc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d010      	beq.n	8001f08 <HAL_DMA_Init+0x104>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d80c      	bhi.n	8001f08 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f9d6 	bl	80022a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	e008      	b.n	8001f1a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40020407 	.word	0x40020407
 8001f40:	bffdfff8 	.word	0xbffdfff8
 8001f44:	cccccccd 	.word	0xcccccccd
 8001f48:	40020000 	.word	0x40020000
 8001f4c:	bffdfbf8 	.word	0xbffdfbf8
 8001f50:	40020400 	.word	0x40020400

08001f54 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_DMA_Start_IT+0x20>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e066      	b.n	8002042 <HAL_DMA_Start_IT+0xee>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d155      	bne.n	8002034 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0201 	bic.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 f8fb 	bl	80021a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 020e 	orr.w	r2, r2, #14
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	e00f      	b.n	8001fec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0204 	bic.w	r2, r2, #4
 8001fda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 020a 	orr.w	r2, r2, #10
 8001fea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002004:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002008:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002020:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 0201 	orr.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	e005      	b.n	8002040 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800203c:	2302      	movs	r3, #2
 800203e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002040:	7dfb      	ldrb	r3, [r7, #23]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	2204      	movs	r2, #4
 800206c:	409a      	lsls	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4013      	ands	r3, r2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d026      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x7a>
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d021      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b00      	cmp	r3, #0
 800208c:	d107      	bne.n	800209e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0204 	bic.w	r2, r2, #4
 800209c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	f003 021f 	and.w	r2, r3, #31
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	2104      	movs	r1, #4
 80020ac:	fa01 f202 	lsl.w	r2, r1, r2
 80020b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d071      	beq.n	800219e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80020c2:	e06c      	b.n	800219e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	2202      	movs	r2, #2
 80020ce:	409a      	lsls	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d02e      	beq.n	8002136 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d029      	beq.n	8002136 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10b      	bne.n	8002108 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 020a 	bic.w	r2, r2, #10
 80020fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002114:	2102      	movs	r1, #2
 8002116:	fa01 f202 	lsl.w	r2, r1, r2
 800211a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002128:	2b00      	cmp	r3, #0
 800212a:	d038      	beq.n	800219e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002134:	e033      	b.n	800219e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2208      	movs	r2, #8
 8002140:	409a      	lsls	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4013      	ands	r3, r2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d02a      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d025      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 020e 	bic.w	r2, r2, #14
 8002162:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002168:	f003 021f 	and.w	r2, r3, #31
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	2101      	movs	r1, #1
 8002172:	fa01 f202 	lsl.w	r2, r1, r2
 8002176:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002192:	2b00      	cmp	r3, #0
 8002194:	d004      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
}
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d004      	beq.n	80021d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80021d0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d6:	f003 021f 	and.w	r2, r3, #31
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f202 	lsl.w	r2, r1, r2
 80021e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b10      	cmp	r3, #16
 80021f4:	d108      	bne.n	8002208 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002206:	e007      	b.n	8002218 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	60da      	str	r2, [r3, #12]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	4b16      	ldr	r3, [pc, #88]	@ (800228c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002234:	429a      	cmp	r2, r3
 8002236:	d802      	bhi.n	800223e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002238:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	e001      	b.n	8002242 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800223e:	4b15      	ldr	r3, [pc, #84]	@ (8002294 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002240:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	3b08      	subs	r3, #8
 800224e:	4a12      	ldr	r2, [pc, #72]	@ (8002298 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	009a      	lsls	r2, r3, #2
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	461a      	mov	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a0b      	ldr	r2, [pc, #44]	@ (800229c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800226e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2201      	movs	r2, #1
 8002278:	409a      	lsls	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800227e:	bf00      	nop
 8002280:	371c      	adds	r7, #28
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40020407 	.word	0x40020407
 8002290:	40020800 	.word	0x40020800
 8002294:	40020820 	.word	0x40020820
 8002298:	cccccccd 	.word	0xcccccccd
 800229c:	40020880 	.word	0x40020880

080022a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	461a      	mov	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a08      	ldr	r2, [pc, #32]	@ (80022e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80022c2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	2201      	movs	r2, #1
 80022ce:	409a      	lsls	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	1000823f 	.word	0x1000823f
 80022e4:	40020940 	.word	0x40020940

080022e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022f6:	e15a      	b.n	80025ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	4013      	ands	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 814c 	beq.w	80025a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d005      	beq.n	8002328 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002324:	2b02      	cmp	r3, #2
 8002326:	d130      	bne.n	800238a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800235e:	2201      	movs	r2, #1
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	f003 0201 	and.w	r2, r3, #1
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b03      	cmp	r3, #3
 8002394:	d017      	beq.n	80023c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	2203      	movs	r2, #3
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d123      	bne.n	800241a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	08da      	lsrs	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3208      	adds	r2, #8
 80023da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	220f      	movs	r2, #15
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	08da      	lsrs	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3208      	adds	r2, #8
 8002414:	6939      	ldr	r1, [r7, #16]
 8002416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	2203      	movs	r2, #3
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0203 	and.w	r2, r3, #3
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80a6 	beq.w	80025a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245c:	4b5b      	ldr	r3, [pc, #364]	@ (80025cc <HAL_GPIO_Init+0x2e4>)
 800245e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002460:	4a5a      	ldr	r2, [pc, #360]	@ (80025cc <HAL_GPIO_Init+0x2e4>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6613      	str	r3, [r2, #96]	@ 0x60
 8002468:	4b58      	ldr	r3, [pc, #352]	@ (80025cc <HAL_GPIO_Init+0x2e4>)
 800246a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002474:	4a56      	ldr	r2, [pc, #344]	@ (80025d0 <HAL_GPIO_Init+0x2e8>)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	089b      	lsrs	r3, r3, #2
 800247a:	3302      	adds	r3, #2
 800247c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	220f      	movs	r2, #15
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800249e:	d01f      	beq.n	80024e0 <HAL_GPIO_Init+0x1f8>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a4c      	ldr	r2, [pc, #304]	@ (80025d4 <HAL_GPIO_Init+0x2ec>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d019      	beq.n	80024dc <HAL_GPIO_Init+0x1f4>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a4b      	ldr	r2, [pc, #300]	@ (80025d8 <HAL_GPIO_Init+0x2f0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d013      	beq.n	80024d8 <HAL_GPIO_Init+0x1f0>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a4a      	ldr	r2, [pc, #296]	@ (80025dc <HAL_GPIO_Init+0x2f4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d00d      	beq.n	80024d4 <HAL_GPIO_Init+0x1ec>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a49      	ldr	r2, [pc, #292]	@ (80025e0 <HAL_GPIO_Init+0x2f8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d007      	beq.n	80024d0 <HAL_GPIO_Init+0x1e8>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a48      	ldr	r2, [pc, #288]	@ (80025e4 <HAL_GPIO_Init+0x2fc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d101      	bne.n	80024cc <HAL_GPIO_Init+0x1e4>
 80024c8:	2305      	movs	r3, #5
 80024ca:	e00a      	b.n	80024e2 <HAL_GPIO_Init+0x1fa>
 80024cc:	2306      	movs	r3, #6
 80024ce:	e008      	b.n	80024e2 <HAL_GPIO_Init+0x1fa>
 80024d0:	2304      	movs	r3, #4
 80024d2:	e006      	b.n	80024e2 <HAL_GPIO_Init+0x1fa>
 80024d4:	2303      	movs	r3, #3
 80024d6:	e004      	b.n	80024e2 <HAL_GPIO_Init+0x1fa>
 80024d8:	2302      	movs	r3, #2
 80024da:	e002      	b.n	80024e2 <HAL_GPIO_Init+0x1fa>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <HAL_GPIO_Init+0x1fa>
 80024e0:	2300      	movs	r3, #0
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	f002 0203 	and.w	r2, r2, #3
 80024e8:	0092      	lsls	r2, r2, #2
 80024ea:	4093      	lsls	r3, r2
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f2:	4937      	ldr	r1, [pc, #220]	@ (80025d0 <HAL_GPIO_Init+0x2e8>)
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	3302      	adds	r3, #2
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002500:	4b39      	ldr	r3, [pc, #228]	@ (80025e8 <HAL_GPIO_Init+0x300>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002524:	4a30      	ldr	r2, [pc, #192]	@ (80025e8 <HAL_GPIO_Init+0x300>)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800252a:	4b2f      	ldr	r3, [pc, #188]	@ (80025e8 <HAL_GPIO_Init+0x300>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800254e:	4a26      	ldr	r2, [pc, #152]	@ (80025e8 <HAL_GPIO_Init+0x300>)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002554:	4b24      	ldr	r3, [pc, #144]	@ (80025e8 <HAL_GPIO_Init+0x300>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	43db      	mvns	r3, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002578:	4a1b      	ldr	r2, [pc, #108]	@ (80025e8 <HAL_GPIO_Init+0x300>)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800257e:	4b1a      	ldr	r3, [pc, #104]	@ (80025e8 <HAL_GPIO_Init+0x300>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025a2:	4a11      	ldr	r2, [pc, #68]	@ (80025e8 <HAL_GPIO_Init+0x300>)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	3301      	adds	r3, #1
 80025ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f47f ae9d 	bne.w	80022f8 <HAL_GPIO_Init+0x10>
  }
}
 80025be:	bf00      	nop
 80025c0:	bf00      	nop
 80025c2:	371c      	adds	r7, #28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40010000 	.word	0x40010000
 80025d4:	48000400 	.word	0x48000400
 80025d8:	48000800 	.word	0x48000800
 80025dc:	48000c00 	.word	0x48000c00
 80025e0:	48001000 	.word	0x48001000
 80025e4:	48001400 	.word	0x48001400
 80025e8:	40010400 	.word	0x40010400

080025ec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e0d0      	b.n	80027a0 <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d106      	bne.n	8002618 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7fe ff3a 	bl	800148c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2202      	movs	r2, #2
 800261c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800262e:	f023 030f 	bic.w	r3, r3, #15
 8002632:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2202      	movs	r2, #2
 800263a:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d061      	beq.n	8002708 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d102      	bne.n	8002652 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800264c:	2310      	movs	r3, #16
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	e001      	b.n	8002656 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002652:	2320      	movs	r3, #32
 8002654:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b20      	cmp	r3, #32
 800265c:	d802      	bhi.n	8002664 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002664:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002668:	f001 f9e8 	bl	8003a3c <HAL_RCCEx_GetPeriphCLKFreq>
 800266c:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002676:	d125      	bne.n	80026c4 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d010      	beq.n	80026a2 <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	fbb2 f2f3 	udiv	r2, r2, r3
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	461a      	mov	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	fbb2 f3f3 	udiv	r3, r2, r3
 800269c:	3305      	adds	r3, #5
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	e01f      	b.n	80026e2 <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	461a      	mov	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80026be:	3305      	adds	r3, #5
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	e00e      	b.n	80026e2 <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	461a      	mov	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	3305      	adds	r3, #5
 80026e0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4a30      	ldr	r2, [pc, #192]	@ (80027a8 <HAL_I2S_Init+0x1bc>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	08db      	lsrs	r3, r3, #3
 80026ec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	e003      	b.n	8002710 <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002708:	2302      	movs	r3, #2
 800270a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d902      	bls.n	800271c <HAL_I2S_Init+0x130>
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	2bff      	cmp	r3, #255	@ 0xff
 800271a:	d907      	bls.n	800272c <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002720:	f043 0210 	orr.w	r2, r3, #16
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e039      	b.n	80027a0 <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	ea42 0103 	orr.w	r1, r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	430a      	orrs	r2, r1
 800273e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800274a:	f023 030f 	bic.w	r3, r3, #15
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6851      	ldr	r1, [r2, #4]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6892      	ldr	r2, [r2, #8]
 8002756:	4311      	orrs	r1, r2
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	68d2      	ldr	r2, [r2, #12]
 800275c:	4311      	orrs	r1, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6992      	ldr	r2, [r2, #24]
 8002762:	430a      	orrs	r2, r1
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800276e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b30      	cmp	r3, #48	@ 0x30
 8002776:	d003      	beq.n	8002780 <HAL_I2S_Init+0x194>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2bb0      	cmp	r3, #176	@ 0xb0
 800277e:	d107      	bne.n	8002790 <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69da      	ldr	r2, [r3, #28]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800278e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3720      	adds	r7, #32
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	cccccccd 	.word	0xcccccccd

080027ac <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	4613      	mov	r3, r2
 80027b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_I2S_Transmit_DMA+0x1a>
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e08a      	b.n	80028e0 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d001      	beq.n	80027da <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80027d6:	2302      	movs	r3, #2
 80027d8:	e082      	b.n	80028e0 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_I2S_Transmit_DMA+0x3e>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e07a      	b.n	80028e0 <HAL_I2S_Transmit_DMA+0x134>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2203      	movs	r2, #3
 80027f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b03      	cmp	r3, #3
 8002816:	d002      	beq.n	800281e <HAL_I2S_Transmit_DMA+0x72>
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2b05      	cmp	r3, #5
 800281c:	d10a      	bne.n	8002834 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	845a      	strh	r2, [r3, #34]	@ 0x22
 8002832:	e005      	b.n	8002840 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	88fa      	ldrh	r2, [r7, #6]
 8002838:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	88fa      	ldrh	r2, [r7, #6]
 800283e:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002844:	4a28      	ldr	r2, [pc, #160]	@ (80028e8 <HAL_I2S_Transmit_DMA+0x13c>)
 8002846:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284c:	4a27      	ldr	r2, [pc, #156]	@ (80028ec <HAL_I2S_Transmit_DMA+0x140>)
 800284e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002854:	4a26      	ldr	r2, [pc, #152]	@ (80028f0 <HAL_I2S_Transmit_DMA+0x144>)
 8002856:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002860:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002868:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8c1b      	ldrh	r3, [r3, #32]
 800286e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002870:	f7ff fb70 	bl	8001f54 <HAL_DMA_Start_IT>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00f      	beq.n	800289a <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287e:	f043 0208 	orr.w	r2, r3, #8
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    __HAL_UNLOCK(hi2s);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e022      	b.n	80028e0 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d107      	bne.n	80028c0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0202 	orr.w	r2, r2, #2
 80028be:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d107      	bne.n	80028de <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69da      	ldr	r2, [r3, #28]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028dc:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	08002973 	.word	0x08002973
 80028ec:	08002931 	.word	0x08002931
 80028f0:	0800298f 	.word	0x0800298f

080028f4 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10e      	bne.n	8002964 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0202 	bic.w	r2, r2, #2
 8002954:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	845a      	strh	r2, [r3, #34]	@ 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff ffcf 	bl	8002908 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f7ff ffb7 	bl	80028f4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0203 	bic.w	r2, r2, #3
 80029aa:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c4:	f043 0208 	orr.w	r2, r3, #8
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f7ff ffa5 	bl	800291c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d141      	bne.n	8002a6e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029f6:	d131      	bne.n	8002a5c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029f8:	4b47      	ldr	r3, [pc, #284]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029fe:	4a46      	ldr	r2, [pc, #280]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a08:	4b43      	ldr	r3, [pc, #268]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a10:	4a41      	ldr	r2, [pc, #260]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a18:	4b40      	ldr	r3, [pc, #256]	@ (8002b1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2232      	movs	r2, #50	@ 0x32
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	4a3f      	ldr	r2, [pc, #252]	@ (8002b20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	0c9b      	lsrs	r3, r3, #18
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a2e:	e002      	b.n	8002a36 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a36:	4b38      	ldr	r3, [pc, #224]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a42:	d102      	bne.n	8002a4a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f2      	bne.n	8002a30 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a4a:	4b33      	ldr	r3, [pc, #204]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a56:	d158      	bne.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e057      	b.n	8002b0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a62:	4a2d      	ldr	r2, [pc, #180]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a6c:	e04d      	b.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a74:	d141      	bne.n	8002afa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a76:	4b28      	ldr	r3, [pc, #160]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a82:	d131      	bne.n	8002ae8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a84:	4b24      	ldr	r3, [pc, #144]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a8a:	4a23      	ldr	r2, [pc, #140]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a94:	4b20      	ldr	r3, [pc, #128]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aa2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2232      	movs	r2, #50	@ 0x32
 8002aaa:	fb02 f303 	mul.w	r3, r2, r3
 8002aae:	4a1c      	ldr	r2, [pc, #112]	@ (8002b20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab4:	0c9b      	lsrs	r3, r3, #18
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aba:	e002      	b.n	8002ac2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ac2:	4b15      	ldr	r3, [pc, #84]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ace:	d102      	bne.n	8002ad6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f2      	bne.n	8002abc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ad6:	4b10      	ldr	r3, [pc, #64]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ae2:	d112      	bne.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e011      	b.n	8002b0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002aee:	4a0a      	ldr	r2, [pc, #40]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002af8:	e007      	b.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002afa:	4b07      	ldr	r3, [pc, #28]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b02:	4a05      	ldr	r2, [pc, #20]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b08:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	40007000 	.word	0x40007000
 8002b1c:	20002764 	.word	0x20002764
 8002b20:	431bde83 	.word	0x431bde83

08002b24 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b28:	4b05      	ldr	r3, [pc, #20]	@ (8002b40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4a04      	ldr	r2, [pc, #16]	@ (8002b40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b32:	6093      	str	r3, [r2, #8]
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40007000 	.word	0x40007000

08002b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e2fe      	b.n	8003154 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d075      	beq.n	8002c4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b62:	4b97      	ldr	r3, [pc, #604]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b6c:	4b94      	ldr	r3, [pc, #592]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2b0c      	cmp	r3, #12
 8002b7a:	d102      	bne.n	8002b82 <HAL_RCC_OscConfig+0x3e>
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d002      	beq.n	8002b88 <HAL_RCC_OscConfig+0x44>
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d10b      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b88:	4b8d      	ldr	r3, [pc, #564]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d05b      	beq.n	8002c4c <HAL_RCC_OscConfig+0x108>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d157      	bne.n	8002c4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e2d9      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba8:	d106      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x74>
 8002baa:	4b85      	ldr	r3, [pc, #532]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a84      	ldr	r2, [pc, #528]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	e01d      	b.n	8002bf4 <HAL_RCC_OscConfig+0xb0>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bc0:	d10c      	bne.n	8002bdc <HAL_RCC_OscConfig+0x98>
 8002bc2:	4b7f      	ldr	r3, [pc, #508]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a7e      	ldr	r2, [pc, #504]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	4b7c      	ldr	r3, [pc, #496]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a7b      	ldr	r2, [pc, #492]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e00b      	b.n	8002bf4 <HAL_RCC_OscConfig+0xb0>
 8002bdc:	4b78      	ldr	r3, [pc, #480]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a77      	ldr	r2, [pc, #476]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	4b75      	ldr	r3, [pc, #468]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a74      	ldr	r2, [pc, #464]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d013      	beq.n	8002c24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe ffe6 	bl	8001bcc <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c04:	f7fe ffe2 	bl	8001bcc <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	@ 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e29e      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c16:	4b6a      	ldr	r3, [pc, #424]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0xc0>
 8002c22:	e014      	b.n	8002c4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe ffd2 	bl	8001bcc <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c2c:	f7fe ffce 	bl	8001bcc <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	@ 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e28a      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c3e:	4b60      	ldr	r3, [pc, #384]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0xe8>
 8002c4a:	e000      	b.n	8002c4e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d075      	beq.n	8002d46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5a:	4b59      	ldr	r3, [pc, #356]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c64:	4b56      	ldr	r3, [pc, #344]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2b0c      	cmp	r3, #12
 8002c72:	d102      	bne.n	8002c7a <HAL_RCC_OscConfig+0x136>
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d002      	beq.n	8002c80 <HAL_RCC_OscConfig+0x13c>
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d11f      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c80:	4b4f      	ldr	r3, [pc, #316]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_OscConfig+0x154>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e25d      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c98:	4b49      	ldr	r3, [pc, #292]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	061b      	lsls	r3, r3, #24
 8002ca6:	4946      	ldr	r1, [pc, #280]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cac:	4b45      	ldr	r3, [pc, #276]	@ (8002dc4 <HAL_RCC_OscConfig+0x280>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fe ff3f 	bl	8001b34 <HAL_InitTick>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d043      	beq.n	8002d44 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e249      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d023      	beq.n	8002d10 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc8:	4b3d      	ldr	r3, [pc, #244]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a3c      	ldr	r2, [pc, #240]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe ff7a 	bl	8001bcc <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cdc:	f7fe ff76 	bl	8001bcc <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e232      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cee:	4b34      	ldr	r3, [pc, #208]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfa:	4b31      	ldr	r3, [pc, #196]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	061b      	lsls	r3, r3, #24
 8002d08:	492d      	ldr	r1, [pc, #180]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	604b      	str	r3, [r1, #4]
 8002d0e:	e01a      	b.n	8002d46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d10:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a2a      	ldr	r2, [pc, #168]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002d16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fe ff56 	bl	8001bcc <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d24:	f7fe ff52 	bl	8001bcc <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e20e      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d36:	4b22      	ldr	r3, [pc, #136]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x1e0>
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d041      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d01c      	beq.n	8002d94 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d5a:	4b19      	ldr	r3, [pc, #100]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d60:	4a17      	ldr	r2, [pc, #92]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6a:	f7fe ff2f 	bl	8001bcc <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d72:	f7fe ff2b 	bl	8001bcc <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e1e7      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d84:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0ef      	beq.n	8002d72 <HAL_RCC_OscConfig+0x22e>
 8002d92:	e020      	b.n	8002dd6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d94:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d9a:	4a09      	ldr	r2, [pc, #36]	@ (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7fe ff12 	bl	8001bcc <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002daa:	e00d      	b.n	8002dc8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dac:	f7fe ff0e 	bl	8001bcc <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d906      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e1ca      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	20002768 	.word	0x20002768
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dc8:	4b8c      	ldr	r3, [pc, #560]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1ea      	bne.n	8002dac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80a6 	beq.w	8002f30 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de4:	2300      	movs	r3, #0
 8002de6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002de8:	4b84      	ldr	r3, [pc, #528]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_RCC_OscConfig+0x2b4>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <HAL_RCC_OscConfig+0x2b6>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00d      	beq.n	8002e1a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfe:	4b7f      	ldr	r3, [pc, #508]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e02:	4a7e      	ldr	r2, [pc, #504]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e08:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e0a:	4b7c      	ldr	r3, [pc, #496]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e16:	2301      	movs	r3, #1
 8002e18:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e1a:	4b79      	ldr	r3, [pc, #484]	@ (8003000 <HAL_RCC_OscConfig+0x4bc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d118      	bne.n	8002e58 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e26:	4b76      	ldr	r3, [pc, #472]	@ (8003000 <HAL_RCC_OscConfig+0x4bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a75      	ldr	r2, [pc, #468]	@ (8003000 <HAL_RCC_OscConfig+0x4bc>)
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e32:	f7fe fecb 	bl	8001bcc <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3a:	f7fe fec7 	bl	8001bcc <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e183      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e4c:	4b6c      	ldr	r3, [pc, #432]	@ (8003000 <HAL_RCC_OscConfig+0x4bc>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d108      	bne.n	8002e72 <HAL_RCC_OscConfig+0x32e>
 8002e60:	4b66      	ldr	r3, [pc, #408]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e66:	4a65      	ldr	r2, [pc, #404]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e70:	e024      	b.n	8002ebc <HAL_RCC_OscConfig+0x378>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b05      	cmp	r3, #5
 8002e78:	d110      	bne.n	8002e9c <HAL_RCC_OscConfig+0x358>
 8002e7a:	4b60      	ldr	r3, [pc, #384]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e80:	4a5e      	ldr	r2, [pc, #376]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002e82:	f043 0304 	orr.w	r3, r3, #4
 8002e86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e8a:	4b5c      	ldr	r3, [pc, #368]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e90:	4a5a      	ldr	r2, [pc, #360]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e9a:	e00f      	b.n	8002ebc <HAL_RCC_OscConfig+0x378>
 8002e9c:	4b57      	ldr	r3, [pc, #348]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea2:	4a56      	ldr	r2, [pc, #344]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eac:	4b53      	ldr	r3, [pc, #332]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb2:	4a52      	ldr	r2, [pc, #328]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002eb4:	f023 0304 	bic.w	r3, r3, #4
 8002eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d016      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec4:	f7fe fe82 	bl	8001bcc <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ecc:	f7fe fe7e 	bl	8001bcc <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e138      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee2:	4b46      	ldr	r3, [pc, #280]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ed      	beq.n	8002ecc <HAL_RCC_OscConfig+0x388>
 8002ef0:	e015      	b.n	8002f1e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fe6b 	bl	8001bcc <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7fe fe67 	bl	8001bcc <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e121      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f10:	4b3a      	ldr	r3, [pc, #232]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1ed      	bne.n	8002efa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f1e:	7ffb      	ldrb	r3, [r7, #31]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d105      	bne.n	8002f30 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f24:	4b35      	ldr	r3, [pc, #212]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f28:	4a34      	ldr	r2, [pc, #208]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002f2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f2e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d03c      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01c      	beq.n	8002f7e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f44:	4b2d      	ldr	r3, [pc, #180]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f4a:	4a2c      	ldr	r2, [pc, #176]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fe fe3a 	bl	8001bcc <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f5c:	f7fe fe36 	bl	8001bcc <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e0f2      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f6e:	4b23      	ldr	r3, [pc, #140]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002f70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0ef      	beq.n	8002f5c <HAL_RCC_OscConfig+0x418>
 8002f7c:	e01b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002f80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f84:	4a1d      	ldr	r2, [pc, #116]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8e:	f7fe fe1d 	bl	8001bcc <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f96:	f7fe fe19 	bl	8001bcc <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e0d5      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fa8:	4b14      	ldr	r3, [pc, #80]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1ef      	bne.n	8002f96 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 80c9 	beq.w	8003152 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 030c 	and.w	r3, r3, #12
 8002fc8:	2b0c      	cmp	r3, #12
 8002fca:	f000 8083 	beq.w	80030d4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d15e      	bne.n	8003094 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd6:	4b09      	ldr	r3, [pc, #36]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a08      	ldr	r2, [pc, #32]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
 8002fdc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7fe fdf3 	bl	8001bcc <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe8:	e00c      	b.n	8003004 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fea:	f7fe fdef 	bl	8001bcc <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d905      	bls.n	8003004 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e0ab      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003004:	4b55      	ldr	r3, [pc, #340]	@ (800315c <HAL_RCC_OscConfig+0x618>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1ec      	bne.n	8002fea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003010:	4b52      	ldr	r3, [pc, #328]	@ (800315c <HAL_RCC_OscConfig+0x618>)
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	4b52      	ldr	r3, [pc, #328]	@ (8003160 <HAL_RCC_OscConfig+0x61c>)
 8003016:	4013      	ands	r3, r2
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6a11      	ldr	r1, [r2, #32]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003020:	3a01      	subs	r2, #1
 8003022:	0112      	lsls	r2, r2, #4
 8003024:	4311      	orrs	r1, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800302a:	0212      	lsls	r2, r2, #8
 800302c:	4311      	orrs	r1, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003032:	0852      	lsrs	r2, r2, #1
 8003034:	3a01      	subs	r2, #1
 8003036:	0552      	lsls	r2, r2, #21
 8003038:	4311      	orrs	r1, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800303e:	0852      	lsrs	r2, r2, #1
 8003040:	3a01      	subs	r2, #1
 8003042:	0652      	lsls	r2, r2, #25
 8003044:	4311      	orrs	r1, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800304a:	06d2      	lsls	r2, r2, #27
 800304c:	430a      	orrs	r2, r1
 800304e:	4943      	ldr	r1, [pc, #268]	@ (800315c <HAL_RCC_OscConfig+0x618>)
 8003050:	4313      	orrs	r3, r2
 8003052:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003054:	4b41      	ldr	r3, [pc, #260]	@ (800315c <HAL_RCC_OscConfig+0x618>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a40      	ldr	r2, [pc, #256]	@ (800315c <HAL_RCC_OscConfig+0x618>)
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800305e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003060:	4b3e      	ldr	r3, [pc, #248]	@ (800315c <HAL_RCC_OscConfig+0x618>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a3d      	ldr	r2, [pc, #244]	@ (800315c <HAL_RCC_OscConfig+0x618>)
 8003066:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800306a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe fdae 	bl	8001bcc <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003074:	f7fe fdaa 	bl	8001bcc <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e066      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003086:	4b35      	ldr	r3, [pc, #212]	@ (800315c <HAL_RCC_OscConfig+0x618>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x530>
 8003092:	e05e      	b.n	8003152 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003094:	4b31      	ldr	r3, [pc, #196]	@ (800315c <HAL_RCC_OscConfig+0x618>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a30      	ldr	r2, [pc, #192]	@ (800315c <HAL_RCC_OscConfig+0x618>)
 800309a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800309e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7fe fd94 	bl	8001bcc <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fe fd90 	bl	8001bcc <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e04c      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ba:	4b28      	ldr	r3, [pc, #160]	@ (800315c <HAL_RCC_OscConfig+0x618>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030c6:	4b25      	ldr	r3, [pc, #148]	@ (800315c <HAL_RCC_OscConfig+0x618>)
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	4924      	ldr	r1, [pc, #144]	@ (800315c <HAL_RCC_OscConfig+0x618>)
 80030cc:	4b25      	ldr	r3, [pc, #148]	@ (8003164 <HAL_RCC_OscConfig+0x620>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	60cb      	str	r3, [r1, #12]
 80030d2:	e03e      	b.n	8003152 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e039      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80030e0:	4b1e      	ldr	r3, [pc, #120]	@ (800315c <HAL_RCC_OscConfig+0x618>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f003 0203 	and.w	r2, r3, #3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d12c      	bne.n	800314e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fe:	3b01      	subs	r3, #1
 8003100:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d123      	bne.n	800314e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003110:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d11b      	bne.n	800314e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003120:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d113      	bne.n	800314e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003130:	085b      	lsrs	r3, r3, #1
 8003132:	3b01      	subs	r3, #1
 8003134:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d109      	bne.n	800314e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003144:	085b      	lsrs	r3, r3, #1
 8003146:	3b01      	subs	r3, #1
 8003148:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d001      	beq.n	8003152 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3720      	adds	r7, #32
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	019f800c 	.word	0x019f800c
 8003164:	feeefffc 	.word	0xfeeefffc

08003168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e11e      	b.n	80033be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003180:	4b91      	ldr	r3, [pc, #580]	@ (80033c8 <HAL_RCC_ClockConfig+0x260>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d910      	bls.n	80031b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318e:	4b8e      	ldr	r3, [pc, #568]	@ (80033c8 <HAL_RCC_ClockConfig+0x260>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 020f 	bic.w	r2, r3, #15
 8003196:	498c      	ldr	r1, [pc, #560]	@ (80033c8 <HAL_RCC_ClockConfig+0x260>)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319e:	4b8a      	ldr	r3, [pc, #552]	@ (80033c8 <HAL_RCC_ClockConfig+0x260>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e106      	b.n	80033be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d073      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d129      	bne.n	8003218 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c4:	4b81      	ldr	r3, [pc, #516]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0f4      	b.n	80033be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80031d4:	f000 f99e 	bl	8003514 <RCC_GetSysClockFreqFromPLLSource>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4a7c      	ldr	r2, [pc, #496]	@ (80033d0 <HAL_RCC_ClockConfig+0x268>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d93f      	bls.n	8003262 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031e2:	4b7a      	ldr	r3, [pc, #488]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d033      	beq.n	8003262 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d12f      	bne.n	8003262 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003202:	4b72      	ldr	r3, [pc, #456]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800320a:	4a70      	ldr	r2, [pc, #448]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 800320c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003210:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003212:	2380      	movs	r3, #128	@ 0x80
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	e024      	b.n	8003262 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b02      	cmp	r3, #2
 800321e:	d107      	bne.n	8003230 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003220:	4b6a      	ldr	r3, [pc, #424]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d109      	bne.n	8003240 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0c6      	b.n	80033be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003230:	4b66      	ldr	r3, [pc, #408]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0be      	b.n	80033be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003240:	f000 f8ce 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 8003244:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4a61      	ldr	r2, [pc, #388]	@ (80033d0 <HAL_RCC_ClockConfig+0x268>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d909      	bls.n	8003262 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800324e:	4b5f      	ldr	r3, [pc, #380]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003256:	4a5d      	ldr	r2, [pc, #372]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 8003258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800325c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800325e:	2380      	movs	r3, #128	@ 0x80
 8003260:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003262:	4b5a      	ldr	r3, [pc, #360]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f023 0203 	bic.w	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4957      	ldr	r1, [pc, #348]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 8003270:	4313      	orrs	r3, r2
 8003272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003274:	f7fe fcaa 	bl	8001bcc <HAL_GetTick>
 8003278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327a:	e00a      	b.n	8003292 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327c:	f7fe fca6 	bl	8001bcc <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e095      	b.n	80033be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003292:	4b4e      	ldr	r3, [pc, #312]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 020c 	and.w	r2, r3, #12
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d1eb      	bne.n	800327c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d023      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032bc:	4b43      	ldr	r3, [pc, #268]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a42      	ldr	r2, [pc, #264]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 80032c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80032d4:	4b3d      	ldr	r3, [pc, #244]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80032dc:	4a3b      	ldr	r2, [pc, #236]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 80032de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e4:	4b39      	ldr	r3, [pc, #228]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4936      	ldr	r1, [pc, #216]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	608b      	str	r3, [r1, #8]
 80032f6:	e008      	b.n	800330a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2b80      	cmp	r3, #128	@ 0x80
 80032fc:	d105      	bne.n	800330a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80032fe:	4b33      	ldr	r3, [pc, #204]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	4a32      	ldr	r2, [pc, #200]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 8003304:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003308:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800330a:	4b2f      	ldr	r3, [pc, #188]	@ (80033c8 <HAL_RCC_ClockConfig+0x260>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d21d      	bcs.n	8003354 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003318:	4b2b      	ldr	r3, [pc, #172]	@ (80033c8 <HAL_RCC_ClockConfig+0x260>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f023 020f 	bic.w	r2, r3, #15
 8003320:	4929      	ldr	r1, [pc, #164]	@ (80033c8 <HAL_RCC_ClockConfig+0x260>)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	4313      	orrs	r3, r2
 8003326:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003328:	f7fe fc50 	bl	8001bcc <HAL_GetTick>
 800332c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	e00a      	b.n	8003346 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003330:	f7fe fc4c 	bl	8001bcc <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e03b      	b.n	80033be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003346:	4b20      	ldr	r3, [pc, #128]	@ (80033c8 <HAL_RCC_ClockConfig+0x260>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d1ed      	bne.n	8003330 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003360:	4b1a      	ldr	r3, [pc, #104]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4917      	ldr	r1, [pc, #92]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800337e:	4b13      	ldr	r3, [pc, #76]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	490f      	ldr	r1, [pc, #60]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003392:	f000 f825 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 8003396:	4602      	mov	r2, r0
 8003398:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <HAL_RCC_ClockConfig+0x264>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	490c      	ldr	r1, [pc, #48]	@ (80033d4 <HAL_RCC_ClockConfig+0x26c>)
 80033a4:	5ccb      	ldrb	r3, [r1, r3]
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	fa22 f303 	lsr.w	r3, r2, r3
 80033ae:	4a0a      	ldr	r2, [pc, #40]	@ (80033d8 <HAL_RCC_ClockConfig+0x270>)
 80033b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033b2:	4b0a      	ldr	r3, [pc, #40]	@ (80033dc <HAL_RCC_ClockConfig+0x274>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fe fbbc 	bl	8001b34 <HAL_InitTick>
 80033bc:	4603      	mov	r3, r0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40022000 	.word	0x40022000
 80033cc:	40021000 	.word	0x40021000
 80033d0:	04c4b400 	.word	0x04c4b400
 80033d4:	08007350 	.word	0x08007350
 80033d8:	20002764 	.word	0x20002764
 80033dc:	20002768 	.word	0x20002768

080033e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003498 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d102      	bne.n	80033f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033f2:	4b2a      	ldr	r3, [pc, #168]	@ (800349c <HAL_RCC_GetSysClockFreq+0xbc>)
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	e047      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80033f8:	4b27      	ldr	r3, [pc, #156]	@ (8003498 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 030c 	and.w	r3, r3, #12
 8003400:	2b08      	cmp	r3, #8
 8003402:	d102      	bne.n	800340a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003404:	4b26      	ldr	r3, [pc, #152]	@ (80034a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	e03e      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800340a:	4b23      	ldr	r3, [pc, #140]	@ (8003498 <HAL_RCC_GetSysClockFreq+0xb8>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b0c      	cmp	r3, #12
 8003414:	d136      	bne.n	8003484 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003416:	4b20      	ldr	r3, [pc, #128]	@ (8003498 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003420:	4b1d      	ldr	r3, [pc, #116]	@ (8003498 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	3301      	adds	r3, #1
 800342c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b03      	cmp	r3, #3
 8003432:	d10c      	bne.n	800344e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003434:	4a1a      	ldr	r2, [pc, #104]	@ (80034a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	4a16      	ldr	r2, [pc, #88]	@ (8003498 <HAL_RCC_GetSysClockFreq+0xb8>)
 800343e:	68d2      	ldr	r2, [r2, #12]
 8003440:	0a12      	lsrs	r2, r2, #8
 8003442:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003446:	fb02 f303 	mul.w	r3, r2, r3
 800344a:	617b      	str	r3, [r7, #20]
      break;
 800344c:	e00c      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800344e:	4a13      	ldr	r2, [pc, #76]	@ (800349c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	fbb2 f3f3 	udiv	r3, r2, r3
 8003456:	4a10      	ldr	r2, [pc, #64]	@ (8003498 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003458:	68d2      	ldr	r2, [r2, #12]
 800345a:	0a12      	lsrs	r2, r2, #8
 800345c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003460:	fb02 f303 	mul.w	r3, r2, r3
 8003464:	617b      	str	r3, [r7, #20]
      break;
 8003466:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003468:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <HAL_RCC_GetSysClockFreq+0xb8>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	0e5b      	lsrs	r3, r3, #25
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	3301      	adds	r3, #1
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	e001      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003488:	693b      	ldr	r3, [r7, #16]
}
 800348a:	4618      	mov	r0, r3
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000
 800349c:	00f42400 	.word	0x00f42400
 80034a0:	007a1200 	.word	0x007a1200

080034a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a8:	4b03      	ldr	r3, [pc, #12]	@ (80034b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034aa:	681b      	ldr	r3, [r3, #0]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	20002764 	.word	0x20002764

080034bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034c0:	f7ff fff0 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b06      	ldr	r3, [pc, #24]	@ (80034e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4904      	ldr	r1, [pc, #16]	@ (80034e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034dc:	4618      	mov	r0, r3
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000
 80034e4:	08007360 	.word	0x08007360

080034e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034ec:	f7ff ffda 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 80034f0:	4602      	mov	r2, r0
 80034f2:	4b06      	ldr	r3, [pc, #24]	@ (800350c <HAL_RCC_GetPCLK2Freq+0x24>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	0adb      	lsrs	r3, r3, #11
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	4904      	ldr	r1, [pc, #16]	@ (8003510 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000
 8003510:	08007360 	.word	0x08007360

08003514 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800351a:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003524:	4b1b      	ldr	r3, [pc, #108]	@ (8003594 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	3301      	adds	r3, #1
 8003530:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	2b03      	cmp	r3, #3
 8003536:	d10c      	bne.n	8003552 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003538:	4a17      	ldr	r2, [pc, #92]	@ (8003598 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	4a14      	ldr	r2, [pc, #80]	@ (8003594 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003542:	68d2      	ldr	r2, [r2, #12]
 8003544:	0a12      	lsrs	r2, r2, #8
 8003546:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800354a:	fb02 f303 	mul.w	r3, r2, r3
 800354e:	617b      	str	r3, [r7, #20]
    break;
 8003550:	e00c      	b.n	800356c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003552:	4a12      	ldr	r2, [pc, #72]	@ (800359c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	fbb2 f3f3 	udiv	r3, r2, r3
 800355a:	4a0e      	ldr	r2, [pc, #56]	@ (8003594 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800355c:	68d2      	ldr	r2, [r2, #12]
 800355e:	0a12      	lsrs	r2, r2, #8
 8003560:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003564:	fb02 f303 	mul.w	r3, r2, r3
 8003568:	617b      	str	r3, [r7, #20]
    break;
 800356a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800356c:	4b09      	ldr	r3, [pc, #36]	@ (8003594 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	0e5b      	lsrs	r3, r3, #25
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	3301      	adds	r3, #1
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003586:	687b      	ldr	r3, [r7, #4]
}
 8003588:	4618      	mov	r0, r3
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	40021000 	.word	0x40021000
 8003598:	007a1200 	.word	0x007a1200
 800359c:	00f42400 	.word	0x00f42400

080035a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035a8:	2300      	movs	r3, #0
 80035aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035ac:	2300      	movs	r3, #0
 80035ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8098 	beq.w	80036ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035be:	2300      	movs	r3, #0
 80035c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035c2:	4b43      	ldr	r3, [pc, #268]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10d      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ce:	4b40      	ldr	r3, [pc, #256]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d2:	4a3f      	ldr	r2, [pc, #252]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80035da:	4b3d      	ldr	r3, [pc, #244]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e6:	2301      	movs	r3, #1
 80035e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035ea:	4b3a      	ldr	r3, [pc, #232]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a39      	ldr	r2, [pc, #228]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035f6:	f7fe fae9 	bl	8001bcc <HAL_GetTick>
 80035fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035fc:	e009      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fe:	f7fe fae5 	bl	8001bcc <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d902      	bls.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	74fb      	strb	r3, [r7, #19]
        break;
 8003610:	e005      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003612:	4b30      	ldr	r3, [pc, #192]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0ef      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800361e:	7cfb      	ldrb	r3, [r7, #19]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d159      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003624:	4b2a      	ldr	r3, [pc, #168]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800362e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d01e      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	429a      	cmp	r2, r3
 800363e:	d019      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003640:	4b23      	ldr	r3, [pc, #140]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003646:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800364a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800364c:	4b20      	ldr	r3, [pc, #128]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003652:	4a1f      	ldr	r2, [pc, #124]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800365c:	4b1c      	ldr	r3, [pc, #112]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003662:	4a1b      	ldr	r2, [pc, #108]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003664:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800366c:	4a18      	ldr	r2, [pc, #96]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d016      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367e:	f7fe faa5 	bl	8001bcc <HAL_GetTick>
 8003682:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003684:	e00b      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7fe faa1 	bl	8001bcc <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d902      	bls.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	74fb      	strb	r3, [r7, #19]
            break;
 800369c:	e006      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800369e:	4b0c      	ldr	r3, [pc, #48]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0ec      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80036ac:	7cfb      	ldrb	r3, [r7, #19]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10b      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036b2:	4b07      	ldr	r3, [pc, #28]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c0:	4903      	ldr	r1, [pc, #12]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80036c8:	e008      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036ca:	7cfb      	ldrb	r3, [r7, #19]
 80036cc:	74bb      	strb	r3, [r7, #18]
 80036ce:	e005      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d8:	7cfb      	ldrb	r3, [r7, #19]
 80036da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036dc:	7c7b      	ldrb	r3, [r7, #17]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d105      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e2:	4ba7      	ldr	r3, [pc, #668]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e6:	4aa6      	ldr	r2, [pc, #664]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036fa:	4ba1      	ldr	r3, [pc, #644]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003700:	f023 0203 	bic.w	r2, r3, #3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	499d      	ldr	r1, [pc, #628]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800371c:	4b98      	ldr	r3, [pc, #608]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003722:	f023 020c 	bic.w	r2, r3, #12
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	4995      	ldr	r1, [pc, #596]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800373e:	4b90      	ldr	r3, [pc, #576]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003744:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	498c      	ldr	r1, [pc, #560]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003760:	4b87      	ldr	r3, [pc, #540]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003766:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	4984      	ldr	r1, [pc, #528]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003782:	4b7f      	ldr	r3, [pc, #508]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003788:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	497b      	ldr	r1, [pc, #492]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037a4:	4b76      	ldr	r3, [pc, #472]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	4973      	ldr	r1, [pc, #460]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037c6:	4b6e      	ldr	r3, [pc, #440]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	496a      	ldr	r1, [pc, #424]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037e8:	4b65      	ldr	r3, [pc, #404]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	4962      	ldr	r1, [pc, #392]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800380a:	4b5d      	ldr	r3, [pc, #372]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003810:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	4959      	ldr	r1, [pc, #356]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800382c:	4b54      	ldr	r3, [pc, #336]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800382e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003832:	f023 0203 	bic.w	r2, r3, #3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383a:	4951      	ldr	r1, [pc, #324]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800384e:	4b4c      	ldr	r3, [pc, #304]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003854:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385c:	4948      	ldr	r1, [pc, #288]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386c:	2b00      	cmp	r3, #0
 800386e:	d015      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003870:	4b43      	ldr	r3, [pc, #268]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003876:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	4940      	ldr	r1, [pc, #256]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800388e:	d105      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003890:	4b3b      	ldr	r3, [pc, #236]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4a3a      	ldr	r2, [pc, #232]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003896:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800389a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d015      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038a8:	4b35      	ldr	r3, [pc, #212]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b6:	4932      	ldr	r1, [pc, #200]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038c6:	d105      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038d2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d015      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038e0:	4b27      	ldr	r3, [pc, #156]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ee:	4924      	ldr	r1, [pc, #144]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038fe:	d105      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003900:	4b1f      	ldr	r3, [pc, #124]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4a1e      	ldr	r2, [pc, #120]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800390a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d015      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003918:	4b19      	ldr	r3, [pc, #100]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003926:	4916      	ldr	r1, [pc, #88]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003932:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003936:	d105      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003938:	4b11      	ldr	r3, [pc, #68]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4a10      	ldr	r2, [pc, #64]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003942:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d019      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003950:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003956:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	4908      	ldr	r1, [pc, #32]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800396e:	d109      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003970:	4b03      	ldr	r3, [pc, #12]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4a02      	ldr	r2, [pc, #8]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800397a:	60d3      	str	r3, [r2, #12]
 800397c:	e002      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d015      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003990:	4b29      	ldr	r3, [pc, #164]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003996:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399e:	4926      	ldr	r1, [pc, #152]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039ae:	d105      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039b0:	4b21      	ldr	r3, [pc, #132]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4a20      	ldr	r2, [pc, #128]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d015      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80039c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ce:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d6:	4918      	ldr	r1, [pc, #96]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039e6:	d105      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039e8:	4b13      	ldr	r3, [pc, #76]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4a12      	ldr	r2, [pc, #72]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d015      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a00:	4b0d      	ldr	r3, [pc, #52]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0e:	490a      	ldr	r1, [pc, #40]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a1e:	d105      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a20:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4a04      	ldr	r2, [pc, #16]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40021000 	.word	0x40021000

08003a3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a4e:	d136      	bne.n	8003abe <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003a50:	4bb1      	ldr	r3, [pc, #708]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a5a:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003a5c:	4bae      	ldr	r3, [pc, #696]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d108      	bne.n	8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a70:	d104      	bne.n	8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8003a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a76:	61fb      	str	r3, [r7, #28]
 8003a78:	f000 bd12 	b.w	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003a7c:	4ba6      	ldr	r3, [pc, #664]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d108      	bne.n	8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a90:	d104      	bne.n	8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 8003a92:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003a96:	61fb      	str	r3, [r7, #28]
 8003a98:	f000 bd02 	b.w	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003a9c:	4b9e      	ldr	r3, [pc, #632]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aa8:	f040 84fa 	bne.w	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ab2:	f040 84f5 	bne.w	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = HSE_VALUE / 32U;
 8003ab6:	4b99      	ldr	r3, [pc, #612]	@ (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	f000 bcf1 	b.w	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 8003abe:	4b96      	ldr	r3, [pc, #600]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003aca:	4b93      	ldr	r3, [pc, #588]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ad6:	d102      	bne.n	8003ade <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 8003ad8:	4b91      	ldr	r3, [pc, #580]	@ (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	e017      	b.n	8003b0e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61bb      	str	r3, [r7, #24]
 8003ae2:	e014      	b.n	8003b0e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 8003ae4:	4b8c      	ldr	r3, [pc, #560]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d10c      	bne.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003af0:	4b89      	ldr	r3, [pc, #548]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003afc:	d102      	bne.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 8003afe:	4b89      	ldr	r3, [pc, #548]	@ (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	e004      	b.n	8003b0e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61bb      	str	r3, [r7, #24]
 8003b08:	e001      	b.n	8003b0e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003b0e:	4b82      	ldr	r3, [pc, #520]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	091b      	lsrs	r3, r3, #4
 8003b14:	f003 030f 	and.w	r3, r3, #15
 8003b18:	3301      	adds	r3, #1
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b20:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b28:	f000 8466 	beq.w	80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b32:	f200 848e 	bhi.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b3c:	f000 8263 	beq.w	8004006 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b46:	f200 8484 	bhi.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b50:	f000 8417 	beq.w	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b5a:	f200 847a 	bhi.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b64:	f000 83d0 	beq.w	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b6e:	f200 8470 	bhi.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b78:	f000 8398 	beq.w	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b82:	f200 8466 	bhi.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b8c:	f000 8360 	beq.w	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b96:	f200 845c 	bhi.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba0:	f000 8318 	beq.w	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003baa:	f200 8452 	bhi.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bb4:	f000 82ca 	beq.w	800414c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bbe:	f200 8448 	bhi.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bc8:	f000 827c 	beq.w	80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd2:	f200 843e 	bhi.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bdc:	f000 8236 	beq.w	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003be6:	f200 8434 	bhi.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf0:	f000 81e4 	beq.w	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bfa:	f200 842a 	bhi.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b80      	cmp	r3, #128	@ 0x80
 8003c02:	f000 81b1 	beq.w	8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b80      	cmp	r3, #128	@ 0x80
 8003c0a:	f200 8422 	bhi.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d84b      	bhi.n	8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 841b 	beq.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	2b1f      	cmp	r3, #31
 8003c22:	f200 8416 	bhi.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003c26:	a201      	add	r2, pc, #4	@ (adr r2, 8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>)
 8003c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2c:	08003cb7 	.word	0x08003cb7
 8003c30:	08003d29 	.word	0x08003d29
 8003c34:	08004453 	.word	0x08004453
 8003c38:	08003d8b 	.word	0x08003d8b
 8003c3c:	08004453 	.word	0x08004453
 8003c40:	08004453 	.word	0x08004453
 8003c44:	08004453 	.word	0x08004453
 8003c48:	08003ded 	.word	0x08003ded
 8003c4c:	08004453 	.word	0x08004453
 8003c50:	08004453 	.word	0x08004453
 8003c54:	08004453 	.word	0x08004453
 8003c58:	08004453 	.word	0x08004453
 8003c5c:	08004453 	.word	0x08004453
 8003c60:	08004453 	.word	0x08004453
 8003c64:	08004453 	.word	0x08004453
 8003c68:	08003e4f 	.word	0x08003e4f
 8003c6c:	08004453 	.word	0x08004453
 8003c70:	08004453 	.word	0x08004453
 8003c74:	08004453 	.word	0x08004453
 8003c78:	08004453 	.word	0x08004453
 8003c7c:	08004453 	.word	0x08004453
 8003c80:	08004453 	.word	0x08004453
 8003c84:	08004453 	.word	0x08004453
 8003c88:	08004453 	.word	0x08004453
 8003c8c:	08004453 	.word	0x08004453
 8003c90:	08004453 	.word	0x08004453
 8003c94:	08004453 	.word	0x08004453
 8003c98:	08004453 	.word	0x08004453
 8003c9c:	08004453 	.word	0x08004453
 8003ca0:	08004453 	.word	0x08004453
 8003ca4:	08004453 	.word	0x08004453
 8003ca8:	08003eb7 	.word	0x08003eb7
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b40      	cmp	r3, #64	@ 0x40
 8003cb0:	f000 8135 	beq.w	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
      break;

#endif /* QUADSPI */

    default:
      break;
 8003cb4:	e3cd      	b.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003cb6:	4b18      	ldr	r3, [pc, #96]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d103      	bne.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        frequency = HAL_RCC_GetPCLK2Freq();
 8003cc8:	f7ff fc0e 	bl	80034e8 <HAL_RCC_GetPCLK2Freq>
 8003ccc:	61f8      	str	r0, [r7, #28]
      break;
 8003cce:	e3c2      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d103      	bne.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
        frequency = HAL_RCC_GetSysClockFreq();
 8003cd6:	f7ff fb83 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 8003cda:	61f8      	str	r0, [r7, #28]
      break;
 8003cdc:	e3bb      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 8003cde:	4b0e      	ldr	r3, [pc, #56]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cea:	d105      	bne.n	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d102      	bne.n	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HSI_VALUE;
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003cf4:	61fb      	str	r3, [r7, #28]
      break;
 8003cf6:	e3ae      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003cf8:	4b07      	ldr	r3, [pc, #28]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	f040 83a7 	bne.w	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	f040 83a3 	bne.w	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
        frequency = LSE_VALUE;
 8003d10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d14:	61fb      	str	r3, [r7, #28]
      break;
 8003d16:	e39e      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	0003d090 	.word	0x0003d090
 8003d20:	00f42400 	.word	0x00f42400
 8003d24:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003d28:	4ba2      	ldr	r3, [pc, #648]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003d3a:	f7ff fbbf 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003d3e:	61f8      	str	r0, [r7, #28]
      break;
 8003d40:	e38b      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d103      	bne.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
        frequency = HAL_RCC_GetSysClockFreq();
 8003d48:	f7ff fb4a 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 8003d4c:	61f8      	str	r0, [r7, #28]
      break;
 8003d4e:	e384      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003d50:	4b98      	ldr	r3, [pc, #608]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d5c:	d105      	bne.n	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d102      	bne.n	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
        frequency = HSI_VALUE;
 8003d64:	4b94      	ldr	r3, [pc, #592]	@ (8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003d66:	61fb      	str	r3, [r7, #28]
      break;
 8003d68:	e377      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003d6a:	4b92      	ldr	r3, [pc, #584]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	f040 8370 	bne.w	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b0c      	cmp	r3, #12
 8003d7e:	f040 836c 	bne.w	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
        frequency = LSE_VALUE;
 8003d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d86:	61fb      	str	r3, [r7, #28]
      break;
 8003d88:	e367      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003d8a:	4b8a      	ldr	r3, [pc, #552]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d94:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d103      	bne.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003d9c:	f7ff fb8e 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003da0:	61f8      	str	r0, [r7, #28]
      break;
 8003da2:	e35c      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	2b10      	cmp	r3, #16
 8003da8:	d103      	bne.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
        frequency = HAL_RCC_GetSysClockFreq();
 8003daa:	f7ff fb19 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 8003dae:	61f8      	str	r0, [r7, #28]
      break;
 8003db0:	e355      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003db2:	4b80      	ldr	r3, [pc, #512]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dbe:	d105      	bne.n	8003dcc <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d102      	bne.n	8003dcc <HAL_RCCEx_GetPeriphCLKFreq+0x390>
        frequency = HSI_VALUE;
 8003dc6:	4b7c      	ldr	r3, [pc, #496]	@ (8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003dc8:	61fb      	str	r3, [r7, #28]
      break;
 8003dca:	e348      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003dcc:	4b79      	ldr	r3, [pc, #484]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	f040 8341 	bne.w	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b30      	cmp	r3, #48	@ 0x30
 8003de0:	f040 833d 	bne.w	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        frequency = LSE_VALUE;
 8003de4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003de8:	61fb      	str	r3, [r7, #28]
      break;
 8003dea:	e338      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003dec:	4b71      	ldr	r3, [pc, #452]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003df6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d103      	bne.n	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003dfe:	f7ff fb5d 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003e02:	61f8      	str	r0, [r7, #28]
      break;
 8003e04:	e32d      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b40      	cmp	r3, #64	@ 0x40
 8003e0a:	d103      	bne.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        frequency = HAL_RCC_GetSysClockFreq();
 8003e0c:	f7ff fae8 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 8003e10:	61f8      	str	r0, [r7, #28]
      break;
 8003e12:	e326      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8003e14:	4b67      	ldr	r3, [pc, #412]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e20:	d105      	bne.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2b80      	cmp	r3, #128	@ 0x80
 8003e26:	d102      	bne.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
        frequency = HSI_VALUE;
 8003e28:	4b63      	ldr	r3, [pc, #396]	@ (8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003e2a:	61fb      	str	r3, [r7, #28]
      break;
 8003e2c:	e319      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8003e2e:	4b61      	ldr	r3, [pc, #388]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	f040 8312 	bne.w	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e42:	f040 830e 	bne.w	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
        frequency = LSE_VALUE;
 8003e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e4a:	61fb      	str	r3, [r7, #28]
      break;
 8003e4c:	e309      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003e4e:	4b59      	ldr	r3, [pc, #356]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e58:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d103      	bne.n	8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003e60:	f7ff fb2c 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003e64:	61f8      	str	r0, [r7, #28]
      break;
 8003e66:	e2fe      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e6e:	d103      	bne.n	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
        frequency = HAL_RCC_GetSysClockFreq();
 8003e70:	f7ff fab6 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 8003e74:	61f8      	str	r0, [r7, #28]
      break;
 8003e76:	e2f6      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8003e78:	4b4e      	ldr	r3, [pc, #312]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e84:	d106      	bne.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e8c:	d102      	bne.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
        frequency = HSI_VALUE;
 8003e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003e90:	61fb      	str	r3, [r7, #28]
      break;
 8003e92:	e2e8      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8003e94:	4b47      	ldr	r3, [pc, #284]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	f040 82e1 	bne.w	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eaa:	f040 82dc 	bne.w	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
        frequency = LSE_VALUE;
 8003eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eb2:	61fb      	str	r3, [r7, #28]
      break;
 8003eb4:	e2d7      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ec0:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003ec8:	f7ff faf8 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003ecc:	61f8      	str	r0, [r7, #28]
      break;
 8003ece:	e2cc      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed6:	d103      	bne.n	8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
        frequency = HAL_RCC_GetSysClockFreq();
 8003ed8:	f7ff fa82 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 8003edc:	61f8      	str	r0, [r7, #28]
      break;
 8003ede:	e2c4      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003ee0:	4b34      	ldr	r3, [pc, #208]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eec:	d106      	bne.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ef4:	d102      	bne.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
        frequency = HSI_VALUE;
 8003ef6:	4b30      	ldr	r3, [pc, #192]	@ (8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003ef8:	61fb      	str	r3, [r7, #28]
      break;
 8003efa:	e2b6      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8003efc:	4b2d      	ldr	r3, [pc, #180]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	f040 82af 	bne.w	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f12:	f040 82aa 	bne.w	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
        frequency = LSE_VALUE;
 8003f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f1a:	61fb      	str	r3, [r7, #28]
      break;
 8003f1c:	e2a5      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003f1e:	4b25      	ldr	r3, [pc, #148]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f24:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f28:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d103      	bne.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003f30:	f7ff fac4 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003f34:	61f8      	str	r0, [r7, #28]
      break;
 8003f36:	e29a      	b.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f3e:	d103      	bne.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        frequency = HAL_RCC_GetSysClockFreq();
 8003f40:	f7ff fa4e 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 8003f44:	61f8      	str	r0, [r7, #28]
      break;
 8003f46:	e292      	b.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8003f48:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f54:	f040 828b 	bne.w	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f5e:	f040 8286 	bne.w	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
        frequency = HSI_VALUE;
 8003f62:	4b15      	ldr	r3, [pc, #84]	@ (8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003f64:	61fb      	str	r3, [r7, #28]
      break;
 8003f66:	e282      	b.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003f68:	4b12      	ldr	r3, [pc, #72]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003f72:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d103      	bne.n	8003f82 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003f7a:	f7ff fa9f 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003f7e:	61f8      	str	r0, [r7, #28]
      break;
 8003f80:	e277      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f88:	d103      	bne.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
        frequency = HAL_RCC_GetSysClockFreq();
 8003f8a:	f7ff fa29 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 8003f8e:	61f8      	str	r0, [r7, #28]
      break;
 8003f90:	e26f      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8003f92:	4b08      	ldr	r3, [pc, #32]	@ (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f9e:	f040 8268 	bne.w	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa8:	f040 8263 	bne.w	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
        frequency = HSI_VALUE;
 8003fac:	4b02      	ldr	r3, [pc, #8]	@ (8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003fae:	61fb      	str	r3, [r7, #28]
      break;
 8003fb0:	e25f      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8003fb2:	bf00      	nop
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	00f42400 	.word	0x00f42400
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003fbc:	4ba0      	ldr	r3, [pc, #640]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fc6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d103      	bne.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003fce:	f7ff fa75 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003fd2:	61f8      	str	r0, [r7, #28]
      break;
 8003fd4:	e24f      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fdc:	d103      	bne.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
        frequency = HAL_RCC_GetSysClockFreq();
 8003fde:	f7ff f9ff 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 8003fe2:	61f8      	str	r0, [r7, #28]
      break;
 8003fe4:	e247      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8003fe6:	4b96      	ldr	r3, [pc, #600]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ff2:	f040 8240 	bne.w	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ffc:	f040 823b 	bne.w	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        frequency = HSI_VALUE;
 8004000:	4b90      	ldr	r3, [pc, #576]	@ (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004002:	61fb      	str	r3, [r7, #28]
      break;
 8004004:	e237      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004006:	4b8e      	ldr	r3, [pc, #568]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004008:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d103      	bne.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004018:	f7ff fa50 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 800401c:	61f8      	str	r0, [r7, #28]
      break;
 800401e:	e22c      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if(srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d103      	bne.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        frequency = HAL_RCC_GetSysClockFreq();
 8004026:	f7ff f9db 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 800402a:	61f8      	str	r0, [r7, #28]
      break;
 800402c:	e225      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800402e:	4b84      	ldr	r3, [pc, #528]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800403a:	f040 821e 	bne.w	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b02      	cmp	r3, #2
 8004042:	f040 821a 	bne.w	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
        frequency = HSI_VALUE;
 8004046:	4b7f      	ldr	r3, [pc, #508]	@ (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004048:	61fb      	str	r3, [r7, #28]
      break;
 800404a:	e216      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800404c:	4b7c      	ldr	r3, [pc, #496]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004052:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004056:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
        frequency = HAL_RCC_GetPCLK1Freq();
 800405e:	f7ff fa2d 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8004062:	61f8      	str	r0, [r7, #28]
      break;
 8004064:	e20b      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004066:	4b76      	ldr	r3, [pc, #472]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b02      	cmp	r3, #2
 8004072:	d107      	bne.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800407a:	d103      	bne.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
        frequency = LSI_VALUE;
 800407c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	e01e      	b.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004084:	4b6e      	ldr	r3, [pc, #440]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800408c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004090:	d106      	bne.n	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004098:	d102      	bne.n	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        frequency = HSI_VALUE;
 800409a:	4b6a      	ldr	r3, [pc, #424]	@ (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	e010      	b.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80040a0:	4b67      	ldr	r3, [pc, #412]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	f040 81e7 	bne.w	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040b6:	f040 81e2 	bne.w	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
        frequency = LSE_VALUE;
 80040ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040be:	61fb      	str	r3, [r7, #28]
      break;
 80040c0:	e1dd      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80040c2:	e1dc      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80040c4:	4b5e      	ldr	r3, [pc, #376]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ca:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80040ce:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d103      	bne.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
        frequency = HAL_RCC_GetSysClockFreq();
 80040d6:	f7ff f983 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 80040da:	61f8      	str	r0, [r7, #28]
      break;
 80040dc:	e1d1      	b.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040e4:	d11b      	bne.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80040e6:	4b56      	ldr	r3, [pc, #344]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 81c7 	beq.w	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80040f4:	4b52      	ldr	r3, [pc, #328]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	0a1b      	lsrs	r3, r3, #8
 80040fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040fe:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	fb03 f202 	mul.w	r2, r3, r2
 8004108:	4b4d      	ldr	r3, [pc, #308]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	0d5b      	lsrs	r3, r3, #21
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	3301      	adds	r3, #1
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	fbb2 f3f3 	udiv	r3, r2, r3
 800411a:	61fb      	str	r3, [r7, #28]
      break;
 800411c:	e1b1      	b.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004124:	d102      	bne.n	800412c <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004126:	4b48      	ldr	r3, [pc, #288]	@ (8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004128:	61fb      	str	r3, [r7, #28]
      break;
 800412a:	e1aa      	b.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 800412c:	4b44      	ldr	r3, [pc, #272]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004138:	f040 81a3 	bne.w	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004142:	f040 819e 	bne.w	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
        frequency = HSI_VALUE;
 8004146:	4b3f      	ldr	r3, [pc, #252]	@ (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004148:	61fb      	str	r3, [r7, #28]
      break;
 800414a:	e19a      	b.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800414c:	4b3c      	ldr	r3, [pc, #240]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004152:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004156:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d103      	bne.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
        frequency = HAL_RCC_GetSysClockFreq();
 800415e:	f7ff f93f 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 8004162:	61f8      	str	r0, [r7, #28]
      break;
 8004164:	e18f      	b.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800416c:	d11b      	bne.n	80041a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800416e:	4b34      	ldr	r3, [pc, #208]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 8185 	beq.w	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800417c:	4b30      	ldr	r3, [pc, #192]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	0a1b      	lsrs	r3, r3, #8
 8004182:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004186:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	fb03 f202 	mul.w	r2, r3, r2
 8004190:	4b2b      	ldr	r3, [pc, #172]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	0d5b      	lsrs	r3, r3, #21
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	3301      	adds	r3, #1
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a2:	61fb      	str	r3, [r7, #28]
      break;
 80041a4:	e16f      	b.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041ac:	d102      	bne.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        frequency = EXTERNAL_CLOCK_VALUE;
 80041ae:	4b26      	ldr	r3, [pc, #152]	@ (8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80041b0:	61fb      	str	r3, [r7, #28]
      break;
 80041b2:	e168      	b.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 80041b4:	4b22      	ldr	r3, [pc, #136]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041c0:	f040 8161 	bne.w	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80041ca:	f040 815c 	bne.w	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
        frequency = HSI_VALUE;
 80041ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80041d0:	61fb      	str	r3, [r7, #28]
      break;
 80041d2:	e158      	b.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80041d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041da:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80041de:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041e6:	d103      	bne.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
        frequency = HAL_RCC_GetPCLK1Freq();
 80041e8:	f7ff f968 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 80041ec:	61f8      	str	r0, [r7, #28]
      break;
 80041ee:	e14c      	b.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
        frequency = HSE_VALUE;
 80041f6:	4b15      	ldr	r3, [pc, #84]	@ (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80041f8:	61fb      	str	r3, [r7, #28]
      break;
 80041fa:	e146      	b.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004202:	f040 8142 	bne.w	800448a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8004206:	4b0e      	ldr	r3, [pc, #56]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 813b 	beq.w	800448a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004214:	4b0a      	ldr	r3, [pc, #40]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800421e:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	fb03 f202 	mul.w	r2, r3, r2
 8004228:	4b05      	ldr	r3, [pc, #20]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	0d5b      	lsrs	r3, r3, #21
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	3301      	adds	r3, #1
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	fbb2 f3f3 	udiv	r3, r2, r3
 800423a:	61fb      	str	r3, [r7, #28]
      break;
 800423c:	e125      	b.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 800423e:	bf00      	nop
 8004240:	40021000 	.word	0x40021000
 8004244:	00f42400 	.word	0x00f42400
 8004248:	00bb8000 	.word	0x00bb8000
 800424c:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004250:	4b96      	ldr	r3, [pc, #600]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004256:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800425a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004262:	d114      	bne.n	800428e <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004264:	4b91      	ldr	r3, [pc, #580]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	0a1b      	lsrs	r3, r3, #8
 800426a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800426e:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	fb03 f202 	mul.w	r2, r3, r2
 8004278:	4b8c      	ldr	r3, [pc, #560]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	0d5b      	lsrs	r3, r3, #21
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	3301      	adds	r3, #1
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	fbb2 f3f3 	udiv	r3, r2, r3
 800428a:	61fb      	str	r3, [r7, #28]
      break;
 800428c:	e0ff      	b.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 800428e:	4b87      	ldr	r3, [pc, #540]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004290:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b02      	cmp	r3, #2
 800429a:	f040 80f8 	bne.w	800448e <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f040 80f4 	bne.w	800448e <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
        frequency = HSI48_VALUE;
 80042a6:	4b82      	ldr	r3, [pc, #520]	@ (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80042a8:	61fb      	str	r3, [r7, #28]
      break;
 80042aa:	e0f0      	b.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80042ac:	4b7f      	ldr	r3, [pc, #508]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80042b6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042be:	d114      	bne.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80042c0:	4b7a      	ldr	r3, [pc, #488]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	0a1b      	lsrs	r3, r3, #8
 80042c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ca:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	fb03 f202 	mul.w	r2, r3, r2
 80042d4:	4b75      	ldr	r3, [pc, #468]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	0d5b      	lsrs	r3, r3, #21
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	3301      	adds	r3, #1
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e6:	61fb      	str	r3, [r7, #28]
      break;
 80042e8:	e0d3      	b.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 80042ea:	4b70      	ldr	r3, [pc, #448]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80042ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	f040 80cc 	bne.w	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f040 80c8 	bne.w	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
        frequency = HSI48_VALUE;
 8004302:	4b6b      	ldr	r3, [pc, #428]	@ (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8004304:	61fb      	str	r3, [r7, #28]
      break;
 8004306:	e0c4      	b.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 8004308:	4b68      	ldr	r3, [pc, #416]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004312:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800431a:	d129      	bne.n	8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 800431c:	4b63      	ldr	r3, [pc, #396]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80b6 	beq.w	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800432a:	4b60      	ldr	r3, [pc, #384]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004334:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004336:	4b5d      	ldr	r3, [pc, #372]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	0edb      	lsrs	r3, r3, #27
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10a      	bne.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0x922>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004348:	4b58      	ldr	r3, [pc, #352]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
              pllp = 17U;
 8004354:	2311      	movs	r3, #17
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	e001      	b.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0x922>
              pllp = 7U;
 800435a:	2307      	movs	r3, #7
 800435c:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	fb03 f202 	mul.w	r2, r3, r2
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	fbb2 f3f3 	udiv	r3, r2, r3
 800436c:	61fb      	str	r3, [r7, #28]
      break;
 800436e:	e092      	b.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004376:	f040 808e 	bne.w	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
        frequency = HAL_RCC_GetSysClockFreq();
 800437a:	f7ff f831 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 800437e:	61f8      	str	r0, [r7, #28]
      break;
 8004380:	e089      	b.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 8004382:	4b4a      	ldr	r3, [pc, #296]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004388:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800438c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004394:	d128      	bne.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8004396:	4b45      	ldr	r3, [pc, #276]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d07b      	beq.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80043a2:	4b42      	ldr	r3, [pc, #264]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043ac:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80043ae:	4b3f      	ldr	r3, [pc, #252]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	0edb      	lsrs	r3, r3, #27
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80043c0:	4b3a      	ldr	r3, [pc, #232]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
              pllp = 17U;
 80043cc:	2311      	movs	r3, #17
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	e001      	b.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
              pllp = 7U;
 80043d2:	2307      	movs	r3, #7
 80043d4:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	fb03 f202 	mul.w	r2, r3, r2
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	61fb      	str	r3, [r7, #28]
      break;
 80043e6:	e058      	b.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043ee:	d154      	bne.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
        frequency = HAL_RCC_GetSysClockFreq();
 80043f0:	f7fe fff6 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 80043f4:	61f8      	str	r0, [r7, #28]
      break;
 80043f6:	e050      	b.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 80043f8:	4b2c      	ldr	r3, [pc, #176]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80043fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043fe:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004402:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800440a:	d114      	bne.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800440c:	4b27      	ldr	r3, [pc, #156]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	0a1b      	lsrs	r3, r3, #8
 8004412:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004416:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	fb03 f202 	mul.w	r2, r3, r2
 8004420:	4b22      	ldr	r3, [pc, #136]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	0d5b      	lsrs	r3, r3, #21
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	3301      	adds	r3, #1
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004432:	61fb      	str	r3, [r7, #28]
      break;
 8004434:	e033      	b.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800443c:	d102      	bne.n	8004444 <HAL_RCCEx_GetPeriphCLKFreq+0xa08>
        frequency = HSI_VALUE;
 800443e:	4b1d      	ldr	r3, [pc, #116]	@ (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8004440:	61fb      	str	r3, [r7, #28]
      break;
 8004442:	e02c      	b.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d129      	bne.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
        frequency = HAL_RCC_GetSysClockFreq();
 800444a:	f7fe ffc9 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 800444e:	61f8      	str	r0, [r7, #28]
      break;
 8004450:	e025      	b.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      break;
 8004452:	bf00      	nop
 8004454:	e024      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004456:	bf00      	nop
 8004458:	e022      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800445a:	bf00      	nop
 800445c:	e020      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800445e:	bf00      	nop
 8004460:	e01e      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004462:	bf00      	nop
 8004464:	e01c      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004466:	bf00      	nop
 8004468:	e01a      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800446a:	bf00      	nop
 800446c:	e018      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800446e:	bf00      	nop
 8004470:	e016      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004472:	bf00      	nop
 8004474:	e014      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004476:	bf00      	nop
 8004478:	e012      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800447a:	bf00      	nop
 800447c:	e010      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800447e:	bf00      	nop
 8004480:	e00e      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004482:	bf00      	nop
 8004484:	e00c      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004486:	bf00      	nop
 8004488:	e00a      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800448a:	bf00      	nop
 800448c:	e008      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800448e:	bf00      	nop
 8004490:	e006      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004492:	bf00      	nop
 8004494:	e004      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004496:	bf00      	nop
 8004498:	e002      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800449a:	bf00      	nop
 800449c:	e000      	b.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800449e:	bf00      	nop
    }
  }

  return(frequency);
 80044a0:	69fb      	ldr	r3, [r7, #28]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3720      	adds	r7, #32
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40021000 	.word	0x40021000
 80044b0:	02dc6c00 	.word	0x02dc6c00
 80044b4:	00f42400 	.word	0x00f42400

080044b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e049      	b.n	800455e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fd f85e 	bl	80015a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3304      	adds	r3, #4
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f000 fe74 	bl	80051e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	d001      	beq.n	8004580 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e04c      	b.n	800461a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a26      	ldr	r2, [pc, #152]	@ (8004628 <HAL_TIM_Base_Start+0xc0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d022      	beq.n	80045d8 <HAL_TIM_Base_Start+0x70>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800459a:	d01d      	beq.n	80045d8 <HAL_TIM_Base_Start+0x70>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a22      	ldr	r2, [pc, #136]	@ (800462c <HAL_TIM_Base_Start+0xc4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d018      	beq.n	80045d8 <HAL_TIM_Base_Start+0x70>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a21      	ldr	r2, [pc, #132]	@ (8004630 <HAL_TIM_Base_Start+0xc8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d013      	beq.n	80045d8 <HAL_TIM_Base_Start+0x70>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004634 <HAL_TIM_Base_Start+0xcc>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00e      	beq.n	80045d8 <HAL_TIM_Base_Start+0x70>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a1e      	ldr	r2, [pc, #120]	@ (8004638 <HAL_TIM_Base_Start+0xd0>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d009      	beq.n	80045d8 <HAL_TIM_Base_Start+0x70>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a1c      	ldr	r2, [pc, #112]	@ (800463c <HAL_TIM_Base_Start+0xd4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d004      	beq.n	80045d8 <HAL_TIM_Base_Start+0x70>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004640 <HAL_TIM_Base_Start+0xd8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d115      	bne.n	8004604 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	4b19      	ldr	r3, [pc, #100]	@ (8004644 <HAL_TIM_Base_Start+0xdc>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b06      	cmp	r3, #6
 80045e8:	d015      	beq.n	8004616 <HAL_TIM_Base_Start+0xae>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045f0:	d011      	beq.n	8004616 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f042 0201 	orr.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004602:	e008      	b.n	8004616 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	e000      	b.n	8004618 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004616:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40012c00 	.word	0x40012c00
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800
 8004634:	40000c00 	.word	0x40000c00
 8004638:	40013400 	.word	0x40013400
 800463c:	40014000 	.word	0x40014000
 8004640:	40015000 	.word	0x40015000
 8004644:	00010007 	.word	0x00010007

08004648 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e049      	b.n	80046ee <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f841 	bl	80046f6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f000 fdac 	bl	80051e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
	...

0800470c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d109      	bne.n	8004730 <HAL_TIM_OC_Start+0x24>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	bf14      	ite	ne
 8004728:	2301      	movne	r3, #1
 800472a:	2300      	moveq	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	e03c      	b.n	80047aa <HAL_TIM_OC_Start+0x9e>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b04      	cmp	r3, #4
 8004734:	d109      	bne.n	800474a <HAL_TIM_OC_Start+0x3e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b01      	cmp	r3, #1
 8004740:	bf14      	ite	ne
 8004742:	2301      	movne	r3, #1
 8004744:	2300      	moveq	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	e02f      	b.n	80047aa <HAL_TIM_OC_Start+0x9e>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b08      	cmp	r3, #8
 800474e:	d109      	bne.n	8004764 <HAL_TIM_OC_Start+0x58>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	bf14      	ite	ne
 800475c:	2301      	movne	r3, #1
 800475e:	2300      	moveq	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	e022      	b.n	80047aa <HAL_TIM_OC_Start+0x9e>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b0c      	cmp	r3, #12
 8004768:	d109      	bne.n	800477e <HAL_TIM_OC_Start+0x72>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b01      	cmp	r3, #1
 8004774:	bf14      	ite	ne
 8004776:	2301      	movne	r3, #1
 8004778:	2300      	moveq	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	e015      	b.n	80047aa <HAL_TIM_OC_Start+0x9e>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b10      	cmp	r3, #16
 8004782:	d109      	bne.n	8004798 <HAL_TIM_OC_Start+0x8c>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b01      	cmp	r3, #1
 800478e:	bf14      	ite	ne
 8004790:	2301      	movne	r3, #1
 8004792:	2300      	moveq	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	e008      	b.n	80047aa <HAL_TIM_OC_Start+0x9e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e0a6      	b.n	8004900 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d104      	bne.n	80047c2 <HAL_TIM_OC_Start+0xb6>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047c0:	e023      	b.n	800480a <HAL_TIM_OC_Start+0xfe>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d104      	bne.n	80047d2 <HAL_TIM_OC_Start+0xc6>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047d0:	e01b      	b.n	800480a <HAL_TIM_OC_Start+0xfe>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d104      	bne.n	80047e2 <HAL_TIM_OC_Start+0xd6>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047e0:	e013      	b.n	800480a <HAL_TIM_OC_Start+0xfe>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b0c      	cmp	r3, #12
 80047e6:	d104      	bne.n	80047f2 <HAL_TIM_OC_Start+0xe6>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047f0:	e00b      	b.n	800480a <HAL_TIM_OC_Start+0xfe>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b10      	cmp	r3, #16
 80047f6:	d104      	bne.n	8004802 <HAL_TIM_OC_Start+0xf6>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004800:	e003      	b.n	800480a <HAL_TIM_OC_Start+0xfe>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2202      	movs	r2, #2
 8004806:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2201      	movs	r2, #1
 8004810:	6839      	ldr	r1, [r7, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f001 fa40 	bl	8005c98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a3a      	ldr	r2, [pc, #232]	@ (8004908 <HAL_TIM_OC_Start+0x1fc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d018      	beq.n	8004854 <HAL_TIM_OC_Start+0x148>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a39      	ldr	r2, [pc, #228]	@ (800490c <HAL_TIM_OC_Start+0x200>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d013      	beq.n	8004854 <HAL_TIM_OC_Start+0x148>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a37      	ldr	r2, [pc, #220]	@ (8004910 <HAL_TIM_OC_Start+0x204>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00e      	beq.n	8004854 <HAL_TIM_OC_Start+0x148>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a36      	ldr	r2, [pc, #216]	@ (8004914 <HAL_TIM_OC_Start+0x208>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d009      	beq.n	8004854 <HAL_TIM_OC_Start+0x148>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a34      	ldr	r2, [pc, #208]	@ (8004918 <HAL_TIM_OC_Start+0x20c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <HAL_TIM_OC_Start+0x148>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a33      	ldr	r2, [pc, #204]	@ (800491c <HAL_TIM_OC_Start+0x210>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d101      	bne.n	8004858 <HAL_TIM_OC_Start+0x14c>
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <HAL_TIM_OC_Start+0x14e>
 8004858:	2300      	movs	r3, #0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d007      	beq.n	800486e <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800486c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a25      	ldr	r2, [pc, #148]	@ (8004908 <HAL_TIM_OC_Start+0x1fc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d022      	beq.n	80048be <HAL_TIM_OC_Start+0x1b2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004880:	d01d      	beq.n	80048be <HAL_TIM_OC_Start+0x1b2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a26      	ldr	r2, [pc, #152]	@ (8004920 <HAL_TIM_OC_Start+0x214>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d018      	beq.n	80048be <HAL_TIM_OC_Start+0x1b2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a24      	ldr	r2, [pc, #144]	@ (8004924 <HAL_TIM_OC_Start+0x218>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d013      	beq.n	80048be <HAL_TIM_OC_Start+0x1b2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a23      	ldr	r2, [pc, #140]	@ (8004928 <HAL_TIM_OC_Start+0x21c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00e      	beq.n	80048be <HAL_TIM_OC_Start+0x1b2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a19      	ldr	r2, [pc, #100]	@ (800490c <HAL_TIM_OC_Start+0x200>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d009      	beq.n	80048be <HAL_TIM_OC_Start+0x1b2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a18      	ldr	r2, [pc, #96]	@ (8004910 <HAL_TIM_OC_Start+0x204>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d004      	beq.n	80048be <HAL_TIM_OC_Start+0x1b2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a18      	ldr	r2, [pc, #96]	@ (800491c <HAL_TIM_OC_Start+0x210>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d115      	bne.n	80048ea <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	4b19      	ldr	r3, [pc, #100]	@ (800492c <HAL_TIM_OC_Start+0x220>)
 80048c6:	4013      	ands	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b06      	cmp	r3, #6
 80048ce:	d015      	beq.n	80048fc <HAL_TIM_OC_Start+0x1f0>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d6:	d011      	beq.n	80048fc <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e8:	e008      	b.n	80048fc <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0201 	orr.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	e000      	b.n	80048fe <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40013400 	.word	0x40013400
 8004910:	40014000 	.word	0x40014000
 8004914:	40014400 	.word	0x40014400
 8004918:	40014800 	.word	0x40014800
 800491c:	40015000 	.word	0x40015000
 8004920:	40000400 	.word	0x40000400
 8004924:	40000800 	.word	0x40000800
 8004928:	40000c00 	.word	0x40000c00
 800492c:	00010007 	.word	0x00010007

08004930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e049      	b.n	80049d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f841 	bl	80049de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	4619      	mov	r1, r3
 800496e:	4610      	mov	r0, r2
 8004970:	f000 fc38 	bl	80051e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d109      	bne.n	8004a18 <HAL_TIM_PWM_Start+0x24>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e03c      	b.n	8004a92 <HAL_TIM_PWM_Start+0x9e>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d109      	bne.n	8004a32 <HAL_TIM_PWM_Start+0x3e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	bf14      	ite	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	2300      	moveq	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	e02f      	b.n	8004a92 <HAL_TIM_PWM_Start+0x9e>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d109      	bne.n	8004a4c <HAL_TIM_PWM_Start+0x58>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	bf14      	ite	ne
 8004a44:	2301      	movne	r3, #1
 8004a46:	2300      	moveq	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	e022      	b.n	8004a92 <HAL_TIM_PWM_Start+0x9e>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b0c      	cmp	r3, #12
 8004a50:	d109      	bne.n	8004a66 <HAL_TIM_PWM_Start+0x72>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	bf14      	ite	ne
 8004a5e:	2301      	movne	r3, #1
 8004a60:	2300      	moveq	r3, #0
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	e015      	b.n	8004a92 <HAL_TIM_PWM_Start+0x9e>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d109      	bne.n	8004a80 <HAL_TIM_PWM_Start+0x8c>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	bf14      	ite	ne
 8004a78:	2301      	movne	r3, #1
 8004a7a:	2300      	moveq	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	e008      	b.n	8004a92 <HAL_TIM_PWM_Start+0x9e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	bf14      	ite	ne
 8004a8c:	2301      	movne	r3, #1
 8004a8e:	2300      	moveq	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e0a6      	b.n	8004be8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d104      	bne.n	8004aaa <HAL_TIM_PWM_Start+0xb6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004aa8:	e023      	b.n	8004af2 <HAL_TIM_PWM_Start+0xfe>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d104      	bne.n	8004aba <HAL_TIM_PWM_Start+0xc6>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ab8:	e01b      	b.n	8004af2 <HAL_TIM_PWM_Start+0xfe>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d104      	bne.n	8004aca <HAL_TIM_PWM_Start+0xd6>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ac8:	e013      	b.n	8004af2 <HAL_TIM_PWM_Start+0xfe>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b0c      	cmp	r3, #12
 8004ace:	d104      	bne.n	8004ada <HAL_TIM_PWM_Start+0xe6>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ad8:	e00b      	b.n	8004af2 <HAL_TIM_PWM_Start+0xfe>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d104      	bne.n	8004aea <HAL_TIM_PWM_Start+0xf6>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ae8:	e003      	b.n	8004af2 <HAL_TIM_PWM_Start+0xfe>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2201      	movs	r2, #1
 8004af8:	6839      	ldr	r1, [r7, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f001 f8cc 	bl	8005c98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a3a      	ldr	r2, [pc, #232]	@ (8004bf0 <HAL_TIM_PWM_Start+0x1fc>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d018      	beq.n	8004b3c <HAL_TIM_PWM_Start+0x148>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a39      	ldr	r2, [pc, #228]	@ (8004bf4 <HAL_TIM_PWM_Start+0x200>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d013      	beq.n	8004b3c <HAL_TIM_PWM_Start+0x148>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a37      	ldr	r2, [pc, #220]	@ (8004bf8 <HAL_TIM_PWM_Start+0x204>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00e      	beq.n	8004b3c <HAL_TIM_PWM_Start+0x148>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a36      	ldr	r2, [pc, #216]	@ (8004bfc <HAL_TIM_PWM_Start+0x208>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d009      	beq.n	8004b3c <HAL_TIM_PWM_Start+0x148>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a34      	ldr	r2, [pc, #208]	@ (8004c00 <HAL_TIM_PWM_Start+0x20c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d004      	beq.n	8004b3c <HAL_TIM_PWM_Start+0x148>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a33      	ldr	r2, [pc, #204]	@ (8004c04 <HAL_TIM_PWM_Start+0x210>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d101      	bne.n	8004b40 <HAL_TIM_PWM_Start+0x14c>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <HAL_TIM_PWM_Start+0x14e>
 8004b40:	2300      	movs	r3, #0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a25      	ldr	r2, [pc, #148]	@ (8004bf0 <HAL_TIM_PWM_Start+0x1fc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d022      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x1b2>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b68:	d01d      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x1b2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a26      	ldr	r2, [pc, #152]	@ (8004c08 <HAL_TIM_PWM_Start+0x214>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d018      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x1b2>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a24      	ldr	r2, [pc, #144]	@ (8004c0c <HAL_TIM_PWM_Start+0x218>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d013      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x1b2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a23      	ldr	r2, [pc, #140]	@ (8004c10 <HAL_TIM_PWM_Start+0x21c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00e      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x1b2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a19      	ldr	r2, [pc, #100]	@ (8004bf4 <HAL_TIM_PWM_Start+0x200>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d009      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x1b2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a18      	ldr	r2, [pc, #96]	@ (8004bf8 <HAL_TIM_PWM_Start+0x204>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d004      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x1b2>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a18      	ldr	r2, [pc, #96]	@ (8004c04 <HAL_TIM_PWM_Start+0x210>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d115      	bne.n	8004bd2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	4b19      	ldr	r3, [pc, #100]	@ (8004c14 <HAL_TIM_PWM_Start+0x220>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b06      	cmp	r3, #6
 8004bb6:	d015      	beq.n	8004be4 <HAL_TIM_PWM_Start+0x1f0>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bbe:	d011      	beq.n	8004be4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd0:	e008      	b.n	8004be4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0201 	orr.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	e000      	b.n	8004be6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40013400 	.word	0x40013400
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40014400 	.word	0x40014400
 8004c00:	40014800 	.word	0x40014800
 8004c04:	40015000 	.word	0x40015000
 8004c08:	40000400 	.word	0x40000400
 8004c0c:	40000800 	.word	0x40000800
 8004c10:	40000c00 	.word	0x40000c00
 8004c14:	00010007 	.word	0x00010007

08004c18 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e066      	b.n	8004d04 <HAL_TIM_OC_ConfigChannel+0xec>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b14      	cmp	r3, #20
 8004c42:	d857      	bhi.n	8004cf4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004c44:	a201      	add	r2, pc, #4	@ (adr r2, 8004c4c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4a:	bf00      	nop
 8004c4c:	08004ca1 	.word	0x08004ca1
 8004c50:	08004cf5 	.word	0x08004cf5
 8004c54:	08004cf5 	.word	0x08004cf5
 8004c58:	08004cf5 	.word	0x08004cf5
 8004c5c:	08004caf 	.word	0x08004caf
 8004c60:	08004cf5 	.word	0x08004cf5
 8004c64:	08004cf5 	.word	0x08004cf5
 8004c68:	08004cf5 	.word	0x08004cf5
 8004c6c:	08004cbd 	.word	0x08004cbd
 8004c70:	08004cf5 	.word	0x08004cf5
 8004c74:	08004cf5 	.word	0x08004cf5
 8004c78:	08004cf5 	.word	0x08004cf5
 8004c7c:	08004ccb 	.word	0x08004ccb
 8004c80:	08004cf5 	.word	0x08004cf5
 8004c84:	08004cf5 	.word	0x08004cf5
 8004c88:	08004cf5 	.word	0x08004cf5
 8004c8c:	08004cd9 	.word	0x08004cd9
 8004c90:	08004cf5 	.word	0x08004cf5
 8004c94:	08004cf5 	.word	0x08004cf5
 8004c98:	08004cf5 	.word	0x08004cf5
 8004c9c:	08004ce7 	.word	0x08004ce7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68b9      	ldr	r1, [r7, #8]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fb50 	bl	800534c <TIM_OC1_SetConfig>
      break;
 8004cac:	e025      	b.n	8004cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fbe3 	bl	8005480 <TIM_OC2_SetConfig>
      break;
 8004cba:	e01e      	b.n	8004cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fc70 	bl	80055a8 <TIM_OC3_SetConfig>
      break;
 8004cc8:	e017      	b.n	8004cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fcfb 	bl	80056cc <TIM_OC4_SetConfig>
      break;
 8004cd6:	e010      	b.n	8004cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fd88 	bl	80057f4 <TIM_OC5_SetConfig>
      break;
 8004ce4:	e009      	b.n	8004cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fdeb 	bl	80058c8 <TIM_OC6_SetConfig>
      break;
 8004cf2:	e002      	b.n	8004cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8004cf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e0ff      	b.n	8004f2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b14      	cmp	r3, #20
 8004d36:	f200 80f0 	bhi.w	8004f1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d95 	.word	0x08004d95
 8004d44:	08004f1b 	.word	0x08004f1b
 8004d48:	08004f1b 	.word	0x08004f1b
 8004d4c:	08004f1b 	.word	0x08004f1b
 8004d50:	08004dd5 	.word	0x08004dd5
 8004d54:	08004f1b 	.word	0x08004f1b
 8004d58:	08004f1b 	.word	0x08004f1b
 8004d5c:	08004f1b 	.word	0x08004f1b
 8004d60:	08004e17 	.word	0x08004e17
 8004d64:	08004f1b 	.word	0x08004f1b
 8004d68:	08004f1b 	.word	0x08004f1b
 8004d6c:	08004f1b 	.word	0x08004f1b
 8004d70:	08004e57 	.word	0x08004e57
 8004d74:	08004f1b 	.word	0x08004f1b
 8004d78:	08004f1b 	.word	0x08004f1b
 8004d7c:	08004f1b 	.word	0x08004f1b
 8004d80:	08004e99 	.word	0x08004e99
 8004d84:	08004f1b 	.word	0x08004f1b
 8004d88:	08004f1b 	.word	0x08004f1b
 8004d8c:	08004f1b 	.word	0x08004f1b
 8004d90:	08004ed9 	.word	0x08004ed9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fad6 	bl	800534c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0208 	orr.w	r2, r2, #8
 8004dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0204 	bic.w	r2, r2, #4
 8004dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6999      	ldr	r1, [r3, #24]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	619a      	str	r2, [r3, #24]
      break;
 8004dd2:	e0a5      	b.n	8004f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fb50 	bl	8005480 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6999      	ldr	r1, [r3, #24]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	021a      	lsls	r2, r3, #8
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	619a      	str	r2, [r3, #24]
      break;
 8004e14:	e084      	b.n	8004f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fbc3 	bl	80055a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0208 	orr.w	r2, r2, #8
 8004e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0204 	bic.w	r2, r2, #4
 8004e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69d9      	ldr	r1, [r3, #28]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	61da      	str	r2, [r3, #28]
      break;
 8004e54:	e064      	b.n	8004f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fc35 	bl	80056cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69d9      	ldr	r1, [r3, #28]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	021a      	lsls	r2, r3, #8
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	61da      	str	r2, [r3, #28]
      break;
 8004e96:	e043      	b.n	8004f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fca8 	bl	80057f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0208 	orr.w	r2, r2, #8
 8004eb2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0204 	bic.w	r2, r2, #4
 8004ec2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004ed6:	e023      	b.n	8004f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fcf2 	bl	80058c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ef2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f02:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	021a      	lsls	r2, r3, #8
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004f18:	e002      	b.n	8004f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop

08004f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_TIM_ConfigClockSource+0x1c>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e0f6      	b.n	800513e <HAL_TIM_ConfigClockSource+0x20a>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004f6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a6f      	ldr	r2, [pc, #444]	@ (8005148 <HAL_TIM_ConfigClockSource+0x214>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	f000 80c1 	beq.w	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8004f90:	4a6d      	ldr	r2, [pc, #436]	@ (8005148 <HAL_TIM_ConfigClockSource+0x214>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	f200 80c6 	bhi.w	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f98:	4a6c      	ldr	r2, [pc, #432]	@ (800514c <HAL_TIM_ConfigClockSource+0x218>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	f000 80b9 	beq.w	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8004fa0:	4a6a      	ldr	r2, [pc, #424]	@ (800514c <HAL_TIM_ConfigClockSource+0x218>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	f200 80be 	bhi.w	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fa8:	4a69      	ldr	r2, [pc, #420]	@ (8005150 <HAL_TIM_ConfigClockSource+0x21c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	f000 80b1 	beq.w	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8004fb0:	4a67      	ldr	r2, [pc, #412]	@ (8005150 <HAL_TIM_ConfigClockSource+0x21c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	f200 80b6 	bhi.w	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fb8:	4a66      	ldr	r2, [pc, #408]	@ (8005154 <HAL_TIM_ConfigClockSource+0x220>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	f000 80a9 	beq.w	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8004fc0:	4a64      	ldr	r2, [pc, #400]	@ (8005154 <HAL_TIM_ConfigClockSource+0x220>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	f200 80ae 	bhi.w	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fc8:	4a63      	ldr	r2, [pc, #396]	@ (8005158 <HAL_TIM_ConfigClockSource+0x224>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	f000 80a1 	beq.w	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8004fd0:	4a61      	ldr	r2, [pc, #388]	@ (8005158 <HAL_TIM_ConfigClockSource+0x224>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	f200 80a6 	bhi.w	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fd8:	4a60      	ldr	r2, [pc, #384]	@ (800515c <HAL_TIM_ConfigClockSource+0x228>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	f000 8099 	beq.w	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8004fe0:	4a5e      	ldr	r2, [pc, #376]	@ (800515c <HAL_TIM_ConfigClockSource+0x228>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	f200 809e 	bhi.w	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fe8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004fec:	f000 8091 	beq.w	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8004ff0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004ff4:	f200 8096 	bhi.w	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ff8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ffc:	f000 8089 	beq.w	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8005000:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005004:	f200 808e 	bhi.w	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8005008:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800500c:	d03e      	beq.n	800508c <HAL_TIM_ConfigClockSource+0x158>
 800500e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005012:	f200 8087 	bhi.w	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8005016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800501a:	f000 8086 	beq.w	800512a <HAL_TIM_ConfigClockSource+0x1f6>
 800501e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005022:	d87f      	bhi.n	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8005024:	2b70      	cmp	r3, #112	@ 0x70
 8005026:	d01a      	beq.n	800505e <HAL_TIM_ConfigClockSource+0x12a>
 8005028:	2b70      	cmp	r3, #112	@ 0x70
 800502a:	d87b      	bhi.n	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 800502c:	2b60      	cmp	r3, #96	@ 0x60
 800502e:	d050      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x19e>
 8005030:	2b60      	cmp	r3, #96	@ 0x60
 8005032:	d877      	bhi.n	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8005034:	2b50      	cmp	r3, #80	@ 0x50
 8005036:	d03c      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x17e>
 8005038:	2b50      	cmp	r3, #80	@ 0x50
 800503a:	d873      	bhi.n	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 800503c:	2b40      	cmp	r3, #64	@ 0x40
 800503e:	d058      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x1be>
 8005040:	2b40      	cmp	r3, #64	@ 0x40
 8005042:	d86f      	bhi.n	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8005044:	2b30      	cmp	r3, #48	@ 0x30
 8005046:	d064      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8005048:	2b30      	cmp	r3, #48	@ 0x30
 800504a:	d86b      	bhi.n	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 800504c:	2b20      	cmp	r3, #32
 800504e:	d060      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8005050:	2b20      	cmp	r3, #32
 8005052:	d867      	bhi.n	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
 8005054:	2b00      	cmp	r3, #0
 8005056:	d05c      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 8005058:	2b10      	cmp	r3, #16
 800505a:	d05a      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0x1de>
 800505c:	e062      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800506e:	f000 fdf3 	bl	8005c58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005080:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	609a      	str	r2, [r3, #8]
      break;
 800508a:	e04f      	b.n	800512c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800509c:	f000 fddc 	bl	8005c58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050ae:	609a      	str	r2, [r3, #8]
      break;
 80050b0:	e03c      	b.n	800512c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050be:	461a      	mov	r2, r3
 80050c0:	f000 fd4e 	bl	8005b60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2150      	movs	r1, #80	@ 0x50
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fda7 	bl	8005c1e <TIM_ITRx_SetConfig>
      break;
 80050d0:	e02c      	b.n	800512c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050de:	461a      	mov	r2, r3
 80050e0:	f000 fd6d 	bl	8005bbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2160      	movs	r1, #96	@ 0x60
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fd97 	bl	8005c1e <TIM_ITRx_SetConfig>
      break;
 80050f0:	e01c      	b.n	800512c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fe:	461a      	mov	r2, r3
 8005100:	f000 fd2e 	bl	8005b60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2140      	movs	r1, #64	@ 0x40
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fd87 	bl	8005c1e <TIM_ITRx_SetConfig>
      break;
 8005110:	e00c      	b.n	800512c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4619      	mov	r1, r3
 800511c:	4610      	mov	r0, r2
 800511e:	f000 fd7e 	bl	8005c1e <TIM_ITRx_SetConfig>
      break;
 8005122:	e003      	b.n	800512c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	73fb      	strb	r3, [r7, #15]
      break;
 8005128:	e000      	b.n	800512c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800512a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800513c:	7bfb      	ldrb	r3, [r7, #15]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	00100070 	.word	0x00100070
 800514c:	00100060 	.word	0x00100060
 8005150:	00100050 	.word	0x00100050
 8005154:	00100040 	.word	0x00100040
 8005158:	00100030 	.word	0x00100030
 800515c:	00100020 	.word	0x00100020

08005160 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005174:	2302      	movs	r3, #2
 8005176:	e031      	b.n	80051dc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005188:	6839      	ldr	r1, [r7, #0]
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fc08 	bl	80059a0 <TIM_SlaveTimer_SetConfig>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d009      	beq.n	80051aa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e018      	b.n	80051dc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051b8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051c8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a4c      	ldr	r2, [pc, #304]	@ (8005328 <TIM_Base_SetConfig+0x144>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d017      	beq.n	800522c <TIM_Base_SetConfig+0x48>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005202:	d013      	beq.n	800522c <TIM_Base_SetConfig+0x48>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a49      	ldr	r2, [pc, #292]	@ (800532c <TIM_Base_SetConfig+0x148>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00f      	beq.n	800522c <TIM_Base_SetConfig+0x48>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a48      	ldr	r2, [pc, #288]	@ (8005330 <TIM_Base_SetConfig+0x14c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00b      	beq.n	800522c <TIM_Base_SetConfig+0x48>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a47      	ldr	r2, [pc, #284]	@ (8005334 <TIM_Base_SetConfig+0x150>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d007      	beq.n	800522c <TIM_Base_SetConfig+0x48>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a46      	ldr	r2, [pc, #280]	@ (8005338 <TIM_Base_SetConfig+0x154>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_Base_SetConfig+0x48>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a45      	ldr	r2, [pc, #276]	@ (800533c <TIM_Base_SetConfig+0x158>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d108      	bne.n	800523e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a39      	ldr	r2, [pc, #228]	@ (8005328 <TIM_Base_SetConfig+0x144>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d023      	beq.n	800528e <TIM_Base_SetConfig+0xaa>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800524c:	d01f      	beq.n	800528e <TIM_Base_SetConfig+0xaa>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a36      	ldr	r2, [pc, #216]	@ (800532c <TIM_Base_SetConfig+0x148>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d01b      	beq.n	800528e <TIM_Base_SetConfig+0xaa>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a35      	ldr	r2, [pc, #212]	@ (8005330 <TIM_Base_SetConfig+0x14c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d017      	beq.n	800528e <TIM_Base_SetConfig+0xaa>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a34      	ldr	r2, [pc, #208]	@ (8005334 <TIM_Base_SetConfig+0x150>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d013      	beq.n	800528e <TIM_Base_SetConfig+0xaa>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a33      	ldr	r2, [pc, #204]	@ (8005338 <TIM_Base_SetConfig+0x154>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00f      	beq.n	800528e <TIM_Base_SetConfig+0xaa>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a33      	ldr	r2, [pc, #204]	@ (8005340 <TIM_Base_SetConfig+0x15c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00b      	beq.n	800528e <TIM_Base_SetConfig+0xaa>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a32      	ldr	r2, [pc, #200]	@ (8005344 <TIM_Base_SetConfig+0x160>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d007      	beq.n	800528e <TIM_Base_SetConfig+0xaa>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a31      	ldr	r2, [pc, #196]	@ (8005348 <TIM_Base_SetConfig+0x164>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d003      	beq.n	800528e <TIM_Base_SetConfig+0xaa>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a2c      	ldr	r2, [pc, #176]	@ (800533c <TIM_Base_SetConfig+0x158>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d108      	bne.n	80052a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4313      	orrs	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a18      	ldr	r2, [pc, #96]	@ (8005328 <TIM_Base_SetConfig+0x144>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d013      	beq.n	80052f4 <TIM_Base_SetConfig+0x110>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005338 <TIM_Base_SetConfig+0x154>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00f      	beq.n	80052f4 <TIM_Base_SetConfig+0x110>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005340 <TIM_Base_SetConfig+0x15c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00b      	beq.n	80052f4 <TIM_Base_SetConfig+0x110>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a19      	ldr	r2, [pc, #100]	@ (8005344 <TIM_Base_SetConfig+0x160>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d007      	beq.n	80052f4 <TIM_Base_SetConfig+0x110>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a18      	ldr	r2, [pc, #96]	@ (8005348 <TIM_Base_SetConfig+0x164>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_Base_SetConfig+0x110>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a13      	ldr	r2, [pc, #76]	@ (800533c <TIM_Base_SetConfig+0x158>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d103      	bne.n	80052fc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b01      	cmp	r3, #1
 800530c:	d105      	bne.n	800531a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f023 0201 	bic.w	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	611a      	str	r2, [r3, #16]
  }
}
 800531a:	bf00      	nop
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40012c00 	.word	0x40012c00
 800532c:	40000400 	.word	0x40000400
 8005330:	40000800 	.word	0x40000800
 8005334:	40000c00 	.word	0x40000c00
 8005338:	40013400 	.word	0x40013400
 800533c:	40015000 	.word	0x40015000
 8005340:	40014000 	.word	0x40014000
 8005344:	40014400 	.word	0x40014400
 8005348:	40014800 	.word	0x40014800

0800534c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	f023 0201 	bic.w	r2, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800537a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800537e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0303 	bic.w	r3, r3, #3
 8005386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f023 0302 	bic.w	r3, r3, #2
 8005398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a30      	ldr	r2, [pc, #192]	@ (8005468 <TIM_OC1_SetConfig+0x11c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d013      	beq.n	80053d4 <TIM_OC1_SetConfig+0x88>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a2f      	ldr	r2, [pc, #188]	@ (800546c <TIM_OC1_SetConfig+0x120>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00f      	beq.n	80053d4 <TIM_OC1_SetConfig+0x88>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005470 <TIM_OC1_SetConfig+0x124>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00b      	beq.n	80053d4 <TIM_OC1_SetConfig+0x88>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a2d      	ldr	r2, [pc, #180]	@ (8005474 <TIM_OC1_SetConfig+0x128>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d007      	beq.n	80053d4 <TIM_OC1_SetConfig+0x88>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005478 <TIM_OC1_SetConfig+0x12c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d003      	beq.n	80053d4 <TIM_OC1_SetConfig+0x88>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a2b      	ldr	r2, [pc, #172]	@ (800547c <TIM_OC1_SetConfig+0x130>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d10c      	bne.n	80053ee <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f023 0308 	bic.w	r3, r3, #8
 80053da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f023 0304 	bic.w	r3, r3, #4
 80053ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005468 <TIM_OC1_SetConfig+0x11c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d013      	beq.n	800541e <TIM_OC1_SetConfig+0xd2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a1c      	ldr	r2, [pc, #112]	@ (800546c <TIM_OC1_SetConfig+0x120>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00f      	beq.n	800541e <TIM_OC1_SetConfig+0xd2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a1b      	ldr	r2, [pc, #108]	@ (8005470 <TIM_OC1_SetConfig+0x124>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00b      	beq.n	800541e <TIM_OC1_SetConfig+0xd2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a1a      	ldr	r2, [pc, #104]	@ (8005474 <TIM_OC1_SetConfig+0x128>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d007      	beq.n	800541e <TIM_OC1_SetConfig+0xd2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a19      	ldr	r2, [pc, #100]	@ (8005478 <TIM_OC1_SetConfig+0x12c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_OC1_SetConfig+0xd2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a18      	ldr	r2, [pc, #96]	@ (800547c <TIM_OC1_SetConfig+0x130>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d111      	bne.n	8005442 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800542c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	621a      	str	r2, [r3, #32]
}
 800545c:	bf00      	nop
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	40012c00 	.word	0x40012c00
 800546c:	40013400 	.word	0x40013400
 8005470:	40014000 	.word	0x40014000
 8005474:	40014400 	.word	0x40014400
 8005478:	40014800 	.word	0x40014800
 800547c:	40015000 	.word	0x40015000

08005480 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	f023 0210 	bic.w	r2, r3, #16
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	021b      	lsls	r3, r3, #8
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f023 0320 	bic.w	r3, r3, #32
 80054ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4313      	orrs	r3, r2
 80054da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a2c      	ldr	r2, [pc, #176]	@ (8005590 <TIM_OC2_SetConfig+0x110>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d007      	beq.n	80054f4 <TIM_OC2_SetConfig+0x74>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a2b      	ldr	r2, [pc, #172]	@ (8005594 <TIM_OC2_SetConfig+0x114>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_OC2_SetConfig+0x74>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005598 <TIM_OC2_SetConfig+0x118>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d10d      	bne.n	8005510 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800550e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a1f      	ldr	r2, [pc, #124]	@ (8005590 <TIM_OC2_SetConfig+0x110>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d013      	beq.n	8005540 <TIM_OC2_SetConfig+0xc0>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a1e      	ldr	r2, [pc, #120]	@ (8005594 <TIM_OC2_SetConfig+0x114>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00f      	beq.n	8005540 <TIM_OC2_SetConfig+0xc0>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a1e      	ldr	r2, [pc, #120]	@ (800559c <TIM_OC2_SetConfig+0x11c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00b      	beq.n	8005540 <TIM_OC2_SetConfig+0xc0>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a1d      	ldr	r2, [pc, #116]	@ (80055a0 <TIM_OC2_SetConfig+0x120>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d007      	beq.n	8005540 <TIM_OC2_SetConfig+0xc0>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a1c      	ldr	r2, [pc, #112]	@ (80055a4 <TIM_OC2_SetConfig+0x124>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_OC2_SetConfig+0xc0>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a17      	ldr	r2, [pc, #92]	@ (8005598 <TIM_OC2_SetConfig+0x118>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d113      	bne.n	8005568 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005546:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800554e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4313      	orrs	r3, r2
 800555a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	621a      	str	r2, [r3, #32]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40012c00 	.word	0x40012c00
 8005594:	40013400 	.word	0x40013400
 8005598:	40015000 	.word	0x40015000
 800559c:	40014000 	.word	0x40014000
 80055a0:	40014400 	.word	0x40014400
 80055a4:	40014800 	.word	0x40014800

080055a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0303 	bic.w	r3, r3, #3
 80055e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a2b      	ldr	r2, [pc, #172]	@ (80056b4 <TIM_OC3_SetConfig+0x10c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d007      	beq.n	800561a <TIM_OC3_SetConfig+0x72>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a2a      	ldr	r2, [pc, #168]	@ (80056b8 <TIM_OC3_SetConfig+0x110>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d003      	beq.n	800561a <TIM_OC3_SetConfig+0x72>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a29      	ldr	r2, [pc, #164]	@ (80056bc <TIM_OC3_SetConfig+0x114>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d10d      	bne.n	8005636 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	021b      	lsls	r3, r3, #8
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	4313      	orrs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a1e      	ldr	r2, [pc, #120]	@ (80056b4 <TIM_OC3_SetConfig+0x10c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d013      	beq.n	8005666 <TIM_OC3_SetConfig+0xbe>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a1d      	ldr	r2, [pc, #116]	@ (80056b8 <TIM_OC3_SetConfig+0x110>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00f      	beq.n	8005666 <TIM_OC3_SetConfig+0xbe>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a1d      	ldr	r2, [pc, #116]	@ (80056c0 <TIM_OC3_SetConfig+0x118>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00b      	beq.n	8005666 <TIM_OC3_SetConfig+0xbe>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a1c      	ldr	r2, [pc, #112]	@ (80056c4 <TIM_OC3_SetConfig+0x11c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d007      	beq.n	8005666 <TIM_OC3_SetConfig+0xbe>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a1b      	ldr	r2, [pc, #108]	@ (80056c8 <TIM_OC3_SetConfig+0x120>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d003      	beq.n	8005666 <TIM_OC3_SetConfig+0xbe>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a16      	ldr	r2, [pc, #88]	@ (80056bc <TIM_OC3_SetConfig+0x114>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d113      	bne.n	800568e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800566c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	621a      	str	r2, [r3, #32]
}
 80056a8:	bf00      	nop
 80056aa:	371c      	adds	r7, #28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	40012c00 	.word	0x40012c00
 80056b8:	40013400 	.word	0x40013400
 80056bc:	40015000 	.word	0x40015000
 80056c0:	40014000 	.word	0x40014000
 80056c4:	40014400 	.word	0x40014400
 80056c8:	40014800 	.word	0x40014800

080056cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	021b      	lsls	r3, r3, #8
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	4313      	orrs	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800571a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	031b      	lsls	r3, r3, #12
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a2c      	ldr	r2, [pc, #176]	@ (80057dc <TIM_OC4_SetConfig+0x110>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d007      	beq.n	8005740 <TIM_OC4_SetConfig+0x74>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a2b      	ldr	r2, [pc, #172]	@ (80057e0 <TIM_OC4_SetConfig+0x114>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_OC4_SetConfig+0x74>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a2a      	ldr	r2, [pc, #168]	@ (80057e4 <TIM_OC4_SetConfig+0x118>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d10d      	bne.n	800575c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	031b      	lsls	r3, r3, #12
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800575a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a1f      	ldr	r2, [pc, #124]	@ (80057dc <TIM_OC4_SetConfig+0x110>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d013      	beq.n	800578c <TIM_OC4_SetConfig+0xc0>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a1e      	ldr	r2, [pc, #120]	@ (80057e0 <TIM_OC4_SetConfig+0x114>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00f      	beq.n	800578c <TIM_OC4_SetConfig+0xc0>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a1e      	ldr	r2, [pc, #120]	@ (80057e8 <TIM_OC4_SetConfig+0x11c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00b      	beq.n	800578c <TIM_OC4_SetConfig+0xc0>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a1d      	ldr	r2, [pc, #116]	@ (80057ec <TIM_OC4_SetConfig+0x120>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d007      	beq.n	800578c <TIM_OC4_SetConfig+0xc0>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a1c      	ldr	r2, [pc, #112]	@ (80057f0 <TIM_OC4_SetConfig+0x124>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d003      	beq.n	800578c <TIM_OC4_SetConfig+0xc0>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a17      	ldr	r2, [pc, #92]	@ (80057e4 <TIM_OC4_SetConfig+0x118>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d113      	bne.n	80057b4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005792:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800579a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	019b      	lsls	r3, r3, #6
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	019b      	lsls	r3, r3, #6
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	621a      	str	r2, [r3, #32]
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	40012c00 	.word	0x40012c00
 80057e0:	40013400 	.word	0x40013400
 80057e4:	40015000 	.word	0x40015000
 80057e8:	40014000 	.word	0x40014000
 80057ec:	40014400 	.word	0x40014400
 80057f0:	40014800 	.word	0x40014800

080057f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005838:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	041b      	lsls	r3, r3, #16
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a19      	ldr	r2, [pc, #100]	@ (80058b0 <TIM_OC5_SetConfig+0xbc>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d013      	beq.n	8005876 <TIM_OC5_SetConfig+0x82>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a18      	ldr	r2, [pc, #96]	@ (80058b4 <TIM_OC5_SetConfig+0xc0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00f      	beq.n	8005876 <TIM_OC5_SetConfig+0x82>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a17      	ldr	r2, [pc, #92]	@ (80058b8 <TIM_OC5_SetConfig+0xc4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00b      	beq.n	8005876 <TIM_OC5_SetConfig+0x82>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a16      	ldr	r2, [pc, #88]	@ (80058bc <TIM_OC5_SetConfig+0xc8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d007      	beq.n	8005876 <TIM_OC5_SetConfig+0x82>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a15      	ldr	r2, [pc, #84]	@ (80058c0 <TIM_OC5_SetConfig+0xcc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d003      	beq.n	8005876 <TIM_OC5_SetConfig+0x82>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a14      	ldr	r2, [pc, #80]	@ (80058c4 <TIM_OC5_SetConfig+0xd0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d109      	bne.n	800588a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800587c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	021b      	lsls	r3, r3, #8
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	621a      	str	r2, [r3, #32]
}
 80058a4:	bf00      	nop
 80058a6:	371c      	adds	r7, #28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	40012c00 	.word	0x40012c00
 80058b4:	40013400 	.word	0x40013400
 80058b8:	40014000 	.word	0x40014000
 80058bc:	40014400 	.word	0x40014400
 80058c0:	40014800 	.word	0x40014800
 80058c4:	40015000 	.word	0x40015000

080058c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	021b      	lsls	r3, r3, #8
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800590e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	051b      	lsls	r3, r3, #20
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	4313      	orrs	r3, r2
 800591a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a1a      	ldr	r2, [pc, #104]	@ (8005988 <TIM_OC6_SetConfig+0xc0>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d013      	beq.n	800594c <TIM_OC6_SetConfig+0x84>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a19      	ldr	r2, [pc, #100]	@ (800598c <TIM_OC6_SetConfig+0xc4>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00f      	beq.n	800594c <TIM_OC6_SetConfig+0x84>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a18      	ldr	r2, [pc, #96]	@ (8005990 <TIM_OC6_SetConfig+0xc8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00b      	beq.n	800594c <TIM_OC6_SetConfig+0x84>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a17      	ldr	r2, [pc, #92]	@ (8005994 <TIM_OC6_SetConfig+0xcc>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d007      	beq.n	800594c <TIM_OC6_SetConfig+0x84>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a16      	ldr	r2, [pc, #88]	@ (8005998 <TIM_OC6_SetConfig+0xd0>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d003      	beq.n	800594c <TIM_OC6_SetConfig+0x84>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a15      	ldr	r2, [pc, #84]	@ (800599c <TIM_OC6_SetConfig+0xd4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d109      	bne.n	8005960 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005952:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	029b      	lsls	r3, r3, #10
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40012c00 	.word	0x40012c00
 800598c:	40013400 	.word	0x40013400
 8005990:	40014000 	.word	0x40014000
 8005994:	40014400 	.word	0x40014400
 8005998:	40014800 	.word	0x40014800
 800599c:	40015000 	.word	0x40015000

080059a0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80059bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059d2:	f023 0307 	bic.w	r3, r3, #7
 80059d6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4a56      	ldr	r2, [pc, #344]	@ (8005b48 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	f000 80a2 	beq.w	8005b3a <TIM_SlaveTimer_SetConfig+0x19a>
 80059f6:	4a54      	ldr	r2, [pc, #336]	@ (8005b48 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	f200 809b 	bhi.w	8005b34 <TIM_SlaveTimer_SetConfig+0x194>
 80059fe:	4a53      	ldr	r2, [pc, #332]	@ (8005b4c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	f000 809a 	beq.w	8005b3a <TIM_SlaveTimer_SetConfig+0x19a>
 8005a06:	4a51      	ldr	r2, [pc, #324]	@ (8005b4c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	f200 8093 	bhi.w	8005b34 <TIM_SlaveTimer_SetConfig+0x194>
 8005a0e:	4a50      	ldr	r2, [pc, #320]	@ (8005b50 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	f000 8092 	beq.w	8005b3a <TIM_SlaveTimer_SetConfig+0x19a>
 8005a16:	4a4e      	ldr	r2, [pc, #312]	@ (8005b50 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	f200 808b 	bhi.w	8005b34 <TIM_SlaveTimer_SetConfig+0x194>
 8005a1e:	4a4d      	ldr	r2, [pc, #308]	@ (8005b54 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	f000 808a 	beq.w	8005b3a <TIM_SlaveTimer_SetConfig+0x19a>
 8005a26:	4a4b      	ldr	r2, [pc, #300]	@ (8005b54 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	f200 8083 	bhi.w	8005b34 <TIM_SlaveTimer_SetConfig+0x194>
 8005a2e:	4a4a      	ldr	r2, [pc, #296]	@ (8005b58 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	f000 8082 	beq.w	8005b3a <TIM_SlaveTimer_SetConfig+0x19a>
 8005a36:	4a48      	ldr	r2, [pc, #288]	@ (8005b58 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d87b      	bhi.n	8005b34 <TIM_SlaveTimer_SetConfig+0x194>
 8005a3c:	4a47      	ldr	r2, [pc, #284]	@ (8005b5c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d07b      	beq.n	8005b3a <TIM_SlaveTimer_SetConfig+0x19a>
 8005a42:	4a46      	ldr	r2, [pc, #280]	@ (8005b5c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d875      	bhi.n	8005b34 <TIM_SlaveTimer_SetConfig+0x194>
 8005a48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a4c:	d075      	beq.n	8005b3a <TIM_SlaveTimer_SetConfig+0x19a>
 8005a4e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a52:	d86f      	bhi.n	8005b34 <TIM_SlaveTimer_SetConfig+0x194>
 8005a54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a58:	d06f      	beq.n	8005b3a <TIM_SlaveTimer_SetConfig+0x19a>
 8005a5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a5e:	d869      	bhi.n	8005b34 <TIM_SlaveTimer_SetConfig+0x194>
 8005a60:	2b70      	cmp	r3, #112	@ 0x70
 8005a62:	d01a      	beq.n	8005a9a <TIM_SlaveTimer_SetConfig+0xfa>
 8005a64:	2b70      	cmp	r3, #112	@ 0x70
 8005a66:	d865      	bhi.n	8005b34 <TIM_SlaveTimer_SetConfig+0x194>
 8005a68:	2b60      	cmp	r3, #96	@ 0x60
 8005a6a:	d059      	beq.n	8005b20 <TIM_SlaveTimer_SetConfig+0x180>
 8005a6c:	2b60      	cmp	r3, #96	@ 0x60
 8005a6e:	d861      	bhi.n	8005b34 <TIM_SlaveTimer_SetConfig+0x194>
 8005a70:	2b50      	cmp	r3, #80	@ 0x50
 8005a72:	d04b      	beq.n	8005b0c <TIM_SlaveTimer_SetConfig+0x16c>
 8005a74:	2b50      	cmp	r3, #80	@ 0x50
 8005a76:	d85d      	bhi.n	8005b34 <TIM_SlaveTimer_SetConfig+0x194>
 8005a78:	2b40      	cmp	r3, #64	@ 0x40
 8005a7a:	d019      	beq.n	8005ab0 <TIM_SlaveTimer_SetConfig+0x110>
 8005a7c:	2b40      	cmp	r3, #64	@ 0x40
 8005a7e:	d859      	bhi.n	8005b34 <TIM_SlaveTimer_SetConfig+0x194>
 8005a80:	2b30      	cmp	r3, #48	@ 0x30
 8005a82:	d05a      	beq.n	8005b3a <TIM_SlaveTimer_SetConfig+0x19a>
 8005a84:	2b30      	cmp	r3, #48	@ 0x30
 8005a86:	d855      	bhi.n	8005b34 <TIM_SlaveTimer_SetConfig+0x194>
 8005a88:	2b20      	cmp	r3, #32
 8005a8a:	d056      	beq.n	8005b3a <TIM_SlaveTimer_SetConfig+0x19a>
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	d851      	bhi.n	8005b34 <TIM_SlaveTimer_SetConfig+0x194>
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d052      	beq.n	8005b3a <TIM_SlaveTimer_SetConfig+0x19a>
 8005a94:	2b10      	cmp	r3, #16
 8005a96:	d050      	beq.n	8005b3a <TIM_SlaveTimer_SetConfig+0x19a>
 8005a98:	e04c      	b.n	8005b34 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005aaa:	f000 f8d5 	bl	8005c58 <TIM_ETR_SetConfig>
      break;
 8005aae:	e045      	b.n	8005b3c <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b05      	cmp	r3, #5
 8005ab6:	d004      	beq.n	8005ac2 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005abc:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8005ac0:	d101      	bne.n	8005ac6 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e03b      	b.n	8005b3e <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6a1a      	ldr	r2, [r3, #32]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0201 	bic.w	r2, r2, #1
 8005adc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005aec:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	621a      	str	r2, [r3, #32]
      break;
 8005b0a:	e017      	b.n	8005b3c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b18:	461a      	mov	r2, r3
 8005b1a:	f000 f821 	bl	8005b60 <TIM_TI1_ConfigInputStage>
      break;
 8005b1e:	e00d      	b.n	8005b3c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	f000 f846 	bl	8005bbe <TIM_TI2_ConfigInputStage>
      break;
 8005b32:	e003      	b.n	8005b3c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	75fb      	strb	r3, [r7, #23]
      break;
 8005b38:	e000      	b.n	8005b3c <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8005b3a:	bf00      	nop
  }

  return status;
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	00100070 	.word	0x00100070
 8005b4c:	00100060 	.word	0x00100060
 8005b50:	00100050 	.word	0x00100050
 8005b54:	00100040 	.word	0x00100040
 8005b58:	00100030 	.word	0x00100030
 8005b5c:	00100020 	.word	0x00100020

08005b60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	f023 0201 	bic.w	r2, r3, #1
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f023 030a 	bic.w	r3, r3, #10
 8005b9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	621a      	str	r2, [r3, #32]
}
 8005bb2:	bf00      	nop
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b087      	sub	sp, #28
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	f023 0210 	bic.w	r2, r3, #16
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005be8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	031b      	lsls	r3, r3, #12
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	621a      	str	r2, [r3, #32]
}
 8005c12:	bf00      	nop
 8005c14:	371c      	adds	r7, #28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005c34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	f043 0307 	orr.w	r3, r3, #7
 8005c44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	609a      	str	r2, [r3, #8]
}
 8005c4c:	bf00      	nop
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	021a      	lsls	r2, r3, #8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	609a      	str	r2, [r3, #8]
}
 8005c8c:	bf00      	nop
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f003 031f 	and.w	r3, r3, #31
 8005caa:	2201      	movs	r2, #1
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1a      	ldr	r2, [r3, #32]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	401a      	ands	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a1a      	ldr	r2, [r3, #32]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
	...

08005ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e074      	b.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a34      	ldr	r2, [pc, #208]	@ (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d009      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a33      	ldr	r2, [pc, #204]	@ (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d004      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a31      	ldr	r2, [pc, #196]	@ (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d108      	bne.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a21      	ldr	r2, [pc, #132]	@ (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d022      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d7c:	d01d      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a1f      	ldr	r2, [pc, #124]	@ (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d018      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1c      	ldr	r2, [pc, #112]	@ (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00e      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a15      	ldr	r2, [pc, #84]	@ (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d009      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a18      	ldr	r2, [pc, #96]	@ (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d004      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a11      	ldr	r2, [pc, #68]	@ (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d10c      	bne.n	8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40013400 	.word	0x40013400
 8005dfc:	40015000 	.word	0x40015000
 8005e00:	40000400 	.word	0x40000400
 8005e04:	40000800 	.word	0x40000800
 8005e08:	40000c00 	.word	0x40000c00
 8005e0c:	40014000 	.word	0x40014000

08005e10 <srand>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	4b10      	ldr	r3, [pc, #64]	@ (8005e54 <srand+0x44>)
 8005e14:	681d      	ldr	r5, [r3, #0]
 8005e16:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005e18:	4604      	mov	r4, r0
 8005e1a:	b9b3      	cbnz	r3, 8005e4a <srand+0x3a>
 8005e1c:	2018      	movs	r0, #24
 8005e1e:	f000 fa4d 	bl	80062bc <malloc>
 8005e22:	4602      	mov	r2, r0
 8005e24:	6328      	str	r0, [r5, #48]	@ 0x30
 8005e26:	b920      	cbnz	r0, 8005e32 <srand+0x22>
 8005e28:	4b0b      	ldr	r3, [pc, #44]	@ (8005e58 <srand+0x48>)
 8005e2a:	480c      	ldr	r0, [pc, #48]	@ (8005e5c <srand+0x4c>)
 8005e2c:	2146      	movs	r1, #70	@ 0x46
 8005e2e:	f000 f9dd 	bl	80061ec <__assert_func>
 8005e32:	490b      	ldr	r1, [pc, #44]	@ (8005e60 <srand+0x50>)
 8005e34:	4b0b      	ldr	r3, [pc, #44]	@ (8005e64 <srand+0x54>)
 8005e36:	e9c0 1300 	strd	r1, r3, [r0]
 8005e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e68 <srand+0x58>)
 8005e3c:	6083      	str	r3, [r0, #8]
 8005e3e:	230b      	movs	r3, #11
 8005e40:	8183      	strh	r3, [r0, #12]
 8005e42:	2100      	movs	r1, #0
 8005e44:	2001      	movs	r0, #1
 8005e46:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005e4a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	611c      	str	r4, [r3, #16]
 8005e50:	615a      	str	r2, [r3, #20]
 8005e52:	bd38      	pop	{r3, r4, r5, pc}
 8005e54:	2000277c 	.word	0x2000277c
 8005e58:	08007368 	.word	0x08007368
 8005e5c:	0800737f 	.word	0x0800737f
 8005e60:	abcd330e 	.word	0xabcd330e
 8005e64:	e66d1234 	.word	0xe66d1234
 8005e68:	0005deec 	.word	0x0005deec

08005e6c <rand>:
 8005e6c:	4b16      	ldr	r3, [pc, #88]	@ (8005ec8 <rand+0x5c>)
 8005e6e:	b510      	push	{r4, lr}
 8005e70:	681c      	ldr	r4, [r3, #0]
 8005e72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005e74:	b9b3      	cbnz	r3, 8005ea4 <rand+0x38>
 8005e76:	2018      	movs	r0, #24
 8005e78:	f000 fa20 	bl	80062bc <malloc>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	6320      	str	r0, [r4, #48]	@ 0x30
 8005e80:	b920      	cbnz	r0, 8005e8c <rand+0x20>
 8005e82:	4b12      	ldr	r3, [pc, #72]	@ (8005ecc <rand+0x60>)
 8005e84:	4812      	ldr	r0, [pc, #72]	@ (8005ed0 <rand+0x64>)
 8005e86:	2152      	movs	r1, #82	@ 0x52
 8005e88:	f000 f9b0 	bl	80061ec <__assert_func>
 8005e8c:	4911      	ldr	r1, [pc, #68]	@ (8005ed4 <rand+0x68>)
 8005e8e:	4b12      	ldr	r3, [pc, #72]	@ (8005ed8 <rand+0x6c>)
 8005e90:	e9c0 1300 	strd	r1, r3, [r0]
 8005e94:	4b11      	ldr	r3, [pc, #68]	@ (8005edc <rand+0x70>)
 8005e96:	6083      	str	r3, [r0, #8]
 8005e98:	230b      	movs	r3, #11
 8005e9a:	8183      	strh	r3, [r0, #12]
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	2001      	movs	r0, #1
 8005ea0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005ea4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005ea6:	480e      	ldr	r0, [pc, #56]	@ (8005ee0 <rand+0x74>)
 8005ea8:	690b      	ldr	r3, [r1, #16]
 8005eaa:	694c      	ldr	r4, [r1, #20]
 8005eac:	4a0d      	ldr	r2, [pc, #52]	@ (8005ee4 <rand+0x78>)
 8005eae:	4358      	muls	r0, r3
 8005eb0:	fb02 0004 	mla	r0, r2, r4, r0
 8005eb4:	fba3 3202 	umull	r3, r2, r3, r2
 8005eb8:	3301      	adds	r3, #1
 8005eba:	eb40 0002 	adc.w	r0, r0, r2
 8005ebe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005ec2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005ec6:	bd10      	pop	{r4, pc}
 8005ec8:	2000277c 	.word	0x2000277c
 8005ecc:	08007368 	.word	0x08007368
 8005ed0:	0800737f 	.word	0x0800737f
 8005ed4:	abcd330e 	.word	0xabcd330e
 8005ed8:	e66d1234 	.word	0xe66d1234
 8005edc:	0005deec 	.word	0x0005deec
 8005ee0:	5851f42d 	.word	0x5851f42d
 8005ee4:	4c957f2d 	.word	0x4c957f2d

08005ee8 <std>:
 8005ee8:	2300      	movs	r3, #0
 8005eea:	b510      	push	{r4, lr}
 8005eec:	4604      	mov	r4, r0
 8005eee:	e9c0 3300 	strd	r3, r3, [r0]
 8005ef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ef6:	6083      	str	r3, [r0, #8]
 8005ef8:	8181      	strh	r1, [r0, #12]
 8005efa:	6643      	str	r3, [r0, #100]	@ 0x64
 8005efc:	81c2      	strh	r2, [r0, #14]
 8005efe:	6183      	str	r3, [r0, #24]
 8005f00:	4619      	mov	r1, r3
 8005f02:	2208      	movs	r2, #8
 8005f04:	305c      	adds	r0, #92	@ 0x5c
 8005f06:	f000 f8f4 	bl	80060f2 <memset>
 8005f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f40 <std+0x58>)
 8005f0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f44 <std+0x5c>)
 8005f10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f12:	4b0d      	ldr	r3, [pc, #52]	@ (8005f48 <std+0x60>)
 8005f14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f16:	4b0d      	ldr	r3, [pc, #52]	@ (8005f4c <std+0x64>)
 8005f18:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f50 <std+0x68>)
 8005f1c:	6224      	str	r4, [r4, #32]
 8005f1e:	429c      	cmp	r4, r3
 8005f20:	d006      	beq.n	8005f30 <std+0x48>
 8005f22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f26:	4294      	cmp	r4, r2
 8005f28:	d002      	beq.n	8005f30 <std+0x48>
 8005f2a:	33d0      	adds	r3, #208	@ 0xd0
 8005f2c:	429c      	cmp	r4, r3
 8005f2e:	d105      	bne.n	8005f3c <std+0x54>
 8005f30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f38:	f000 b954 	b.w	80061e4 <__retarget_lock_init_recursive>
 8005f3c:	bd10      	pop	{r4, pc}
 8005f3e:	bf00      	nop
 8005f40:	0800606d 	.word	0x0800606d
 8005f44:	0800608f 	.word	0x0800608f
 8005f48:	080060c7 	.word	0x080060c7
 8005f4c:	080060eb 	.word	0x080060eb
 8005f50:	20002a94 	.word	0x20002a94

08005f54 <stdio_exit_handler>:
 8005f54:	4a02      	ldr	r2, [pc, #8]	@ (8005f60 <stdio_exit_handler+0xc>)
 8005f56:	4903      	ldr	r1, [pc, #12]	@ (8005f64 <stdio_exit_handler+0x10>)
 8005f58:	4803      	ldr	r0, [pc, #12]	@ (8005f68 <stdio_exit_handler+0x14>)
 8005f5a:	f000 b869 	b.w	8006030 <_fwalk_sglue>
 8005f5e:	bf00      	nop
 8005f60:	20002770 	.word	0x20002770
 8005f64:	08006531 	.word	0x08006531
 8005f68:	20002780 	.word	0x20002780

08005f6c <cleanup_stdio>:
 8005f6c:	6841      	ldr	r1, [r0, #4]
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa0 <cleanup_stdio+0x34>)
 8005f70:	4299      	cmp	r1, r3
 8005f72:	b510      	push	{r4, lr}
 8005f74:	4604      	mov	r4, r0
 8005f76:	d001      	beq.n	8005f7c <cleanup_stdio+0x10>
 8005f78:	f000 fada 	bl	8006530 <_fflush_r>
 8005f7c:	68a1      	ldr	r1, [r4, #8]
 8005f7e:	4b09      	ldr	r3, [pc, #36]	@ (8005fa4 <cleanup_stdio+0x38>)
 8005f80:	4299      	cmp	r1, r3
 8005f82:	d002      	beq.n	8005f8a <cleanup_stdio+0x1e>
 8005f84:	4620      	mov	r0, r4
 8005f86:	f000 fad3 	bl	8006530 <_fflush_r>
 8005f8a:	68e1      	ldr	r1, [r4, #12]
 8005f8c:	4b06      	ldr	r3, [pc, #24]	@ (8005fa8 <cleanup_stdio+0x3c>)
 8005f8e:	4299      	cmp	r1, r3
 8005f90:	d004      	beq.n	8005f9c <cleanup_stdio+0x30>
 8005f92:	4620      	mov	r0, r4
 8005f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f98:	f000 baca 	b.w	8006530 <_fflush_r>
 8005f9c:	bd10      	pop	{r4, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20002a94 	.word	0x20002a94
 8005fa4:	20002afc 	.word	0x20002afc
 8005fa8:	20002b64 	.word	0x20002b64

08005fac <global_stdio_init.part.0>:
 8005fac:	b510      	push	{r4, lr}
 8005fae:	4b0b      	ldr	r3, [pc, #44]	@ (8005fdc <global_stdio_init.part.0+0x30>)
 8005fb0:	4c0b      	ldr	r4, [pc, #44]	@ (8005fe0 <global_stdio_init.part.0+0x34>)
 8005fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8005fe4 <global_stdio_init.part.0+0x38>)
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2104      	movs	r1, #4
 8005fbc:	f7ff ff94 	bl	8005ee8 <std>
 8005fc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	2109      	movs	r1, #9
 8005fc8:	f7ff ff8e 	bl	8005ee8 <std>
 8005fcc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fd6:	2112      	movs	r1, #18
 8005fd8:	f7ff bf86 	b.w	8005ee8 <std>
 8005fdc:	20002bcc 	.word	0x20002bcc
 8005fe0:	20002a94 	.word	0x20002a94
 8005fe4:	08005f55 	.word	0x08005f55

08005fe8 <__sfp_lock_acquire>:
 8005fe8:	4801      	ldr	r0, [pc, #4]	@ (8005ff0 <__sfp_lock_acquire+0x8>)
 8005fea:	f000 b8fc 	b.w	80061e6 <__retarget_lock_acquire_recursive>
 8005fee:	bf00      	nop
 8005ff0:	20002bd5 	.word	0x20002bd5

08005ff4 <__sfp_lock_release>:
 8005ff4:	4801      	ldr	r0, [pc, #4]	@ (8005ffc <__sfp_lock_release+0x8>)
 8005ff6:	f000 b8f7 	b.w	80061e8 <__retarget_lock_release_recursive>
 8005ffa:	bf00      	nop
 8005ffc:	20002bd5 	.word	0x20002bd5

08006000 <__sinit>:
 8006000:	b510      	push	{r4, lr}
 8006002:	4604      	mov	r4, r0
 8006004:	f7ff fff0 	bl	8005fe8 <__sfp_lock_acquire>
 8006008:	6a23      	ldr	r3, [r4, #32]
 800600a:	b11b      	cbz	r3, 8006014 <__sinit+0x14>
 800600c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006010:	f7ff bff0 	b.w	8005ff4 <__sfp_lock_release>
 8006014:	4b04      	ldr	r3, [pc, #16]	@ (8006028 <__sinit+0x28>)
 8006016:	6223      	str	r3, [r4, #32]
 8006018:	4b04      	ldr	r3, [pc, #16]	@ (800602c <__sinit+0x2c>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1f5      	bne.n	800600c <__sinit+0xc>
 8006020:	f7ff ffc4 	bl	8005fac <global_stdio_init.part.0>
 8006024:	e7f2      	b.n	800600c <__sinit+0xc>
 8006026:	bf00      	nop
 8006028:	08005f6d 	.word	0x08005f6d
 800602c:	20002bcc 	.word	0x20002bcc

08006030 <_fwalk_sglue>:
 8006030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006034:	4607      	mov	r7, r0
 8006036:	4688      	mov	r8, r1
 8006038:	4614      	mov	r4, r2
 800603a:	2600      	movs	r6, #0
 800603c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006040:	f1b9 0901 	subs.w	r9, r9, #1
 8006044:	d505      	bpl.n	8006052 <_fwalk_sglue+0x22>
 8006046:	6824      	ldr	r4, [r4, #0]
 8006048:	2c00      	cmp	r4, #0
 800604a:	d1f7      	bne.n	800603c <_fwalk_sglue+0xc>
 800604c:	4630      	mov	r0, r6
 800604e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006052:	89ab      	ldrh	r3, [r5, #12]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d907      	bls.n	8006068 <_fwalk_sglue+0x38>
 8006058:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800605c:	3301      	adds	r3, #1
 800605e:	d003      	beq.n	8006068 <_fwalk_sglue+0x38>
 8006060:	4629      	mov	r1, r5
 8006062:	4638      	mov	r0, r7
 8006064:	47c0      	blx	r8
 8006066:	4306      	orrs	r6, r0
 8006068:	3568      	adds	r5, #104	@ 0x68
 800606a:	e7e9      	b.n	8006040 <_fwalk_sglue+0x10>

0800606c <__sread>:
 800606c:	b510      	push	{r4, lr}
 800606e:	460c      	mov	r4, r1
 8006070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006074:	f000 f868 	bl	8006148 <_read_r>
 8006078:	2800      	cmp	r0, #0
 800607a:	bfab      	itete	ge
 800607c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800607e:	89a3      	ldrhlt	r3, [r4, #12]
 8006080:	181b      	addge	r3, r3, r0
 8006082:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006086:	bfac      	ite	ge
 8006088:	6563      	strge	r3, [r4, #84]	@ 0x54
 800608a:	81a3      	strhlt	r3, [r4, #12]
 800608c:	bd10      	pop	{r4, pc}

0800608e <__swrite>:
 800608e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006092:	461f      	mov	r7, r3
 8006094:	898b      	ldrh	r3, [r1, #12]
 8006096:	05db      	lsls	r3, r3, #23
 8006098:	4605      	mov	r5, r0
 800609a:	460c      	mov	r4, r1
 800609c:	4616      	mov	r6, r2
 800609e:	d505      	bpl.n	80060ac <__swrite+0x1e>
 80060a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a4:	2302      	movs	r3, #2
 80060a6:	2200      	movs	r2, #0
 80060a8:	f000 f83c 	bl	8006124 <_lseek_r>
 80060ac:	89a3      	ldrh	r3, [r4, #12]
 80060ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060b6:	81a3      	strh	r3, [r4, #12]
 80060b8:	4632      	mov	r2, r6
 80060ba:	463b      	mov	r3, r7
 80060bc:	4628      	mov	r0, r5
 80060be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060c2:	f000 b853 	b.w	800616c <_write_r>

080060c6 <__sseek>:
 80060c6:	b510      	push	{r4, lr}
 80060c8:	460c      	mov	r4, r1
 80060ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ce:	f000 f829 	bl	8006124 <_lseek_r>
 80060d2:	1c43      	adds	r3, r0, #1
 80060d4:	89a3      	ldrh	r3, [r4, #12]
 80060d6:	bf15      	itete	ne
 80060d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80060da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80060de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80060e2:	81a3      	strheq	r3, [r4, #12]
 80060e4:	bf18      	it	ne
 80060e6:	81a3      	strhne	r3, [r4, #12]
 80060e8:	bd10      	pop	{r4, pc}

080060ea <__sclose>:
 80060ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ee:	f000 b809 	b.w	8006104 <_close_r>

080060f2 <memset>:
 80060f2:	4402      	add	r2, r0
 80060f4:	4603      	mov	r3, r0
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d100      	bne.n	80060fc <memset+0xa>
 80060fa:	4770      	bx	lr
 80060fc:	f803 1b01 	strb.w	r1, [r3], #1
 8006100:	e7f9      	b.n	80060f6 <memset+0x4>
	...

08006104 <_close_r>:
 8006104:	b538      	push	{r3, r4, r5, lr}
 8006106:	4d06      	ldr	r5, [pc, #24]	@ (8006120 <_close_r+0x1c>)
 8006108:	2300      	movs	r3, #0
 800610a:	4604      	mov	r4, r0
 800610c:	4608      	mov	r0, r1
 800610e:	602b      	str	r3, [r5, #0]
 8006110:	f7fb fc46 	bl	80019a0 <_close>
 8006114:	1c43      	adds	r3, r0, #1
 8006116:	d102      	bne.n	800611e <_close_r+0x1a>
 8006118:	682b      	ldr	r3, [r5, #0]
 800611a:	b103      	cbz	r3, 800611e <_close_r+0x1a>
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	bd38      	pop	{r3, r4, r5, pc}
 8006120:	20002bd0 	.word	0x20002bd0

08006124 <_lseek_r>:
 8006124:	b538      	push	{r3, r4, r5, lr}
 8006126:	4d07      	ldr	r5, [pc, #28]	@ (8006144 <_lseek_r+0x20>)
 8006128:	4604      	mov	r4, r0
 800612a:	4608      	mov	r0, r1
 800612c:	4611      	mov	r1, r2
 800612e:	2200      	movs	r2, #0
 8006130:	602a      	str	r2, [r5, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	f7fb fc5b 	bl	80019ee <_lseek>
 8006138:	1c43      	adds	r3, r0, #1
 800613a:	d102      	bne.n	8006142 <_lseek_r+0x1e>
 800613c:	682b      	ldr	r3, [r5, #0]
 800613e:	b103      	cbz	r3, 8006142 <_lseek_r+0x1e>
 8006140:	6023      	str	r3, [r4, #0]
 8006142:	bd38      	pop	{r3, r4, r5, pc}
 8006144:	20002bd0 	.word	0x20002bd0

08006148 <_read_r>:
 8006148:	b538      	push	{r3, r4, r5, lr}
 800614a:	4d07      	ldr	r5, [pc, #28]	@ (8006168 <_read_r+0x20>)
 800614c:	4604      	mov	r4, r0
 800614e:	4608      	mov	r0, r1
 8006150:	4611      	mov	r1, r2
 8006152:	2200      	movs	r2, #0
 8006154:	602a      	str	r2, [r5, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	f7fb fbe9 	bl	800192e <_read>
 800615c:	1c43      	adds	r3, r0, #1
 800615e:	d102      	bne.n	8006166 <_read_r+0x1e>
 8006160:	682b      	ldr	r3, [r5, #0]
 8006162:	b103      	cbz	r3, 8006166 <_read_r+0x1e>
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	bd38      	pop	{r3, r4, r5, pc}
 8006168:	20002bd0 	.word	0x20002bd0

0800616c <_write_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	4d07      	ldr	r5, [pc, #28]	@ (800618c <_write_r+0x20>)
 8006170:	4604      	mov	r4, r0
 8006172:	4608      	mov	r0, r1
 8006174:	4611      	mov	r1, r2
 8006176:	2200      	movs	r2, #0
 8006178:	602a      	str	r2, [r5, #0]
 800617a:	461a      	mov	r2, r3
 800617c:	f7fb fbf4 	bl	8001968 <_write>
 8006180:	1c43      	adds	r3, r0, #1
 8006182:	d102      	bne.n	800618a <_write_r+0x1e>
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	b103      	cbz	r3, 800618a <_write_r+0x1e>
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	20002bd0 	.word	0x20002bd0

08006190 <__errno>:
 8006190:	4b01      	ldr	r3, [pc, #4]	@ (8006198 <__errno+0x8>)
 8006192:	6818      	ldr	r0, [r3, #0]
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	2000277c 	.word	0x2000277c

0800619c <__libc_init_array>:
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	4d0d      	ldr	r5, [pc, #52]	@ (80061d4 <__libc_init_array+0x38>)
 80061a0:	4c0d      	ldr	r4, [pc, #52]	@ (80061d8 <__libc_init_array+0x3c>)
 80061a2:	1b64      	subs	r4, r4, r5
 80061a4:	10a4      	asrs	r4, r4, #2
 80061a6:	2600      	movs	r6, #0
 80061a8:	42a6      	cmp	r6, r4
 80061aa:	d109      	bne.n	80061c0 <__libc_init_array+0x24>
 80061ac:	4d0b      	ldr	r5, [pc, #44]	@ (80061dc <__libc_init_array+0x40>)
 80061ae:	4c0c      	ldr	r4, [pc, #48]	@ (80061e0 <__libc_init_array+0x44>)
 80061b0:	f000 fe38 	bl	8006e24 <_init>
 80061b4:	1b64      	subs	r4, r4, r5
 80061b6:	10a4      	asrs	r4, r4, #2
 80061b8:	2600      	movs	r6, #0
 80061ba:	42a6      	cmp	r6, r4
 80061bc:	d105      	bne.n	80061ca <__libc_init_array+0x2e>
 80061be:	bd70      	pop	{r4, r5, r6, pc}
 80061c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c4:	4798      	blx	r3
 80061c6:	3601      	adds	r6, #1
 80061c8:	e7ee      	b.n	80061a8 <__libc_init_array+0xc>
 80061ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ce:	4798      	blx	r3
 80061d0:	3601      	adds	r6, #1
 80061d2:	e7f2      	b.n	80061ba <__libc_init_array+0x1e>
 80061d4:	08007450 	.word	0x08007450
 80061d8:	08007450 	.word	0x08007450
 80061dc:	08007450 	.word	0x08007450
 80061e0:	08007454 	.word	0x08007454

080061e4 <__retarget_lock_init_recursive>:
 80061e4:	4770      	bx	lr

080061e6 <__retarget_lock_acquire_recursive>:
 80061e6:	4770      	bx	lr

080061e8 <__retarget_lock_release_recursive>:
 80061e8:	4770      	bx	lr
	...

080061ec <__assert_func>:
 80061ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061ee:	4614      	mov	r4, r2
 80061f0:	461a      	mov	r2, r3
 80061f2:	4b09      	ldr	r3, [pc, #36]	@ (8006218 <__assert_func+0x2c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4605      	mov	r5, r0
 80061f8:	68d8      	ldr	r0, [r3, #12]
 80061fa:	b14c      	cbz	r4, 8006210 <__assert_func+0x24>
 80061fc:	4b07      	ldr	r3, [pc, #28]	@ (800621c <__assert_func+0x30>)
 80061fe:	9100      	str	r1, [sp, #0]
 8006200:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006204:	4906      	ldr	r1, [pc, #24]	@ (8006220 <__assert_func+0x34>)
 8006206:	462b      	mov	r3, r5
 8006208:	f000 f9ba 	bl	8006580 <fiprintf>
 800620c:	f000 f9da 	bl	80065c4 <abort>
 8006210:	4b04      	ldr	r3, [pc, #16]	@ (8006224 <__assert_func+0x38>)
 8006212:	461c      	mov	r4, r3
 8006214:	e7f3      	b.n	80061fe <__assert_func+0x12>
 8006216:	bf00      	nop
 8006218:	2000277c 	.word	0x2000277c
 800621c:	080073d7 	.word	0x080073d7
 8006220:	080073e4 	.word	0x080073e4
 8006224:	08007412 	.word	0x08007412

08006228 <_free_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4605      	mov	r5, r0
 800622c:	2900      	cmp	r1, #0
 800622e:	d041      	beq.n	80062b4 <_free_r+0x8c>
 8006230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006234:	1f0c      	subs	r4, r1, #4
 8006236:	2b00      	cmp	r3, #0
 8006238:	bfb8      	it	lt
 800623a:	18e4      	addlt	r4, r4, r3
 800623c:	f000 f8e8 	bl	8006410 <__malloc_lock>
 8006240:	4a1d      	ldr	r2, [pc, #116]	@ (80062b8 <_free_r+0x90>)
 8006242:	6813      	ldr	r3, [r2, #0]
 8006244:	b933      	cbnz	r3, 8006254 <_free_r+0x2c>
 8006246:	6063      	str	r3, [r4, #4]
 8006248:	6014      	str	r4, [r2, #0]
 800624a:	4628      	mov	r0, r5
 800624c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006250:	f000 b8e4 	b.w	800641c <__malloc_unlock>
 8006254:	42a3      	cmp	r3, r4
 8006256:	d908      	bls.n	800626a <_free_r+0x42>
 8006258:	6820      	ldr	r0, [r4, #0]
 800625a:	1821      	adds	r1, r4, r0
 800625c:	428b      	cmp	r3, r1
 800625e:	bf01      	itttt	eq
 8006260:	6819      	ldreq	r1, [r3, #0]
 8006262:	685b      	ldreq	r3, [r3, #4]
 8006264:	1809      	addeq	r1, r1, r0
 8006266:	6021      	streq	r1, [r4, #0]
 8006268:	e7ed      	b.n	8006246 <_free_r+0x1e>
 800626a:	461a      	mov	r2, r3
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	b10b      	cbz	r3, 8006274 <_free_r+0x4c>
 8006270:	42a3      	cmp	r3, r4
 8006272:	d9fa      	bls.n	800626a <_free_r+0x42>
 8006274:	6811      	ldr	r1, [r2, #0]
 8006276:	1850      	adds	r0, r2, r1
 8006278:	42a0      	cmp	r0, r4
 800627a:	d10b      	bne.n	8006294 <_free_r+0x6c>
 800627c:	6820      	ldr	r0, [r4, #0]
 800627e:	4401      	add	r1, r0
 8006280:	1850      	adds	r0, r2, r1
 8006282:	4283      	cmp	r3, r0
 8006284:	6011      	str	r1, [r2, #0]
 8006286:	d1e0      	bne.n	800624a <_free_r+0x22>
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	6053      	str	r3, [r2, #4]
 800628e:	4408      	add	r0, r1
 8006290:	6010      	str	r0, [r2, #0]
 8006292:	e7da      	b.n	800624a <_free_r+0x22>
 8006294:	d902      	bls.n	800629c <_free_r+0x74>
 8006296:	230c      	movs	r3, #12
 8006298:	602b      	str	r3, [r5, #0]
 800629a:	e7d6      	b.n	800624a <_free_r+0x22>
 800629c:	6820      	ldr	r0, [r4, #0]
 800629e:	1821      	adds	r1, r4, r0
 80062a0:	428b      	cmp	r3, r1
 80062a2:	bf04      	itt	eq
 80062a4:	6819      	ldreq	r1, [r3, #0]
 80062a6:	685b      	ldreq	r3, [r3, #4]
 80062a8:	6063      	str	r3, [r4, #4]
 80062aa:	bf04      	itt	eq
 80062ac:	1809      	addeq	r1, r1, r0
 80062ae:	6021      	streq	r1, [r4, #0]
 80062b0:	6054      	str	r4, [r2, #4]
 80062b2:	e7ca      	b.n	800624a <_free_r+0x22>
 80062b4:	bd38      	pop	{r3, r4, r5, pc}
 80062b6:	bf00      	nop
 80062b8:	20002bdc 	.word	0x20002bdc

080062bc <malloc>:
 80062bc:	4b02      	ldr	r3, [pc, #8]	@ (80062c8 <malloc+0xc>)
 80062be:	4601      	mov	r1, r0
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	f000 b825 	b.w	8006310 <_malloc_r>
 80062c6:	bf00      	nop
 80062c8:	2000277c 	.word	0x2000277c

080062cc <sbrk_aligned>:
 80062cc:	b570      	push	{r4, r5, r6, lr}
 80062ce:	4e0f      	ldr	r6, [pc, #60]	@ (800630c <sbrk_aligned+0x40>)
 80062d0:	460c      	mov	r4, r1
 80062d2:	6831      	ldr	r1, [r6, #0]
 80062d4:	4605      	mov	r5, r0
 80062d6:	b911      	cbnz	r1, 80062de <sbrk_aligned+0x12>
 80062d8:	f000 f964 	bl	80065a4 <_sbrk_r>
 80062dc:	6030      	str	r0, [r6, #0]
 80062de:	4621      	mov	r1, r4
 80062e0:	4628      	mov	r0, r5
 80062e2:	f000 f95f 	bl	80065a4 <_sbrk_r>
 80062e6:	1c43      	adds	r3, r0, #1
 80062e8:	d103      	bne.n	80062f2 <sbrk_aligned+0x26>
 80062ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80062ee:	4620      	mov	r0, r4
 80062f0:	bd70      	pop	{r4, r5, r6, pc}
 80062f2:	1cc4      	adds	r4, r0, #3
 80062f4:	f024 0403 	bic.w	r4, r4, #3
 80062f8:	42a0      	cmp	r0, r4
 80062fa:	d0f8      	beq.n	80062ee <sbrk_aligned+0x22>
 80062fc:	1a21      	subs	r1, r4, r0
 80062fe:	4628      	mov	r0, r5
 8006300:	f000 f950 	bl	80065a4 <_sbrk_r>
 8006304:	3001      	adds	r0, #1
 8006306:	d1f2      	bne.n	80062ee <sbrk_aligned+0x22>
 8006308:	e7ef      	b.n	80062ea <sbrk_aligned+0x1e>
 800630a:	bf00      	nop
 800630c:	20002bd8 	.word	0x20002bd8

08006310 <_malloc_r>:
 8006310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006314:	1ccd      	adds	r5, r1, #3
 8006316:	f025 0503 	bic.w	r5, r5, #3
 800631a:	3508      	adds	r5, #8
 800631c:	2d0c      	cmp	r5, #12
 800631e:	bf38      	it	cc
 8006320:	250c      	movcc	r5, #12
 8006322:	2d00      	cmp	r5, #0
 8006324:	4606      	mov	r6, r0
 8006326:	db01      	blt.n	800632c <_malloc_r+0x1c>
 8006328:	42a9      	cmp	r1, r5
 800632a:	d904      	bls.n	8006336 <_malloc_r+0x26>
 800632c:	230c      	movs	r3, #12
 800632e:	6033      	str	r3, [r6, #0]
 8006330:	2000      	movs	r0, #0
 8006332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006336:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800640c <_malloc_r+0xfc>
 800633a:	f000 f869 	bl	8006410 <__malloc_lock>
 800633e:	f8d8 3000 	ldr.w	r3, [r8]
 8006342:	461c      	mov	r4, r3
 8006344:	bb44      	cbnz	r4, 8006398 <_malloc_r+0x88>
 8006346:	4629      	mov	r1, r5
 8006348:	4630      	mov	r0, r6
 800634a:	f7ff ffbf 	bl	80062cc <sbrk_aligned>
 800634e:	1c43      	adds	r3, r0, #1
 8006350:	4604      	mov	r4, r0
 8006352:	d158      	bne.n	8006406 <_malloc_r+0xf6>
 8006354:	f8d8 4000 	ldr.w	r4, [r8]
 8006358:	4627      	mov	r7, r4
 800635a:	2f00      	cmp	r7, #0
 800635c:	d143      	bne.n	80063e6 <_malloc_r+0xd6>
 800635e:	2c00      	cmp	r4, #0
 8006360:	d04b      	beq.n	80063fa <_malloc_r+0xea>
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	4639      	mov	r1, r7
 8006366:	4630      	mov	r0, r6
 8006368:	eb04 0903 	add.w	r9, r4, r3
 800636c:	f000 f91a 	bl	80065a4 <_sbrk_r>
 8006370:	4581      	cmp	r9, r0
 8006372:	d142      	bne.n	80063fa <_malloc_r+0xea>
 8006374:	6821      	ldr	r1, [r4, #0]
 8006376:	1a6d      	subs	r5, r5, r1
 8006378:	4629      	mov	r1, r5
 800637a:	4630      	mov	r0, r6
 800637c:	f7ff ffa6 	bl	80062cc <sbrk_aligned>
 8006380:	3001      	adds	r0, #1
 8006382:	d03a      	beq.n	80063fa <_malloc_r+0xea>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	442b      	add	r3, r5
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	f8d8 3000 	ldr.w	r3, [r8]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	bb62      	cbnz	r2, 80063ec <_malloc_r+0xdc>
 8006392:	f8c8 7000 	str.w	r7, [r8]
 8006396:	e00f      	b.n	80063b8 <_malloc_r+0xa8>
 8006398:	6822      	ldr	r2, [r4, #0]
 800639a:	1b52      	subs	r2, r2, r5
 800639c:	d420      	bmi.n	80063e0 <_malloc_r+0xd0>
 800639e:	2a0b      	cmp	r2, #11
 80063a0:	d917      	bls.n	80063d2 <_malloc_r+0xc2>
 80063a2:	1961      	adds	r1, r4, r5
 80063a4:	42a3      	cmp	r3, r4
 80063a6:	6025      	str	r5, [r4, #0]
 80063a8:	bf18      	it	ne
 80063aa:	6059      	strne	r1, [r3, #4]
 80063ac:	6863      	ldr	r3, [r4, #4]
 80063ae:	bf08      	it	eq
 80063b0:	f8c8 1000 	streq.w	r1, [r8]
 80063b4:	5162      	str	r2, [r4, r5]
 80063b6:	604b      	str	r3, [r1, #4]
 80063b8:	4630      	mov	r0, r6
 80063ba:	f000 f82f 	bl	800641c <__malloc_unlock>
 80063be:	f104 000b 	add.w	r0, r4, #11
 80063c2:	1d23      	adds	r3, r4, #4
 80063c4:	f020 0007 	bic.w	r0, r0, #7
 80063c8:	1ac2      	subs	r2, r0, r3
 80063ca:	bf1c      	itt	ne
 80063cc:	1a1b      	subne	r3, r3, r0
 80063ce:	50a3      	strne	r3, [r4, r2]
 80063d0:	e7af      	b.n	8006332 <_malloc_r+0x22>
 80063d2:	6862      	ldr	r2, [r4, #4]
 80063d4:	42a3      	cmp	r3, r4
 80063d6:	bf0c      	ite	eq
 80063d8:	f8c8 2000 	streq.w	r2, [r8]
 80063dc:	605a      	strne	r2, [r3, #4]
 80063de:	e7eb      	b.n	80063b8 <_malloc_r+0xa8>
 80063e0:	4623      	mov	r3, r4
 80063e2:	6864      	ldr	r4, [r4, #4]
 80063e4:	e7ae      	b.n	8006344 <_malloc_r+0x34>
 80063e6:	463c      	mov	r4, r7
 80063e8:	687f      	ldr	r7, [r7, #4]
 80063ea:	e7b6      	b.n	800635a <_malloc_r+0x4a>
 80063ec:	461a      	mov	r2, r3
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	d1fb      	bne.n	80063ec <_malloc_r+0xdc>
 80063f4:	2300      	movs	r3, #0
 80063f6:	6053      	str	r3, [r2, #4]
 80063f8:	e7de      	b.n	80063b8 <_malloc_r+0xa8>
 80063fa:	230c      	movs	r3, #12
 80063fc:	6033      	str	r3, [r6, #0]
 80063fe:	4630      	mov	r0, r6
 8006400:	f000 f80c 	bl	800641c <__malloc_unlock>
 8006404:	e794      	b.n	8006330 <_malloc_r+0x20>
 8006406:	6005      	str	r5, [r0, #0]
 8006408:	e7d6      	b.n	80063b8 <_malloc_r+0xa8>
 800640a:	bf00      	nop
 800640c:	20002bdc 	.word	0x20002bdc

08006410 <__malloc_lock>:
 8006410:	4801      	ldr	r0, [pc, #4]	@ (8006418 <__malloc_lock+0x8>)
 8006412:	f7ff bee8 	b.w	80061e6 <__retarget_lock_acquire_recursive>
 8006416:	bf00      	nop
 8006418:	20002bd4 	.word	0x20002bd4

0800641c <__malloc_unlock>:
 800641c:	4801      	ldr	r0, [pc, #4]	@ (8006424 <__malloc_unlock+0x8>)
 800641e:	f7ff bee3 	b.w	80061e8 <__retarget_lock_release_recursive>
 8006422:	bf00      	nop
 8006424:	20002bd4 	.word	0x20002bd4

08006428 <__sflush_r>:
 8006428:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800642c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006430:	0716      	lsls	r6, r2, #28
 8006432:	4605      	mov	r5, r0
 8006434:	460c      	mov	r4, r1
 8006436:	d454      	bmi.n	80064e2 <__sflush_r+0xba>
 8006438:	684b      	ldr	r3, [r1, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	dc02      	bgt.n	8006444 <__sflush_r+0x1c>
 800643e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006440:	2b00      	cmp	r3, #0
 8006442:	dd48      	ble.n	80064d6 <__sflush_r+0xae>
 8006444:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006446:	2e00      	cmp	r6, #0
 8006448:	d045      	beq.n	80064d6 <__sflush_r+0xae>
 800644a:	2300      	movs	r3, #0
 800644c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006450:	682f      	ldr	r7, [r5, #0]
 8006452:	6a21      	ldr	r1, [r4, #32]
 8006454:	602b      	str	r3, [r5, #0]
 8006456:	d030      	beq.n	80064ba <__sflush_r+0x92>
 8006458:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	0759      	lsls	r1, r3, #29
 800645e:	d505      	bpl.n	800646c <__sflush_r+0x44>
 8006460:	6863      	ldr	r3, [r4, #4]
 8006462:	1ad2      	subs	r2, r2, r3
 8006464:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006466:	b10b      	cbz	r3, 800646c <__sflush_r+0x44>
 8006468:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800646a:	1ad2      	subs	r2, r2, r3
 800646c:	2300      	movs	r3, #0
 800646e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006470:	6a21      	ldr	r1, [r4, #32]
 8006472:	4628      	mov	r0, r5
 8006474:	47b0      	blx	r6
 8006476:	1c43      	adds	r3, r0, #1
 8006478:	89a3      	ldrh	r3, [r4, #12]
 800647a:	d106      	bne.n	800648a <__sflush_r+0x62>
 800647c:	6829      	ldr	r1, [r5, #0]
 800647e:	291d      	cmp	r1, #29
 8006480:	d82b      	bhi.n	80064da <__sflush_r+0xb2>
 8006482:	4a2a      	ldr	r2, [pc, #168]	@ (800652c <__sflush_r+0x104>)
 8006484:	40ca      	lsrs	r2, r1
 8006486:	07d6      	lsls	r6, r2, #31
 8006488:	d527      	bpl.n	80064da <__sflush_r+0xb2>
 800648a:	2200      	movs	r2, #0
 800648c:	6062      	str	r2, [r4, #4]
 800648e:	04d9      	lsls	r1, r3, #19
 8006490:	6922      	ldr	r2, [r4, #16]
 8006492:	6022      	str	r2, [r4, #0]
 8006494:	d504      	bpl.n	80064a0 <__sflush_r+0x78>
 8006496:	1c42      	adds	r2, r0, #1
 8006498:	d101      	bne.n	800649e <__sflush_r+0x76>
 800649a:	682b      	ldr	r3, [r5, #0]
 800649c:	b903      	cbnz	r3, 80064a0 <__sflush_r+0x78>
 800649e:	6560      	str	r0, [r4, #84]	@ 0x54
 80064a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064a2:	602f      	str	r7, [r5, #0]
 80064a4:	b1b9      	cbz	r1, 80064d6 <__sflush_r+0xae>
 80064a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064aa:	4299      	cmp	r1, r3
 80064ac:	d002      	beq.n	80064b4 <__sflush_r+0x8c>
 80064ae:	4628      	mov	r0, r5
 80064b0:	f7ff feba 	bl	8006228 <_free_r>
 80064b4:	2300      	movs	r3, #0
 80064b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80064b8:	e00d      	b.n	80064d6 <__sflush_r+0xae>
 80064ba:	2301      	movs	r3, #1
 80064bc:	4628      	mov	r0, r5
 80064be:	47b0      	blx	r6
 80064c0:	4602      	mov	r2, r0
 80064c2:	1c50      	adds	r0, r2, #1
 80064c4:	d1c9      	bne.n	800645a <__sflush_r+0x32>
 80064c6:	682b      	ldr	r3, [r5, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0c6      	beq.n	800645a <__sflush_r+0x32>
 80064cc:	2b1d      	cmp	r3, #29
 80064ce:	d001      	beq.n	80064d4 <__sflush_r+0xac>
 80064d0:	2b16      	cmp	r3, #22
 80064d2:	d11e      	bne.n	8006512 <__sflush_r+0xea>
 80064d4:	602f      	str	r7, [r5, #0]
 80064d6:	2000      	movs	r0, #0
 80064d8:	e022      	b.n	8006520 <__sflush_r+0xf8>
 80064da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064de:	b21b      	sxth	r3, r3
 80064e0:	e01b      	b.n	800651a <__sflush_r+0xf2>
 80064e2:	690f      	ldr	r7, [r1, #16]
 80064e4:	2f00      	cmp	r7, #0
 80064e6:	d0f6      	beq.n	80064d6 <__sflush_r+0xae>
 80064e8:	0793      	lsls	r3, r2, #30
 80064ea:	680e      	ldr	r6, [r1, #0]
 80064ec:	bf08      	it	eq
 80064ee:	694b      	ldreq	r3, [r1, #20]
 80064f0:	600f      	str	r7, [r1, #0]
 80064f2:	bf18      	it	ne
 80064f4:	2300      	movne	r3, #0
 80064f6:	eba6 0807 	sub.w	r8, r6, r7
 80064fa:	608b      	str	r3, [r1, #8]
 80064fc:	f1b8 0f00 	cmp.w	r8, #0
 8006500:	dde9      	ble.n	80064d6 <__sflush_r+0xae>
 8006502:	6a21      	ldr	r1, [r4, #32]
 8006504:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006506:	4643      	mov	r3, r8
 8006508:	463a      	mov	r2, r7
 800650a:	4628      	mov	r0, r5
 800650c:	47b0      	blx	r6
 800650e:	2800      	cmp	r0, #0
 8006510:	dc08      	bgt.n	8006524 <__sflush_r+0xfc>
 8006512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800651a:	81a3      	strh	r3, [r4, #12]
 800651c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006524:	4407      	add	r7, r0
 8006526:	eba8 0800 	sub.w	r8, r8, r0
 800652a:	e7e7      	b.n	80064fc <__sflush_r+0xd4>
 800652c:	20400001 	.word	0x20400001

08006530 <_fflush_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	690b      	ldr	r3, [r1, #16]
 8006534:	4605      	mov	r5, r0
 8006536:	460c      	mov	r4, r1
 8006538:	b913      	cbnz	r3, 8006540 <_fflush_r+0x10>
 800653a:	2500      	movs	r5, #0
 800653c:	4628      	mov	r0, r5
 800653e:	bd38      	pop	{r3, r4, r5, pc}
 8006540:	b118      	cbz	r0, 800654a <_fflush_r+0x1a>
 8006542:	6a03      	ldr	r3, [r0, #32]
 8006544:	b90b      	cbnz	r3, 800654a <_fflush_r+0x1a>
 8006546:	f7ff fd5b 	bl	8006000 <__sinit>
 800654a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0f3      	beq.n	800653a <_fflush_r+0xa>
 8006552:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006554:	07d0      	lsls	r0, r2, #31
 8006556:	d404      	bmi.n	8006562 <_fflush_r+0x32>
 8006558:	0599      	lsls	r1, r3, #22
 800655a:	d402      	bmi.n	8006562 <_fflush_r+0x32>
 800655c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800655e:	f7ff fe42 	bl	80061e6 <__retarget_lock_acquire_recursive>
 8006562:	4628      	mov	r0, r5
 8006564:	4621      	mov	r1, r4
 8006566:	f7ff ff5f 	bl	8006428 <__sflush_r>
 800656a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800656c:	07da      	lsls	r2, r3, #31
 800656e:	4605      	mov	r5, r0
 8006570:	d4e4      	bmi.n	800653c <_fflush_r+0xc>
 8006572:	89a3      	ldrh	r3, [r4, #12]
 8006574:	059b      	lsls	r3, r3, #22
 8006576:	d4e1      	bmi.n	800653c <_fflush_r+0xc>
 8006578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800657a:	f7ff fe35 	bl	80061e8 <__retarget_lock_release_recursive>
 800657e:	e7dd      	b.n	800653c <_fflush_r+0xc>

08006580 <fiprintf>:
 8006580:	b40e      	push	{r1, r2, r3}
 8006582:	b503      	push	{r0, r1, lr}
 8006584:	4601      	mov	r1, r0
 8006586:	ab03      	add	r3, sp, #12
 8006588:	4805      	ldr	r0, [pc, #20]	@ (80065a0 <fiprintf+0x20>)
 800658a:	f853 2b04 	ldr.w	r2, [r3], #4
 800658e:	6800      	ldr	r0, [r0, #0]
 8006590:	9301      	str	r3, [sp, #4]
 8006592:	f000 f847 	bl	8006624 <_vfiprintf_r>
 8006596:	b002      	add	sp, #8
 8006598:	f85d eb04 	ldr.w	lr, [sp], #4
 800659c:	b003      	add	sp, #12
 800659e:	4770      	bx	lr
 80065a0:	2000277c 	.word	0x2000277c

080065a4 <_sbrk_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	4d06      	ldr	r5, [pc, #24]	@ (80065c0 <_sbrk_r+0x1c>)
 80065a8:	2300      	movs	r3, #0
 80065aa:	4604      	mov	r4, r0
 80065ac:	4608      	mov	r0, r1
 80065ae:	602b      	str	r3, [r5, #0]
 80065b0:	f7fb fa2a 	bl	8001a08 <_sbrk>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	d102      	bne.n	80065be <_sbrk_r+0x1a>
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	b103      	cbz	r3, 80065be <_sbrk_r+0x1a>
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	20002bd0 	.word	0x20002bd0

080065c4 <abort>:
 80065c4:	b508      	push	{r3, lr}
 80065c6:	2006      	movs	r0, #6
 80065c8:	f000 fb8c 	bl	8006ce4 <raise>
 80065cc:	2001      	movs	r0, #1
 80065ce:	f7fb f9a3 	bl	8001918 <_exit>

080065d2 <__sfputc_r>:
 80065d2:	6893      	ldr	r3, [r2, #8]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	b410      	push	{r4}
 80065da:	6093      	str	r3, [r2, #8]
 80065dc:	da08      	bge.n	80065f0 <__sfputc_r+0x1e>
 80065de:	6994      	ldr	r4, [r2, #24]
 80065e0:	42a3      	cmp	r3, r4
 80065e2:	db01      	blt.n	80065e8 <__sfputc_r+0x16>
 80065e4:	290a      	cmp	r1, #10
 80065e6:	d103      	bne.n	80065f0 <__sfputc_r+0x1e>
 80065e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065ec:	f000 babe 	b.w	8006b6c <__swbuf_r>
 80065f0:	6813      	ldr	r3, [r2, #0]
 80065f2:	1c58      	adds	r0, r3, #1
 80065f4:	6010      	str	r0, [r2, #0]
 80065f6:	7019      	strb	r1, [r3, #0]
 80065f8:	4608      	mov	r0, r1
 80065fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <__sfputs_r>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	4606      	mov	r6, r0
 8006604:	460f      	mov	r7, r1
 8006606:	4614      	mov	r4, r2
 8006608:	18d5      	adds	r5, r2, r3
 800660a:	42ac      	cmp	r4, r5
 800660c:	d101      	bne.n	8006612 <__sfputs_r+0x12>
 800660e:	2000      	movs	r0, #0
 8006610:	e007      	b.n	8006622 <__sfputs_r+0x22>
 8006612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006616:	463a      	mov	r2, r7
 8006618:	4630      	mov	r0, r6
 800661a:	f7ff ffda 	bl	80065d2 <__sfputc_r>
 800661e:	1c43      	adds	r3, r0, #1
 8006620:	d1f3      	bne.n	800660a <__sfputs_r+0xa>
 8006622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006624 <_vfiprintf_r>:
 8006624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	460d      	mov	r5, r1
 800662a:	b09d      	sub	sp, #116	@ 0x74
 800662c:	4614      	mov	r4, r2
 800662e:	4698      	mov	r8, r3
 8006630:	4606      	mov	r6, r0
 8006632:	b118      	cbz	r0, 800663c <_vfiprintf_r+0x18>
 8006634:	6a03      	ldr	r3, [r0, #32]
 8006636:	b90b      	cbnz	r3, 800663c <_vfiprintf_r+0x18>
 8006638:	f7ff fce2 	bl	8006000 <__sinit>
 800663c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800663e:	07d9      	lsls	r1, r3, #31
 8006640:	d405      	bmi.n	800664e <_vfiprintf_r+0x2a>
 8006642:	89ab      	ldrh	r3, [r5, #12]
 8006644:	059a      	lsls	r2, r3, #22
 8006646:	d402      	bmi.n	800664e <_vfiprintf_r+0x2a>
 8006648:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800664a:	f7ff fdcc 	bl	80061e6 <__retarget_lock_acquire_recursive>
 800664e:	89ab      	ldrh	r3, [r5, #12]
 8006650:	071b      	lsls	r3, r3, #28
 8006652:	d501      	bpl.n	8006658 <_vfiprintf_r+0x34>
 8006654:	692b      	ldr	r3, [r5, #16]
 8006656:	b99b      	cbnz	r3, 8006680 <_vfiprintf_r+0x5c>
 8006658:	4629      	mov	r1, r5
 800665a:	4630      	mov	r0, r6
 800665c:	f000 fac4 	bl	8006be8 <__swsetup_r>
 8006660:	b170      	cbz	r0, 8006680 <_vfiprintf_r+0x5c>
 8006662:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006664:	07dc      	lsls	r4, r3, #31
 8006666:	d504      	bpl.n	8006672 <_vfiprintf_r+0x4e>
 8006668:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800666c:	b01d      	add	sp, #116	@ 0x74
 800666e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006672:	89ab      	ldrh	r3, [r5, #12]
 8006674:	0598      	lsls	r0, r3, #22
 8006676:	d4f7      	bmi.n	8006668 <_vfiprintf_r+0x44>
 8006678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800667a:	f7ff fdb5 	bl	80061e8 <__retarget_lock_release_recursive>
 800667e:	e7f3      	b.n	8006668 <_vfiprintf_r+0x44>
 8006680:	2300      	movs	r3, #0
 8006682:	9309      	str	r3, [sp, #36]	@ 0x24
 8006684:	2320      	movs	r3, #32
 8006686:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800668a:	f8cd 800c 	str.w	r8, [sp, #12]
 800668e:	2330      	movs	r3, #48	@ 0x30
 8006690:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006840 <_vfiprintf_r+0x21c>
 8006694:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006698:	f04f 0901 	mov.w	r9, #1
 800669c:	4623      	mov	r3, r4
 800669e:	469a      	mov	sl, r3
 80066a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066a4:	b10a      	cbz	r2, 80066aa <_vfiprintf_r+0x86>
 80066a6:	2a25      	cmp	r2, #37	@ 0x25
 80066a8:	d1f9      	bne.n	800669e <_vfiprintf_r+0x7a>
 80066aa:	ebba 0b04 	subs.w	fp, sl, r4
 80066ae:	d00b      	beq.n	80066c8 <_vfiprintf_r+0xa4>
 80066b0:	465b      	mov	r3, fp
 80066b2:	4622      	mov	r2, r4
 80066b4:	4629      	mov	r1, r5
 80066b6:	4630      	mov	r0, r6
 80066b8:	f7ff ffa2 	bl	8006600 <__sfputs_r>
 80066bc:	3001      	adds	r0, #1
 80066be:	f000 80a7 	beq.w	8006810 <_vfiprintf_r+0x1ec>
 80066c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066c4:	445a      	add	r2, fp
 80066c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80066c8:	f89a 3000 	ldrb.w	r3, [sl]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 809f 	beq.w	8006810 <_vfiprintf_r+0x1ec>
 80066d2:	2300      	movs	r3, #0
 80066d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80066d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066dc:	f10a 0a01 	add.w	sl, sl, #1
 80066e0:	9304      	str	r3, [sp, #16]
 80066e2:	9307      	str	r3, [sp, #28]
 80066e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80066e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80066ea:	4654      	mov	r4, sl
 80066ec:	2205      	movs	r2, #5
 80066ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066f2:	4853      	ldr	r0, [pc, #332]	@ (8006840 <_vfiprintf_r+0x21c>)
 80066f4:	f7f9 fd94 	bl	8000220 <memchr>
 80066f8:	9a04      	ldr	r2, [sp, #16]
 80066fa:	b9d8      	cbnz	r0, 8006734 <_vfiprintf_r+0x110>
 80066fc:	06d1      	lsls	r1, r2, #27
 80066fe:	bf44      	itt	mi
 8006700:	2320      	movmi	r3, #32
 8006702:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006706:	0713      	lsls	r3, r2, #28
 8006708:	bf44      	itt	mi
 800670a:	232b      	movmi	r3, #43	@ 0x2b
 800670c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006710:	f89a 3000 	ldrb.w	r3, [sl]
 8006714:	2b2a      	cmp	r3, #42	@ 0x2a
 8006716:	d015      	beq.n	8006744 <_vfiprintf_r+0x120>
 8006718:	9a07      	ldr	r2, [sp, #28]
 800671a:	4654      	mov	r4, sl
 800671c:	2000      	movs	r0, #0
 800671e:	f04f 0c0a 	mov.w	ip, #10
 8006722:	4621      	mov	r1, r4
 8006724:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006728:	3b30      	subs	r3, #48	@ 0x30
 800672a:	2b09      	cmp	r3, #9
 800672c:	d94b      	bls.n	80067c6 <_vfiprintf_r+0x1a2>
 800672e:	b1b0      	cbz	r0, 800675e <_vfiprintf_r+0x13a>
 8006730:	9207      	str	r2, [sp, #28]
 8006732:	e014      	b.n	800675e <_vfiprintf_r+0x13a>
 8006734:	eba0 0308 	sub.w	r3, r0, r8
 8006738:	fa09 f303 	lsl.w	r3, r9, r3
 800673c:	4313      	orrs	r3, r2
 800673e:	9304      	str	r3, [sp, #16]
 8006740:	46a2      	mov	sl, r4
 8006742:	e7d2      	b.n	80066ea <_vfiprintf_r+0xc6>
 8006744:	9b03      	ldr	r3, [sp, #12]
 8006746:	1d19      	adds	r1, r3, #4
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	9103      	str	r1, [sp, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	bfbb      	ittet	lt
 8006750:	425b      	neglt	r3, r3
 8006752:	f042 0202 	orrlt.w	r2, r2, #2
 8006756:	9307      	strge	r3, [sp, #28]
 8006758:	9307      	strlt	r3, [sp, #28]
 800675a:	bfb8      	it	lt
 800675c:	9204      	strlt	r2, [sp, #16]
 800675e:	7823      	ldrb	r3, [r4, #0]
 8006760:	2b2e      	cmp	r3, #46	@ 0x2e
 8006762:	d10a      	bne.n	800677a <_vfiprintf_r+0x156>
 8006764:	7863      	ldrb	r3, [r4, #1]
 8006766:	2b2a      	cmp	r3, #42	@ 0x2a
 8006768:	d132      	bne.n	80067d0 <_vfiprintf_r+0x1ac>
 800676a:	9b03      	ldr	r3, [sp, #12]
 800676c:	1d1a      	adds	r2, r3, #4
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	9203      	str	r2, [sp, #12]
 8006772:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006776:	3402      	adds	r4, #2
 8006778:	9305      	str	r3, [sp, #20]
 800677a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006850 <_vfiprintf_r+0x22c>
 800677e:	7821      	ldrb	r1, [r4, #0]
 8006780:	2203      	movs	r2, #3
 8006782:	4650      	mov	r0, sl
 8006784:	f7f9 fd4c 	bl	8000220 <memchr>
 8006788:	b138      	cbz	r0, 800679a <_vfiprintf_r+0x176>
 800678a:	9b04      	ldr	r3, [sp, #16]
 800678c:	eba0 000a 	sub.w	r0, r0, sl
 8006790:	2240      	movs	r2, #64	@ 0x40
 8006792:	4082      	lsls	r2, r0
 8006794:	4313      	orrs	r3, r2
 8006796:	3401      	adds	r4, #1
 8006798:	9304      	str	r3, [sp, #16]
 800679a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800679e:	4829      	ldr	r0, [pc, #164]	@ (8006844 <_vfiprintf_r+0x220>)
 80067a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067a4:	2206      	movs	r2, #6
 80067a6:	f7f9 fd3b 	bl	8000220 <memchr>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d03f      	beq.n	800682e <_vfiprintf_r+0x20a>
 80067ae:	4b26      	ldr	r3, [pc, #152]	@ (8006848 <_vfiprintf_r+0x224>)
 80067b0:	bb1b      	cbnz	r3, 80067fa <_vfiprintf_r+0x1d6>
 80067b2:	9b03      	ldr	r3, [sp, #12]
 80067b4:	3307      	adds	r3, #7
 80067b6:	f023 0307 	bic.w	r3, r3, #7
 80067ba:	3308      	adds	r3, #8
 80067bc:	9303      	str	r3, [sp, #12]
 80067be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c0:	443b      	add	r3, r7
 80067c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067c4:	e76a      	b.n	800669c <_vfiprintf_r+0x78>
 80067c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80067ca:	460c      	mov	r4, r1
 80067cc:	2001      	movs	r0, #1
 80067ce:	e7a8      	b.n	8006722 <_vfiprintf_r+0xfe>
 80067d0:	2300      	movs	r3, #0
 80067d2:	3401      	adds	r4, #1
 80067d4:	9305      	str	r3, [sp, #20]
 80067d6:	4619      	mov	r1, r3
 80067d8:	f04f 0c0a 	mov.w	ip, #10
 80067dc:	4620      	mov	r0, r4
 80067de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067e2:	3a30      	subs	r2, #48	@ 0x30
 80067e4:	2a09      	cmp	r2, #9
 80067e6:	d903      	bls.n	80067f0 <_vfiprintf_r+0x1cc>
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0c6      	beq.n	800677a <_vfiprintf_r+0x156>
 80067ec:	9105      	str	r1, [sp, #20]
 80067ee:	e7c4      	b.n	800677a <_vfiprintf_r+0x156>
 80067f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80067f4:	4604      	mov	r4, r0
 80067f6:	2301      	movs	r3, #1
 80067f8:	e7f0      	b.n	80067dc <_vfiprintf_r+0x1b8>
 80067fa:	ab03      	add	r3, sp, #12
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	462a      	mov	r2, r5
 8006800:	4b12      	ldr	r3, [pc, #72]	@ (800684c <_vfiprintf_r+0x228>)
 8006802:	a904      	add	r1, sp, #16
 8006804:	4630      	mov	r0, r6
 8006806:	f3af 8000 	nop.w
 800680a:	4607      	mov	r7, r0
 800680c:	1c78      	adds	r0, r7, #1
 800680e:	d1d6      	bne.n	80067be <_vfiprintf_r+0x19a>
 8006810:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006812:	07d9      	lsls	r1, r3, #31
 8006814:	d405      	bmi.n	8006822 <_vfiprintf_r+0x1fe>
 8006816:	89ab      	ldrh	r3, [r5, #12]
 8006818:	059a      	lsls	r2, r3, #22
 800681a:	d402      	bmi.n	8006822 <_vfiprintf_r+0x1fe>
 800681c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800681e:	f7ff fce3 	bl	80061e8 <__retarget_lock_release_recursive>
 8006822:	89ab      	ldrh	r3, [r5, #12]
 8006824:	065b      	lsls	r3, r3, #25
 8006826:	f53f af1f 	bmi.w	8006668 <_vfiprintf_r+0x44>
 800682a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800682c:	e71e      	b.n	800666c <_vfiprintf_r+0x48>
 800682e:	ab03      	add	r3, sp, #12
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	462a      	mov	r2, r5
 8006834:	4b05      	ldr	r3, [pc, #20]	@ (800684c <_vfiprintf_r+0x228>)
 8006836:	a904      	add	r1, sp, #16
 8006838:	4630      	mov	r0, r6
 800683a:	f000 f879 	bl	8006930 <_printf_i>
 800683e:	e7e4      	b.n	800680a <_vfiprintf_r+0x1e6>
 8006840:	08007413 	.word	0x08007413
 8006844:	0800741d 	.word	0x0800741d
 8006848:	00000000 	.word	0x00000000
 800684c:	08006601 	.word	0x08006601
 8006850:	08007419 	.word	0x08007419

08006854 <_printf_common>:
 8006854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006858:	4616      	mov	r6, r2
 800685a:	4698      	mov	r8, r3
 800685c:	688a      	ldr	r2, [r1, #8]
 800685e:	690b      	ldr	r3, [r1, #16]
 8006860:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006864:	4293      	cmp	r3, r2
 8006866:	bfb8      	it	lt
 8006868:	4613      	movlt	r3, r2
 800686a:	6033      	str	r3, [r6, #0]
 800686c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006870:	4607      	mov	r7, r0
 8006872:	460c      	mov	r4, r1
 8006874:	b10a      	cbz	r2, 800687a <_printf_common+0x26>
 8006876:	3301      	adds	r3, #1
 8006878:	6033      	str	r3, [r6, #0]
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	0699      	lsls	r1, r3, #26
 800687e:	bf42      	ittt	mi
 8006880:	6833      	ldrmi	r3, [r6, #0]
 8006882:	3302      	addmi	r3, #2
 8006884:	6033      	strmi	r3, [r6, #0]
 8006886:	6825      	ldr	r5, [r4, #0]
 8006888:	f015 0506 	ands.w	r5, r5, #6
 800688c:	d106      	bne.n	800689c <_printf_common+0x48>
 800688e:	f104 0a19 	add.w	sl, r4, #25
 8006892:	68e3      	ldr	r3, [r4, #12]
 8006894:	6832      	ldr	r2, [r6, #0]
 8006896:	1a9b      	subs	r3, r3, r2
 8006898:	42ab      	cmp	r3, r5
 800689a:	dc26      	bgt.n	80068ea <_printf_common+0x96>
 800689c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068a0:	6822      	ldr	r2, [r4, #0]
 80068a2:	3b00      	subs	r3, #0
 80068a4:	bf18      	it	ne
 80068a6:	2301      	movne	r3, #1
 80068a8:	0692      	lsls	r2, r2, #26
 80068aa:	d42b      	bmi.n	8006904 <_printf_common+0xb0>
 80068ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068b0:	4641      	mov	r1, r8
 80068b2:	4638      	mov	r0, r7
 80068b4:	47c8      	blx	r9
 80068b6:	3001      	adds	r0, #1
 80068b8:	d01e      	beq.n	80068f8 <_printf_common+0xa4>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	6922      	ldr	r2, [r4, #16]
 80068be:	f003 0306 	and.w	r3, r3, #6
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	bf02      	ittt	eq
 80068c6:	68e5      	ldreq	r5, [r4, #12]
 80068c8:	6833      	ldreq	r3, [r6, #0]
 80068ca:	1aed      	subeq	r5, r5, r3
 80068cc:	68a3      	ldr	r3, [r4, #8]
 80068ce:	bf0c      	ite	eq
 80068d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068d4:	2500      	movne	r5, #0
 80068d6:	4293      	cmp	r3, r2
 80068d8:	bfc4      	itt	gt
 80068da:	1a9b      	subgt	r3, r3, r2
 80068dc:	18ed      	addgt	r5, r5, r3
 80068de:	2600      	movs	r6, #0
 80068e0:	341a      	adds	r4, #26
 80068e2:	42b5      	cmp	r5, r6
 80068e4:	d11a      	bne.n	800691c <_printf_common+0xc8>
 80068e6:	2000      	movs	r0, #0
 80068e8:	e008      	b.n	80068fc <_printf_common+0xa8>
 80068ea:	2301      	movs	r3, #1
 80068ec:	4652      	mov	r2, sl
 80068ee:	4641      	mov	r1, r8
 80068f0:	4638      	mov	r0, r7
 80068f2:	47c8      	blx	r9
 80068f4:	3001      	adds	r0, #1
 80068f6:	d103      	bne.n	8006900 <_printf_common+0xac>
 80068f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006900:	3501      	adds	r5, #1
 8006902:	e7c6      	b.n	8006892 <_printf_common+0x3e>
 8006904:	18e1      	adds	r1, r4, r3
 8006906:	1c5a      	adds	r2, r3, #1
 8006908:	2030      	movs	r0, #48	@ 0x30
 800690a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800690e:	4422      	add	r2, r4
 8006910:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006914:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006918:	3302      	adds	r3, #2
 800691a:	e7c7      	b.n	80068ac <_printf_common+0x58>
 800691c:	2301      	movs	r3, #1
 800691e:	4622      	mov	r2, r4
 8006920:	4641      	mov	r1, r8
 8006922:	4638      	mov	r0, r7
 8006924:	47c8      	blx	r9
 8006926:	3001      	adds	r0, #1
 8006928:	d0e6      	beq.n	80068f8 <_printf_common+0xa4>
 800692a:	3601      	adds	r6, #1
 800692c:	e7d9      	b.n	80068e2 <_printf_common+0x8e>
	...

08006930 <_printf_i>:
 8006930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006934:	7e0f      	ldrb	r7, [r1, #24]
 8006936:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006938:	2f78      	cmp	r7, #120	@ 0x78
 800693a:	4691      	mov	r9, r2
 800693c:	4680      	mov	r8, r0
 800693e:	460c      	mov	r4, r1
 8006940:	469a      	mov	sl, r3
 8006942:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006946:	d807      	bhi.n	8006958 <_printf_i+0x28>
 8006948:	2f62      	cmp	r7, #98	@ 0x62
 800694a:	d80a      	bhi.n	8006962 <_printf_i+0x32>
 800694c:	2f00      	cmp	r7, #0
 800694e:	f000 80d1 	beq.w	8006af4 <_printf_i+0x1c4>
 8006952:	2f58      	cmp	r7, #88	@ 0x58
 8006954:	f000 80b8 	beq.w	8006ac8 <_printf_i+0x198>
 8006958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800695c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006960:	e03a      	b.n	80069d8 <_printf_i+0xa8>
 8006962:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006966:	2b15      	cmp	r3, #21
 8006968:	d8f6      	bhi.n	8006958 <_printf_i+0x28>
 800696a:	a101      	add	r1, pc, #4	@ (adr r1, 8006970 <_printf_i+0x40>)
 800696c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006970:	080069c9 	.word	0x080069c9
 8006974:	080069dd 	.word	0x080069dd
 8006978:	08006959 	.word	0x08006959
 800697c:	08006959 	.word	0x08006959
 8006980:	08006959 	.word	0x08006959
 8006984:	08006959 	.word	0x08006959
 8006988:	080069dd 	.word	0x080069dd
 800698c:	08006959 	.word	0x08006959
 8006990:	08006959 	.word	0x08006959
 8006994:	08006959 	.word	0x08006959
 8006998:	08006959 	.word	0x08006959
 800699c:	08006adb 	.word	0x08006adb
 80069a0:	08006a07 	.word	0x08006a07
 80069a4:	08006a95 	.word	0x08006a95
 80069a8:	08006959 	.word	0x08006959
 80069ac:	08006959 	.word	0x08006959
 80069b0:	08006afd 	.word	0x08006afd
 80069b4:	08006959 	.word	0x08006959
 80069b8:	08006a07 	.word	0x08006a07
 80069bc:	08006959 	.word	0x08006959
 80069c0:	08006959 	.word	0x08006959
 80069c4:	08006a9d 	.word	0x08006a9d
 80069c8:	6833      	ldr	r3, [r6, #0]
 80069ca:	1d1a      	adds	r2, r3, #4
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6032      	str	r2, [r6, #0]
 80069d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069d8:	2301      	movs	r3, #1
 80069da:	e09c      	b.n	8006b16 <_printf_i+0x1e6>
 80069dc:	6833      	ldr	r3, [r6, #0]
 80069de:	6820      	ldr	r0, [r4, #0]
 80069e0:	1d19      	adds	r1, r3, #4
 80069e2:	6031      	str	r1, [r6, #0]
 80069e4:	0606      	lsls	r6, r0, #24
 80069e6:	d501      	bpl.n	80069ec <_printf_i+0xbc>
 80069e8:	681d      	ldr	r5, [r3, #0]
 80069ea:	e003      	b.n	80069f4 <_printf_i+0xc4>
 80069ec:	0645      	lsls	r5, r0, #25
 80069ee:	d5fb      	bpl.n	80069e8 <_printf_i+0xb8>
 80069f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069f4:	2d00      	cmp	r5, #0
 80069f6:	da03      	bge.n	8006a00 <_printf_i+0xd0>
 80069f8:	232d      	movs	r3, #45	@ 0x2d
 80069fa:	426d      	negs	r5, r5
 80069fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a00:	4858      	ldr	r0, [pc, #352]	@ (8006b64 <_printf_i+0x234>)
 8006a02:	230a      	movs	r3, #10
 8006a04:	e011      	b.n	8006a2a <_printf_i+0xfa>
 8006a06:	6821      	ldr	r1, [r4, #0]
 8006a08:	6833      	ldr	r3, [r6, #0]
 8006a0a:	0608      	lsls	r0, r1, #24
 8006a0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a10:	d402      	bmi.n	8006a18 <_printf_i+0xe8>
 8006a12:	0649      	lsls	r1, r1, #25
 8006a14:	bf48      	it	mi
 8006a16:	b2ad      	uxthmi	r5, r5
 8006a18:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a1a:	4852      	ldr	r0, [pc, #328]	@ (8006b64 <_printf_i+0x234>)
 8006a1c:	6033      	str	r3, [r6, #0]
 8006a1e:	bf14      	ite	ne
 8006a20:	230a      	movne	r3, #10
 8006a22:	2308      	moveq	r3, #8
 8006a24:	2100      	movs	r1, #0
 8006a26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a2a:	6866      	ldr	r6, [r4, #4]
 8006a2c:	60a6      	str	r6, [r4, #8]
 8006a2e:	2e00      	cmp	r6, #0
 8006a30:	db05      	blt.n	8006a3e <_printf_i+0x10e>
 8006a32:	6821      	ldr	r1, [r4, #0]
 8006a34:	432e      	orrs	r6, r5
 8006a36:	f021 0104 	bic.w	r1, r1, #4
 8006a3a:	6021      	str	r1, [r4, #0]
 8006a3c:	d04b      	beq.n	8006ad6 <_printf_i+0x1a6>
 8006a3e:	4616      	mov	r6, r2
 8006a40:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a44:	fb03 5711 	mls	r7, r3, r1, r5
 8006a48:	5dc7      	ldrb	r7, [r0, r7]
 8006a4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a4e:	462f      	mov	r7, r5
 8006a50:	42bb      	cmp	r3, r7
 8006a52:	460d      	mov	r5, r1
 8006a54:	d9f4      	bls.n	8006a40 <_printf_i+0x110>
 8006a56:	2b08      	cmp	r3, #8
 8006a58:	d10b      	bne.n	8006a72 <_printf_i+0x142>
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	07df      	lsls	r7, r3, #31
 8006a5e:	d508      	bpl.n	8006a72 <_printf_i+0x142>
 8006a60:	6923      	ldr	r3, [r4, #16]
 8006a62:	6861      	ldr	r1, [r4, #4]
 8006a64:	4299      	cmp	r1, r3
 8006a66:	bfde      	ittt	le
 8006a68:	2330      	movle	r3, #48	@ 0x30
 8006a6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a6e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006a72:	1b92      	subs	r2, r2, r6
 8006a74:	6122      	str	r2, [r4, #16]
 8006a76:	f8cd a000 	str.w	sl, [sp]
 8006a7a:	464b      	mov	r3, r9
 8006a7c:	aa03      	add	r2, sp, #12
 8006a7e:	4621      	mov	r1, r4
 8006a80:	4640      	mov	r0, r8
 8006a82:	f7ff fee7 	bl	8006854 <_printf_common>
 8006a86:	3001      	adds	r0, #1
 8006a88:	d14a      	bne.n	8006b20 <_printf_i+0x1f0>
 8006a8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a8e:	b004      	add	sp, #16
 8006a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	f043 0320 	orr.w	r3, r3, #32
 8006a9a:	6023      	str	r3, [r4, #0]
 8006a9c:	4832      	ldr	r0, [pc, #200]	@ (8006b68 <_printf_i+0x238>)
 8006a9e:	2778      	movs	r7, #120	@ 0x78
 8006aa0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	6831      	ldr	r1, [r6, #0]
 8006aa8:	061f      	lsls	r7, r3, #24
 8006aaa:	f851 5b04 	ldr.w	r5, [r1], #4
 8006aae:	d402      	bmi.n	8006ab6 <_printf_i+0x186>
 8006ab0:	065f      	lsls	r7, r3, #25
 8006ab2:	bf48      	it	mi
 8006ab4:	b2ad      	uxthmi	r5, r5
 8006ab6:	6031      	str	r1, [r6, #0]
 8006ab8:	07d9      	lsls	r1, r3, #31
 8006aba:	bf44      	itt	mi
 8006abc:	f043 0320 	orrmi.w	r3, r3, #32
 8006ac0:	6023      	strmi	r3, [r4, #0]
 8006ac2:	b11d      	cbz	r5, 8006acc <_printf_i+0x19c>
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	e7ad      	b.n	8006a24 <_printf_i+0xf4>
 8006ac8:	4826      	ldr	r0, [pc, #152]	@ (8006b64 <_printf_i+0x234>)
 8006aca:	e7e9      	b.n	8006aa0 <_printf_i+0x170>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	f023 0320 	bic.w	r3, r3, #32
 8006ad2:	6023      	str	r3, [r4, #0]
 8006ad4:	e7f6      	b.n	8006ac4 <_printf_i+0x194>
 8006ad6:	4616      	mov	r6, r2
 8006ad8:	e7bd      	b.n	8006a56 <_printf_i+0x126>
 8006ada:	6833      	ldr	r3, [r6, #0]
 8006adc:	6825      	ldr	r5, [r4, #0]
 8006ade:	6961      	ldr	r1, [r4, #20]
 8006ae0:	1d18      	adds	r0, r3, #4
 8006ae2:	6030      	str	r0, [r6, #0]
 8006ae4:	062e      	lsls	r6, r5, #24
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	d501      	bpl.n	8006aee <_printf_i+0x1be>
 8006aea:	6019      	str	r1, [r3, #0]
 8006aec:	e002      	b.n	8006af4 <_printf_i+0x1c4>
 8006aee:	0668      	lsls	r0, r5, #25
 8006af0:	d5fb      	bpl.n	8006aea <_printf_i+0x1ba>
 8006af2:	8019      	strh	r1, [r3, #0]
 8006af4:	2300      	movs	r3, #0
 8006af6:	6123      	str	r3, [r4, #16]
 8006af8:	4616      	mov	r6, r2
 8006afa:	e7bc      	b.n	8006a76 <_printf_i+0x146>
 8006afc:	6833      	ldr	r3, [r6, #0]
 8006afe:	1d1a      	adds	r2, r3, #4
 8006b00:	6032      	str	r2, [r6, #0]
 8006b02:	681e      	ldr	r6, [r3, #0]
 8006b04:	6862      	ldr	r2, [r4, #4]
 8006b06:	2100      	movs	r1, #0
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f7f9 fb89 	bl	8000220 <memchr>
 8006b0e:	b108      	cbz	r0, 8006b14 <_printf_i+0x1e4>
 8006b10:	1b80      	subs	r0, r0, r6
 8006b12:	6060      	str	r0, [r4, #4]
 8006b14:	6863      	ldr	r3, [r4, #4]
 8006b16:	6123      	str	r3, [r4, #16]
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b1e:	e7aa      	b.n	8006a76 <_printf_i+0x146>
 8006b20:	6923      	ldr	r3, [r4, #16]
 8006b22:	4632      	mov	r2, r6
 8006b24:	4649      	mov	r1, r9
 8006b26:	4640      	mov	r0, r8
 8006b28:	47d0      	blx	sl
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	d0ad      	beq.n	8006a8a <_printf_i+0x15a>
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	079b      	lsls	r3, r3, #30
 8006b32:	d413      	bmi.n	8006b5c <_printf_i+0x22c>
 8006b34:	68e0      	ldr	r0, [r4, #12]
 8006b36:	9b03      	ldr	r3, [sp, #12]
 8006b38:	4298      	cmp	r0, r3
 8006b3a:	bfb8      	it	lt
 8006b3c:	4618      	movlt	r0, r3
 8006b3e:	e7a6      	b.n	8006a8e <_printf_i+0x15e>
 8006b40:	2301      	movs	r3, #1
 8006b42:	4632      	mov	r2, r6
 8006b44:	4649      	mov	r1, r9
 8006b46:	4640      	mov	r0, r8
 8006b48:	47d0      	blx	sl
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	d09d      	beq.n	8006a8a <_printf_i+0x15a>
 8006b4e:	3501      	adds	r5, #1
 8006b50:	68e3      	ldr	r3, [r4, #12]
 8006b52:	9903      	ldr	r1, [sp, #12]
 8006b54:	1a5b      	subs	r3, r3, r1
 8006b56:	42ab      	cmp	r3, r5
 8006b58:	dcf2      	bgt.n	8006b40 <_printf_i+0x210>
 8006b5a:	e7eb      	b.n	8006b34 <_printf_i+0x204>
 8006b5c:	2500      	movs	r5, #0
 8006b5e:	f104 0619 	add.w	r6, r4, #25
 8006b62:	e7f5      	b.n	8006b50 <_printf_i+0x220>
 8006b64:	08007424 	.word	0x08007424
 8006b68:	08007435 	.word	0x08007435

08006b6c <__swbuf_r>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	460e      	mov	r6, r1
 8006b70:	4614      	mov	r4, r2
 8006b72:	4605      	mov	r5, r0
 8006b74:	b118      	cbz	r0, 8006b7e <__swbuf_r+0x12>
 8006b76:	6a03      	ldr	r3, [r0, #32]
 8006b78:	b90b      	cbnz	r3, 8006b7e <__swbuf_r+0x12>
 8006b7a:	f7ff fa41 	bl	8006000 <__sinit>
 8006b7e:	69a3      	ldr	r3, [r4, #24]
 8006b80:	60a3      	str	r3, [r4, #8]
 8006b82:	89a3      	ldrh	r3, [r4, #12]
 8006b84:	071a      	lsls	r2, r3, #28
 8006b86:	d501      	bpl.n	8006b8c <__swbuf_r+0x20>
 8006b88:	6923      	ldr	r3, [r4, #16]
 8006b8a:	b943      	cbnz	r3, 8006b9e <__swbuf_r+0x32>
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f000 f82a 	bl	8006be8 <__swsetup_r>
 8006b94:	b118      	cbz	r0, 8006b9e <__swbuf_r+0x32>
 8006b96:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	6922      	ldr	r2, [r4, #16]
 8006ba2:	1a98      	subs	r0, r3, r2
 8006ba4:	6963      	ldr	r3, [r4, #20]
 8006ba6:	b2f6      	uxtb	r6, r6
 8006ba8:	4283      	cmp	r3, r0
 8006baa:	4637      	mov	r7, r6
 8006bac:	dc05      	bgt.n	8006bba <__swbuf_r+0x4e>
 8006bae:	4621      	mov	r1, r4
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	f7ff fcbd 	bl	8006530 <_fflush_r>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d1ed      	bne.n	8006b96 <__swbuf_r+0x2a>
 8006bba:	68a3      	ldr	r3, [r4, #8]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	60a3      	str	r3, [r4, #8]
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	6022      	str	r2, [r4, #0]
 8006bc6:	701e      	strb	r6, [r3, #0]
 8006bc8:	6962      	ldr	r2, [r4, #20]
 8006bca:	1c43      	adds	r3, r0, #1
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d004      	beq.n	8006bda <__swbuf_r+0x6e>
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	07db      	lsls	r3, r3, #31
 8006bd4:	d5e1      	bpl.n	8006b9a <__swbuf_r+0x2e>
 8006bd6:	2e0a      	cmp	r6, #10
 8006bd8:	d1df      	bne.n	8006b9a <__swbuf_r+0x2e>
 8006bda:	4621      	mov	r1, r4
 8006bdc:	4628      	mov	r0, r5
 8006bde:	f7ff fca7 	bl	8006530 <_fflush_r>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d0d9      	beq.n	8006b9a <__swbuf_r+0x2e>
 8006be6:	e7d6      	b.n	8006b96 <__swbuf_r+0x2a>

08006be8 <__swsetup_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4b29      	ldr	r3, [pc, #164]	@ (8006c90 <__swsetup_r+0xa8>)
 8006bec:	4605      	mov	r5, r0
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	460c      	mov	r4, r1
 8006bf2:	b118      	cbz	r0, 8006bfc <__swsetup_r+0x14>
 8006bf4:	6a03      	ldr	r3, [r0, #32]
 8006bf6:	b90b      	cbnz	r3, 8006bfc <__swsetup_r+0x14>
 8006bf8:	f7ff fa02 	bl	8006000 <__sinit>
 8006bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c00:	0719      	lsls	r1, r3, #28
 8006c02:	d422      	bmi.n	8006c4a <__swsetup_r+0x62>
 8006c04:	06da      	lsls	r2, r3, #27
 8006c06:	d407      	bmi.n	8006c18 <__swsetup_r+0x30>
 8006c08:	2209      	movs	r2, #9
 8006c0a:	602a      	str	r2, [r5, #0]
 8006c0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c10:	81a3      	strh	r3, [r4, #12]
 8006c12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c16:	e033      	b.n	8006c80 <__swsetup_r+0x98>
 8006c18:	0758      	lsls	r0, r3, #29
 8006c1a:	d512      	bpl.n	8006c42 <__swsetup_r+0x5a>
 8006c1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c1e:	b141      	cbz	r1, 8006c32 <__swsetup_r+0x4a>
 8006c20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c24:	4299      	cmp	r1, r3
 8006c26:	d002      	beq.n	8006c2e <__swsetup_r+0x46>
 8006c28:	4628      	mov	r0, r5
 8006c2a:	f7ff fafd 	bl	8006228 <_free_r>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c32:	89a3      	ldrh	r3, [r4, #12]
 8006c34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c38:	81a3      	strh	r3, [r4, #12]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	6063      	str	r3, [r4, #4]
 8006c3e:	6923      	ldr	r3, [r4, #16]
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	f043 0308 	orr.w	r3, r3, #8
 8006c48:	81a3      	strh	r3, [r4, #12]
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	b94b      	cbnz	r3, 8006c62 <__swsetup_r+0x7a>
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c58:	d003      	beq.n	8006c62 <__swsetup_r+0x7a>
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	f000 f883 	bl	8006d68 <__smakebuf_r>
 8006c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c66:	f013 0201 	ands.w	r2, r3, #1
 8006c6a:	d00a      	beq.n	8006c82 <__swsetup_r+0x9a>
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	60a2      	str	r2, [r4, #8]
 8006c70:	6962      	ldr	r2, [r4, #20]
 8006c72:	4252      	negs	r2, r2
 8006c74:	61a2      	str	r2, [r4, #24]
 8006c76:	6922      	ldr	r2, [r4, #16]
 8006c78:	b942      	cbnz	r2, 8006c8c <__swsetup_r+0xa4>
 8006c7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c7e:	d1c5      	bne.n	8006c0c <__swsetup_r+0x24>
 8006c80:	bd38      	pop	{r3, r4, r5, pc}
 8006c82:	0799      	lsls	r1, r3, #30
 8006c84:	bf58      	it	pl
 8006c86:	6962      	ldrpl	r2, [r4, #20]
 8006c88:	60a2      	str	r2, [r4, #8]
 8006c8a:	e7f4      	b.n	8006c76 <__swsetup_r+0x8e>
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	e7f7      	b.n	8006c80 <__swsetup_r+0x98>
 8006c90:	2000277c 	.word	0x2000277c

08006c94 <_raise_r>:
 8006c94:	291f      	cmp	r1, #31
 8006c96:	b538      	push	{r3, r4, r5, lr}
 8006c98:	4605      	mov	r5, r0
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	d904      	bls.n	8006ca8 <_raise_r+0x14>
 8006c9e:	2316      	movs	r3, #22
 8006ca0:	6003      	str	r3, [r0, #0]
 8006ca2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006caa:	b112      	cbz	r2, 8006cb2 <_raise_r+0x1e>
 8006cac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006cb0:	b94b      	cbnz	r3, 8006cc6 <_raise_r+0x32>
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	f000 f830 	bl	8006d18 <_getpid_r>
 8006cb8:	4622      	mov	r2, r4
 8006cba:	4601      	mov	r1, r0
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cc2:	f000 b817 	b.w	8006cf4 <_kill_r>
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d00a      	beq.n	8006ce0 <_raise_r+0x4c>
 8006cca:	1c59      	adds	r1, r3, #1
 8006ccc:	d103      	bne.n	8006cd6 <_raise_r+0x42>
 8006cce:	2316      	movs	r3, #22
 8006cd0:	6003      	str	r3, [r0, #0]
 8006cd2:	2001      	movs	r0, #1
 8006cd4:	e7e7      	b.n	8006ca6 <_raise_r+0x12>
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006cdc:	4620      	mov	r0, r4
 8006cde:	4798      	blx	r3
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	e7e0      	b.n	8006ca6 <_raise_r+0x12>

08006ce4 <raise>:
 8006ce4:	4b02      	ldr	r3, [pc, #8]	@ (8006cf0 <raise+0xc>)
 8006ce6:	4601      	mov	r1, r0
 8006ce8:	6818      	ldr	r0, [r3, #0]
 8006cea:	f7ff bfd3 	b.w	8006c94 <_raise_r>
 8006cee:	bf00      	nop
 8006cf0:	2000277c 	.word	0x2000277c

08006cf4 <_kill_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	4d07      	ldr	r5, [pc, #28]	@ (8006d14 <_kill_r+0x20>)
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	4608      	mov	r0, r1
 8006cfe:	4611      	mov	r1, r2
 8006d00:	602b      	str	r3, [r5, #0]
 8006d02:	f7fa fdf9 	bl	80018f8 <_kill>
 8006d06:	1c43      	adds	r3, r0, #1
 8006d08:	d102      	bne.n	8006d10 <_kill_r+0x1c>
 8006d0a:	682b      	ldr	r3, [r5, #0]
 8006d0c:	b103      	cbz	r3, 8006d10 <_kill_r+0x1c>
 8006d0e:	6023      	str	r3, [r4, #0]
 8006d10:	bd38      	pop	{r3, r4, r5, pc}
 8006d12:	bf00      	nop
 8006d14:	20002bd0 	.word	0x20002bd0

08006d18 <_getpid_r>:
 8006d18:	f7fa bde6 	b.w	80018e8 <_getpid>

08006d1c <__swhatbuf_r>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	460c      	mov	r4, r1
 8006d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d24:	2900      	cmp	r1, #0
 8006d26:	b096      	sub	sp, #88	@ 0x58
 8006d28:	4615      	mov	r5, r2
 8006d2a:	461e      	mov	r6, r3
 8006d2c:	da0d      	bge.n	8006d4a <__swhatbuf_r+0x2e>
 8006d2e:	89a3      	ldrh	r3, [r4, #12]
 8006d30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006d34:	f04f 0100 	mov.w	r1, #0
 8006d38:	bf14      	ite	ne
 8006d3a:	2340      	movne	r3, #64	@ 0x40
 8006d3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006d40:	2000      	movs	r0, #0
 8006d42:	6031      	str	r1, [r6, #0]
 8006d44:	602b      	str	r3, [r5, #0]
 8006d46:	b016      	add	sp, #88	@ 0x58
 8006d48:	bd70      	pop	{r4, r5, r6, pc}
 8006d4a:	466a      	mov	r2, sp
 8006d4c:	f000 f848 	bl	8006de0 <_fstat_r>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	dbec      	blt.n	8006d2e <__swhatbuf_r+0x12>
 8006d54:	9901      	ldr	r1, [sp, #4]
 8006d56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006d5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d5e:	4259      	negs	r1, r3
 8006d60:	4159      	adcs	r1, r3
 8006d62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d66:	e7eb      	b.n	8006d40 <__swhatbuf_r+0x24>

08006d68 <__smakebuf_r>:
 8006d68:	898b      	ldrh	r3, [r1, #12]
 8006d6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d6c:	079d      	lsls	r5, r3, #30
 8006d6e:	4606      	mov	r6, r0
 8006d70:	460c      	mov	r4, r1
 8006d72:	d507      	bpl.n	8006d84 <__smakebuf_r+0x1c>
 8006d74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	6123      	str	r3, [r4, #16]
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	6163      	str	r3, [r4, #20]
 8006d80:	b003      	add	sp, #12
 8006d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d84:	ab01      	add	r3, sp, #4
 8006d86:	466a      	mov	r2, sp
 8006d88:	f7ff ffc8 	bl	8006d1c <__swhatbuf_r>
 8006d8c:	9f00      	ldr	r7, [sp, #0]
 8006d8e:	4605      	mov	r5, r0
 8006d90:	4639      	mov	r1, r7
 8006d92:	4630      	mov	r0, r6
 8006d94:	f7ff fabc 	bl	8006310 <_malloc_r>
 8006d98:	b948      	cbnz	r0, 8006dae <__smakebuf_r+0x46>
 8006d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d9e:	059a      	lsls	r2, r3, #22
 8006da0:	d4ee      	bmi.n	8006d80 <__smakebuf_r+0x18>
 8006da2:	f023 0303 	bic.w	r3, r3, #3
 8006da6:	f043 0302 	orr.w	r3, r3, #2
 8006daa:	81a3      	strh	r3, [r4, #12]
 8006dac:	e7e2      	b.n	8006d74 <__smakebuf_r+0xc>
 8006dae:	89a3      	ldrh	r3, [r4, #12]
 8006db0:	6020      	str	r0, [r4, #0]
 8006db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006db6:	81a3      	strh	r3, [r4, #12]
 8006db8:	9b01      	ldr	r3, [sp, #4]
 8006dba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006dbe:	b15b      	cbz	r3, 8006dd8 <__smakebuf_r+0x70>
 8006dc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f000 f81d 	bl	8006e04 <_isatty_r>
 8006dca:	b128      	cbz	r0, 8006dd8 <__smakebuf_r+0x70>
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	f023 0303 	bic.w	r3, r3, #3
 8006dd2:	f043 0301 	orr.w	r3, r3, #1
 8006dd6:	81a3      	strh	r3, [r4, #12]
 8006dd8:	89a3      	ldrh	r3, [r4, #12]
 8006dda:	431d      	orrs	r5, r3
 8006ddc:	81a5      	strh	r5, [r4, #12]
 8006dde:	e7cf      	b.n	8006d80 <__smakebuf_r+0x18>

08006de0 <_fstat_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	4d07      	ldr	r5, [pc, #28]	@ (8006e00 <_fstat_r+0x20>)
 8006de4:	2300      	movs	r3, #0
 8006de6:	4604      	mov	r4, r0
 8006de8:	4608      	mov	r0, r1
 8006dea:	4611      	mov	r1, r2
 8006dec:	602b      	str	r3, [r5, #0]
 8006dee:	f7fa fde3 	bl	80019b8 <_fstat>
 8006df2:	1c43      	adds	r3, r0, #1
 8006df4:	d102      	bne.n	8006dfc <_fstat_r+0x1c>
 8006df6:	682b      	ldr	r3, [r5, #0]
 8006df8:	b103      	cbz	r3, 8006dfc <_fstat_r+0x1c>
 8006dfa:	6023      	str	r3, [r4, #0]
 8006dfc:	bd38      	pop	{r3, r4, r5, pc}
 8006dfe:	bf00      	nop
 8006e00:	20002bd0 	.word	0x20002bd0

08006e04 <_isatty_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4d06      	ldr	r5, [pc, #24]	@ (8006e20 <_isatty_r+0x1c>)
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	602b      	str	r3, [r5, #0]
 8006e10:	f7fa fde2 	bl	80019d8 <_isatty>
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	d102      	bne.n	8006e1e <_isatty_r+0x1a>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	b103      	cbz	r3, 8006e1e <_isatty_r+0x1a>
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
 8006e20:	20002bd0 	.word	0x20002bd0

08006e24 <_init>:
 8006e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e26:	bf00      	nop
 8006e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2a:	bc08      	pop	{r3}
 8006e2c:	469e      	mov	lr, r3
 8006e2e:	4770      	bx	lr

08006e30 <_fini>:
 8006e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e32:	bf00      	nop
 8006e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e36:	bc08      	pop	{r3}
 8006e38:	469e      	mov	lr, r3
 8006e3a:	4770      	bx	lr
