
VideoStm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .screen       00002ee0  20000000  20000000  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007028  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000bb4  08007208  08007208  00008208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08007dbc  08007dbc  0006ac00  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  08007dbc  08007dbc  00008dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08007dc4  08007dc4  0006ac00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08007dc4  08007dc4  00008dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08007dc8  08007dc8  00008dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000ba4  20002ee0  08007dcc  00008ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000428  20003a84  08008970  00009a84  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003eac  08008970  00009eac  2**0
                  ALLOC
 12 .screenBB     0005dc00  22000000  22000000  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 00000030  00000000  00000000  0006ac00  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000eb55  00000000  00000000  0006ac30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000027f8  00000000  00000000  00079785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fe8  00000000  00000000  0007bf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002598b  00000000  00000000  0007cf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000113d5  00000000  00000000  000a28f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f846a  00000000  00000000  000b3cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001ac132  2**0
                  CONTENTS, READONLY
 21 .debug_rnglists 00000c53  00000000  00000000  001ac175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000047f4  00000000  00000000  001acdc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004d  00000000  00000000  001b15bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20003a84 	.word	0x20003a84
 80001fc:	00000000 	.word	0x00000000
 8000200:	080071f0 	.word	0x080071f0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20003a88 	.word	0x20003a88
 800021c:	080071f0 	.word	0x080071f0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <gdiBitBlt>:
		h			Bitmap height, in pixels
		bm			Pointer to the bitmap start position

	return			none
*/
void gdiBitBlt(PGDI_RECT prc, int16_t x, int16_t y, int16_t w, int16_t h, pBMP bm) {
 80002d0:	b490      	push	{r4, r7}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	4608      	mov	r0, r1
 80002da:	4611      	mov	r1, r2
 80002dc:	461a      	mov	r2, r3
 80002de:	4603      	mov	r3, r0
 80002e0:	817b      	strh	r3, [r7, #10]
 80002e2:	460b      	mov	r3, r1
 80002e4:	813b      	strh	r3, [r7, #8]
 80002e6:	4613      	mov	r3, r2
 80002e8:	80fb      	strh	r3, [r7, #6]
int16_t todo;
uint16_t alignment;

//	Calculate clipping region

	if (prc != NULL) {
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d00f      	beq.n	8000310 <gdiBitBlt+0x40>
		x += prc->x;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002f6:	b29a      	uxth	r2, r3
 80002f8:	897b      	ldrh	r3, [r7, #10]
 80002fa:	4413      	add	r3, r2
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	817b      	strh	r3, [r7, #10]
		y += prc->y;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000306:	b29a      	uxth	r2, r3
 8000308:	893b      	ldrh	r3, [r7, #8]
 800030a:	4413      	add	r3, r2
 800030c:	b29b      	uxth	r3, r3
 800030e:	813b      	strh	r3, [r7, #8]
//??		w = min(prc->w, VID_PIXELS_X-x);	// clip X
//??		h = min(prc->w, VID_PIXELS_Y-y);	// clip Y
	}
	alignment = x & 0b0000000000001111;
 8000310:	897b      	ldrh	r3, [r7, #10]
 8000312:	f003 030f 	and.w	r3, r3, #15
 8000316:	82bb      	strh	r3, [r7, #20]
	for(;--h >= 0; y++) {
 8000318:	e2cc      	b.n	80008b4 <gdiBitBlt+0x5e4>
		for (todo = w; todo>0;) {
 800031a:	88fb      	ldrh	r3, [r7, #6]
 800031c:	82fb      	strh	r3, [r7, #22]
 800031e:	e2be      	b.n	800089e <gdiBitBlt+0x5ce>
			if (todo >= 9) {
 8000320:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000324:	2b08      	cmp	r3, #8
 8000326:	dd2d      	ble.n	8000384 <gdiBitBlt+0xb4>
				bitmask.word = (todo >= 16) ?
									0xFFFF		<< (16-alignment):
 8000328:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800032c:	2b0f      	cmp	r3, #15
 800032e:	dd08      	ble.n	8000342 <gdiBitBlt+0x72>
 8000330:	8abb      	ldrh	r3, [r7, #20]
 8000332:	f1c3 0310 	rsb	r3, r3, #16
 8000336:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	461a      	mov	r2, r3
 8000340:	e00c      	b.n	800035c <gdiBitBlt+0x8c>
						masktable[todo-1]		<< (16-alignment);
 8000342:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000346:	3b01      	subs	r3, #1
 8000348:	4a79      	ldr	r2, [pc, #484]	@ (8000530 <gdiBitBlt+0x260>)
 800034a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800034e:	461a      	mov	r2, r3
 8000350:	8abb      	ldrh	r3, [r7, #20]
 8000352:	f1c3 0310 	rsb	r3, r3, #16
 8000356:	fa02 f303 	lsl.w	r3, r2, r3
									0xFFFF		<< (16-alignment):
 800035a:	461a      	mov	r2, r3
				bitmask.word = (todo >= 16) ?
 800035c:	4b75      	ldr	r3, [pc, #468]	@ (8000534 <gdiBitBlt+0x264>)
 800035e:	601a      	str	r2, [r3, #0]
				pattern.word = *bm.halfwords++	<< (16-alignment);
 8000360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000362:	1c9a      	adds	r2, r3, #2
 8000364:	627a      	str	r2, [r7, #36]	@ 0x24
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	461a      	mov	r2, r3
 800036a:	8abb      	ldrh	r3, [r7, #20]
 800036c:	f1c3 0310 	rsb	r3, r3, #16
 8000370:	fa02 f303 	lsl.w	r3, r2, r3
 8000374:	461a      	mov	r2, r3
 8000376:	4b70      	ldr	r3, [pc, #448]	@ (8000538 <gdiBitBlt+0x268>)
 8000378:	601a      	str	r2, [r3, #0]
				todo -= 16;
 800037a:	8afb      	ldrh	r3, [r7, #22]
 800037c:	3b10      	subs	r3, #16
 800037e:	b29b      	uxth	r3, r3
 8000380:	82fb      	strh	r3, [r7, #22]
 8000382:	e01f      	b.n	80003c4 <gdiBitBlt+0xf4>
			} else {
				bitmask.word = masktable[todo-1] << (16-alignment);
 8000384:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000388:	3b01      	subs	r3, #1
 800038a:	4a69      	ldr	r2, [pc, #420]	@ (8000530 <gdiBitBlt+0x260>)
 800038c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000390:	461a      	mov	r2, r3
 8000392:	8abb      	ldrh	r3, [r7, #20]
 8000394:	f1c3 0310 	rsb	r3, r3, #16
 8000398:	fa02 f303 	lsl.w	r3, r2, r3
 800039c:	461a      	mov	r2, r3
 800039e:	4b65      	ldr	r3, [pc, #404]	@ (8000534 <gdiBitBlt+0x264>)
 80003a0:	601a      	str	r2, [r3, #0]
				pattern.word = *bm.bytesinROM++  << (24-alignment);
 80003a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003a4:	1c5a      	adds	r2, r3, #1
 80003a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	461a      	mov	r2, r3
 80003ac:	8abb      	ldrh	r3, [r7, #20]
 80003ae:	f1c3 0318 	rsb	r3, r3, #24
 80003b2:	fa02 f303 	lsl.w	r3, r2, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	4b5f      	ldr	r3, [pc, #380]	@ (8000538 <gdiBitBlt+0x268>)
 80003ba:	601a      	str	r2, [r3, #0]
				todo -= 8;
 80003bc:	8afb      	ldrh	r3, [r7, #22]
 80003be:	3b08      	subs	r3, #8
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	82fb      	strh	r3, [r7, #22]
			}
			switch(rop) {
 80003c4:	4b5d      	ldr	r3, [pc, #372]	@ (800053c <gdiBitBlt+0x26c>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b04      	cmp	r3, #4
 80003ca:	f200 8268 	bhi.w	800089e <gdiBitBlt+0x5ce>
 80003ce:	a201      	add	r2, pc, #4	@ (adr r2, 80003d4 <gdiBitBlt+0x104>)
 80003d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d4:	080003e9 	.word	0x080003e9
 80003d8:	08000545 	.word	0x08000545
 80003dc:	080007cd 	.word	0x080007cd
 80003e0:	0800068d 	.word	0x0800068d
 80003e4:	0800072d 	.word	0x0800072d
				case GDI_ROP_COPY:
					screen[y][x>>4] &= ~bitmask.halfword[1];
 80003e8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80003ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80003f0:	111b      	asrs	r3, r3, #4
 80003f2:	b21b      	sxth	r3, r3
 80003f4:	4618      	mov	r0, r3
 80003f6:	4952      	ldr	r1, [pc, #328]	@ (8000540 <gdiBitBlt+0x270>)
 80003f8:	4613      	mov	r3, r2
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4413      	add	r3, r2
 80003fe:	009a      	lsls	r2, r3, #2
 8000400:	4413      	add	r3, r2
 8000402:	4403      	add	r3, r0
 8000404:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000408:	b21a      	sxth	r2, r3
 800040a:	4b4a      	ldr	r3, [pc, #296]	@ (8000534 <gdiBitBlt+0x264>)
 800040c:	885b      	ldrh	r3, [r3, #2]
 800040e:	b21b      	sxth	r3, r3
 8000410:	43db      	mvns	r3, r3
 8000412:	b21b      	sxth	r3, r3
 8000414:	4013      	ands	r3, r2
 8000416:	b219      	sxth	r1, r3
 8000418:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800041c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000420:	111b      	asrs	r3, r3, #4
 8000422:	b21b      	sxth	r3, r3
 8000424:	461c      	mov	r4, r3
 8000426:	b288      	uxth	r0, r1
 8000428:	4945      	ldr	r1, [pc, #276]	@ (8000540 <gdiBitBlt+0x270>)
 800042a:	4613      	mov	r3, r2
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	4413      	add	r3, r2
 8000430:	009a      	lsls	r2, r3, #2
 8000432:	4413      	add	r3, r2
 8000434:	4423      	add	r3, r4
 8000436:	4602      	mov	r2, r0
 8000438:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					screen[y][x>>4] |=  pattern.halfword[1];
 800043c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000440:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000444:	111b      	asrs	r3, r3, #4
 8000446:	b21b      	sxth	r3, r3
 8000448:	4618      	mov	r0, r3
 800044a:	493d      	ldr	r1, [pc, #244]	@ (8000540 <gdiBitBlt+0x270>)
 800044c:	4613      	mov	r3, r2
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	4413      	add	r3, r2
 8000452:	009a      	lsls	r2, r3, #2
 8000454:	4413      	add	r3, r2
 8000456:	4403      	add	r3, r0
 8000458:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800045c:	4b36      	ldr	r3, [pc, #216]	@ (8000538 <gdiBitBlt+0x268>)
 800045e:	885b      	ldrh	r3, [r3, #2]
 8000460:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000464:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000468:	1100      	asrs	r0, r0, #4
 800046a:	b200      	sxth	r0, r0
 800046c:	4604      	mov	r4, r0
 800046e:	430b      	orrs	r3, r1
 8000470:	b298      	uxth	r0, r3
 8000472:	4933      	ldr	r1, [pc, #204]	@ (8000540 <gdiBitBlt+0x270>)
 8000474:	4613      	mov	r3, r2
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	4413      	add	r3, r2
 800047a:	009a      	lsls	r2, r3, #2
 800047c:	4413      	add	r3, r2
 800047e:	4423      	add	r3, r4
 8000480:	4602      	mov	r2, r0
 8000482:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (bitmask.halfword[0] != 0) {
 8000486:	4b2b      	ldr	r3, [pc, #172]	@ (8000534 <gdiBitBlt+0x264>)
 8000488:	881b      	ldrh	r3, [r3, #0]
 800048a:	2b00      	cmp	r3, #0
 800048c:	f000 81fe 	beq.w	800088c <gdiBitBlt+0x5bc>
						screen[y][(x>>4)+1] &= ~bitmask.halfword[0];
 8000490:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000494:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000498:	111b      	asrs	r3, r3, #4
 800049a:	b21b      	sxth	r3, r3
 800049c:	1c59      	adds	r1, r3, #1
 800049e:	4828      	ldr	r0, [pc, #160]	@ (8000540 <gdiBitBlt+0x270>)
 80004a0:	4613      	mov	r3, r2
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	4413      	add	r3, r2
 80004a6:	009a      	lsls	r2, r3, #2
 80004a8:	4413      	add	r3, r2
 80004aa:	440b      	add	r3, r1
 80004ac:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80004b0:	b21a      	sxth	r2, r3
 80004b2:	4b20      	ldr	r3, [pc, #128]	@ (8000534 <gdiBitBlt+0x264>)
 80004b4:	881b      	ldrh	r3, [r3, #0]
 80004b6:	b21b      	sxth	r3, r3
 80004b8:	43db      	mvns	r3, r3
 80004ba:	b21b      	sxth	r3, r3
 80004bc:	4013      	ands	r3, r2
 80004be:	b218      	sxth	r0, r3
 80004c0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004c8:	111b      	asrs	r3, r3, #4
 80004ca:	b21b      	sxth	r3, r3
 80004cc:	1c59      	adds	r1, r3, #1
 80004ce:	b284      	uxth	r4, r0
 80004d0:	481b      	ldr	r0, [pc, #108]	@ (8000540 <gdiBitBlt+0x270>)
 80004d2:	4613      	mov	r3, r2
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	4413      	add	r3, r2
 80004d8:	009a      	lsls	r2, r3, #2
 80004da:	4413      	add	r3, r2
 80004dc:	440b      	add	r3, r1
 80004de:	4622      	mov	r2, r4
 80004e0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						screen[y][(x>>4)+1] |=  pattern.halfword[0];
 80004e4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004ec:	111b      	asrs	r3, r3, #4
 80004ee:	b21b      	sxth	r3, r3
 80004f0:	1c59      	adds	r1, r3, #1
 80004f2:	4813      	ldr	r0, [pc, #76]	@ (8000540 <gdiBitBlt+0x270>)
 80004f4:	4613      	mov	r3, r2
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	4413      	add	r3, r2
 80004fa:	009a      	lsls	r2, r3, #2
 80004fc:	4413      	add	r3, r2
 80004fe:	440b      	add	r3, r1
 8000500:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000504:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <gdiBitBlt+0x268>)
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800050c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000510:	1109      	asrs	r1, r1, #4
 8000512:	b209      	sxth	r1, r1
 8000514:	3101      	adds	r1, #1
 8000516:	4303      	orrs	r3, r0
 8000518:	b29c      	uxth	r4, r3
 800051a:	4809      	ldr	r0, [pc, #36]	@ (8000540 <gdiBitBlt+0x270>)
 800051c:	4613      	mov	r3, r2
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	4413      	add	r3, r2
 8000522:	009a      	lsls	r2, r3, #2
 8000524:	4413      	add	r3, r2
 8000526:	440b      	add	r3, r1
 8000528:	4622      	mov	r2, r4
 800052a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					}
					break;
 800052e:	e1ad      	b.n	800088c <gdiBitBlt+0x5bc>
 8000530:	0800774c 	.word	0x0800774c
 8000534:	20003aa4 	.word	0x20003aa4
 8000538:	20003aa0 	.word	0x20003aa0
 800053c:	20002ee0 	.word	0x20002ee0
 8000540:	20000000 	.word	0x20000000
				case GDI_ROP_BONW:	// inverse video
					screen[y][x>>4] |=  bitmask.halfword[1];
 8000544:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000548:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800054c:	111b      	asrs	r3, r3, #4
 800054e:	b21b      	sxth	r3, r3
 8000550:	4618      	mov	r0, r3
 8000552:	49cb      	ldr	r1, [pc, #812]	@ (8000880 <gdiBitBlt+0x5b0>)
 8000554:	4613      	mov	r3, r2
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	4413      	add	r3, r2
 800055a:	009a      	lsls	r2, r3, #2
 800055c:	4413      	add	r3, r2
 800055e:	4403      	add	r3, r0
 8000560:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000564:	4bc7      	ldr	r3, [pc, #796]	@ (8000884 <gdiBitBlt+0x5b4>)
 8000566:	885b      	ldrh	r3, [r3, #2]
 8000568:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800056c:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000570:	1100      	asrs	r0, r0, #4
 8000572:	b200      	sxth	r0, r0
 8000574:	4604      	mov	r4, r0
 8000576:	430b      	orrs	r3, r1
 8000578:	b298      	uxth	r0, r3
 800057a:	49c1      	ldr	r1, [pc, #772]	@ (8000880 <gdiBitBlt+0x5b0>)
 800057c:	4613      	mov	r3, r2
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	4413      	add	r3, r2
 8000582:	009a      	lsls	r2, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	4423      	add	r3, r4
 8000588:	4602      	mov	r2, r0
 800058a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					screen[y][x>>4] &= ~pattern.halfword[1];
 800058e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000592:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000596:	111b      	asrs	r3, r3, #4
 8000598:	b21b      	sxth	r3, r3
 800059a:	4618      	mov	r0, r3
 800059c:	49b8      	ldr	r1, [pc, #736]	@ (8000880 <gdiBitBlt+0x5b0>)
 800059e:	4613      	mov	r3, r2
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	4413      	add	r3, r2
 80005a4:	009a      	lsls	r2, r3, #2
 80005a6:	4413      	add	r3, r2
 80005a8:	4403      	add	r3, r0
 80005aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	4bb5      	ldr	r3, [pc, #724]	@ (8000888 <gdiBitBlt+0x5b8>)
 80005b2:	885b      	ldrh	r3, [r3, #2]
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	43db      	mvns	r3, r3
 80005b8:	b21b      	sxth	r3, r3
 80005ba:	4013      	ands	r3, r2
 80005bc:	b219      	sxth	r1, r3
 80005be:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005c6:	111b      	asrs	r3, r3, #4
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	461c      	mov	r4, r3
 80005cc:	b288      	uxth	r0, r1
 80005ce:	49ac      	ldr	r1, [pc, #688]	@ (8000880 <gdiBitBlt+0x5b0>)
 80005d0:	4613      	mov	r3, r2
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	4413      	add	r3, r2
 80005d6:	009a      	lsls	r2, r3, #2
 80005d8:	4413      	add	r3, r2
 80005da:	4423      	add	r3, r4
 80005dc:	4602      	mov	r2, r0
 80005de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (bitmask.halfword[0] != 0) {
 80005e2:	4ba8      	ldr	r3, [pc, #672]	@ (8000884 <gdiBitBlt+0x5b4>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	f000 8152 	beq.w	8000890 <gdiBitBlt+0x5c0>
						screen[y][(x>>4)+1] |=  bitmask.halfword[0];
 80005ec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005f4:	111b      	asrs	r3, r3, #4
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	1c59      	adds	r1, r3, #1
 80005fa:	48a1      	ldr	r0, [pc, #644]	@ (8000880 <gdiBitBlt+0x5b0>)
 80005fc:	4613      	mov	r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	4413      	add	r3, r2
 8000602:	009a      	lsls	r2, r3, #2
 8000604:	4413      	add	r3, r2
 8000606:	440b      	add	r3, r1
 8000608:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 800060c:	4b9d      	ldr	r3, [pc, #628]	@ (8000884 <gdiBitBlt+0x5b4>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000614:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000618:	1109      	asrs	r1, r1, #4
 800061a:	b209      	sxth	r1, r1
 800061c:	3101      	adds	r1, #1
 800061e:	4303      	orrs	r3, r0
 8000620:	b29c      	uxth	r4, r3
 8000622:	4897      	ldr	r0, [pc, #604]	@ (8000880 <gdiBitBlt+0x5b0>)
 8000624:	4613      	mov	r3, r2
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	4413      	add	r3, r2
 800062a:	009a      	lsls	r2, r3, #2
 800062c:	4413      	add	r3, r2
 800062e:	440b      	add	r3, r1
 8000630:	4622      	mov	r2, r4
 8000632:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						screen[y][(x>>4)+1] &= ~pattern.halfword[0];
 8000636:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800063a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800063e:	111b      	asrs	r3, r3, #4
 8000640:	b21b      	sxth	r3, r3
 8000642:	1c59      	adds	r1, r3, #1
 8000644:	488e      	ldr	r0, [pc, #568]	@ (8000880 <gdiBitBlt+0x5b0>)
 8000646:	4613      	mov	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4413      	add	r3, r2
 800064c:	009a      	lsls	r2, r3, #2
 800064e:	4413      	add	r3, r2
 8000650:	440b      	add	r3, r1
 8000652:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000656:	b21a      	sxth	r2, r3
 8000658:	4b8b      	ldr	r3, [pc, #556]	@ (8000888 <gdiBitBlt+0x5b8>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	b21b      	sxth	r3, r3
 800065e:	43db      	mvns	r3, r3
 8000660:	b21b      	sxth	r3, r3
 8000662:	4013      	ands	r3, r2
 8000664:	b218      	sxth	r0, r3
 8000666:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800066a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800066e:	111b      	asrs	r3, r3, #4
 8000670:	b21b      	sxth	r3, r3
 8000672:	1c59      	adds	r1, r3, #1
 8000674:	b284      	uxth	r4, r0
 8000676:	4882      	ldr	r0, [pc, #520]	@ (8000880 <gdiBitBlt+0x5b0>)
 8000678:	4613      	mov	r3, r2
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	4413      	add	r3, r2
 800067e:	009a      	lsls	r2, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	440b      	add	r3, r1
 8000684:	4622      	mov	r2, r4
 8000686:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					}
					break;
 800068a:	e101      	b.n	8000890 <gdiBitBlt+0x5c0>
				case GDI_ROP_XOR:
					screen[y][x>>4] ^= pattern.halfword[1];
 800068c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000690:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000694:	111b      	asrs	r3, r3, #4
 8000696:	b21b      	sxth	r3, r3
 8000698:	4618      	mov	r0, r3
 800069a:	4979      	ldr	r1, [pc, #484]	@ (8000880 <gdiBitBlt+0x5b0>)
 800069c:	4613      	mov	r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4413      	add	r3, r2
 80006a2:	009a      	lsls	r2, r3, #2
 80006a4:	4413      	add	r3, r2
 80006a6:	4403      	add	r3, r0
 80006a8:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80006ac:	4b76      	ldr	r3, [pc, #472]	@ (8000888 <gdiBitBlt+0x5b8>)
 80006ae:	885b      	ldrh	r3, [r3, #2]
 80006b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006b4:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80006b8:	1100      	asrs	r0, r0, #4
 80006ba:	b200      	sxth	r0, r0
 80006bc:	4604      	mov	r4, r0
 80006be:	404b      	eors	r3, r1
 80006c0:	b298      	uxth	r0, r3
 80006c2:	496f      	ldr	r1, [pc, #444]	@ (8000880 <gdiBitBlt+0x5b0>)
 80006c4:	4613      	mov	r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	4413      	add	r3, r2
 80006ca:	009a      	lsls	r2, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	4423      	add	r3, r4
 80006d0:	4602      	mov	r2, r0
 80006d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 80006d6:	4b6c      	ldr	r3, [pc, #432]	@ (8000888 <gdiBitBlt+0x5b8>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	f000 80da 	beq.w	8000894 <gdiBitBlt+0x5c4>
						screen[y][(x>>4)+1] ^= pattern.halfword[0];
 80006e0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80006e8:	111b      	asrs	r3, r3, #4
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	1c59      	adds	r1, r3, #1
 80006ee:	4864      	ldr	r0, [pc, #400]	@ (8000880 <gdiBitBlt+0x5b0>)
 80006f0:	4613      	mov	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	009a      	lsls	r2, r3, #2
 80006f8:	4413      	add	r3, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000700:	4b61      	ldr	r3, [pc, #388]	@ (8000888 <gdiBitBlt+0x5b8>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000708:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800070c:	1109      	asrs	r1, r1, #4
 800070e:	b209      	sxth	r1, r1
 8000710:	3101      	adds	r1, #1
 8000712:	4043      	eors	r3, r0
 8000714:	b29c      	uxth	r4, r3
 8000716:	485a      	ldr	r0, [pc, #360]	@ (8000880 <gdiBitBlt+0x5b0>)
 8000718:	4613      	mov	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4413      	add	r3, r2
 800071e:	009a      	lsls	r2, r3, #2
 8000720:	4413      	add	r3, r2
 8000722:	440b      	add	r3, r1
 8000724:	4622      	mov	r2, r4
 8000726:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 800072a:	e0b3      	b.n	8000894 <gdiBitBlt+0x5c4>
				case GDI_ROP_OR:
					screen[y][x>>4] |= pattern.halfword[1];
 800072c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000730:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000734:	111b      	asrs	r3, r3, #4
 8000736:	b21b      	sxth	r3, r3
 8000738:	4618      	mov	r0, r3
 800073a:	4951      	ldr	r1, [pc, #324]	@ (8000880 <gdiBitBlt+0x5b0>)
 800073c:	4613      	mov	r3, r2
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	4413      	add	r3, r2
 8000742:	009a      	lsls	r2, r3, #2
 8000744:	4413      	add	r3, r2
 8000746:	4403      	add	r3, r0
 8000748:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800074c:	4b4e      	ldr	r3, [pc, #312]	@ (8000888 <gdiBitBlt+0x5b8>)
 800074e:	885b      	ldrh	r3, [r3, #2]
 8000750:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000754:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000758:	1100      	asrs	r0, r0, #4
 800075a:	b200      	sxth	r0, r0
 800075c:	4604      	mov	r4, r0
 800075e:	430b      	orrs	r3, r1
 8000760:	b298      	uxth	r0, r3
 8000762:	4947      	ldr	r1, [pc, #284]	@ (8000880 <gdiBitBlt+0x5b0>)
 8000764:	4613      	mov	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	009a      	lsls	r2, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	4423      	add	r3, r4
 8000770:	4602      	mov	r2, r0
 8000772:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 8000776:	4b44      	ldr	r3, [pc, #272]	@ (8000888 <gdiBitBlt+0x5b8>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	f000 808c 	beq.w	8000898 <gdiBitBlt+0x5c8>
						screen[y][(x>>4)+1] |= pattern.halfword[0];
 8000780:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000784:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000788:	111b      	asrs	r3, r3, #4
 800078a:	b21b      	sxth	r3, r3
 800078c:	1c59      	adds	r1, r3, #1
 800078e:	483c      	ldr	r0, [pc, #240]	@ (8000880 <gdiBitBlt+0x5b0>)
 8000790:	4613      	mov	r3, r2
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	4413      	add	r3, r2
 8000796:	009a      	lsls	r2, r3, #2
 8000798:	4413      	add	r3, r2
 800079a:	440b      	add	r3, r1
 800079c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80007a0:	4b39      	ldr	r3, [pc, #228]	@ (8000888 <gdiBitBlt+0x5b8>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80007a8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80007ac:	1109      	asrs	r1, r1, #4
 80007ae:	b209      	sxth	r1, r1
 80007b0:	3101      	adds	r1, #1
 80007b2:	4303      	orrs	r3, r0
 80007b4:	b29c      	uxth	r4, r3
 80007b6:	4832      	ldr	r0, [pc, #200]	@ (8000880 <gdiBitBlt+0x5b0>)
 80007b8:	4613      	mov	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	009a      	lsls	r2, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	440b      	add	r3, r1
 80007c4:	4622      	mov	r2, r4
 80007c6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 80007ca:	e065      	b.n	8000898 <gdiBitBlt+0x5c8>
				case GDI_ROP_NAND:
					screen[y][x>>4] &= ~pattern.halfword[1];
 80007cc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80007d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007d4:	111b      	asrs	r3, r3, #4
 80007d6:	b21b      	sxth	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	4929      	ldr	r1, [pc, #164]	@ (8000880 <gdiBitBlt+0x5b0>)
 80007dc:	4613      	mov	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4413      	add	r3, r2
 80007e2:	009a      	lsls	r2, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	4403      	add	r3, r0
 80007e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007ec:	b21a      	sxth	r2, r3
 80007ee:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <gdiBitBlt+0x5b8>)
 80007f0:	885b      	ldrh	r3, [r3, #2]
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	43db      	mvns	r3, r3
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4013      	ands	r3, r2
 80007fa:	b219      	sxth	r1, r3
 80007fc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000800:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000804:	111b      	asrs	r3, r3, #4
 8000806:	b21b      	sxth	r3, r3
 8000808:	461c      	mov	r4, r3
 800080a:	b288      	uxth	r0, r1
 800080c:	491c      	ldr	r1, [pc, #112]	@ (8000880 <gdiBitBlt+0x5b0>)
 800080e:	4613      	mov	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	4413      	add	r3, r2
 8000814:	009a      	lsls	r2, r3, #2
 8000816:	4413      	add	r3, r2
 8000818:	4423      	add	r3, r4
 800081a:	4602      	mov	r2, r0
 800081c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <gdiBitBlt+0x5b8>)
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d039      	beq.n	800089c <gdiBitBlt+0x5cc>
						screen[y][(x>>4)+1] &= ~pattern.halfword[0];
 8000828:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800082c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000830:	111b      	asrs	r3, r3, #4
 8000832:	b21b      	sxth	r3, r3
 8000834:	1c59      	adds	r1, r3, #1
 8000836:	4812      	ldr	r0, [pc, #72]	@ (8000880 <gdiBitBlt+0x5b0>)
 8000838:	4613      	mov	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	009a      	lsls	r2, r3, #2
 8000840:	4413      	add	r3, r2
 8000842:	440b      	add	r3, r1
 8000844:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000848:	b21a      	sxth	r2, r3
 800084a:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <gdiBitBlt+0x5b8>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	b21b      	sxth	r3, r3
 8000850:	43db      	mvns	r3, r3
 8000852:	b21b      	sxth	r3, r3
 8000854:	4013      	ands	r3, r2
 8000856:	b218      	sxth	r0, r3
 8000858:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800085c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000860:	111b      	asrs	r3, r3, #4
 8000862:	b21b      	sxth	r3, r3
 8000864:	1c59      	adds	r1, r3, #1
 8000866:	b284      	uxth	r4, r0
 8000868:	4805      	ldr	r0, [pc, #20]	@ (8000880 <gdiBitBlt+0x5b0>)
 800086a:	4613      	mov	r3, r2
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	4413      	add	r3, r2
 8000870:	009a      	lsls	r2, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	440b      	add	r3, r1
 8000876:	4622      	mov	r2, r4
 8000878:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 800087c:	e00e      	b.n	800089c <gdiBitBlt+0x5cc>
 800087e:	bf00      	nop
 8000880:	20000000 	.word	0x20000000
 8000884:	20003aa4 	.word	0x20003aa4
 8000888:	20003aa0 	.word	0x20003aa0
					break;
 800088c:	bf00      	nop
 800088e:	e006      	b.n	800089e <gdiBitBlt+0x5ce>
					break;
 8000890:	bf00      	nop
 8000892:	e004      	b.n	800089e <gdiBitBlt+0x5ce>
					break;
 8000894:	bf00      	nop
 8000896:	e002      	b.n	800089e <gdiBitBlt+0x5ce>
					break;
 8000898:	bf00      	nop
 800089a:	e000      	b.n	800089e <gdiBitBlt+0x5ce>
					break;
 800089c:	bf00      	nop
		for (todo = w; todo>0;) {
 800089e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f73f ad3c 	bgt.w	8000320 <gdiBitBlt+0x50>
	for(;--h >= 0; y++) {
 80008a8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	3301      	adds	r3, #1
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	813b      	strh	r3, [r7, #8]
 80008b4:	8c3b      	ldrh	r3, [r7, #32]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	843b      	strh	r3, [r7, #32]
 80008bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	f6bf ad2a 	bge.w	800031a <gdiBitBlt+0x4a>
			}
		}
	}
}
 80008c6:	bf00      	nop
 80008c8:	bf00      	nop
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc90      	pop	{r4, r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <gdiDrawTextEx>:
		ptext		Pointer to text

	return			none
*/
void gdiDrawTextEx(int16_t x, int16_t y, char *ptext)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af02      	add	r7, sp, #8
 80008da:	4603      	mov	r3, r0
 80008dc:	603a      	str	r2, [r7, #0]
 80008de:	80fb      	strh	r3, [r7, #6]
 80008e0:	460b      	mov	r3, r1
 80008e2:	80bb      	strh	r3, [r7, #4]

	char		c;

	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH)
 80008e4:	e01a      	b.n	800091c <gdiDrawTextEx+0x48>
		if (c >= GDI_SYSFONT_OFFSET)
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	2b1f      	cmp	r3, #31
 80008ea:	d913      	bls.n	8000914 <gdiDrawTextEx+0x40>
			gdiBitBlt(NULL, x, y, GDI_SYSFONT_WIDTH, GDI_SYSFONT_HEIGHT, (pBMP) gdiSystemFont[c-GDI_SYSFONT_OFFSET]);
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	f1a3 0220 	sub.w	r2, r3, #32
 80008f2:	4613      	mov	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000938 <gdiDrawTextEx+0x64>)
 80008fc:	4413      	add	r3, r2
 80008fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000902:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000906:	9301      	str	r3, [sp, #4]
 8000908:	230a      	movs	r3, #10
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2306      	movs	r3, #6
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff fcde 	bl	80002d0 <gdiBitBlt>
	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH)
 8000914:	88fb      	ldrh	r3, [r7, #6]
 8000916:	3306      	adds	r3, #6
 8000918:	b29b      	uxth	r3, r3
 800091a:	80fb      	strh	r3, [r7, #6]
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	603a      	str	r2, [r7, #0]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	73fb      	strb	r3, [r7, #15]
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1dc      	bne.n	80008e6 <gdiDrawTextEx+0x12>
//	clip here if		if (x >= VID_PIXELS_X - GDI_SYSFONT_WIDTH)
		// else control character handling ...

}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	0800738c 	.word	0x0800738c

0800093c <gdiSetCursor>:
static int cursor_x = 0;
static int cursor_y = 0;

/* Set the pixel cursor position. */
void gdiSetCursor(int x, int y)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
    /* Clamp to the visible area */
    if (x < 0) x = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	da01      	bge.n	8000950 <gdiSetCursor+0x14>
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
    if (y < 0) y = 0;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	da01      	bge.n	800095a <gdiSetCursor+0x1e>
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
    if (x >= VID_PIXELS_X) x = VID_PIXELS_X - GDI_SYSFONT_WIDTH;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000960:	d302      	bcc.n	8000968 <gdiSetCursor+0x2c>
 8000962:	f44f 73c5 	mov.w	r3, #394	@ 0x18a
 8000966:	607b      	str	r3, [r7, #4]
    if (y >= VID_PIXELS_Y) y = VID_PIXELS_Y - GDI_SYSFONT_HEIGHT;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	2bef      	cmp	r3, #239	@ 0xef
 800096c:	dd01      	ble.n	8000972 <gdiSetCursor+0x36>
 800096e:	23e6      	movs	r3, #230	@ 0xe6
 8000970:	603b      	str	r3, [r7, #0]
    cursor_x = x;
 8000972:	4a06      	ldr	r2, [pc, #24]	@ (800098c <gdiSetCursor+0x50>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6013      	str	r3, [r2, #0]
    cursor_y = y;
 8000978:	4a05      	ldr	r2, [pc, #20]	@ (8000990 <gdiSetCursor+0x54>)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	6013      	str	r3, [r2, #0]
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20003aa8 	.word	0x20003aa8
 8000990:	20003aac 	.word	0x20003aac

08000994 <gdiClearScreen>:
    if (y) *y = cursor_y;
}

/* Clear the entire screen and reset the cursor to the top left. */
void gdiClearScreen(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    /* Use the provided video function to clear the frame buffer. */
    vidClearScreen();
 8000998:	f001 f9b2 	bl	8001d00 <vidClearScreen>
    cursor_x = 0;
 800099c:	4b03      	ldr	r3, [pc, #12]	@ (80009ac <gdiClearScreen+0x18>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
    cursor_y = 0;
 80009a2:	4b03      	ldr	r3, [pc, #12]	@ (80009b0 <gdiClearScreen+0x1c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20003aa8 	.word	0x20003aa8
 80009b0:	20003aac 	.word	0x20003aac

080009b4 <gdiPutChar>:

/* Output a single character at the current cursor position.  Handles
 * carriage return and newline automatically. */
void gdiPutChar(uint8_t ch)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
    switch (ch) {
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	2b0a      	cmp	r3, #10
 80009c2:	d005      	beq.n	80009d0 <gdiPutChar+0x1c>
 80009c4:	2b0d      	cmp	r3, #13
 80009c6:	d113      	bne.n	80009f0 <gdiPutChar+0x3c>
    case '\r':
        /* Carriage return: move to column 0. */
        cursor_x = 0;
 80009c8:	4b20      	ldr	r3, [pc, #128]	@ (8000a4c <gdiPutChar+0x98>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
        return;
 80009ce:	e03a      	b.n	8000a46 <gdiPutChar+0x92>
    case '\n':
        /* Newline: move to next line and column 0. */
        cursor_x = 0;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a4c <gdiPutChar+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
        cursor_y += GDI_SYSFONT_HEIGHT;
 80009d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a50 <gdiPutChar+0x9c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	330a      	adds	r3, #10
 80009dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000a50 <gdiPutChar+0x9c>)
 80009de:	6013      	str	r3, [r2, #0]
        if (cursor_y >= VID_PIXELS_Y) {
 80009e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a50 <gdiPutChar+0x9c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2bef      	cmp	r3, #239	@ 0xef
 80009e6:	dd2d      	ble.n	8000a44 <gdiPutChar+0x90>
            /* Simple scroll-wrap: start at top when bottom is exceeded. */
            cursor_y = 0;
 80009e8:	4b19      	ldr	r3, [pc, #100]	@ (8000a50 <gdiPutChar+0x9c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
        }
        return;
 80009ee:	e029      	b.n	8000a44 <gdiPutChar+0x90>
    default:
        break;
 80009f0:	bf00      	nop
    }
    /* Draw the character using the existing GDI function. */
    char buf[2] = { (char)ch, '\0' };
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	733b      	strb	r3, [r7, #12]
 80009f6:	2300      	movs	r3, #0
 80009f8:	737b      	strb	r3, [r7, #13]
    gdiDrawTextEx(cursor_x, cursor_y, buf);
 80009fa:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <gdiPutChar+0x98>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	b21b      	sxth	r3, r3
 8000a00:	4a13      	ldr	r2, [pc, #76]	@ (8000a50 <gdiPutChar+0x9c>)
 8000a02:	6812      	ldr	r2, [r2, #0]
 8000a04:	b211      	sxth	r1, r2
 8000a06:	f107 020c 	add.w	r2, r7, #12
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff62 	bl	80008d4 <gdiDrawTextEx>
    /* Advance the cursor.  Wrap to the next line if we exceed the width. */
    cursor_x += GDI_SYSFONT_WIDTH;
 8000a10:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <gdiPutChar+0x98>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3306      	adds	r3, #6
 8000a16:	4a0d      	ldr	r2, [pc, #52]	@ (8000a4c <gdiPutChar+0x98>)
 8000a18:	6013      	str	r3, [r2, #0]
    if (cursor_x >= VID_PIXELS_X) {
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <gdiPutChar+0x98>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000a22:	d310      	bcc.n	8000a46 <gdiPutChar+0x92>
        cursor_x = 0;
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <gdiPutChar+0x98>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
        cursor_y += GDI_SYSFONT_HEIGHT;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <gdiPutChar+0x9c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	330a      	adds	r3, #10
 8000a30:	4a07      	ldr	r2, [pc, #28]	@ (8000a50 <gdiPutChar+0x9c>)
 8000a32:	6013      	str	r3, [r2, #0]
        if (cursor_y >= VID_PIXELS_Y) {
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <gdiPutChar+0x9c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2bef      	cmp	r3, #239	@ 0xef
 8000a3a:	dd04      	ble.n	8000a46 <gdiPutChar+0x92>
            cursor_y = 0;
 8000a3c:	4b04      	ldr	r3, [pc, #16]	@ (8000a50 <gdiPutChar+0x9c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	e000      	b.n	8000a46 <gdiPutChar+0x92>
        return;
 8000a44:	bf00      	nop
        }
    }
}
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20003aa8 	.word	0x20003aa8
 8000a50:	20003aac 	.word	0x20003aac

08000a54 <parse_csi_number>:

/* Helper: parse numeric prefix of a CSI sequence.  Returns the parsed
 * integer or a default value of 1 if no digits are present. */
static int parse_csi_number(const char *buf, int len)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
    /* Copy into a temporary buffer so we can null‑terminate. */
    char tmp[8] = {0};
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
    int n = (len < (int)sizeof(tmp) - 1) ? len : (int)sizeof(tmp) - 1;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	2b07      	cmp	r3, #7
 8000a6c:	bfa8      	it	ge
 8000a6e:	2307      	movge	r3, #7
 8000a70:	617b      	str	r3, [r7, #20]
    memcpy(tmp, buf, n);
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f005 fe6a 	bl	8006754 <memcpy>
    tmp[n] = '\0';
 8000a80:	f107 0208 	add.w	r2, r7, #8
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	4413      	add	r3, r2
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
    int value = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
    if (tmp[0] == '\0') {
 8000a90:	7a3b      	ldrb	r3, [r7, #8]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d101      	bne.n	8000a9a <parse_csi_number+0x46>
        return 1;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e009      	b.n	8000aae <parse_csi_number+0x5a>
    }
    /* Convert to integer; atoi returns 0 if no digits, default to 1. */
    value = atoi(tmp);
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f005 fd6c 	bl	800657c <atoi>
 8000aa4:	6138      	str	r0, [r7, #16]
    return value > 0 ? value : 1;
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	bfb8      	it	lt
 8000aac:	2301      	movlt	r3, #1
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <gdiHandleCSI>:

/* Handle a complete CSI sequence.  The buffer contains everything
 * between the '[' and the final command character. */
void gdiHandleCSI(const char *buf, uint8_t len)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	@ 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	70fb      	strb	r3, [r7, #3]
    if (len == 0) {
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f000 80e5 	beq.w	8000c96 <gdiHandleCSI+0x1de>
        return;
    }
    char cmd = buf[len - 1];
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    switch (cmd) {
 8000ada:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ade:	3b41      	subs	r3, #65	@ 0x41
 8000ae0:	2b25      	cmp	r3, #37	@ 0x25
 8000ae2:	f200 80da 	bhi.w	8000c9a <gdiHandleCSI+0x1e2>
 8000ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8000aec <gdiHandleCSI+0x34>)
 8000ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aec:	08000bbf 	.word	0x08000bbf
 8000af0:	08000bf1 	.word	0x08000bf1
 8000af4:	08000c25 	.word	0x08000c25
 8000af8:	08000c5d 	.word	0x08000c5d
 8000afc:	08000c9b 	.word	0x08000c9b
 8000b00:	08000c9b 	.word	0x08000c9b
 8000b04:	08000c9b 	.word	0x08000c9b
 8000b08:	08000b85 	.word	0x08000b85
 8000b0c:	08000c9b 	.word	0x08000c9b
 8000b10:	08000c91 	.word	0x08000c91
 8000b14:	08000c9b 	.word	0x08000c9b
 8000b18:	08000c9b 	.word	0x08000c9b
 8000b1c:	08000c9b 	.word	0x08000c9b
 8000b20:	08000c9b 	.word	0x08000c9b
 8000b24:	08000c9b 	.word	0x08000c9b
 8000b28:	08000c9b 	.word	0x08000c9b
 8000b2c:	08000c9b 	.word	0x08000c9b
 8000b30:	08000c9b 	.word	0x08000c9b
 8000b34:	08000c9b 	.word	0x08000c9b
 8000b38:	08000c9b 	.word	0x08000c9b
 8000b3c:	08000c9b 	.word	0x08000c9b
 8000b40:	08000c9b 	.word	0x08000c9b
 8000b44:	08000c9b 	.word	0x08000c9b
 8000b48:	08000c9b 	.word	0x08000c9b
 8000b4c:	08000c9b 	.word	0x08000c9b
 8000b50:	08000c9b 	.word	0x08000c9b
 8000b54:	08000c9b 	.word	0x08000c9b
 8000b58:	08000c9b 	.word	0x08000c9b
 8000b5c:	08000c9b 	.word	0x08000c9b
 8000b60:	08000c9b 	.word	0x08000c9b
 8000b64:	08000c9b 	.word	0x08000c9b
 8000b68:	08000c9b 	.word	0x08000c9b
 8000b6c:	08000c9b 	.word	0x08000c9b
 8000b70:	08000c9b 	.word	0x08000c9b
 8000b74:	08000c9b 	.word	0x08000c9b
 8000b78:	08000c9b 	.word	0x08000c9b
 8000b7c:	08000c9b 	.word	0x08000c9b
 8000b80:	08000b85 	.word	0x08000b85
    case 'H': /* CUP: ESC [ <row> ; <col> H */
    case 'f': /* HVP: ESC [ <row> ; <col> f */
    {
        int row = 1, col = 1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
        /* sscanf will parse two integers separated by a semicolon.  If
         * either integer is missing, it will leave the value unchanged. */
        sscanf(buf, "%d;%d", &row, &col);
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	f107 0210 	add.w	r2, r7, #16
 8000b94:	4947      	ldr	r1, [pc, #284]	@ (8000cb4 <gdiHandleCSI+0x1fc>)
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f005 fd7a 	bl	8006690 <siscanf>
        /* Convert 1‑based row/col into pixel coordinates. */
        gdiSetCursor((col - 1) * GDI_SYSFONT_WIDTH, (row - 1) * GDI_SYSFONT_HEIGHT);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	1e5a      	subs	r2, r3, #1
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	1e5a      	subs	r2, r3, #1
 8000bae:	4613      	mov	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f7ff fec0 	bl	800093c <gdiSetCursor>
        break;
 8000bbc:	e076      	b.n	8000cac <gdiHandleCSI+0x1f4>
    }
    case 'A': /* CUU: cursor up n lines */
    {
        int n = parse_csi_number(buf, len - 1);
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ff45 	bl	8000a54 <parse_csi_number>
 8000bca:	6178      	str	r0, [r7, #20]
        cursor_y -= n * GDI_SYSFONT_HEIGHT;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	f06f 0209 	mvn.w	r2, #9
 8000bd2:	fb03 f202 	mul.w	r2, r3, r2
 8000bd6:	4b38      	ldr	r3, [pc, #224]	@ (8000cb8 <gdiHandleCSI+0x200>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a36      	ldr	r2, [pc, #216]	@ (8000cb8 <gdiHandleCSI+0x200>)
 8000bde:	6013      	str	r3, [r2, #0]
        if (cursor_y < 0) cursor_y = 0;
 8000be0:	4b35      	ldr	r3, [pc, #212]	@ (8000cb8 <gdiHandleCSI+0x200>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	da5a      	bge.n	8000c9e <gdiHandleCSI+0x1e6>
 8000be8:	4b33      	ldr	r3, [pc, #204]	@ (8000cb8 <gdiHandleCSI+0x200>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
        break;
 8000bee:	e056      	b.n	8000c9e <gdiHandleCSI+0x1e6>
    }
    case 'B': /* CUD: cursor down n lines */
    {
        int n = parse_csi_number(buf, len - 1);
 8000bf0:	78fb      	ldrb	r3, [r7, #3]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ff2c 	bl	8000a54 <parse_csi_number>
 8000bfc:	61b8      	str	r0, [r7, #24]
        cursor_y += n * GDI_SYSFONT_HEIGHT;
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb8 <gdiHandleCSI+0x200>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a29      	ldr	r2, [pc, #164]	@ (8000cb8 <gdiHandleCSI+0x200>)
 8000c12:	6013      	str	r3, [r2, #0]
        if (cursor_y >= VID_PIXELS_Y) cursor_y = VID_PIXELS_Y - GDI_SYSFONT_HEIGHT;
 8000c14:	4b28      	ldr	r3, [pc, #160]	@ (8000cb8 <gdiHandleCSI+0x200>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2bef      	cmp	r3, #239	@ 0xef
 8000c1a:	dd42      	ble.n	8000ca2 <gdiHandleCSI+0x1ea>
 8000c1c:	4b26      	ldr	r3, [pc, #152]	@ (8000cb8 <gdiHandleCSI+0x200>)
 8000c1e:	22e6      	movs	r2, #230	@ 0xe6
 8000c20:	601a      	str	r2, [r3, #0]
        break;
 8000c22:	e03e      	b.n	8000ca2 <gdiHandleCSI+0x1ea>
    }
    case 'C': /* CUF: cursor forward n columns */
    {
        int n = parse_csi_number(buf, len - 1);
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	4619      	mov	r1, r3
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ff12 	bl	8000a54 <parse_csi_number>
 8000c30:	61f8      	str	r0, [r7, #28]
        cursor_x += n * GDI_SYSFONT_WIDTH;
 8000c32:	69fa      	ldr	r2, [r7, #28]
 8000c34:	4613      	mov	r3, r2
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	4413      	add	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <gdiHandleCSI+0x204>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a1d      	ldr	r2, [pc, #116]	@ (8000cbc <gdiHandleCSI+0x204>)
 8000c46:	6013      	str	r3, [r2, #0]
        if (cursor_x >= VID_PIXELS_X) cursor_x = VID_PIXELS_X - GDI_SYSFONT_WIDTH;
 8000c48:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <gdiHandleCSI+0x204>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000c50:	d329      	bcc.n	8000ca6 <gdiHandleCSI+0x1ee>
 8000c52:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <gdiHandleCSI+0x204>)
 8000c54:	f44f 72c5 	mov.w	r2, #394	@ 0x18a
 8000c58:	601a      	str	r2, [r3, #0]
        break;
 8000c5a:	e024      	b.n	8000ca6 <gdiHandleCSI+0x1ee>
    }
    case 'D': /* CUB: cursor backward n columns */
    {
        int n = parse_csi_number(buf, len - 1);
 8000c5c:	78fb      	ldrb	r3, [r7, #3]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	4619      	mov	r1, r3
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff fef6 	bl	8000a54 <parse_csi_number>
 8000c68:	6238      	str	r0, [r7, #32]
        cursor_x -= n * GDI_SYSFONT_WIDTH;
 8000c6a:	6a3a      	ldr	r2, [r7, #32]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	0092      	lsls	r2, r2, #2
 8000c70:	1a9b      	subs	r3, r3, r2
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <gdiHandleCSI+0x204>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000cbc <gdiHandleCSI+0x204>)
 8000c7e:	6013      	str	r3, [r2, #0]
        if (cursor_x < 0) cursor_x = 0;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <gdiHandleCSI+0x204>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	da10      	bge.n	8000caa <gdiHandleCSI+0x1f2>
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <gdiHandleCSI+0x204>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
        break;
 8000c8e:	e00c      	b.n	8000caa <gdiHandleCSI+0x1f2>
    }
    case 'J': /* ED: erase display */
    {
        /* Only support ESC [ 2 J (clear entire screen) for now. */
        gdiClearScreen();
 8000c90:	f7ff fe80 	bl	8000994 <gdiClearScreen>
        break;
 8000c94:	e00a      	b.n	8000cac <gdiHandleCSI+0x1f4>
        return;
 8000c96:	bf00      	nop
 8000c98:	e008      	b.n	8000cac <gdiHandleCSI+0x1f4>
    }
    default:
        /* Unsupported CSI command: ignore */
        break;
 8000c9a:	bf00      	nop
 8000c9c:	e006      	b.n	8000cac <gdiHandleCSI+0x1f4>
        break;
 8000c9e:	bf00      	nop
 8000ca0:	e004      	b.n	8000cac <gdiHandleCSI+0x1f4>
        break;
 8000ca2:	bf00      	nop
 8000ca4:	e002      	b.n	8000cac <gdiHandleCSI+0x1f4>
        break;
 8000ca6:	bf00      	nop
 8000ca8:	e000      	b.n	8000cac <gdiHandleCSI+0x1f4>
        break;
 8000caa:	bf00      	nop
    }
}
 8000cac:	3728      	adds	r7, #40	@ 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	08007208 	.word	0x08007208
 8000cb8:	20003aac 	.word	0x20003aac
 8000cbc:	20003aa8 	.word	0x20003aa8

08000cc0 <gdiVT100Feed>:

/* Feed one character into the VT100 parser.  Maintains a tiny state
 * machine to detect ESC and CSI sequences and calls the appropriate
 * handlers. */
void gdiVT100Feed(uint8_t ch)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
    enum ParserState { STATE_IDLE, STATE_ESC, STATE_CSI };
    static enum ParserState state = STATE_IDLE;
    static char csi_buf[16];
    static uint8_t csi_len = 0;

    switch (state) {
 8000cca:	4b2f      	ldr	r3, [pc, #188]	@ (8000d88 <gdiVT100Feed+0xc8>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d027      	beq.n	8000d22 <gdiVT100Feed+0x62>
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	dc54      	bgt.n	8000d80 <gdiVT100Feed+0xc0>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d002      	beq.n	8000ce0 <gdiVT100Feed+0x20>
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d00c      	beq.n	8000cf8 <gdiVT100Feed+0x38>
            /* Accumulate parameters */
            csi_buf[csi_len++] = ch;
        }
        break;
    }
}
 8000cde:	e04f      	b.n	8000d80 <gdiVT100Feed+0xc0>
        if (ch == 0x1B) {
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	2b1b      	cmp	r3, #27
 8000ce4:	d103      	bne.n	8000cee <gdiVT100Feed+0x2e>
            state = STATE_ESC;
 8000ce6:	4b28      	ldr	r3, [pc, #160]	@ (8000d88 <gdiVT100Feed+0xc8>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
        break;
 8000cec:	e048      	b.n	8000d80 <gdiVT100Feed+0xc0>
            gdiPutChar(ch);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fe5f 	bl	80009b4 <gdiPutChar>
        break;
 8000cf6:	e043      	b.n	8000d80 <gdiVT100Feed+0xc0>
        if (ch == '[') {
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2b5b      	cmp	r3, #91	@ 0x5b
 8000cfc:	d106      	bne.n	8000d0c <gdiVT100Feed+0x4c>
            state = STATE_CSI;
 8000cfe:	4b22      	ldr	r3, [pc, #136]	@ (8000d88 <gdiVT100Feed+0xc8>)
 8000d00:	2202      	movs	r2, #2
 8000d02:	701a      	strb	r2, [r3, #0]
            csi_len = 0;
 8000d04:	4b21      	ldr	r3, [pc, #132]	@ (8000d8c <gdiVT100Feed+0xcc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
        break;
 8000d0a:	e039      	b.n	8000d80 <gdiVT100Feed+0xc0>
            gdiPutChar(0x1B);
 8000d0c:	201b      	movs	r0, #27
 8000d0e:	f7ff fe51 	bl	80009b4 <gdiPutChar>
            gdiPutChar(ch);
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fe4d 	bl	80009b4 <gdiPutChar>
            state = STATE_IDLE;
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <gdiVT100Feed+0xc8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
        break;
 8000d20:	e02e      	b.n	8000d80 <gdiVT100Feed+0xc0>
        if ((ch >= 0x40 && ch <= 0x7E) || csi_len >= (sizeof(csi_buf) - 1)) {
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d26:	d902      	bls.n	8000d2e <gdiVT100Feed+0x6e>
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	2b7e      	cmp	r3, #126	@ 0x7e
 8000d2c:	d903      	bls.n	8000d36 <gdiVT100Feed+0x76>
 8000d2e:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <gdiVT100Feed+0xcc>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b0e      	cmp	r3, #14
 8000d34:	d919      	bls.n	8000d6a <gdiVT100Feed+0xaa>
            csi_buf[csi_len++] = ch;
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <gdiVT100Feed+0xcc>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	b2d1      	uxtb	r1, r2
 8000d3e:	4a13      	ldr	r2, [pc, #76]	@ (8000d8c <gdiVT100Feed+0xcc>)
 8000d40:	7011      	strb	r1, [r2, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	4a12      	ldr	r2, [pc, #72]	@ (8000d90 <gdiVT100Feed+0xd0>)
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	5453      	strb	r3, [r2, r1]
            csi_buf[csi_len] = '\0';
 8000d4a:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <gdiVT100Feed+0xcc>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <gdiVT100Feed+0xd0>)
 8000d52:	2100      	movs	r1, #0
 8000d54:	5499      	strb	r1, [r3, r2]
            gdiHandleCSI(csi_buf, csi_len);
 8000d56:	4b0d      	ldr	r3, [pc, #52]	@ (8000d8c <gdiVT100Feed+0xcc>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480c      	ldr	r0, [pc, #48]	@ (8000d90 <gdiVT100Feed+0xd0>)
 8000d5e:	f7ff feab 	bl	8000ab8 <gdiHandleCSI>
            state = STATE_IDLE;
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <gdiVT100Feed+0xc8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
        break;
 8000d68:	e009      	b.n	8000d7e <gdiVT100Feed+0xbe>
            csi_buf[csi_len++] = ch;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <gdiVT100Feed+0xcc>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	b2d1      	uxtb	r1, r2
 8000d72:	4a06      	ldr	r2, [pc, #24]	@ (8000d8c <gdiVT100Feed+0xcc>)
 8000d74:	7011      	strb	r1, [r2, #0]
 8000d76:	4619      	mov	r1, r3
 8000d78:	4a05      	ldr	r2, [pc, #20]	@ (8000d90 <gdiVT100Feed+0xd0>)
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	5453      	strb	r3, [r2, r1]
        break;
 8000d7e:	bf00      	nop
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20003ab0 	.word	0x20003ab0
 8000d8c:	20003ab1 	.word	0x20003ab1
 8000d90:	20003ab4 	.word	0x20003ab4

08000d94 <gdiVT100ProcessBuffer>:

/* Process a buffer of VT100 data.  This simply feeds each byte into
 * gdiVT100Feed(). */
void gdiVT100ProcessBuffer(const uint8_t *buf, uint16_t len)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < len; ++i) {
 8000da0:	2300      	movs	r3, #0
 8000da2:	81fb      	strh	r3, [r7, #14]
 8000da4:	e009      	b.n	8000dba <gdiVT100ProcessBuffer+0x26>
        gdiVT100Feed(buf[i]);
 8000da6:	89fb      	ldrh	r3, [r7, #14]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	4413      	add	r3, r2
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff86 	bl	8000cc0 <gdiVT100Feed>
    for (uint16_t i = 0; i < len; ++i) {
 8000db4:	89fb      	ldrh	r3, [r7, #14]
 8000db6:	3301      	adds	r3, #1
 8000db8:	81fb      	strh	r3, [r7, #14]
 8000dba:	89fa      	ldrh	r2, [r7, #14]
 8000dbc:	887b      	ldrh	r3, [r7, #2]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d3f1      	bcc.n	8000da6 <gdiVT100ProcessBuffer+0x12>
    }
}
 8000dc2:	bf00      	nop
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <Gpio_deinit>:
{
  TimingDelay = nTime;
  while((TimingDelay != 0));
  while(Paused);
}
void Gpio_deinit(GPIO_TypeDef  *GPIOx){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
		for(int i =0; i<15;i++){
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	e008      	b.n	8000dec <Gpio_deinit+0x20>
			HAL_GPIO_DeInit(GPIOA, i);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de2:	f001 fe49 	bl	8002a78 <HAL_GPIO_DeInit>
		for(int i =0; i<15;i++){
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3301      	adds	r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b0e      	cmp	r3, #14
 8000df0:	ddf3      	ble.n	8000dda <Gpio_deinit+0xe>
		}
	}
 8000df2:	bf00      	nop
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <TIMER_SET>:


void TIMER_SET(uint32_t sys){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]


	if (sys == 16000000){
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a33      	ldr	r2, [pc, #204]	@ (8000ed4 <TIMER_SET+0xd8>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d113      	bne.n	8000e34 <TIMER_SET+0x38>
		  __HAL_I2S_DISABLE(&hi2s2);
 8000e0c:	4b32      	ldr	r3, [pc, #200]	@ (8000ed8 <TIMER_SET+0xdc>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	69da      	ldr	r2, [r3, #28]
 8000e12:	4b31      	ldr	r3, [pc, #196]	@ (8000ed8 <TIMER_SET+0xdc>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e1a:	61da      	str	r2, [r3, #28]
		   SPI2->I2SPR = 1;
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000edc <TIMER_SET+0xe0>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	621a      	str	r2, [r3, #32]
		   __HAL_I2S_ENABLE(&hi2s2);
 8000e22:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed8 <TIMER_SET+0xdc>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	69da      	ldr	r2, [r3, #28]
 8000e28:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed8 <TIMER_SET+0xdc>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e30:	61da      	str	r2, [r3, #28]
	else if(sys == 120000000){
		__HAL_I2S_DISABLE(&hi2s2);
		SPI2->I2SPR = (7 << SPI_I2SPR_I2SDIV_Pos) | (1 << SPI_I2SPR_ODD_Pos);
		__HAL_I2S_ENABLE(&hi2s2);
	}
}
 8000e32:	e04a      	b.n	8000eca <TIMER_SET+0xce>
	else if(sys == 48000000){
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a2a      	ldr	r2, [pc, #168]	@ (8000ee0 <TIMER_SET+0xe4>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d113      	bne.n	8000e64 <TIMER_SET+0x68>
		  __HAL_I2S_DISABLE(&hi2s2);
 8000e3c:	4b26      	ldr	r3, [pc, #152]	@ (8000ed8 <TIMER_SET+0xdc>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	69da      	ldr	r2, [r3, #28]
 8000e42:	4b25      	ldr	r3, [pc, #148]	@ (8000ed8 <TIMER_SET+0xdc>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e4a:	61da      	str	r2, [r3, #28]
		  SPI2->I2SPR = (3 << SPI_I2SPR_I2SDIV_Pos)
 8000e4c:	4b23      	ldr	r3, [pc, #140]	@ (8000edc <TIMER_SET+0xe0>)
 8000e4e:	2203      	movs	r2, #3
 8000e50:	621a      	str	r2, [r3, #32]
		   __HAL_I2S_ENABLE(&hi2s2);
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <TIMER_SET+0xdc>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	69da      	ldr	r2, [r3, #28]
 8000e58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed8 <TIMER_SET+0xdc>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e60:	61da      	str	r2, [r3, #28]
}
 8000e62:	e032      	b.n	8000eca <TIMER_SET+0xce>
	else if (sys == 96000000){
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee4 <TIMER_SET+0xe8>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d116      	bne.n	8000e9a <TIMER_SET+0x9e>
		  __HAL_I2S_DISABLE(&hi2s2);
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <TIMER_SET+0xdc>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	69da      	ldr	r2, [r3, #28]
 8000e72:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <TIMER_SET+0xdc>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e7a:	61da      	str	r2, [r3, #28]
		  SPI2->I2SPR = (6 << SPI_I2SPR_I2SDIV_Pos)
 8000e7c:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <TIMER_SET+0xe0>)
 8000e7e:	2206      	movs	r2, #6
 8000e80:	621a      	str	r2, [r3, #32]
		   __HAL_I2S_ENABLE(&hi2s2);
 8000e82:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <TIMER_SET+0xdc>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	69da      	ldr	r2, [r3, #28]
 8000e88:	4b13      	ldr	r3, [pc, #76]	@ (8000ed8 <TIMER_SET+0xdc>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e90:	61da      	str	r2, [r3, #28]
		   HAL_Delay(1);
 8000e92:	2001      	movs	r0, #1
 8000e94:	f000 fff0 	bl	8001e78 <HAL_Delay>
}
 8000e98:	e017      	b.n	8000eca <TIMER_SET+0xce>
	else if(sys == 120000000){
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a12      	ldr	r2, [pc, #72]	@ (8000ee8 <TIMER_SET+0xec>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d113      	bne.n	8000eca <TIMER_SET+0xce>
		__HAL_I2S_DISABLE(&hi2s2);
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <TIMER_SET+0xdc>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	69da      	ldr	r2, [r3, #28]
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <TIMER_SET+0xdc>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000eb0:	61da      	str	r2, [r3, #28]
		SPI2->I2SPR = (7 << SPI_I2SPR_I2SDIV_Pos) | (1 << SPI_I2SPR_ODD_Pos);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <TIMER_SET+0xe0>)
 8000eb4:	f240 1207 	movw	r2, #263	@ 0x107
 8000eb8:	621a      	str	r2, [r3, #32]
		__HAL_I2S_ENABLE(&hi2s2);
 8000eba:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <TIMER_SET+0xdc>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	69da      	ldr	r2, [r3, #28]
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <TIMER_SET+0xdc>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000ec8:	61da      	str	r2, [r3, #28]
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	00f42400 	.word	0x00f42400
 8000ed8:	20003ac4 	.word	0x20003ac4
 8000edc:	40003800 	.word	0x40003800
 8000ee0:	02dc6c00 	.word	0x02dc6c00
 8000ee4:	05b8d800 	.word	0x05b8d800
 8000ee8:	07270e00 	.word	0x07270e00

08000eec <print_cursor.0>:
void demo_vt100_commands(void)
{
    const char CURSOR_CHAR = '*';  // Visible cursor character
    
    /* Helper function to print cursor position */
    void print_cursor(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4663      	mov	r3, ip
 8000ef4:	f8c7 c004 	str.w	ip, [r7, #4]
        gdiPutChar(CURSOR_CHAR);
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fd5a 	bl	80009b4 <gdiPutChar>
        HAL_Delay(500);  // Show cursor briefly
 8000f00:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f04:	f000 ffb8 	bl	8001e78 <HAL_Delay>
    }
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <demo_vt100_commands>:
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b094      	sub	sp, #80	@ 0x50
 8000f14:	af00      	add	r7, sp, #0
void demo_vt100_commands(void)
 8000f16:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f1a:	607b      	str	r3, [r7, #4]
    const char CURSOR_CHAR = '*';  // Visible cursor character
 8000f1c:	232a      	movs	r3, #42	@ 0x2a
 8000f1e:	703b      	strb	r3, [r7, #0]

    /* Clear the screen and reset cursor position */
    vt100_init();
 8000f20:	f000 fefa 	bl	8001d18 <vt100_init>
    HAL_Delay(500);
 8000f24:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f28:	f000 ffa6 	bl	8001e78 <HAL_Delay>

    /* Center position calculation */
    const int center_x = VID_PIXELS_X/2 - 10 * GDI_SYSFONT_WIDTH;
 8000f2c:	238c      	movs	r3, #140	@ 0x8c
 8000f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const int center_y = VID_PIXELS_Y/2 - 5 * GDI_SYSFONT_HEIGHT;
 8000f30:	2346      	movs	r3, #70	@ 0x46
 8000f32:	62bb      	str	r3, [r7, #40]	@ 0x28
    
    /* Test 1: Direct cursor positioning */
    gdiSetCursor(center_x, center_y - 3 * GDI_SYSFONT_HEIGHT);
 8000f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f36:	3b1e      	subs	r3, #30
 8000f38:	4619      	mov	r1, r3
 8000f3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000f3c:	f7ff fcfe 	bl	800093c <gdiSetCursor>
    const char *cmd1 = "Testing ESC[H - Cursor Home";
 8000f40:	4b8f      	ldr	r3, [pc, #572]	@ (8001180 <demo_vt100_commands+0x270>)
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
    for(const char *p = cmd1; *p; p++) {
 8000f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000f48:	e007      	b.n	8000f5a <demo_vt100_commands+0x4a>
        gdiPutChar(*p);
 8000f4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fd30 	bl	80009b4 <gdiPutChar>
    for(const char *p = cmd1; *p; p++) {
 8000f54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f56:	3301      	adds	r3, #1
 8000f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f3      	bne.n	8000f4a <demo_vt100_commands+0x3a>
    }
    HAL_Delay(1000);
 8000f62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f66:	f000 ff87 	bl	8001e78 <HAL_Delay>
    vt100_process_buffer((const uint8_t*)"\x1B[H", 3); // Move cursor to home
 8000f6a:	2103      	movs	r1, #3
 8000f6c:	4885      	ldr	r0, [pc, #532]	@ (8001184 <demo_vt100_commands+0x274>)
 8000f6e:	f000 fed9 	bl	8001d24 <vt100_process_buffer>
    print_cursor();
 8000f72:	463b      	mov	r3, r7
 8000f74:	469c      	mov	ip, r3
 8000f76:	f7ff ffb9 	bl	8000eec <print_cursor.0>
    HAL_Delay(1000);
 8000f7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f7e:	f000 ff7b 	bl	8001e78 <HAL_Delay>

    /* Test 2: Clear screen */
    gdiSetCursor(center_x, center_y - 2 * GDI_SYSFONT_HEIGHT);
 8000f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f84:	3b14      	subs	r3, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000f8a:	f7ff fcd7 	bl	800093c <gdiSetCursor>
    const char *cmd2 = "Testing ESC[2J - Clear Screen";
 8000f8e:	4b7e      	ldr	r3, [pc, #504]	@ (8001188 <demo_vt100_commands+0x278>)
 8000f90:	623b      	str	r3, [r7, #32]
    for(const char *p = cmd2; *p; p++) {
 8000f92:	6a3b      	ldr	r3, [r7, #32]
 8000f94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f96:	e007      	b.n	8000fa8 <demo_vt100_commands+0x98>
        gdiPutChar(*p);
 8000f98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fd09 	bl	80009b4 <gdiPutChar>
    for(const char *p = cmd2; *p; p++) {
 8000fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000fa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f3      	bne.n	8000f98 <demo_vt100_commands+0x88>
    }
    HAL_Delay(1000);
 8000fb0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fb4:	f000 ff60 	bl	8001e78 <HAL_Delay>
    vt100_process_buffer((const uint8_t*)"\x1B[2J", 4);
 8000fb8:	2104      	movs	r1, #4
 8000fba:	4874      	ldr	r0, [pc, #464]	@ (800118c <demo_vt100_commands+0x27c>)
 8000fbc:	f000 feb2 	bl	8001d24 <vt100_process_buffer>
    print_cursor();
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	469c      	mov	ip, r3
 8000fc4:	f7ff ff92 	bl	8000eec <print_cursor.0>
    HAL_Delay(1000);
 8000fc8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fcc:	f000 ff54 	bl	8001e78 <HAL_Delay>

    /* Test 3: Cursor movement up */
    gdiSetCursor(center_x, center_y);
 8000fd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000fd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000fd4:	f7ff fcb2 	bl	800093c <gdiSetCursor>
    const char *cmd3 = "Testing ESC[A - Cursor Up";
 8000fd8:	4b6d      	ldr	r3, [pc, #436]	@ (8001190 <demo_vt100_commands+0x280>)
 8000fda:	61fb      	str	r3, [r7, #28]
    for(const char *p = cmd3; *p; p++) {
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8000fe0:	e007      	b.n	8000ff2 <demo_vt100_commands+0xe2>
        gdiPutChar(*p);
 8000fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fce4 	bl	80009b4 <gdiPutChar>
    for(const char *p = cmd3; *p; p++) {
 8000fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fee:	3301      	adds	r3, #1
 8000ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ff2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f3      	bne.n	8000fe2 <demo_vt100_commands+0xd2>
    }
    HAL_Delay(1000);
 8000ffa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ffe:	f000 ff3b 	bl	8001e78 <HAL_Delay>
    vt100_process_buffer((const uint8_t*)"\x1B[2A", 4); // Move up 2 lines
 8001002:	2104      	movs	r1, #4
 8001004:	4863      	ldr	r0, [pc, #396]	@ (8001194 <demo_vt100_commands+0x284>)
 8001006:	f000 fe8d 	bl	8001d24 <vt100_process_buffer>
    print_cursor();
 800100a:	463b      	mov	r3, r7
 800100c:	469c      	mov	ip, r3
 800100e:	f7ff ff6d 	bl	8000eec <print_cursor.0>
    HAL_Delay(1000);
 8001012:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001016:	f000 ff2f 	bl	8001e78 <HAL_Delay>

    /* Test 4: Cursor movement down */
    gdiSetCursor(center_x, center_y);
 800101a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800101c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800101e:	f7ff fc8d 	bl	800093c <gdiSetCursor>
    const char *cmd4 = "Testing ESC[B - Cursor Down";
 8001022:	4b5d      	ldr	r3, [pc, #372]	@ (8001198 <demo_vt100_commands+0x288>)
 8001024:	61bb      	str	r3, [r7, #24]
    for(const char *p = cmd4; *p; p++) {
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	643b      	str	r3, [r7, #64]	@ 0x40
 800102a:	e007      	b.n	800103c <demo_vt100_commands+0x12c>
        gdiPutChar(*p);
 800102c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fcbf 	bl	80009b4 <gdiPutChar>
    for(const char *p = cmd4; *p; p++) {
 8001036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001038:	3301      	adds	r3, #1
 800103a:	643b      	str	r3, [r7, #64]	@ 0x40
 800103c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f3      	bne.n	800102c <demo_vt100_commands+0x11c>
    }
    HAL_Delay(1000);
 8001044:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001048:	f000 ff16 	bl	8001e78 <HAL_Delay>
    vt100_process_buffer((const uint8_t*)"\x1B[2B", 4); // Move down 2 lines
 800104c:	2104      	movs	r1, #4
 800104e:	4853      	ldr	r0, [pc, #332]	@ (800119c <demo_vt100_commands+0x28c>)
 8001050:	f000 fe68 	bl	8001d24 <vt100_process_buffer>
    print_cursor();
 8001054:	463b      	mov	r3, r7
 8001056:	469c      	mov	ip, r3
 8001058:	f7ff ff48 	bl	8000eec <print_cursor.0>
    HAL_Delay(1000);
 800105c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001060:	f000 ff0a 	bl	8001e78 <HAL_Delay>

    /* Test 5: Cursor movement right */
    gdiSetCursor(center_x, center_y);
 8001064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001066:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001068:	f7ff fc68 	bl	800093c <gdiSetCursor>
    const char *cmd5 = "Testing ESC[C - Cursor Right";
 800106c:	4b4c      	ldr	r3, [pc, #304]	@ (80011a0 <demo_vt100_commands+0x290>)
 800106e:	617b      	str	r3, [r7, #20]
    for(const char *p = cmd5; *p; p++) {
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001074:	e007      	b.n	8001086 <demo_vt100_commands+0x176>
        gdiPutChar(*p);
 8001076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fc9a 	bl	80009b4 <gdiPutChar>
    for(const char *p = cmd5; *p; p++) {
 8001080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001082:	3301      	adds	r3, #1
 8001084:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f3      	bne.n	8001076 <demo_vt100_commands+0x166>
    }
    HAL_Delay(1000);
 800108e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001092:	f000 fef1 	bl	8001e78 <HAL_Delay>
    vt100_process_buffer((const uint8_t*)"\x1B[5C", 4); // Move right 5 chars
 8001096:	2104      	movs	r1, #4
 8001098:	4842      	ldr	r0, [pc, #264]	@ (80011a4 <demo_vt100_commands+0x294>)
 800109a:	f000 fe43 	bl	8001d24 <vt100_process_buffer>
    print_cursor();
 800109e:	463b      	mov	r3, r7
 80010a0:	469c      	mov	ip, r3
 80010a2:	f7ff ff23 	bl	8000eec <print_cursor.0>
    HAL_Delay(1000);
 80010a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010aa:	f000 fee5 	bl	8001e78 <HAL_Delay>

    /* Test 6: Cursor movement left */
    gdiSetCursor(center_x, center_y);
 80010ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80010b2:	f7ff fc43 	bl	800093c <gdiSetCursor>
    const char *cmd6 = "Testing ESC[D - Cursor Left";
 80010b6:	4b3c      	ldr	r3, [pc, #240]	@ (80011a8 <demo_vt100_commands+0x298>)
 80010b8:	613b      	str	r3, [r7, #16]
    for(const char *p = cmd6; *p; p++) {
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80010be:	e007      	b.n	80010d0 <demo_vt100_commands+0x1c0>
        gdiPutChar(*p);
 80010c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fc75 	bl	80009b4 <gdiPutChar>
    for(const char *p = cmd6; *p; p++) {
 80010ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010cc:	3301      	adds	r3, #1
 80010ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80010d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f3      	bne.n	80010c0 <demo_vt100_commands+0x1b0>
    }
    HAL_Delay(1000);
 80010d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010dc:	f000 fecc 	bl	8001e78 <HAL_Delay>
    vt100_process_buffer((const uint8_t*)"\x1B[5D", 4); // Move left 5 chars
 80010e0:	2104      	movs	r1, #4
 80010e2:	4832      	ldr	r0, [pc, #200]	@ (80011ac <demo_vt100_commands+0x29c>)
 80010e4:	f000 fe1e 	bl	8001d24 <vt100_process_buffer>
    print_cursor();
 80010e8:	463b      	mov	r3, r7
 80010ea:	469c      	mov	ip, r3
 80010ec:	f7ff fefe 	bl	8000eec <print_cursor.0>
    HAL_Delay(1000);
 80010f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010f4:	f000 fec0 	bl	8001e78 <HAL_Delay>

    /* Test 7: Absolute cursor positioning */
    gdiSetCursor(center_x, center_y);
 80010f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80010fc:	f7ff fc1e 	bl	800093c <gdiSetCursor>
    const char *cmd7 = "Testing ESC[row;colH - Absolute Position";
 8001100:	4b2b      	ldr	r3, [pc, #172]	@ (80011b0 <demo_vt100_commands+0x2a0>)
 8001102:	60fb      	str	r3, [r7, #12]
    for(const char *p = cmd7; *p; p++) {
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	637b      	str	r3, [r7, #52]	@ 0x34
 8001108:	e007      	b.n	800111a <demo_vt100_commands+0x20a>
        gdiPutChar(*p);
 800110a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fc50 	bl	80009b4 <gdiPutChar>
    for(const char *p = cmd7; *p; p++) {
 8001114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001116:	3301      	adds	r3, #1
 8001118:	637b      	str	r3, [r7, #52]	@ 0x34
 800111a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f3      	bne.n	800110a <demo_vt100_commands+0x1fa>
    }
    HAL_Delay(1000);
 8001122:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001126:	f000 fea7 	bl	8001e78 <HAL_Delay>
    vt100_process_buffer((const uint8_t*)"\x1B[12;40H", 8); // Move to row 12, col 40
 800112a:	2108      	movs	r1, #8
 800112c:	4821      	ldr	r0, [pc, #132]	@ (80011b4 <demo_vt100_commands+0x2a4>)
 800112e:	f000 fdf9 	bl	8001d24 <vt100_process_buffer>
    print_cursor();
 8001132:	463b      	mov	r3, r7
 8001134:	469c      	mov	ip, r3
 8001136:	f7ff fed9 	bl	8000eec <print_cursor.0>
    HAL_Delay(1000);
 800113a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800113e:	f000 fe9b 	bl	8001e78 <HAL_Delay>

    /* Final message */
    vt100_process_buffer((const uint8_t*)"\x1B[2J", 4); // Clear screen
 8001142:	2104      	movs	r1, #4
 8001144:	4811      	ldr	r0, [pc, #68]	@ (800118c <demo_vt100_commands+0x27c>)
 8001146:	f000 fded 	bl	8001d24 <vt100_process_buffer>
    gdiSetCursor(center_x, center_y);
 800114a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800114c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800114e:	f7ff fbf5 	bl	800093c <gdiSetCursor>
    const char *final = "VT100 Command Demo Complete!";
 8001152:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <demo_vt100_commands+0x2a8>)
 8001154:	60bb      	str	r3, [r7, #8]
    for(const char *p = final; p++;) {
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	633b      	str	r3, [r7, #48]	@ 0x30
 800115a:	e004      	b.n	8001166 <demo_vt100_commands+0x256>
        gdiPutChar(*p);
 800115c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fc27 	bl	80009b4 <gdiPutChar>
    for(const char *p = final; p++;) {
 8001166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001168:	1c5a      	adds	r2, r3, #1
 800116a:	633a      	str	r2, [r7, #48]	@ 0x30
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f5      	bne.n	800115c <demo_vt100_commands+0x24c>
    }
    HAL_Delay(2000);
 8001170:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001174:	f000 fe80 	bl	8001e78 <HAL_Delay>
}
 8001178:	bf00      	nop
 800117a:	3750      	adds	r7, #80	@ 0x50
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	0800724c 	.word	0x0800724c
 8001184:	08007268 	.word	0x08007268
 8001188:	0800726c 	.word	0x0800726c
 800118c:	0800728c 	.word	0x0800728c
 8001190:	08007294 	.word	0x08007294
 8001194:	080072b0 	.word	0x080072b0
 8001198:	080072b8 	.word	0x080072b8
 800119c:	080072d4 	.word	0x080072d4
 80011a0:	080072dc 	.word	0x080072dc
 80011a4:	080072fc 	.word	0x080072fc
 80011a8:	08007304 	.word	0x08007304
 80011ac:	08007320 	.word	0x08007320
 80011b0:	08007328 	.word	0x08007328
 80011b4:	08007354 	.word	0x08007354
 80011b8:	08007360 	.word	0x08007360

080011bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011c0:	f000 fde9 	bl	8001d96 <HAL_Init>

  /* USER CODE BEGIN Init */
	HAL_I2S_DeInit(&hi2s2);
 80011c4:	4835      	ldr	r0, [pc, #212]	@ (800129c <main+0xe0>)
 80011c6:	f001 fe19 	bl	8002dfc <HAL_I2S_DeInit>
	HAL_TIM_OC_DeInit(&htim2);
 80011ca:	4835      	ldr	r0, [pc, #212]	@ (80012a0 <main+0xe4>)
 80011cc:	f003 fde3 	bl	8004d96 <HAL_TIM_OC_DeInit>
	HAL_TIM_OC_DeInit(&htim3);
 80011d0:	4834      	ldr	r0, [pc, #208]	@ (80012a4 <main+0xe8>)
 80011d2:	f003 fde0 	bl	8004d96 <HAL_TIM_OC_DeInit>
	Gpio_deinit(GPIOA);
 80011d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011da:	f7ff fdf7 	bl	8000dcc <Gpio_deinit>
	Gpio_deinit(GPIOB);
 80011de:	4832      	ldr	r0, [pc, #200]	@ (80012a8 <main+0xec>)
 80011e0:	f7ff fdf4 	bl	8000dcc <Gpio_deinit>
	Gpio_deinit(GPIOC);
 80011e4:	4831      	ldr	r0, [pc, #196]	@ (80012ac <main+0xf0>)
 80011e6:	f7ff fdf1 	bl	8000dcc <Gpio_deinit>
	HAL_DMA_DeInit(&hdma_tim3_ch1);
 80011ea:	4831      	ldr	r0, [pc, #196]	@ (80012b0 <main+0xf4>)
 80011ec:	f001 f81e 	bl	800222c <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_tim3_ch3);
 80011f0:	4830      	ldr	r0, [pc, #192]	@ (80012b4 <main+0xf8>)
 80011f2:	f001 f81b 	bl	800222c <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_spi2_tx);
 80011f6:	4830      	ldr	r0, [pc, #192]	@ (80012b8 <main+0xfc>)
 80011f8:	f001 f818 	bl	800222c <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_tim3_ch4);
 80011fc:	482f      	ldr	r0, [pc, #188]	@ (80012bc <main+0x100>)
 80011fe:	f001 f815 	bl	800222c <HAL_DMA_DeInit>
  /* --- Enable Flash prefetch and caches before changing SYSCLK --- */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001202:	4b2f      	ldr	r3, [pc, #188]	@ (80012c0 <main+0x104>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a2e      	ldr	r2, [pc, #184]	@ (80012c0 <main+0x104>)
 8001208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800120c:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800120e:	4b2c      	ldr	r3, [pc, #176]	@ (80012c0 <main+0x104>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a2b      	ldr	r2, [pc, #172]	@ (80012c0 <main+0x104>)
 8001214:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001218:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800121a:	4b29      	ldr	r3, [pc, #164]	@ (80012c0 <main+0x104>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a28      	ldr	r2, [pc, #160]	@ (80012c0 <main+0x104>)
 8001220:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001224:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001226:	f000 f851 	bl	80012cc <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122a:	f000 fa6d 	bl	8001708 <MX_GPIO_Init>
  MX_DMA_Init();
 800122e:	f000 fa29 	bl	8001684 <MX_DMA_Init>
  MX_TIM2_Init();
 8001232:	f000 f8bd 	bl	80013b0 <MX_TIM2_Init>
  MX_I2S2_Init();
 8001236:	f000 f893 	bl	8001360 <MX_I2S2_Init>
  TIMER_SET(HAL_RCC_GetSysClockFreq());
 800123a:	f002 fc21 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 800123e:	4603      	mov	r3, r0
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fddb 	bl	8000dfc <TIMER_SET>
  MX_TIM3_Init();
 8001246:	f000 f947 	bl	80014d8 <MX_TIM3_Init>
  //Video_SetupTiming();
  // 1) How many timer ticks per half-word at your clock?


  //do know if it is necessary
  HAL_TIM_Base_Start(&htim2); // start the timer for the video sync
 800124a:	4815      	ldr	r0, [pc, #84]	@ (80012a0 <main+0xe4>)
 800124c:	f003 fcdc 	bl	8004c08 <HAL_TIM_Base_Start>

  //HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);  // OC4Ref → TRGO


  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8001250:	2100      	movs	r1, #0
 8001252:	4814      	ldr	r0, [pc, #80]	@ (80012a4 <main+0xe8>)
 8001254:	f003 fe10 	bl	8004e78 <HAL_TIM_OC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // this the same
 8001258:	2104      	movs	r1, #4
 800125a:	4812      	ldr	r0, [pc, #72]	@ (80012a4 <main+0xe8>)
 800125c:	f003 ff80 	bl	8005160 <HAL_TIM_PWM_Start>
  //HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3);
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_4);
 8001260:	210c      	movs	r1, #12
 8001262:	4810      	ldr	r0, [pc, #64]	@ (80012a4 <main+0xe8>)
 8001264:	f003 fe08 	bl	8004e78 <HAL_TIM_OC_Start>
//  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);  // also enable CC1DE for VSync

  //HAL_Delay(1);

  // 2) LINE BUFFERS → I2S DMA CMAR at back porch (CC3)
  HAL_DMA_Start(
 8001268:	4916      	ldr	r1, [pc, #88]	@ (80012c4 <main+0x108>)
    &hdma_tim3_ch3,
    (uint32_t)lineptrs,                 // memory: array of line-buffer addresses
    (uint32_t)&hdma_spi2_tx.Instance->CMAR,
 800126a:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <main+0xfc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	330c      	adds	r3, #12
  HAL_DMA_Start(
 8001270:	461a      	mov	r2, r3
 8001272:	f240 2371 	movw	r3, #625	@ 0x271
 8001276:	480f      	ldr	r0, [pc, #60]	@ (80012b4 <main+0xf8>)
 8001278:	f001 f86e 	bl	8002358 <HAL_DMA_Start>
//    (uint32_t)&hdma_spi2_tx.Instance->CMAR,
//    VID_VSIZE// one entry per line
//  );

  // 4) Kick off the I2S DMA stream once
  HAL_I2S_Transmit_DMA(
 800127c:	2220      	movs	r2, #32
 800127e:	4912      	ldr	r1, [pc, #72]	@ (80012c8 <main+0x10c>)
 8001280:	4806      	ldr	r0, [pc, #24]	@ (800129c <main+0xe0>)
 8001282:	f001 fde3 	bl	8002e4c <HAL_I2S_Transmit_DMA>
  //gdiDrawTextEx(140, 90, "IDAN");
//  gdiDrawTextEx(150, 80, "RUBEN");
//  gdiDrawTextEx(160, 100, "a");

  //static uint8_t rx_byte;
  vt100_init();
 8001286:	f000 fd47 	bl	8001d18 <vt100_init>
  //HAL_Delay(1);

  while (1)
  {
	  demo_vt100_commands();
 800128a:	f7ff fe41 	bl	8000f10 <demo_vt100_commands>
	  HAL_Delay(1000);
 800128e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001292:	f000 fdf1 	bl	8001e78 <HAL_Delay>
	  demo_vt100_commands();
 8001296:	bf00      	nop
 8001298:	e7f7      	b.n	800128a <main+0xce>
 800129a:	bf00      	nop
 800129c:	20003ac4 	.word	0x20003ac4
 80012a0:	20003b60 	.word	0x20003b60
 80012a4:	20003bac 	.word	0x20003bac
 80012a8:	48000400 	.word	0x48000400
 80012ac:	48000800 	.word	0x48000800
 80012b0:	20003bf8 	.word	0x20003bf8
 80012b4:	20003c58 	.word	0x20003c58
 80012b8:	20003b00 	.word	0x20003b00
 80012bc:	20003cb8 	.word	0x20003cb8
 80012c0:	40022000 	.word	0x40022000
 80012c4:	20003068 	.word	0x20003068
 80012c8:	08007784 	.word	0x08007784

080012cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b094      	sub	sp, #80	@ 0x50
 80012d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d2:	f107 0318 	add.w	r3, r7, #24
 80012d6:	2238      	movs	r2, #56	@ 0x38
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f005 fa06 	bl	80066ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012f2:	f001 fec3 	bl	800307c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f6:	2301      	movs	r3, #1
 80012f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012fa:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80012fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001300:	2302      	movs	r3, #2
 8001302:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001304:	2303      	movs	r3, #3
 8001306:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001308:	2301      	movs	r3, #1
 800130a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 30;
 800130c:	231e      	movs	r3, #30
 800130e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV10;
 8001310:	230a      	movs	r3, #10
 8001312:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8001314:	2308      	movs	r3, #8
 8001316:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001318:	2302      	movs	r3, #2
 800131a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131c:	f107 0318 	add.w	r3, r7, #24
 8001320:	4618      	mov	r0, r3
 8001322:	f001 ff5f 	bl	80031e4 <HAL_RCC_OscConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800132c:	f000 fa1c 	bl	8001768 <Error_Handler>

  // 8mhz *12 / 2

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001330:	230f      	movs	r3, #15
 8001332:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001334:	2303      	movs	r3, #3
 8001336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]



  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2105      	movs	r1, #5
 8001348:	4618      	mov	r0, r3
 800134a:	f002 fa5d 	bl	8003808 <HAL_RCC_ClockConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001354:	f000 fa08 	bl	8001768 <Error_Handler>
  }
}
 8001358:	bf00      	nop
 800135a:	3750      	adds	r7, #80	@ 0x50
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2S2_Init 1 */
	//hi2s2.Init.CPOL = I2S_CPOL_HIGH;

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001364:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <MX_I2S2_Init+0x48>)
 8001366:	4a11      	ldr	r2, [pc, #68]	@ (80013ac <MX_I2S2_Init+0x4c>)
 8001368:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800136a:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <MX_I2S2_Init+0x48>)
 800136c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001370:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001372:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <MX_I2S2_Init+0x48>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001378:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <MX_I2S2_Init+0x48>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800137e:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <MX_I2S2_Init+0x48>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001384:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <MX_I2S2_Init+0x48>)
 8001386:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800138a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <MX_I2S2_Init+0x48>)
 800138e:	2208      	movs	r2, #8
 8001390:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <MX_I2S2_Init+0x48>)
 8001394:	f001 fc52 	bl	8002c3c <HAL_I2S_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800139e:	f000 f9e3 	bl	8001768 <Error_Handler>
//   SPI2->I2SPR = 1;   // I2SDIV = 1, ODD = 0
//   __HAL_I2S_ENABLE(&hi2s2);

  /* USER CODE END I2S2_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20003ac4 	.word	0x20003ac4
 80013ac:	40003800 	.word	0x40003800

080013b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b094      	sub	sp, #80	@ 0x50
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	f107 0320 	add.w	r3, r7, #32
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
 80013ee:	615a      	str	r2, [r3, #20]
 80013f0:	619a      	str	r2, [r3, #24]
  //htim2.Init.Prescaler         = VID_HSIZE/4 - 1; // 32/4 -1 = 7
  //htim2.Init.Period            = 2*VID_VSIZE - 1; // 2*625-1 = 1249
  //sConfigOC.Pulse      = VID_VSIZE - 1;

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013f2:	4b38      	ldr	r3, [pc, #224]	@ (80014d4 <MX_TIM2_Init+0x124>)
 80013f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VID_HSIZE/4 - 1; // 32/4 -1 = 7
 80013fa:	4b36      	ldr	r3, [pc, #216]	@ (80014d4 <MX_TIM2_Init+0x124>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001400:	4b34      	ldr	r3, [pc, #208]	@ (80014d4 <MX_TIM2_Init+0x124>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2*VID_VSIZE - 1; // 2*625-1 = 1249
 8001406:	4b33      	ldr	r3, [pc, #204]	@ (80014d4 <MX_TIM2_Init+0x124>)
 8001408:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800140c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800140e:	4b31      	ldr	r3, [pc, #196]	@ (80014d4 <MX_TIM2_Init+0x124>)
 8001410:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001414:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001416:	4b2f      	ldr	r3, [pc, #188]	@ (80014d4 <MX_TIM2_Init+0x124>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800141c:	482d      	ldr	r0, [pc, #180]	@ (80014d4 <MX_TIM2_Init+0x124>)
 800141e:	f003 fb9b 	bl	8004b58 <HAL_TIM_Base_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001428:	f000 f99e 	bl	8001768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE1;
 800142c:	2370      	movs	r3, #112	@ 0x70
 800142e:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001430:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001434:	4619      	mov	r1, r3
 8001436:	4827      	ldr	r0, [pc, #156]	@ (80014d4 <MX_TIM2_Init+0x124>)
 8001438:	f004 f932 	bl	80056a0 <HAL_TIM_ConfigClockSource>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001442:	f000 f991 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001446:	4823      	ldr	r0, [pc, #140]	@ (80014d4 <MX_TIM2_Init+0x124>)
 8001448:	f003 fe28 	bl	800509c <HAL_TIM_PWM_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 8001452:	f000 f989 	bl	8001768 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;//NEEDS TO BE CHECK WITH EXTERNAL1
 8001456:	2306      	movs	r3, #6
 8001458:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 800145a:	2370      	movs	r3, #112	@ 0x70
 800145c:	633b      	str	r3, [r7, #48]	@ 0x30
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 800145e:	2300      	movs	r3, #0
 8001460:	637b      	str	r3, [r7, #52]	@ 0x34
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	63bb      	str	r3, [r7, #56]	@ 0x38
  sSlaveConfig.TriggerFilter = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800146a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800146e:	4619      	mov	r1, r3
 8001470:	4818      	ldr	r0, [pc, #96]	@ (80014d4 <MX_TIM2_Init+0x124>)
 8001472:	f004 fa2b 	bl	80058cc <HAL_TIM_SlaveConfigSynchro>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800147c:	f000 f974 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF; // OC4Ref → TRGO;
 8001480:	2370      	movs	r3, #112	@ 0x70
 8001482:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001484:	2380      	movs	r3, #128	@ 0x80
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001488:	f107 0320 	add.w	r3, r7, #32
 800148c:	4619      	mov	r1, r3
 800148e:	4811      	ldr	r0, [pc, #68]	@ (80014d4 <MX_TIM2_Init+0x124>)
 8001490:	f004 ffde 	bl	8006450 <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800149a:	f000 f965 	bl	8001768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149e:	2360      	movs	r3, #96	@ 0x60
 80014a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse =  VID_VSIZE - 1;
 80014a2:	f44f 731c 	mov.w	r3, #624	@ 0x270
 80014a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80014a8:	2302      	movs	r3, #2
 80014aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	220c      	movs	r2, #12
 80014b4:	4619      	mov	r1, r3
 80014b6:	4807      	ldr	r0, [pc, #28]	@ (80014d4 <MX_TIM2_Init+0x124>)
 80014b8:	f003 ffde 	bl	8005478 <HAL_TIM_PWM_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM2_Init+0x116>
  {
    Error_Handler();
 80014c2:	f000 f951 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014c6:	4803      	ldr	r0, [pc, #12]	@ (80014d4 <MX_TIM2_Init+0x124>)
 80014c8:	f000 fb0c 	bl	8001ae4 <HAL_TIM_MspPostInit>

}
 80014cc:	bf00      	nop
 80014ce:	3750      	adds	r7, #80	@ 0x50
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20003b60 	.word	0x20003b60

080014d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b094      	sub	sp, #80	@ 0x50
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	f107 0320 	add.w	r3, r7, #32
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	619a      	str	r2, [r3, #24]

  //FOR CHANNEL 2:
  //sConfigOC.Pulse = HSYNCCOUNTS;

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800151a:	4b58      	ldr	r3, [pc, #352]	@ (800167c <MX_TIM3_Init+0x1a4>)
 800151c:	4a58      	ldr	r2, [pc, #352]	@ (8001680 <MX_TIM3_Init+0x1a8>)
 800151e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001520:	4b56      	ldr	r3, [pc, #344]	@ (800167c <MX_TIM3_Init+0x1a4>)
 8001522:	2200      	movs	r2, #0
 8001524:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	4b55      	ldr	r3, [pc, #340]	@ (800167c <MX_TIM3_Init+0x1a4>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIMERCOUNTS - 1;
 800152c:	4b53      	ldr	r3, [pc, #332]	@ (800167c <MX_TIM3_Init+0x1a4>)
 800152e:	f641 52ff 	movw	r2, #7679	@ 0x1dff
 8001532:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001534:	4b51      	ldr	r3, [pc, #324]	@ (800167c <MX_TIM3_Init+0x1a4>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153a:	4b50      	ldr	r3, [pc, #320]	@ (800167c <MX_TIM3_Init+0x1a4>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001540:	484e      	ldr	r0, [pc, #312]	@ (800167c <MX_TIM3_Init+0x1a4>)
 8001542:	f003 fb09 	bl	8004b58 <HAL_TIM_Base_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800154c:	f000 f90c 	bl	8001768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001554:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001556:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800155a:	4619      	mov	r1, r3
 800155c:	4847      	ldr	r0, [pc, #284]	@ (800167c <MX_TIM3_Init+0x1a4>)
 800155e:	f004 f89f 	bl	80056a0 <HAL_TIM_ConfigClockSource>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001568:	f000 f8fe 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800156c:	4843      	ldr	r0, [pc, #268]	@ (800167c <MX_TIM3_Init+0x1a4>)
 800156e:	f003 fbbb 	bl	8004ce8 <HAL_TIM_OC_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8001578:	f000 f8f6 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800157c:	483f      	ldr	r0, [pc, #252]	@ (800167c <MX_TIM3_Init+0x1a4>)
 800157e:	f003 fd8d 	bl	800509c <HAL_TIM_PWM_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001588:	f000 f8ee 	bl	8001768 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800158c:	2306      	movs	r3, #6
 800158e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001590:	2310      	movs	r3, #16
 8001592:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001594:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001598:	4619      	mov	r1, r3
 800159a:	4838      	ldr	r0, [pc, #224]	@ (800167c <MX_TIM3_Init+0x1a4>)
 800159c:	f004 f996 	bl	80058cc <HAL_TIM_SlaveConfigSynchro>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80015a6:	f000 f8df 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80015ae:	2380      	movs	r3, #128	@ 0x80
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b2:	f107 0320 	add.w	r3, r7, #32
 80015b6:	4619      	mov	r1, r3
 80015b8:	4830      	ldr	r0, [pc, #192]	@ (800167c <MX_TIM3_Init+0x1a4>)
 80015ba:	f004 ff49 	bl	8006450 <HAL_TIMEx_MasterConfigSynchronization>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80015c4:	f000 f8d0 	bl	8001768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80015c8:	2330      	movs	r3, #48	@ 0x30
 80015ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = NO_TOG;
 80015cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80015d2:	2302      	movs	r3, #2
 80015d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2200      	movs	r2, #0
 80015de:	4619      	mov	r1, r3
 80015e0:	4826      	ldr	r0, [pc, #152]	@ (800167c <MX_TIM3_Init+0x1a4>)
 80015e2:	f003 fecf 	bl	8005384 <HAL_TIM_OC_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80015ec:	f000 f8bc 	bl	8001768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f0:	2360      	movs	r3, #96	@ 0x60
 80015f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = HSYNCCOUNTS;//HSYNCCOUNTS;
 80015f4:	f44f 730d 	mov.w	r3, #564	@ 0x234
 80015f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2204      	movs	r2, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	481e      	ldr	r0, [pc, #120]	@ (800167c <MX_TIM3_Init+0x1a4>)
 8001602:	f003 ff39 	bl	8005478 <HAL_TIM_PWM_ConfigChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM3_Init+0x138>
  {
    Error_Handler();
 800160c:	f000 f8ac 	bl	8001768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1100;//208;
 8001614:	f240 434c 	movw	r3, #1100	@ 0x44c
 8001618:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2208      	movs	r2, #8
 800161e:	4619      	mov	r1, r3
 8001620:	4816      	ldr	r0, [pc, #88]	@ (800167c <MX_TIM3_Init+0x1a4>)
 8001622:	f003 feaf 	bl	8005384 <HAL_TIM_OC_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM3_Init+0x158>
  {
    Error_Handler();
 800162c:	f000 f89c 	bl	8001768 <Error_Handler>
  }
  sConfigOC.Pulse = 7300;//(672+208);//(672+208);
 8001630:	f641 4384 	movw	r3, #7300	@ 0x1c84
 8001634:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	220c      	movs	r2, #12
 800163a:	4619      	mov	r1, r3
 800163c:	480f      	ldr	r0, [pc, #60]	@ (800167c <MX_TIM3_Init+0x1a4>)
 800163e:	f003 fea1 	bl	8005384 <HAL_TIM_OC_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM3_Init+0x174>
  {
    Error_Handler();
 8001648:	f000 f88e 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  //TIM_DMACmd(TIM3, TIM_DMA_CC1|TIM_DMA_CC3, ENABLE);
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800164c:	480b      	ldr	r0, [pc, #44]	@ (800167c <MX_TIM3_Init+0x1a4>)
 800164e:	f000 fa49 	bl	8001ae4 <HAL_TIM_MspPostInit>
  /* Allow TIM3 Compare-3 (CC3) and Compare-4 (CC4) events to generate DMA requests */
  //__HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC2);
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC3);   // CC3DE bit → DMA request on CC3
 8001652:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <MX_TIM3_Init+0x1a4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <MX_TIM3_Init+0x1a4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001660:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC4);   // CC4DE bit → DMA request on CC4
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <MX_TIM3_Init+0x1a4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	4b04      	ldr	r3, [pc, #16]	@ (800167c <MX_TIM3_Init+0x1a4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001670:	60da      	str	r2, [r3, #12]
  //__HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
  //__HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);

}
 8001672:	bf00      	nop
 8001674:	3750      	adds	r7, #80	@ 0x50
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20003bac 	.word	0x20003bac
 8001680:	40000400 	.word	0x40000400

08001684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800168a:	4b1e      	ldr	r3, [pc, #120]	@ (8001704 <MX_DMA_Init+0x80>)
 800168c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800168e:	4a1d      	ldr	r2, [pc, #116]	@ (8001704 <MX_DMA_Init+0x80>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6493      	str	r3, [r2, #72]	@ 0x48
 8001696:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <MX_DMA_Init+0x80>)
 8001698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016a2:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <MX_DMA_Init+0x80>)
 80016a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016a6:	4a17      	ldr	r2, [pc, #92]	@ (8001704 <MX_DMA_Init+0x80>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <MX_DMA_Init+0x80>)
 80016b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	200c      	movs	r0, #12
 80016c0:	f000 fcd7 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016c4:	200c      	movs	r0, #12
 80016c6:	f000 fcee 	bl	80020a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	200d      	movs	r0, #13
 80016d0:	f000 fccf 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016d4:	200d      	movs	r0, #13
 80016d6:	f000 fce6 	bl	80020a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	200f      	movs	r0, #15
 80016e0:	f000 fcc7 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80016e4:	200f      	movs	r0, #15
 80016e6:	f000 fcde 	bl	80020a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	2010      	movs	r0, #16
 80016f0:	f000 fcbf 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80016f4:	2010      	movs	r0, #16
 80016f6:	f000 fcd6 	bl	80020a6 <HAL_NVIC_EnableIRQ>

}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000

08001708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <MX_GPIO_Init+0x5c>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	4a14      	ldr	r2, [pc, #80]	@ (8001764 <MX_GPIO_Init+0x5c>)
 8001714:	f043 0320 	orr.w	r3, r3, #32
 8001718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171a:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <MX_GPIO_Init+0x5c>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	f003 0320 	and.w	r3, r3, #32
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <MX_GPIO_Init+0x5c>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	4a0e      	ldr	r2, [pc, #56]	@ (8001764 <MX_GPIO_Init+0x5c>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001732:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <MX_GPIO_Init+0x5c>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <MX_GPIO_Init+0x5c>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	4a08      	ldr	r2, [pc, #32]	@ (8001764 <MX_GPIO_Init+0x5c>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <MX_GPIO_Init+0x5c>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */


  /* USER CODE END MX_GPIO_Init_2 */
}
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000

08001768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800176c:	b672      	cpsid	i
}
 800176e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <Error_Handler+0x8>

08001774 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <HAL_MspInit+0x44>)
 800177c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800177e:	4a0e      	ldr	r2, [pc, #56]	@ (80017b8 <HAL_MspInit+0x44>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6613      	str	r3, [r2, #96]	@ 0x60
 8001786:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <HAL_MspInit+0x44>)
 8001788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <HAL_MspInit+0x44>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001796:	4a08      	ldr	r2, [pc, #32]	@ (80017b8 <HAL_MspInit+0x44>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800179c:	6593      	str	r3, [r2, #88]	@ 0x58
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <HAL_MspInit+0x44>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017aa:	f001 fd0b 	bl	80031c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b09e      	sub	sp, #120	@ 0x78
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	2254      	movs	r2, #84	@ 0x54
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f004 ff85 	bl	80066ec <memset>
  if(hi2s->Instance==SPI2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a35      	ldr	r2, [pc, #212]	@ (80018bc <HAL_I2S_MspInit+0x100>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d163      	bne.n	80018b4 <HAL_I2S_MspInit+0xf8>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80017ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 fa20 	bl	8003c40 <HAL_RCCEx_PeriphCLKConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 8001806:	f7ff ffaf 	bl	8001768 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800180a:	4b2d      	ldr	r3, [pc, #180]	@ (80018c0 <HAL_I2S_MspInit+0x104>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180e:	4a2c      	ldr	r2, [pc, #176]	@ (80018c0 <HAL_I2S_MspInit+0x104>)
 8001810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001814:	6593      	str	r3, [r2, #88]	@ 0x58
 8001816:	4b2a      	ldr	r3, [pc, #168]	@ (80018c0 <HAL_I2S_MspInit+0x104>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	4b27      	ldr	r3, [pc, #156]	@ (80018c0 <HAL_I2S_MspInit+0x104>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001826:	4a26      	ldr	r2, [pc, #152]	@ (80018c0 <HAL_I2S_MspInit+0x104>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182e:	4b24      	ldr	r3, [pc, #144]	@ (80018c0 <HAL_I2S_MspInit+0x104>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800183a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800183e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800184c:	2305      	movs	r3, #5
 800184e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001854:	4619      	mov	r1, r3
 8001856:	481b      	ldr	r0, [pc, #108]	@ (80018c4 <HAL_I2S_MspInit+0x108>)
 8001858:	f000 ff8c 	bl	8002774 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800185c:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <HAL_I2S_MspInit+0x10c>)
 800185e:	4a1b      	ldr	r2, [pc, #108]	@ (80018cc <HAL_I2S_MspInit+0x110>)
 8001860:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001862:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <HAL_I2S_MspInit+0x10c>)
 8001864:	220d      	movs	r2, #13
 8001866:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001868:	4b17      	ldr	r3, [pc, #92]	@ (80018c8 <HAL_I2S_MspInit+0x10c>)
 800186a:	2210      	movs	r2, #16
 800186c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800186e:	4b16      	ldr	r3, [pc, #88]	@ (80018c8 <HAL_I2S_MspInit+0x10c>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001874:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <HAL_I2S_MspInit+0x10c>)
 8001876:	2280      	movs	r2, #128	@ 0x80
 8001878:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800187a:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <HAL_I2S_MspInit+0x10c>)
 800187c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001880:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <HAL_I2S_MspInit+0x10c>)
 8001884:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001888:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800188a:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <HAL_I2S_MspInit+0x10c>)
 800188c:	2220      	movs	r2, #32
 800188e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001890:	4b0d      	ldr	r3, [pc, #52]	@ (80018c8 <HAL_I2S_MspInit+0x10c>)
 8001892:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001896:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001898:	480b      	ldr	r0, [pc, #44]	@ (80018c8 <HAL_I2S_MspInit+0x10c>)
 800189a:	f000 fc1f 	bl	80020dc <HAL_DMA_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_I2S_MspInit+0xec>
    {
      Error_Handler();
 80018a4:	f7ff ff60 	bl	8001768 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a07      	ldr	r2, [pc, #28]	@ (80018c8 <HAL_I2S_MspInit+0x10c>)
 80018ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018ae:	4a06      	ldr	r2, [pc, #24]	@ (80018c8 <HAL_I2S_MspInit+0x10c>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80018b4:	bf00      	nop
 80018b6:	3778      	adds	r7, #120	@ 0x78
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40003800 	.word	0x40003800
 80018c0:	40021000 	.word	0x40021000
 80018c4:	48000400 	.word	0x48000400
 80018c8:	20003b00 	.word	0x20003b00
 80018cc:	40020058 	.word	0x40020058

080018d0 <HAL_I2S_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspDeInit(I2S_HandleTypeDef* hi2s)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance==SPI2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0b      	ldr	r2, [pc, #44]	@ (800190c <HAL_I2S_MspDeInit+0x3c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d10f      	bne.n	8001902 <HAL_I2S_MspDeInit+0x32>
  {
    /* USER CODE BEGIN SPI2_MspDeInit 0 */

    /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 80018e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <HAL_I2S_MspDeInit+0x40>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001910 <HAL_I2S_MspDeInit+0x40>)
 80018e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018ec:	6593      	str	r3, [r2, #88]	@ 0x58
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 80018ee:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 80018f2:	4808      	ldr	r0, [pc, #32]	@ (8001914 <HAL_I2S_MspDeInit+0x44>)
 80018f4:	f001 f8c0 	bl	8002a78 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(hi2s->hdmatx);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 fc95 	bl	800222c <HAL_DMA_DeInit>
    /* USER CODE BEGIN SPI2_MspDeInit 1 */

    /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40003800 	.word	0x40003800
 8001910:	40021000 	.word	0x40021000
 8001914:	48000400 	.word	0x48000400

08001918 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	@ 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001938:	d129      	bne.n	800198e <HAL_TIM_Base_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800193a:	4b62      	ldr	r3, [pc, #392]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x1ac>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193e:	4a61      	ldr	r2, [pc, #388]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6593      	str	r3, [r2, #88]	@ 0x58
 8001946:	4b5f      	ldr	r3, [pc, #380]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b5c      	ldr	r3, [pc, #368]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001956:	4a5b      	ldr	r2, [pc, #364]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800195e:	4b59      	ldr	r3, [pc, #356]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800196a:	2301      	movs	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 800197a:	230e      	movs	r3, #14
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001988:	f000 fef4 	bl	8002774 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800198c:	e095      	b.n	8001aba <HAL_TIM_Base_MspInit+0x1a2>
  else if(htim_base->Instance==TIM3)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a4d      	ldr	r2, [pc, #308]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x1b0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	f040 8090 	bne.w	8001aba <HAL_TIM_Base_MspInit+0x1a2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800199a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x1ac>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199e:	4a49      	ldr	r2, [pc, #292]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x1ac>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a6:	4b47      	ldr	r3, [pc, #284]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x1ac>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Channel6;
 80019b2:	4b46      	ldr	r3, [pc, #280]	@ (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 80019b4:	4a46      	ldr	r2, [pc, #280]	@ (8001ad0 <HAL_TIM_Base_MspInit+0x1b8>)
 80019b6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80019b8:	4b44      	ldr	r3, [pc, #272]	@ (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 80019ba:	223d      	movs	r2, #61	@ 0x3d
 80019bc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019be:	4b43      	ldr	r3, [pc, #268]	@ (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 80019c0:	2210      	movs	r2, #16
 80019c2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c4:	4b41      	ldr	r3, [pc, #260]	@ (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80019ca:	4b40      	ldr	r3, [pc, #256]	@ (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 80019cc:	2280      	movs	r2, #128	@ 0x80
 80019ce:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019d0:	4b3e      	ldr	r3, [pc, #248]	@ (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 80019d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019d6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019d8:	4b3c      	ldr	r3, [pc, #240]	@ (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 80019da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019de:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_CIRCULAR;
 80019e0:	4b3a      	ldr	r3, [pc, #232]	@ (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 80019e2:	2220      	movs	r2, #32
 80019e4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019e6:	4b39      	ldr	r3, [pc, #228]	@ (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 80019e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80019ee:	4837      	ldr	r0, [pc, #220]	@ (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 80019f0:	f000 fb74 	bl	80020dc <HAL_DMA_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_TIM_Base_MspInit+0xe6>
      Error_Handler();
 80019fa:	f7ff feb5 	bl	8001768 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a32      	ldr	r2, [pc, #200]	@ (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 8001a02:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a04:	4a31      	ldr	r2, [pc, #196]	@ (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 8001a0a:	4b32      	ldr	r3, [pc, #200]	@ (8001ad4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001a0c:	4a32      	ldr	r2, [pc, #200]	@ (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001a0e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 8001a10:	4b30      	ldr	r3, [pc, #192]	@ (8001ad4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001a12:	223f      	movs	r2, #63	@ 0x3f
 8001a14:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a16:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001a18:	2210      	movs	r2, #16
 8001a1a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001a22:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001a24:	2280      	movs	r2, #128	@ 0x80
 8001a26:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a28:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001a2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a2e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a30:	4b28      	ldr	r3, [pc, #160]	@ (8001ad4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001a32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a36:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8001a38:	4b26      	ldr	r3, [pc, #152]	@ (8001ad4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a3e:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001a40:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8001a46:	4823      	ldr	r0, [pc, #140]	@ (8001ad4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001a48:	f000 fb48 	bl	80020dc <HAL_DMA_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_TIM_Base_MspInit+0x13e>
      Error_Handler();
 8001a52:	f7ff fe89 	bl	8001768 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim3_ch4.Instance = DMA1_Channel3;
 8001a62:	4b1e      	ldr	r3, [pc, #120]	@ (8001adc <HAL_TIM_Base_MspInit+0x1c4>)
 8001a64:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae0 <HAL_TIM_Base_MspInit+0x1c8>)
 8001a66:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 8001a68:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <HAL_TIM_Base_MspInit+0x1c4>)
 8001a6a:	2240      	movs	r2, #64	@ 0x40
 8001a6c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <HAL_TIM_Base_MspInit+0x1c4>)
 8001a70:	2210      	movs	r2, #16
 8001a72:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a74:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <HAL_TIM_Base_MspInit+0x1c4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001a7a:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <HAL_TIM_Base_MspInit+0x1c4>)
 8001a7c:	2280      	movs	r2, #128	@ 0x80
 8001a7e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a80:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <HAL_TIM_Base_MspInit+0x1c4>)
 8001a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a86:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a88:	4b14      	ldr	r3, [pc, #80]	@ (8001adc <HAL_TIM_Base_MspInit+0x1c4>)
 8001a8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a8e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_CIRCULAR;
 8001a90:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <HAL_TIM_Base_MspInit+0x1c4>)
 8001a92:	2220      	movs	r2, #32
 8001a94:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <HAL_TIM_Base_MspInit+0x1c4>)
 8001a98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 8001a9e:	480f      	ldr	r0, [pc, #60]	@ (8001adc <HAL_TIM_Base_MspInit+0x1c4>)
 8001aa0:	f000 fb1c 	bl	80020dc <HAL_DMA_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_TIM_Base_MspInit+0x196>
      Error_Handler();
 8001aaa:	f7ff fe5d 	bl	8001768 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <HAL_TIM_Base_MspInit+0x1c4>)
 8001ab2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ab4:	4a09      	ldr	r2, [pc, #36]	@ (8001adc <HAL_TIM_Base_MspInit+0x1c4>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001aba:	bf00      	nop
 8001abc:	3728      	adds	r7, #40	@ 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40000400 	.word	0x40000400
 8001acc:	20003bf8 	.word	0x20003bf8
 8001ad0:	4002006c 	.word	0x4002006c
 8001ad4:	20003c58 	.word	0x20003c58
 8001ad8:	4002001c 	.word	0x4002001c
 8001adc:	20003cb8 	.word	0x20003cb8
 8001ae0:	40020030 	.word	0x40020030

08001ae4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	@ 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b04:	d11d      	bne.n	8001b42 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	4b22      	ldr	r3, [pc, #136]	@ (8001b90 <HAL_TIM_MspPostInit+0xac>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0a:	4a21      	ldr	r2, [pc, #132]	@ (8001b90 <HAL_TIM_MspPostInit+0xac>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b12:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <HAL_TIM_MspPostInit+0xac>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b1e:	2308      	movs	r3, #8
 8001b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b3c:	f000 fe1a 	bl	8002774 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b40:	e021      	b.n	8001b86 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a13      	ldr	r2, [pc, #76]	@ (8001b94 <HAL_TIM_MspPostInit+0xb0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d11c      	bne.n	8001b86 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4c:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <HAL_TIM_MspPostInit+0xac>)
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b50:	4a0f      	ldr	r2, [pc, #60]	@ (8001b90 <HAL_TIM_MspPostInit+0xac>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b58:	4b0d      	ldr	r3, [pc, #52]	@ (8001b90 <HAL_TIM_MspPostInit+0xac>)
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001b64:	2350      	movs	r3, #80	@ 0x50
 8001b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b68:	2312      	movs	r3, #18
 8001b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b74:	2302      	movs	r3, #2
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b82:	f000 fdf7 	bl	8002774 <HAL_GPIO_Init>
}
 8001b86:	bf00      	nop
 8001b88:	3728      	adds	r7, #40	@ 0x28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40000400 	.word	0x40000400

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <NMI_Handler+0x4>

08001ba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <MemManage_Handler+0x4>

08001bb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <BusFault_Handler+0x4>

08001bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <UsageFault_Handler+0x4>

08001bc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf0:	f000 f924 	bl	8001e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (TimingDelay != 0) {
 8001bf4:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <SysTick_Handler+0x20>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d004      	beq.n	8001c06 <SysTick_Handler+0x1a>
    --TimingDelay;
 8001bfc:	4b03      	ldr	r3, [pc, #12]	@ (8001c0c <SysTick_Handler+0x20>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	4a02      	ldr	r2, [pc, #8]	@ (8001c0c <SysTick_Handler+0x20>)
 8001c04:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20003d18 	.word	0x20003d18

08001c10 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8001c14:	4802      	ldr	r0, [pc, #8]	@ (8001c20 <DMA1_Channel2_IRQHandler+0x10>)
 8001c16:	f000 fc5d 	bl	80024d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20003c58 	.word	0x20003c58

08001c24 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 8001c28:	4802      	ldr	r0, [pc, #8]	@ (8001c34 <DMA1_Channel3_IRQHandler+0x10>)
 8001c2a:	f000 fc53 	bl	80024d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20003cb8 	.word	0x20003cb8

08001c38 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001c3c:	4802      	ldr	r0, [pc, #8]	@ (8001c48 <DMA1_Channel5_IRQHandler+0x10>)
 8001c3e:	f000 fc49 	bl	80024d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20003b00 	.word	0x20003b00

08001c4c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8001c50:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <DMA1_Channel6_IRQHandler+0x10>)
 8001c52:	f000 fc3f 	bl	80024d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20003bf8 	.word	0x20003bf8

08001c60 <TIM3_IRQHandler>:
//  }
//}


void TIM3_IRQHandler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
//		TIM3->SR = TIM_IT_CC4;// ~TIM_IT_CC1;		// clear all but Update
//	// scope output on high
//	} else
//		TIM3->SR = 0;					// other interrupts not of interest
	  //HAL_TIM_IRQHandler(&htim3);
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c78:	4a14      	ldr	r2, [pc, #80]	@ (8001ccc <_sbrk+0x5c>)
 8001c7a:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <_sbrk+0x60>)
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c84:	4b13      	ldr	r3, [pc, #76]	@ (8001cd4 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	@ (8001cd4 <_sbrk+0x64>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	@ (8001cd8 <_sbrk+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c92:	4b10      	ldr	r3, [pc, #64]	@ (8001cd4 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d207      	bcs.n	8001cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca0:	f004 fd2c 	bl	80066fc <__errno>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cae:	e009      	b.n	8001cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb6:	4b07      	ldr	r3, [pc, #28]	@ (8001cd4 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a05      	ldr	r2, [pc, #20]	@ (8001cd4 <_sbrk+0x64>)
 8001cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20020000 	.word	0x20020000
 8001cd0:	00000400 	.word	0x00000400
 8001cd4:	20003d1c 	.word	0x20003d1c
 8001cd8:	20003eb0 	.word	0x20003eb0

08001cdc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ce0:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <SystemInit+0x20>)
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ce6:	4a05      	ldr	r2, [pc, #20]	@ (8001cfc <SystemInit+0x20>)
 8001ce8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <vidClearScreen>:
/* Private functions ---------------------------------------------------------*/



void vidClearScreen(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	{
		fb[line]				[0] = 0b1111111111111110;
		fb[line]  [XFERS_PERLINE-1] = 0b1111111111111110;
	}
#else
	memset(screen,0xFF,sizeof(screen));
 8001d04:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8001d08:	21ff      	movs	r1, #255	@ 0xff
 8001d0a:	4802      	ldr	r0, [pc, #8]	@ (8001d14 <vidClearScreen+0x14>)
 8001d0c:	f004 fcee 	bl	80066ec <memset>
#endif

}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000000 	.word	0x20000000

08001d18 <vt100_init>:
 * screen and resets the cursor.  Call this after initialising
 * your peripherals (e.g. UART, LCD) and before feeding any data
 * into the parser.
 */
void vt100_init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
     * function defined in gdi_vt100.c will clear the framebuffer
     * and position the cursor at (0,0).  If you wish to perform
     * additional initialisation (e.g. setting text colours), do it
     * here.
     */
    gdiClearScreen();
 8001d1c:	f7fe fe3a 	bl	8000994 <gdiClearScreen>
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <vt100_process_buffer>:
 * sequence of bytes (for example when reading from a file or
 * buffered input).  It forwards the call to
 * gdiVT100ProcessBuffer().
 */
void vt100_process_buffer(const uint8_t *buf, uint16_t len)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
    gdiVT100ProcessBuffer(buf, len);
 8001d30:	887b      	ldrh	r3, [r7, #2]
 8001d32:	4619      	mov	r1, r3
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff f82d 	bl	8000d94 <gdiVT100ProcessBuffer>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d44:	480d      	ldr	r0, [pc, #52]	@ (8001d7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d48:	f7ff ffc8 	bl	8001cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d4c:	480c      	ldr	r0, [pc, #48]	@ (8001d80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d4e:	490d      	ldr	r1, [pc, #52]	@ (8001d84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d50:	4a0d      	ldr	r2, [pc, #52]	@ (8001d88 <LoopForever+0xe>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d54:	e002      	b.n	8001d5c <LoopCopyDataInit>

08001d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d5a:	3304      	adds	r3, #4

08001d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d60:	d3f9      	bcc.n	8001d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d62:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d64:	4c0a      	ldr	r4, [pc, #40]	@ (8001d90 <LoopForever+0x16>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d68:	e001      	b.n	8001d6e <LoopFillZerobss>

08001d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d6c:	3204      	adds	r2, #4

08001d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d70:	d3fb      	bcc.n	8001d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d72:	f004 fcc9 	bl	8006708 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d76:	f7ff fa21 	bl	80011bc <main>

08001d7a <LoopForever>:

LoopForever:
    b LoopForever
 8001d7a:	e7fe      	b.n	8001d7a <LoopForever>
  ldr   r0, =_estack
 8001d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d80:	20002ee0 	.word	0x20002ee0
  ldr r1, =_edata
 8001d84:	20003a84 	.word	0x20003a84
  ldr r2, =_sidata
 8001d88:	08007dcc 	.word	0x08007dcc
  ldr r2, =_sbss
 8001d8c:	20003a84 	.word	0x20003a84
  ldr r4, =_ebss
 8001d90:	20003eac 	.word	0x20003eac

08001d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d94:	e7fe      	b.n	8001d94 <ADC1_2_IRQHandler>

08001d96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da0:	2003      	movs	r0, #3
 8001da2:	f000 f95b 	bl	800205c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001da6:	200f      	movs	r0, #15
 8001da8:	f000 f80e 	bl	8001dc8 <HAL_InitTick>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	71fb      	strb	r3, [r7, #7]
 8001db6:	e001      	b.n	8001dbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001db8:	f7ff fcdc 	bl	8001774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dbc:	79fb      	ldrb	r3, [r7, #7]

}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001dd4:	4b16      	ldr	r3, [pc, #88]	@ (8001e30 <HAL_InitTick+0x68>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d022      	beq.n	8001e22 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ddc:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <HAL_InitTick+0x6c>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b13      	ldr	r3, [pc, #76]	@ (8001e30 <HAL_InitTick+0x68>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001de8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 f966 	bl	80020c2 <HAL_SYSTICK_Config>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10f      	bne.n	8001e1c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b0f      	cmp	r3, #15
 8001e00:	d809      	bhi.n	8001e16 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e02:	2200      	movs	r2, #0
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e0a:	f000 f932 	bl	8002072 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <HAL_InitTick+0x70>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	e007      	b.n	8001e26 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
 8001e1a:	e004      	b.n	8001e26 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
 8001e20:	e001      	b.n	8001e26 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20003a30 	.word	0x20003a30
 8001e34:	20002ee4 	.word	0x20002ee4
 8001e38:	20003a2c 	.word	0x20003a2c

08001e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e40:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <HAL_IncTick+0x1c>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <HAL_IncTick+0x20>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4413      	add	r3, r2
 8001e4a:	4a03      	ldr	r2, [pc, #12]	@ (8001e58 <HAL_IncTick+0x1c>)
 8001e4c:	6013      	str	r3, [r2, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	20003d60 	.word	0x20003d60
 8001e5c:	20003a30 	.word	0x20003a30

08001e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return uwTick;
 8001e64:	4b03      	ldr	r3, [pc, #12]	@ (8001e74 <HAL_GetTick+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20003d60 	.word	0x20003d60

08001e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff ffee 	bl	8001e60 <HAL_GetTick>
 8001e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e90:	d004      	beq.n	8001e9c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <HAL_Delay+0x40>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4413      	add	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e9c:	bf00      	nop
 8001e9e:	f7ff ffdf 	bl	8001e60 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d8f7      	bhi.n	8001e9e <HAL_Delay+0x26>
  {
  }
}
 8001eae:	bf00      	nop
 8001eb0:	bf00      	nop
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20003a30 	.word	0x20003a30

08001ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	@ (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f08:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <__NVIC_GetPriorityGrouping+0x18>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 0307 	and.w	r3, r3, #7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db0b      	blt.n	8001f4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4907      	ldr	r1, [pc, #28]	@ (8001f58 <__NVIC_EnableIRQ+0x38>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2001      	movs	r0, #1
 8001f42:	fa00 f202 	lsl.w	r2, r0, r2
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	@ (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	@ (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	@ 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	4313      	orrs	r3, r2
         );
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	@ 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002028:	d301      	bcc.n	800202e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202a:	2301      	movs	r3, #1
 800202c:	e00f      	b.n	800204e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202e:	4a0a      	ldr	r2, [pc, #40]	@ (8002058 <SysTick_Config+0x40>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002036:	210f      	movs	r1, #15
 8002038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800203c:	f7ff ff8e 	bl	8001f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002040:	4b05      	ldr	r3, [pc, #20]	@ (8002058 <SysTick_Config+0x40>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002046:	4b04      	ldr	r3, [pc, #16]	@ (8002058 <SysTick_Config+0x40>)
 8002048:	2207      	movs	r2, #7
 800204a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff29 	bl	8001ebc <__NVIC_SetPriorityGrouping>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002080:	f7ff ff40 	bl	8001f04 <__NVIC_GetPriorityGrouping>
 8002084:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	6978      	ldr	r0, [r7, #20]
 800208c:	f7ff ff90 	bl	8001fb0 <NVIC_EncodePriority>
 8002090:	4602      	mov	r2, r0
 8002092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff5f 	bl	8001f5c <__NVIC_SetPriority>
}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff33 	bl	8001f20 <__NVIC_EnableIRQ>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ffa4 	bl	8002018 <SysTick_Config>
 80020d0:	4603      	mov	r3, r0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e08d      	b.n	800220a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	4b47      	ldr	r3, [pc, #284]	@ (8002214 <HAL_DMA_Init+0x138>)
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d80f      	bhi.n	800211a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	4b45      	ldr	r3, [pc, #276]	@ (8002218 <HAL_DMA_Init+0x13c>)
 8002102:	4413      	add	r3, r2
 8002104:	4a45      	ldr	r2, [pc, #276]	@ (800221c <HAL_DMA_Init+0x140>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	009a      	lsls	r2, r3, #2
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a42      	ldr	r2, [pc, #264]	@ (8002220 <HAL_DMA_Init+0x144>)
 8002116:	641a      	str	r2, [r3, #64]	@ 0x40
 8002118:	e00e      	b.n	8002138 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	4b40      	ldr	r3, [pc, #256]	@ (8002224 <HAL_DMA_Init+0x148>)
 8002122:	4413      	add	r3, r2
 8002124:	4a3d      	ldr	r2, [pc, #244]	@ (800221c <HAL_DMA_Init+0x140>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	091b      	lsrs	r3, r3, #4
 800212c:	009a      	lsls	r2, r3, #2
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a3c      	ldr	r2, [pc, #240]	@ (8002228 <HAL_DMA_Init+0x14c>)
 8002136:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800214e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002152:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800215c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002168:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002174:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fa90 	bl	80026b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002198:	d102      	bne.n	80021a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021b4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d010      	beq.n	80021e0 <HAL_DMA_Init+0x104>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d80c      	bhi.n	80021e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fab0 	bl	800272c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	e008      	b.n	80021f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40020407 	.word	0x40020407
 8002218:	bffdfff8 	.word	0xbffdfff8
 800221c:	cccccccd 	.word	0xcccccccd
 8002220:	40020000 	.word	0x40020000
 8002224:	bffdfbf8 	.word	0xbffdfbf8
 8002228:	40020400 	.word	0x40020400

0800222c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e07b      	b.n	8002336 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0201 	bic.w	r2, r2, #1
 800224c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	4b3a      	ldr	r3, [pc, #232]	@ (8002340 <HAL_DMA_DeInit+0x114>)
 8002256:	429a      	cmp	r2, r3
 8002258:	d80f      	bhi.n	800227a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	4b38      	ldr	r3, [pc, #224]	@ (8002344 <HAL_DMA_DeInit+0x118>)
 8002262:	4413      	add	r3, r2
 8002264:	4a38      	ldr	r2, [pc, #224]	@ (8002348 <HAL_DMA_DeInit+0x11c>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	009a      	lsls	r2, r3, #2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a35      	ldr	r2, [pc, #212]	@ (800234c <HAL_DMA_DeInit+0x120>)
 8002276:	641a      	str	r2, [r3, #64]	@ 0x40
 8002278:	e00e      	b.n	8002298 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	4b33      	ldr	r3, [pc, #204]	@ (8002350 <HAL_DMA_DeInit+0x124>)
 8002282:	4413      	add	r3, r2
 8002284:	4a30      	ldr	r2, [pc, #192]	@ (8002348 <HAL_DMA_DeInit+0x11c>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	009a      	lsls	r2, r3, #2
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a2f      	ldr	r2, [pc, #188]	@ (8002354 <HAL_DMA_DeInit+0x128>)
 8002296:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ac:	2101      	movs	r1, #1
 80022ae:	fa01 f202 	lsl.w	r2, r1, r2
 80022b2:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f9fb 	bl	80026b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022ca:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00f      	beq.n	80022f4 <HAL_DMA_DeInit+0xc8>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d80b      	bhi.n	80022f4 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 fa25 	bl	800272c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80022f2:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40020407 	.word	0x40020407
 8002344:	bffdfff8 	.word	0xbffdfff8
 8002348:	cccccccd 	.word	0xcccccccd
 800234c:	40020000 	.word	0x40020000
 8002350:	bffdfbf8 	.word	0xbffdfbf8
 8002354:	40020400 	.word	0x40020400

08002358 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_DMA_Start+0x20>
 8002374:	2302      	movs	r3, #2
 8002376:	e02e      	b.n	80023d6 <HAL_DMA_Start+0x7e>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b01      	cmp	r3, #1
 800238a:	d11d      	bne.n	80023c8 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0201 	bic.w	r2, r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	68b9      	ldr	r1, [r7, #8]
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f93e 	bl	8002632 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0201 	orr.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e005      	b.n	80023d4 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    status = HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
 80023d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_DMA_Start_IT+0x20>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e066      	b.n	80024cc <HAL_DMA_Start_IT+0xee>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b01      	cmp	r3, #1
 8002410:	d155      	bne.n	80024be <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2202      	movs	r2, #2
 8002416:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0201 	bic.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f8fb 	bl	8002632 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 020e 	orr.w	r2, r2, #14
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	e00f      	b.n	8002476 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0204 	bic.w	r2, r2, #4
 8002464:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 020a 	orr.w	r2, r2, #10
 8002474:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d007      	beq.n	8002494 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800248e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002492:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024aa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e005      	b.n	80024ca <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80024c6:	2302      	movs	r3, #2
 80024c8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	2204      	movs	r2, #4
 80024f6:	409a      	lsls	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d026      	beq.n	800254e <HAL_DMA_IRQHandler+0x7a>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	d021      	beq.n	800254e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d107      	bne.n	8002528 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0204 	bic.w	r2, r2, #4
 8002526:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252c:	f003 021f 	and.w	r2, r3, #31
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	2104      	movs	r1, #4
 8002536:	fa01 f202 	lsl.w	r2, r1, r2
 800253a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002540:	2b00      	cmp	r3, #0
 8002542:	d071      	beq.n	8002628 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800254c:	e06c      	b.n	8002628 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	2202      	movs	r2, #2
 8002558:	409a      	lsls	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d02e      	beq.n	80025c0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d029      	beq.n	80025c0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10b      	bne.n	8002592 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 020a 	bic.w	r2, r2, #10
 8002588:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	f003 021f 	and.w	r2, r3, #31
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	2102      	movs	r1, #2
 80025a0:	fa01 f202 	lsl.w	r2, r1, r2
 80025a4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d038      	beq.n	8002628 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80025be:	e033      	b.n	8002628 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	2208      	movs	r2, #8
 80025ca:	409a      	lsls	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d02a      	beq.n	800262a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d025      	beq.n	800262a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 020e 	bic.w	r2, r2, #14
 80025ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	f003 021f 	and.w	r2, r3, #31
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	2101      	movs	r1, #1
 80025fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002600:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261c:	2b00      	cmp	r3, #0
 800261e:	d004      	beq.n	800262a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002628:	bf00      	nop
 800262a:	bf00      	nop
}
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002632:	b480      	push	{r7}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002648:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264e:	2b00      	cmp	r3, #0
 8002650:	d004      	beq.n	800265c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800265a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002660:	f003 021f 	and.w	r2, r3, #31
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	2101      	movs	r1, #1
 800266a:	fa01 f202 	lsl.w	r2, r1, r2
 800266e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b10      	cmp	r3, #16
 800267e:	d108      	bne.n	8002692 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002690:	e007      	b.n	80026a2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	60da      	str	r2, [r3, #12]
}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	4b16      	ldr	r3, [pc, #88]	@ (8002718 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d802      	bhi.n	80026ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80026c4:	4b15      	ldr	r3, [pc, #84]	@ (800271c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	e001      	b.n	80026ce <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80026ca:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80026cc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	3b08      	subs	r3, #8
 80026da:	4a12      	ldr	r2, [pc, #72]	@ (8002724 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80026dc:	fba2 2303 	umull	r2, r3, r2, r3
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e8:	089b      	lsrs	r3, r3, #2
 80026ea:	009a      	lsls	r2, r3, #2
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4413      	add	r3, r2
 80026f0:	461a      	mov	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002728 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80026fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	2201      	movs	r2, #1
 8002704:	409a      	lsls	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800270a:	bf00      	nop
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40020407 	.word	0x40020407
 800271c:	40020800 	.word	0x40020800
 8002720:	40020820 	.word	0x40020820
 8002724:	cccccccd 	.word	0xcccccccd
 8002728:	40020880 	.word	0x40020880

0800272c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4b0b      	ldr	r3, [pc, #44]	@ (800276c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	461a      	mov	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a08      	ldr	r2, [pc, #32]	@ (8002770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800274e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3b01      	subs	r3, #1
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	2201      	movs	r2, #1
 800275a:	409a      	lsls	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	1000823f 	.word	0x1000823f
 8002770:	40020940 	.word	0x40020940

08002774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002782:	e15a      	b.n	8002a3a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	2101      	movs	r1, #1
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	4013      	ands	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 814c 	beq.w	8002a34 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d005      	beq.n	80027b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d130      	bne.n	8002816 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	2203      	movs	r2, #3
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027ea:	2201      	movs	r2, #1
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	f003 0201 	and.w	r2, r3, #1
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	2b03      	cmp	r3, #3
 8002820:	d017      	beq.n	8002852 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	2203      	movs	r2, #3
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d123      	bne.n	80028a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	08da      	lsrs	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3208      	adds	r2, #8
 8002866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800286a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	220f      	movs	r2, #15
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	08da      	lsrs	r2, r3, #3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3208      	adds	r2, #8
 80028a0:	6939      	ldr	r1, [r7, #16]
 80028a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	2203      	movs	r2, #3
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0203 	and.w	r2, r3, #3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 80a6 	beq.w	8002a34 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002a58 <HAL_GPIO_Init+0x2e4>)
 80028ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ec:	4a5a      	ldr	r2, [pc, #360]	@ (8002a58 <HAL_GPIO_Init+0x2e4>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80028f4:	4b58      	ldr	r3, [pc, #352]	@ (8002a58 <HAL_GPIO_Init+0x2e4>)
 80028f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002900:	4a56      	ldr	r2, [pc, #344]	@ (8002a5c <HAL_GPIO_Init+0x2e8>)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	3302      	adds	r3, #2
 8002908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	220f      	movs	r2, #15
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800292a:	d01f      	beq.n	800296c <HAL_GPIO_Init+0x1f8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a4c      	ldr	r2, [pc, #304]	@ (8002a60 <HAL_GPIO_Init+0x2ec>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d019      	beq.n	8002968 <HAL_GPIO_Init+0x1f4>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a4b      	ldr	r2, [pc, #300]	@ (8002a64 <HAL_GPIO_Init+0x2f0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d013      	beq.n	8002964 <HAL_GPIO_Init+0x1f0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a4a      	ldr	r2, [pc, #296]	@ (8002a68 <HAL_GPIO_Init+0x2f4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00d      	beq.n	8002960 <HAL_GPIO_Init+0x1ec>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a49      	ldr	r2, [pc, #292]	@ (8002a6c <HAL_GPIO_Init+0x2f8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d007      	beq.n	800295c <HAL_GPIO_Init+0x1e8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a48      	ldr	r2, [pc, #288]	@ (8002a70 <HAL_GPIO_Init+0x2fc>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d101      	bne.n	8002958 <HAL_GPIO_Init+0x1e4>
 8002954:	2305      	movs	r3, #5
 8002956:	e00a      	b.n	800296e <HAL_GPIO_Init+0x1fa>
 8002958:	2306      	movs	r3, #6
 800295a:	e008      	b.n	800296e <HAL_GPIO_Init+0x1fa>
 800295c:	2304      	movs	r3, #4
 800295e:	e006      	b.n	800296e <HAL_GPIO_Init+0x1fa>
 8002960:	2303      	movs	r3, #3
 8002962:	e004      	b.n	800296e <HAL_GPIO_Init+0x1fa>
 8002964:	2302      	movs	r3, #2
 8002966:	e002      	b.n	800296e <HAL_GPIO_Init+0x1fa>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <HAL_GPIO_Init+0x1fa>
 800296c:	2300      	movs	r3, #0
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	f002 0203 	and.w	r2, r2, #3
 8002974:	0092      	lsls	r2, r2, #2
 8002976:	4093      	lsls	r3, r2
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800297e:	4937      	ldr	r1, [pc, #220]	@ (8002a5c <HAL_GPIO_Init+0x2e8>)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	089b      	lsrs	r3, r3, #2
 8002984:	3302      	adds	r3, #2
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800298c:	4b39      	ldr	r3, [pc, #228]	@ (8002a74 <HAL_GPIO_Init+0x300>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	43db      	mvns	r3, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4013      	ands	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029b0:	4a30      	ldr	r2, [pc, #192]	@ (8002a74 <HAL_GPIO_Init+0x300>)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002a74 <HAL_GPIO_Init+0x300>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	43db      	mvns	r3, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4013      	ands	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029da:	4a26      	ldr	r2, [pc, #152]	@ (8002a74 <HAL_GPIO_Init+0x300>)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80029e0:	4b24      	ldr	r3, [pc, #144]	@ (8002a74 <HAL_GPIO_Init+0x300>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a04:	4a1b      	ldr	r2, [pc, #108]	@ (8002a74 <HAL_GPIO_Init+0x300>)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a74 <HAL_GPIO_Init+0x300>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a2e:	4a11      	ldr	r2, [pc, #68]	@ (8002a74 <HAL_GPIO_Init+0x300>)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	3301      	adds	r3, #1
 8002a38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f47f ae9d 	bne.w	8002784 <HAL_GPIO_Init+0x10>
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	bf00      	nop
 8002a4e:	371c      	adds	r7, #28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	48000400 	.word	0x48000400
 8002a64:	48000800 	.word	0x48000800
 8002a68:	48000c00 	.word	0x48000c00
 8002a6c:	48001000 	.word	0x48001000
 8002a70:	48001400 	.word	0x48001400
 8002a74:	40010400 	.word	0x40010400

08002a78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002a86:	e0bd      	b.n	8002c04 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002a88:	2201      	movs	r2, #1
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	4013      	ands	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80b0 	beq.w	8002bfe <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8002a9e:	4a60      	ldr	r2, [pc, #384]	@ (8002c20 <HAL_GPIO_DeInit+0x1a8>)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aaa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	220f      	movs	r2, #15
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4013      	ands	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ac6:	d01f      	beq.n	8002b08 <HAL_GPIO_DeInit+0x90>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a56      	ldr	r2, [pc, #344]	@ (8002c24 <HAL_GPIO_DeInit+0x1ac>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d019      	beq.n	8002b04 <HAL_GPIO_DeInit+0x8c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a55      	ldr	r2, [pc, #340]	@ (8002c28 <HAL_GPIO_DeInit+0x1b0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d013      	beq.n	8002b00 <HAL_GPIO_DeInit+0x88>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a54      	ldr	r2, [pc, #336]	@ (8002c2c <HAL_GPIO_DeInit+0x1b4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d00d      	beq.n	8002afc <HAL_GPIO_DeInit+0x84>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a53      	ldr	r2, [pc, #332]	@ (8002c30 <HAL_GPIO_DeInit+0x1b8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d007      	beq.n	8002af8 <HAL_GPIO_DeInit+0x80>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a52      	ldr	r2, [pc, #328]	@ (8002c34 <HAL_GPIO_DeInit+0x1bc>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d101      	bne.n	8002af4 <HAL_GPIO_DeInit+0x7c>
 8002af0:	2305      	movs	r3, #5
 8002af2:	e00a      	b.n	8002b0a <HAL_GPIO_DeInit+0x92>
 8002af4:	2306      	movs	r3, #6
 8002af6:	e008      	b.n	8002b0a <HAL_GPIO_DeInit+0x92>
 8002af8:	2304      	movs	r3, #4
 8002afa:	e006      	b.n	8002b0a <HAL_GPIO_DeInit+0x92>
 8002afc:	2303      	movs	r3, #3
 8002afe:	e004      	b.n	8002b0a <HAL_GPIO_DeInit+0x92>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e002      	b.n	8002b0a <HAL_GPIO_DeInit+0x92>
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <HAL_GPIO_DeInit+0x92>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	f002 0203 	and.w	r2, r2, #3
 8002b10:	0092      	lsls	r2, r2, #2
 8002b12:	4093      	lsls	r3, r2
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d132      	bne.n	8002b80 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002b1a:	4b47      	ldr	r3, [pc, #284]	@ (8002c38 <HAL_GPIO_DeInit+0x1c0>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	4945      	ldr	r1, [pc, #276]	@ (8002c38 <HAL_GPIO_DeInit+0x1c0>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002b28:	4b43      	ldr	r3, [pc, #268]	@ (8002c38 <HAL_GPIO_DeInit+0x1c0>)
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	4941      	ldr	r1, [pc, #260]	@ (8002c38 <HAL_GPIO_DeInit+0x1c0>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002b36:	4b40      	ldr	r3, [pc, #256]	@ (8002c38 <HAL_GPIO_DeInit+0x1c0>)
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	493e      	ldr	r1, [pc, #248]	@ (8002c38 <HAL_GPIO_DeInit+0x1c0>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002b44:	4b3c      	ldr	r3, [pc, #240]	@ (8002c38 <HAL_GPIO_DeInit+0x1c0>)
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	493a      	ldr	r1, [pc, #232]	@ (8002c38 <HAL_GPIO_DeInit+0x1c0>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	220f      	movs	r2, #15
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002b62:	4a2f      	ldr	r2, [pc, #188]	@ (8002c20 <HAL_GPIO_DeInit+0x1a8>)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	089b      	lsrs	r3, r3, #2
 8002b68:	3302      	adds	r3, #2
 8002b6a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	43da      	mvns	r2, r3
 8002b72:	482b      	ldr	r0, [pc, #172]	@ (8002c20 <HAL_GPIO_DeInit+0x1a8>)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	400a      	ands	r2, r1
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	2103      	movs	r1, #3
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	08da      	lsrs	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3208      	adds	r2, #8
 8002b9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	220f      	movs	r2, #15
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	08d2      	lsrs	r2, r2, #3
 8002bb4:	4019      	ands	r1, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3208      	adds	r2, #8
 8002bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2103      	movs	r1, #3
 8002bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	401a      	ands	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	2101      	movs	r1, #1
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	401a      	ands	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	2103      	movs	r1, #3
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	3301      	adds	r3, #1
 8002c02:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f47f af3b 	bne.w	8002a88 <HAL_GPIO_DeInit+0x10>
  }
}
 8002c12:	bf00      	nop
 8002c14:	bf00      	nop
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	40010000 	.word	0x40010000
 8002c24:	48000400 	.word	0x48000400
 8002c28:	48000800 	.word	0x48000800
 8002c2c:	48000c00 	.word	0x48000c00
 8002c30:	48001000 	.word	0x48001000
 8002c34:	48001400 	.word	0x48001400
 8002c38:	40010400 	.word	0x40010400

08002c3c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0d0      	b.n	8002df0 <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe fdaa 	bl	80017bc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002c7e:	f023 030f 	bic.w	r3, r3, #15
 8002c82:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d061      	beq.n	8002d58 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002c9c:	2310      	movs	r3, #16
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	e001      	b.n	8002ca6 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d802      	bhi.n	8002cb4 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002cb4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002cb8:	f001 fa10 	bl	80040dc <HAL_RCCEx_GetPeriphCLKFreq>
 8002cbc:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cc6:	d125      	bne.n	8002d14 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d010      	beq.n	8002cf2 <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cec:	3305      	adds	r3, #5
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	e01f      	b.n	8002d32 <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	461a      	mov	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0e:	3305      	adds	r3, #5
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	e00e      	b.n	8002d32 <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	461a      	mov	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2e:	3305      	adds	r3, #5
 8002d30:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4a30      	ldr	r2, [pc, #192]	@ (8002df8 <HAL_I2S_Init+0x1bc>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	08db      	lsrs	r3, r3, #3
 8002d3c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	085b      	lsrs	r3, r3, #1
 8002d4e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	61bb      	str	r3, [r7, #24]
 8002d56:	e003      	b.n	8002d60 <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d902      	bls.n	8002d6c <HAL_I2S_Init+0x130>
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	2bff      	cmp	r3, #255	@ 0xff
 8002d6a:	d907      	bls.n	8002d7c <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d70:	f043 0210 	orr.w	r2, r3, #16
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e039      	b.n	8002df0 <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	ea42 0103 	orr.w	r1, r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002d9a:	f023 030f 	bic.w	r3, r3, #15
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6851      	ldr	r1, [r2, #4]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6892      	ldr	r2, [r2, #8]
 8002da6:	4311      	orrs	r1, r2
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	68d2      	ldr	r2, [r2, #12]
 8002dac:	4311      	orrs	r1, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6992      	ldr	r2, [r2, #24]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dbe:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b30      	cmp	r3, #48	@ 0x30
 8002dc6:	d003      	beq.n	8002dd0 <HAL_I2S_Init+0x194>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2bb0      	cmp	r3, #176	@ 0xb0
 8002dce:	d107      	bne.n	8002de0 <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002dde:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	cccccccd 	.word	0xcccccccd

08002dfc <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e01a      	b.n	8002e44 <HAL_I2S_DeInit+0x48>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2202      	movs	r2, #2
 8002e12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e24:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fe fd52 	bl	80018d0 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	4613      	mov	r3, r2
 8002e58:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_I2S_Transmit_DMA+0x1a>
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e08a      	b.n	8002f80 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d001      	beq.n	8002e7a <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8002e76:	2302      	movs	r3, #2
 8002e78:	e082      	b.n	8002f80 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_I2S_Transmit_DMA+0x3e>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e07a      	b.n	8002f80 <HAL_I2S_Transmit_DMA+0x134>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2203      	movs	r2, #3
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d002      	beq.n	8002ebe <HAL_I2S_Transmit_DMA+0x72>
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b05      	cmp	r3, #5
 8002ebc:	d10a      	bne.n	8002ed4 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	845a      	strh	r2, [r3, #34]	@ 0x22
 8002ed2:	e005      	b.n	8002ee0 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	88fa      	ldrh	r2, [r7, #6]
 8002ed8:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	88fa      	ldrh	r2, [r7, #6]
 8002ede:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee4:	4a28      	ldr	r2, [pc, #160]	@ (8002f88 <HAL_I2S_Transmit_DMA+0x13c>)
 8002ee6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eec:	4a27      	ldr	r2, [pc, #156]	@ (8002f8c <HAL_I2S_Transmit_DMA+0x140>)
 8002eee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef4:	4a26      	ldr	r2, [pc, #152]	@ (8002f90 <HAL_I2S_Transmit_DMA+0x144>)
 8002ef6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002f00:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002f08:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8c1b      	ldrh	r3, [r3, #32]
 8002f0e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002f10:	f7ff fa65 	bl	80023de <HAL_DMA_Start_IT>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00f      	beq.n	8002f3a <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1e:	f043 0208 	orr.w	r2, r3, #8
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    __HAL_UNLOCK(hi2s);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e022      	b.n	8002f80 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d107      	bne.n	8002f60 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0202 	orr.w	r2, r2, #2
 8002f5e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d107      	bne.n	8002f7e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f7c:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	08003013 	.word	0x08003013
 8002f8c:	08002fd1 	.word	0x08002fd1
 8002f90:	0800302f 	.word	0x0800302f

08002f94 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fdc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10e      	bne.n	8003004 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0202 	bic.w	r2, r2, #2
 8002ff4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	845a      	strh	r2, [r3, #34]	@ 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f7ff ffcf 	bl	8002fa8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7ff ffb7 	bl	8002f94 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0203 	bic.w	r2, r2, #3
 800304a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003064:	f043 0208 	orr.w	r2, r3, #8
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff ffa5 	bl	8002fbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d141      	bne.n	800310e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800308a:	4b4b      	ldr	r3, [pc, #300]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003096:	d131      	bne.n	80030fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003098:	4b47      	ldr	r3, [pc, #284]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800309e:	4a46      	ldr	r2, [pc, #280]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030a8:	4b43      	ldr	r3, [pc, #268]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030b0:	4a41      	ldr	r2, [pc, #260]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030b8:	4b40      	ldr	r3, [pc, #256]	@ (80031bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2232      	movs	r2, #50	@ 0x32
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	4a3f      	ldr	r2, [pc, #252]	@ (80031c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030c4:	fba2 2303 	umull	r2, r3, r2, r3
 80030c8:	0c9b      	lsrs	r3, r3, #18
 80030ca:	3301      	adds	r3, #1
 80030cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ce:	e002      	b.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030d6:	4b38      	ldr	r3, [pc, #224]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030e2:	d102      	bne.n	80030ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f2      	bne.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030ea:	4b33      	ldr	r3, [pc, #204]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f6:	d158      	bne.n	80031aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e057      	b.n	80031ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030fc:	4b2e      	ldr	r3, [pc, #184]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003102:	4a2d      	ldr	r2, [pc, #180]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003108:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800310c:	e04d      	b.n	80031aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003114:	d141      	bne.n	800319a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003116:	4b28      	ldr	r3, [pc, #160]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800311e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003122:	d131      	bne.n	8003188 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003124:	4b24      	ldr	r3, [pc, #144]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003126:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800312a:	4a23      	ldr	r2, [pc, #140]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003130:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003134:	4b20      	ldr	r3, [pc, #128]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800313c:	4a1e      	ldr	r2, [pc, #120]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003142:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003144:	4b1d      	ldr	r3, [pc, #116]	@ (80031bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2232      	movs	r2, #50	@ 0x32
 800314a:	fb02 f303 	mul.w	r3, r2, r3
 800314e:	4a1c      	ldr	r2, [pc, #112]	@ (80031c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	0c9b      	lsrs	r3, r3, #18
 8003156:	3301      	adds	r3, #1
 8003158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800315a:	e002      	b.n	8003162 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3b01      	subs	r3, #1
 8003160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003162:	4b15      	ldr	r3, [pc, #84]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800316e:	d102      	bne.n	8003176 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f2      	bne.n	800315c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003176:	4b10      	ldr	r3, [pc, #64]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800317e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003182:	d112      	bne.n	80031aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e011      	b.n	80031ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003188:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800318e:	4a0a      	ldr	r2, [pc, #40]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003194:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003198:	e007      	b.n	80031aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800319a:	4b07      	ldr	r3, [pc, #28]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031a2:	4a05      	ldr	r2, [pc, #20]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	40007000 	.word	0x40007000
 80031bc:	20002ee4 	.word	0x20002ee4
 80031c0:	431bde83 	.word	0x431bde83

080031c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80031c8:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4a04      	ldr	r2, [pc, #16]	@ (80031e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80031ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031d2:	6093      	str	r3, [r2, #8]
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40007000 	.word	0x40007000

080031e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e2fe      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d075      	beq.n	80032ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003202:	4b97      	ldr	r3, [pc, #604]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800320c:	4b94      	ldr	r3, [pc, #592]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2b0c      	cmp	r3, #12
 800321a:	d102      	bne.n	8003222 <HAL_RCC_OscConfig+0x3e>
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2b03      	cmp	r3, #3
 8003220:	d002      	beq.n	8003228 <HAL_RCC_OscConfig+0x44>
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d10b      	bne.n	8003240 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003228:	4b8d      	ldr	r3, [pc, #564]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d05b      	beq.n	80032ec <HAL_RCC_OscConfig+0x108>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d157      	bne.n	80032ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e2d9      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003248:	d106      	bne.n	8003258 <HAL_RCC_OscConfig+0x74>
 800324a:	4b85      	ldr	r3, [pc, #532]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a84      	ldr	r2, [pc, #528]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e01d      	b.n	8003294 <HAL_RCC_OscConfig+0xb0>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003260:	d10c      	bne.n	800327c <HAL_RCC_OscConfig+0x98>
 8003262:	4b7f      	ldr	r3, [pc, #508]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a7e      	ldr	r2, [pc, #504]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b7c      	ldr	r3, [pc, #496]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a7b      	ldr	r2, [pc, #492]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e00b      	b.n	8003294 <HAL_RCC_OscConfig+0xb0>
 800327c:	4b78      	ldr	r3, [pc, #480]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a77      	ldr	r2, [pc, #476]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	4b75      	ldr	r3, [pc, #468]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a74      	ldr	r2, [pc, #464]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800328e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d013      	beq.n	80032c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fe fde0 	bl	8001e60 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fe fddc 	bl	8001e60 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	@ 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e29e      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0xc0>
 80032c2:	e014      	b.n	80032ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe fdcc 	bl	8001e60 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fe fdc8 	bl	8001e60 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	@ 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e28a      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032de:	4b60      	ldr	r3, [pc, #384]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0xe8>
 80032ea:	e000      	b.n	80032ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d075      	beq.n	80033e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032fa:	4b59      	ldr	r3, [pc, #356]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003304:	4b56      	ldr	r3, [pc, #344]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2b0c      	cmp	r3, #12
 8003312:	d102      	bne.n	800331a <HAL_RCC_OscConfig+0x136>
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d002      	beq.n	8003320 <HAL_RCC_OscConfig+0x13c>
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b04      	cmp	r3, #4
 800331e:	d11f      	bne.n	8003360 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003320:	4b4f      	ldr	r3, [pc, #316]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_OscConfig+0x154>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e25d      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003338:	4b49      	ldr	r3, [pc, #292]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	061b      	lsls	r3, r3, #24
 8003346:	4946      	ldr	r1, [pc, #280]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800334c:	4b45      	ldr	r3, [pc, #276]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7fe fd39 	bl	8001dc8 <HAL_InitTick>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d043      	beq.n	80033e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e249      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d023      	beq.n	80033b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003368:	4b3d      	ldr	r3, [pc, #244]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a3c      	ldr	r2, [pc, #240]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800336e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe fd74 	bl	8001e60 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337c:	f7fe fd70 	bl	8001e60 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e232      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800338e:	4b34      	ldr	r3, [pc, #208]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339a:	4b31      	ldr	r3, [pc, #196]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	061b      	lsls	r3, r3, #24
 80033a8:	492d      	ldr	r1, [pc, #180]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	604b      	str	r3, [r1, #4]
 80033ae:	e01a      	b.n	80033e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 80033b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fe fd50 	bl	8001e60 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c4:	f7fe fd4c 	bl	8001e60 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e20e      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d6:	4b22      	ldr	r3, [pc, #136]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x1e0>
 80033e2:	e000      	b.n	80033e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d041      	beq.n	8003476 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01c      	beq.n	8003434 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fa:	4b19      	ldr	r3, [pc, #100]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 80033fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003400:	4a17      	ldr	r2, [pc, #92]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340a:	f7fe fd29 	bl	8001e60 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003412:	f7fe fd25 	bl	8001e60 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e1e7      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003424:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0ef      	beq.n	8003412 <HAL_RCC_OscConfig+0x22e>
 8003432:	e020      	b.n	8003476 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003434:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800343a:	4a09      	ldr	r2, [pc, #36]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800343c:	f023 0301 	bic.w	r3, r3, #1
 8003440:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003444:	f7fe fd0c 	bl	8001e60 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800344a:	e00d      	b.n	8003468 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800344c:	f7fe fd08 	bl	8001e60 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d906      	bls.n	8003468 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e1ca      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000
 8003464:	20003a2c 	.word	0x20003a2c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003468:	4b8c      	ldr	r3, [pc, #560]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 800346a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1ea      	bne.n	800344c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 80a6 	beq.w	80035d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003484:	2300      	movs	r3, #0
 8003486:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003488:	4b84      	ldr	r3, [pc, #528]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 800348a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_OscConfig+0x2b4>
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <HAL_RCC_OscConfig+0x2b6>
 8003498:	2300      	movs	r3, #0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00d      	beq.n	80034ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349e:	4b7f      	ldr	r3, [pc, #508]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 80034a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a2:	4a7e      	ldr	r2, [pc, #504]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 80034a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80034aa:	4b7c      	ldr	r3, [pc, #496]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 80034ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034b6:	2301      	movs	r3, #1
 80034b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ba:	4b79      	ldr	r3, [pc, #484]	@ (80036a0 <HAL_RCC_OscConfig+0x4bc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d118      	bne.n	80034f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034c6:	4b76      	ldr	r3, [pc, #472]	@ (80036a0 <HAL_RCC_OscConfig+0x4bc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a75      	ldr	r2, [pc, #468]	@ (80036a0 <HAL_RCC_OscConfig+0x4bc>)
 80034cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d2:	f7fe fcc5 	bl	8001e60 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034da:	f7fe fcc1 	bl	8001e60 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e183      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ec:	4b6c      	ldr	r3, [pc, #432]	@ (80036a0 <HAL_RCC_OscConfig+0x4bc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d108      	bne.n	8003512 <HAL_RCC_OscConfig+0x32e>
 8003500:	4b66      	ldr	r3, [pc, #408]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003506:	4a65      	ldr	r2, [pc, #404]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003510:	e024      	b.n	800355c <HAL_RCC_OscConfig+0x378>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b05      	cmp	r3, #5
 8003518:	d110      	bne.n	800353c <HAL_RCC_OscConfig+0x358>
 800351a:	4b60      	ldr	r3, [pc, #384]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003520:	4a5e      	ldr	r2, [pc, #376]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003522:	f043 0304 	orr.w	r3, r3, #4
 8003526:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800352a:	4b5c      	ldr	r3, [pc, #368]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 800352c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003530:	4a5a      	ldr	r2, [pc, #360]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800353a:	e00f      	b.n	800355c <HAL_RCC_OscConfig+0x378>
 800353c:	4b57      	ldr	r3, [pc, #348]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003542:	4a56      	ldr	r2, [pc, #344]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800354c:	4b53      	ldr	r3, [pc, #332]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003552:	4a52      	ldr	r2, [pc, #328]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003554:	f023 0304 	bic.w	r3, r3, #4
 8003558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d016      	beq.n	8003592 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003564:	f7fe fc7c 	bl	8001e60 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356a:	e00a      	b.n	8003582 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356c:	f7fe fc78 	bl	8001e60 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e138      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003582:	4b46      	ldr	r3, [pc, #280]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0ed      	beq.n	800356c <HAL_RCC_OscConfig+0x388>
 8003590:	e015      	b.n	80035be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003592:	f7fe fc65 	bl	8001e60 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003598:	e00a      	b.n	80035b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359a:	f7fe fc61 	bl	8001e60 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e121      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035b0:	4b3a      	ldr	r3, [pc, #232]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 80035b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1ed      	bne.n	800359a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035be:	7ffb      	ldrb	r3, [r7, #31]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d105      	bne.n	80035d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c4:	4b35      	ldr	r3, [pc, #212]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c8:	4a34      	ldr	r2, [pc, #208]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 80035ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d03c      	beq.n	8003656 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01c      	beq.n	800361e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035e4:	4b2d      	ldr	r3, [pc, #180]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 80035e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035ea:	4a2c      	ldr	r2, [pc, #176]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f4:	f7fe fc34 	bl	8001e60 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035fc:	f7fe fc30 	bl	8001e60 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e0f2      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800360e:	4b23      	ldr	r3, [pc, #140]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003610:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0ef      	beq.n	80035fc <HAL_RCC_OscConfig+0x418>
 800361c:	e01b      	b.n	8003656 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800361e:	4b1f      	ldr	r3, [pc, #124]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003620:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003624:	4a1d      	ldr	r2, [pc, #116]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003626:	f023 0301 	bic.w	r3, r3, #1
 800362a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362e:	f7fe fc17 	bl	8001e60 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003636:	f7fe fc13 	bl	8001e60 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e0d5      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003648:	4b14      	ldr	r3, [pc, #80]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 800364a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1ef      	bne.n	8003636 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 80c9 	beq.w	80037f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003660:	4b0e      	ldr	r3, [pc, #56]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 030c 	and.w	r3, r3, #12
 8003668:	2b0c      	cmp	r3, #12
 800366a:	f000 8083 	beq.w	8003774 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d15e      	bne.n	8003734 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003676:	4b09      	ldr	r3, [pc, #36]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a08      	ldr	r2, [pc, #32]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 800367c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fe fbed 	bl	8001e60 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003688:	e00c      	b.n	80036a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368a:	f7fe fbe9 	bl	8001e60 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d905      	bls.n	80036a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e0ab      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
 800369c:	40021000 	.word	0x40021000
 80036a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a4:	4b55      	ldr	r3, [pc, #340]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1ec      	bne.n	800368a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b0:	4b52      	ldr	r3, [pc, #328]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	4b52      	ldr	r3, [pc, #328]	@ (8003800 <HAL_RCC_OscConfig+0x61c>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6a11      	ldr	r1, [r2, #32]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036c0:	3a01      	subs	r2, #1
 80036c2:	0112      	lsls	r2, r2, #4
 80036c4:	4311      	orrs	r1, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80036ca:	0212      	lsls	r2, r2, #8
 80036cc:	4311      	orrs	r1, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036d2:	0852      	lsrs	r2, r2, #1
 80036d4:	3a01      	subs	r2, #1
 80036d6:	0552      	lsls	r2, r2, #21
 80036d8:	4311      	orrs	r1, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036de:	0852      	lsrs	r2, r2, #1
 80036e0:	3a01      	subs	r2, #1
 80036e2:	0652      	lsls	r2, r2, #25
 80036e4:	4311      	orrs	r1, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80036ea:	06d2      	lsls	r2, r2, #27
 80036ec:	430a      	orrs	r2, r1
 80036ee:	4943      	ldr	r1, [pc, #268]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036f4:	4b41      	ldr	r3, [pc, #260]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a40      	ldr	r2, [pc, #256]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 80036fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003700:	4b3e      	ldr	r3, [pc, #248]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4a3d      	ldr	r2, [pc, #244]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 8003706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800370a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fe fba8 	bl	8001e60 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe fba4 	bl	8001e60 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e066      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003726:	4b35      	ldr	r3, [pc, #212]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x530>
 8003732:	e05e      	b.n	80037f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003734:	4b31      	ldr	r3, [pc, #196]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a30      	ldr	r2, [pc, #192]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 800373a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800373e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fe fb8e 	bl	8001e60 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003748:	f7fe fb8a 	bl	8001e60 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e04c      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800375a:	4b28      	ldr	r3, [pc, #160]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003766:	4b25      	ldr	r3, [pc, #148]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	4924      	ldr	r1, [pc, #144]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 800376c:	4b25      	ldr	r3, [pc, #148]	@ (8003804 <HAL_RCC_OscConfig+0x620>)
 800376e:	4013      	ands	r3, r2
 8003770:	60cb      	str	r3, [r1, #12]
 8003772:	e03e      	b.n	80037f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e039      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003780:	4b1e      	ldr	r3, [pc, #120]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f003 0203 	and.w	r2, r3, #3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	429a      	cmp	r2, r3
 8003792:	d12c      	bne.n	80037ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	3b01      	subs	r3, #1
 80037a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d123      	bne.n	80037ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d11b      	bne.n	80037ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d113      	bne.n	80037ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d0:	085b      	lsrs	r3, r3, #1
 80037d2:	3b01      	subs	r3, #1
 80037d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d109      	bne.n	80037ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	3b01      	subs	r3, #1
 80037e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d001      	beq.n	80037f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3720      	adds	r7, #32
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021000 	.word	0x40021000
 8003800:	019f800c 	.word	0x019f800c
 8003804:	feeefffc 	.word	0xfeeefffc

08003808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e11e      	b.n	8003a5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003820:	4b91      	ldr	r3, [pc, #580]	@ (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d910      	bls.n	8003850 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382e:	4b8e      	ldr	r3, [pc, #568]	@ (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 020f 	bic.w	r2, r3, #15
 8003836:	498c      	ldr	r1, [pc, #560]	@ (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b8a      	ldr	r3, [pc, #552]	@ (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e106      	b.n	8003a5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d073      	beq.n	8003944 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b03      	cmp	r3, #3
 8003862:	d129      	bne.n	80038b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003864:	4b81      	ldr	r3, [pc, #516]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0f4      	b.n	8003a5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003874:	f000 f99e 	bl	8003bb4 <RCC_GetSysClockFreqFromPLLSource>
 8003878:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4a7c      	ldr	r2, [pc, #496]	@ (8003a70 <HAL_RCC_ClockConfig+0x268>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d93f      	bls.n	8003902 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003882:	4b7a      	ldr	r3, [pc, #488]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003896:	2b00      	cmp	r3, #0
 8003898:	d033      	beq.n	8003902 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d12f      	bne.n	8003902 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038a2:	4b72      	ldr	r3, [pc, #456]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038aa:	4a70      	ldr	r2, [pc, #448]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 80038ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038b2:	2380      	movs	r3, #128	@ 0x80
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	e024      	b.n	8003902 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d107      	bne.n	80038d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038c0:	4b6a      	ldr	r3, [pc, #424]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d109      	bne.n	80038e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0c6      	b.n	8003a5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038d0:	4b66      	ldr	r3, [pc, #408]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0be      	b.n	8003a5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80038e0:	f000 f8ce 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 80038e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4a61      	ldr	r2, [pc, #388]	@ (8003a70 <HAL_RCC_ClockConfig+0x268>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d909      	bls.n	8003902 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038ee:	4b5f      	ldr	r3, [pc, #380]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038f6:	4a5d      	ldr	r2, [pc, #372]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 80038f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80038fe:	2380      	movs	r3, #128	@ 0x80
 8003900:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003902:	4b5a      	ldr	r3, [pc, #360]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f023 0203 	bic.w	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	4957      	ldr	r1, [pc, #348]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003910:	4313      	orrs	r3, r2
 8003912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003914:	f7fe faa4 	bl	8001e60 <HAL_GetTick>
 8003918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391a:	e00a      	b.n	8003932 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800391c:	f7fe faa0 	bl	8001e60 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e095      	b.n	8003a5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003932:	4b4e      	ldr	r3, [pc, #312]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 020c 	and.w	r2, r3, #12
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	429a      	cmp	r2, r3
 8003942:	d1eb      	bne.n	800391c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d023      	beq.n	8003998 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800395c:	4b43      	ldr	r3, [pc, #268]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4a42      	ldr	r2, [pc, #264]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003962:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003966:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b00      	cmp	r3, #0
 8003972:	d007      	beq.n	8003984 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003974:	4b3d      	ldr	r3, [pc, #244]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800397c:	4a3b      	ldr	r2, [pc, #236]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 800397e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003982:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003984:	4b39      	ldr	r3, [pc, #228]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4936      	ldr	r1, [pc, #216]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
 8003996:	e008      	b.n	80039aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2b80      	cmp	r3, #128	@ 0x80
 800399c:	d105      	bne.n	80039aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800399e:	4b33      	ldr	r3, [pc, #204]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	4a32      	ldr	r2, [pc, #200]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 80039a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d21d      	bcs.n	80039f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f023 020f 	bic.w	r2, r3, #15
 80039c0:	4929      	ldr	r1, [pc, #164]	@ (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039c8:	f7fe fa4a 	bl	8001e60 <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f7fe fa46 	bl	8001e60 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e03b      	b.n	8003a5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b20      	ldr	r3, [pc, #128]	@ (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d1ed      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a00:	4b1a      	ldr	r3, [pc, #104]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4917      	ldr	r1, [pc, #92]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a1e:	4b13      	ldr	r3, [pc, #76]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	490f      	ldr	r1, [pc, #60]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a32:	f000 f825 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8003a36:	4602      	mov	r2, r0
 8003a38:	4b0c      	ldr	r3, [pc, #48]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	490c      	ldr	r1, [pc, #48]	@ (8003a74 <HAL_RCC_ClockConfig+0x26c>)
 8003a44:	5ccb      	ldrb	r3, [r1, r3]
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a78 <HAL_RCC_ClockConfig+0x270>)
 8003a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a52:	4b0a      	ldr	r3, [pc, #40]	@ (8003a7c <HAL_RCC_ClockConfig+0x274>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe f9b6 	bl	8001dc8 <HAL_InitTick>
 8003a5c:	4603      	mov	r3, r0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40022000 	.word	0x40022000
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	04c4b400 	.word	0x04c4b400
 8003a74:	0800776c 	.word	0x0800776c
 8003a78:	20002ee4 	.word	0x20002ee4
 8003a7c:	20003a2c 	.word	0x20003a2c

08003a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a86:	4b2c      	ldr	r3, [pc, #176]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d102      	bne.n	8003a98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a92:	4b2a      	ldr	r3, [pc, #168]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	e047      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a98:	4b27      	ldr	r3, [pc, #156]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 030c 	and.w	r3, r3, #12
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d102      	bne.n	8003aaa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003aa4:	4b26      	ldr	r3, [pc, #152]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	e03e      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003aaa:	4b23      	ldr	r3, [pc, #140]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b0c      	cmp	r3, #12
 8003ab4:	d136      	bne.n	8003b24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ab6:	4b20      	ldr	r3, [pc, #128]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	3301      	adds	r3, #1
 8003acc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d10c      	bne.n	8003aee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003adc:	4a16      	ldr	r2, [pc, #88]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ade:	68d2      	ldr	r2, [r2, #12]
 8003ae0:	0a12      	lsrs	r2, r2, #8
 8003ae2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	617b      	str	r3, [r7, #20]
      break;
 8003aec:	e00c      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003aee:	4a13      	ldr	r2, [pc, #76]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af6:	4a10      	ldr	r2, [pc, #64]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003af8:	68d2      	ldr	r2, [r2, #12]
 8003afa:	0a12      	lsrs	r2, r2, #8
 8003afc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b00:	fb02 f303 	mul.w	r3, r2, r3
 8003b04:	617b      	str	r3, [r7, #20]
      break;
 8003b06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b08:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	0e5b      	lsrs	r3, r3, #25
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	3301      	adds	r3, #1
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b20:	613b      	str	r3, [r7, #16]
 8003b22:	e001      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b28:	693b      	ldr	r3, [r7, #16]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	371c      	adds	r7, #28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	00f42400 	.word	0x00f42400
 8003b40:	007a1200 	.word	0x007a1200

08003b44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b48:	4b03      	ldr	r3, [pc, #12]	@ (8003b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	20002ee4 	.word	0x20002ee4

08003b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b60:	f7ff fff0 	bl	8003b44 <HAL_RCC_GetHCLKFreq>
 8003b64:	4602      	mov	r2, r0
 8003b66:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	0a1b      	lsrs	r3, r3, #8
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	4904      	ldr	r1, [pc, #16]	@ (8003b84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b72:	5ccb      	ldrb	r3, [r1, r3]
 8003b74:	f003 031f 	and.w	r3, r3, #31
 8003b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000
 8003b84:	0800777c 	.word	0x0800777c

08003b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b8c:	f7ff ffda 	bl	8003b44 <HAL_RCC_GetHCLKFreq>
 8003b90:	4602      	mov	r2, r0
 8003b92:	4b06      	ldr	r3, [pc, #24]	@ (8003bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	0adb      	lsrs	r3, r3, #11
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	4904      	ldr	r1, [pc, #16]	@ (8003bb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	0800777c 	.word	0x0800777c

08003bb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bba:	4b1e      	ldr	r3, [pc, #120]	@ (8003c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	3301      	adds	r3, #1
 8003bd0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d10c      	bne.n	8003bf2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bd8:	4a17      	ldr	r2, [pc, #92]	@ (8003c38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be0:	4a14      	ldr	r2, [pc, #80]	@ (8003c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003be2:	68d2      	ldr	r2, [r2, #12]
 8003be4:	0a12      	lsrs	r2, r2, #8
 8003be6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	617b      	str	r3, [r7, #20]
    break;
 8003bf0:	e00c      	b.n	8003c0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bf2:	4a12      	ldr	r2, [pc, #72]	@ (8003c3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8003c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bfc:	68d2      	ldr	r2, [r2, #12]
 8003bfe:	0a12      	lsrs	r2, r2, #8
 8003c00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c04:	fb02 f303 	mul.w	r3, r2, r3
 8003c08:	617b      	str	r3, [r7, #20]
    break;
 8003c0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c0c:	4b09      	ldr	r3, [pc, #36]	@ (8003c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	0e5b      	lsrs	r3, r3, #25
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	3301      	adds	r3, #1
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003c26:	687b      	ldr	r3, [r7, #4]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	40021000 	.word	0x40021000
 8003c38:	007a1200 	.word	0x007a1200
 8003c3c:	00f42400 	.word	0x00f42400

08003c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c48:	2300      	movs	r3, #0
 8003c4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 8098 	beq.w	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c62:	4b43      	ldr	r3, [pc, #268]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10d      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c6e:	4b40      	ldr	r3, [pc, #256]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c72:	4a3f      	ldr	r2, [pc, #252]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c86:	2301      	movs	r3, #1
 8003c88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c8a:	4b3a      	ldr	r3, [pc, #232]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a39      	ldr	r2, [pc, #228]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c96:	f7fe f8e3 	bl	8001e60 <HAL_GetTick>
 8003c9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c9c:	e009      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9e:	f7fe f8df 	bl	8001e60 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d902      	bls.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	74fb      	strb	r3, [r7, #19]
        break;
 8003cb0:	e005      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cb2:	4b30      	ldr	r3, [pc, #192]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0ef      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003cbe:	7cfb      	ldrb	r3, [r7, #19]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d159      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d01e      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d019      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ce0:	4b23      	ldr	r3, [pc, #140]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cec:	4b20      	ldr	r3, [pc, #128]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d02:	4a1b      	ldr	r2, [pc, #108]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d0c:	4a18      	ldr	r2, [pc, #96]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d016      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1e:	f7fe f89f 	bl	8001e60 <HAL_GetTick>
 8003d22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d24:	e00b      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d26:	f7fe f89b 	bl	8001e60 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d902      	bls.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	74fb      	strb	r3, [r7, #19]
            break;
 8003d3c:	e006      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0ec      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003d4c:	7cfb      	ldrb	r3, [r7, #19]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10b      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d52:	4b07      	ldr	r3, [pc, #28]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d60:	4903      	ldr	r1, [pc, #12]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d68:	e008      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d6a:	7cfb      	ldrb	r3, [r7, #19]
 8003d6c:	74bb      	strb	r3, [r7, #18]
 8003d6e:	e005      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d7c:	7c7b      	ldrb	r3, [r7, #17]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d105      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d82:	4ba7      	ldr	r3, [pc, #668]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d86:	4aa6      	ldr	r2, [pc, #664]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d8c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d9a:	4ba1      	ldr	r3, [pc, #644]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da0:	f023 0203 	bic.w	r2, r3, #3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	499d      	ldr	r1, [pc, #628]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dbc:	4b98      	ldr	r3, [pc, #608]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc2:	f023 020c 	bic.w	r2, r3, #12
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	4995      	ldr	r1, [pc, #596]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dde:	4b90      	ldr	r3, [pc, #576]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	498c      	ldr	r1, [pc, #560]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e00:	4b87      	ldr	r3, [pc, #540]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	4984      	ldr	r1, [pc, #528]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e22:	4b7f      	ldr	r3, [pc, #508]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	497b      	ldr	r1, [pc, #492]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e44:	4b76      	ldr	r3, [pc, #472]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e4a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	4973      	ldr	r1, [pc, #460]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e66:	4b6e      	ldr	r3, [pc, #440]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e6c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	496a      	ldr	r1, [pc, #424]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e88:	4b65      	ldr	r3, [pc, #404]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	4962      	ldr	r1, [pc, #392]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eaa:	4b5d      	ldr	r3, [pc, #372]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	4959      	ldr	r1, [pc, #356]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ecc:	4b54      	ldr	r3, [pc, #336]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ed2:	f023 0203 	bic.w	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eda:	4951      	ldr	r1, [pc, #324]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eee:	4b4c      	ldr	r3, [pc, #304]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efc:	4948      	ldr	r1, [pc, #288]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d015      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f10:	4b43      	ldr	r3, [pc, #268]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	4940      	ldr	r1, [pc, #256]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f2e:	d105      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f30:	4b3b      	ldr	r3, [pc, #236]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4a3a      	ldr	r2, [pc, #232]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f3a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d015      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f48:	4b35      	ldr	r3, [pc, #212]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f56:	4932      	ldr	r1, [pc, #200]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f66:	d105      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f68:	4b2d      	ldr	r3, [pc, #180]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f72:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d015      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f80:	4b27      	ldr	r3, [pc, #156]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f86:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8e:	4924      	ldr	r1, [pc, #144]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f9e:	d105      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003faa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d015      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fb8:	4b19      	ldr	r3, [pc, #100]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc6:	4916      	ldr	r1, [pc, #88]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fd6:	d105      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd8:	4b11      	ldr	r3, [pc, #68]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4a10      	ldr	r2, [pc, #64]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fe2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d019      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	4908      	ldr	r1, [pc, #32]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800400e:	d109      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004010:	4b03      	ldr	r3, [pc, #12]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4a02      	ldr	r2, [pc, #8]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800401a:	60d3      	str	r3, [r2, #12]
 800401c:	e002      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800401e:	bf00      	nop
 8004020:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d015      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004030:	4b29      	ldr	r3, [pc, #164]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004036:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403e:	4926      	ldr	r1, [pc, #152]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800404e:	d105      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004050:	4b21      	ldr	r3, [pc, #132]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a20      	ldr	r2, [pc, #128]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004068:	4b1b      	ldr	r3, [pc, #108]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004076:	4918      	ldr	r1, [pc, #96]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004086:	d105      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004088:	4b13      	ldr	r3, [pc, #76]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4a12      	ldr	r2, [pc, #72]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800408e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004092:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d015      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80040a0:	4b0d      	ldr	r3, [pc, #52]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ae:	490a      	ldr	r1, [pc, #40]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040be:	d105      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c0:	4b05      	ldr	r3, [pc, #20]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4a04      	ldr	r2, [pc, #16]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80040cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40021000 	.word	0x40021000

080040dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040ee:	d136      	bne.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80040f0:	4bb1      	ldr	r3, [pc, #708]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040fa:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80040fc:	4bae      	ldr	r3, [pc, #696]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b02      	cmp	r3, #2
 8004108:	d108      	bne.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004110:	d104      	bne.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8004112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004116:	61fb      	str	r3, [r7, #28]
 8004118:	f000 bd12 	b.w	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800411c:	4ba6      	ldr	r3, [pc, #664]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800411e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b02      	cmp	r3, #2
 8004128:	d108      	bne.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004130:	d104      	bne.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 8004132:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	f000 bd02 	b.w	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800413c:	4b9e      	ldr	r3, [pc, #632]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004144:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004148:	f040 84fa 	bne.w	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004152:	f040 84f5 	bne.w	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = HSE_VALUE / 32U;
 8004156:	4b99      	ldr	r3, [pc, #612]	@ (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	f000 bcf1 	b.w	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 800415e:	4b96      	ldr	r3, [pc, #600]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d10c      	bne.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800416a:	4b93      	ldr	r3, [pc, #588]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004176:	d102      	bne.n	800417e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 8004178:	4b91      	ldr	r3, [pc, #580]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800417a:	61bb      	str	r3, [r7, #24]
 800417c:	e017      	b.n	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	e014      	b.n	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 8004184:	4b8c      	ldr	r3, [pc, #560]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	2b03      	cmp	r3, #3
 800418e:	d10c      	bne.n	80041aa <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004190:	4b89      	ldr	r3, [pc, #548]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004198:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800419c:	d102      	bne.n	80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 800419e:	4b89      	ldr	r3, [pc, #548]	@ (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	e004      	b.n	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	e001      	b.n	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80041ae:	4b82      	ldr	r3, [pc, #520]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	3301      	adds	r3, #1
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041c8:	f000 8466 	beq.w	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041d2:	f200 848e 	bhi.w	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041dc:	f000 8263 	beq.w	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041e6:	f200 8484 	bhi.w	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041f0:	f000 8417 	beq.w	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041fa:	f200 847a 	bhi.w	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004204:	f000 83d0 	beq.w	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800420e:	f200 8470 	bhi.w	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004218:	f000 8398 	beq.w	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004222:	f200 8466 	bhi.w	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800422c:	f000 8360 	beq.w	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004236:	f200 845c 	bhi.w	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004240:	f000 8318 	beq.w	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800424a:	f200 8452 	bhi.w	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004254:	f000 82ca 	beq.w	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800425e:	f200 8448 	bhi.w	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004268:	f000 827c 	beq.w	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004272:	f200 843e 	bhi.w	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800427c:	f000 8236 	beq.w	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004286:	f200 8434 	bhi.w	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004290:	f000 81e4 	beq.w	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800429a:	f200 842a 	bhi.w	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b80      	cmp	r3, #128	@ 0x80
 80042a2:	f000 81b1 	beq.w	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b80      	cmp	r3, #128	@ 0x80
 80042aa:	f200 8422 	bhi.w	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d84b      	bhi.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 841b 	beq.w	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3b01      	subs	r3, #1
 80042c0:	2b1f      	cmp	r3, #31
 80042c2:	f200 8416 	bhi.w	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80042c6:	a201      	add	r2, pc, #4	@ (adr r2, 80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	08004357 	.word	0x08004357
 80042d0:	080043c9 	.word	0x080043c9
 80042d4:	08004af3 	.word	0x08004af3
 80042d8:	0800442b 	.word	0x0800442b
 80042dc:	08004af3 	.word	0x08004af3
 80042e0:	08004af3 	.word	0x08004af3
 80042e4:	08004af3 	.word	0x08004af3
 80042e8:	0800448d 	.word	0x0800448d
 80042ec:	08004af3 	.word	0x08004af3
 80042f0:	08004af3 	.word	0x08004af3
 80042f4:	08004af3 	.word	0x08004af3
 80042f8:	08004af3 	.word	0x08004af3
 80042fc:	08004af3 	.word	0x08004af3
 8004300:	08004af3 	.word	0x08004af3
 8004304:	08004af3 	.word	0x08004af3
 8004308:	080044ef 	.word	0x080044ef
 800430c:	08004af3 	.word	0x08004af3
 8004310:	08004af3 	.word	0x08004af3
 8004314:	08004af3 	.word	0x08004af3
 8004318:	08004af3 	.word	0x08004af3
 800431c:	08004af3 	.word	0x08004af3
 8004320:	08004af3 	.word	0x08004af3
 8004324:	08004af3 	.word	0x08004af3
 8004328:	08004af3 	.word	0x08004af3
 800432c:	08004af3 	.word	0x08004af3
 8004330:	08004af3 	.word	0x08004af3
 8004334:	08004af3 	.word	0x08004af3
 8004338:	08004af3 	.word	0x08004af3
 800433c:	08004af3 	.word	0x08004af3
 8004340:	08004af3 	.word	0x08004af3
 8004344:	08004af3 	.word	0x08004af3
 8004348:	08004557 	.word	0x08004557
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b40      	cmp	r3, #64	@ 0x40
 8004350:	f000 8135 	beq.w	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
      break;

#endif /* QUADSPI */

    default:
      break;
 8004354:	e3cd      	b.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004356:	4b18      	ldr	r3, [pc, #96]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d103      	bne.n	8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        frequency = HAL_RCC_GetPCLK2Freq();
 8004368:	f7ff fc0e 	bl	8003b88 <HAL_RCC_GetPCLK2Freq>
 800436c:	61f8      	str	r0, [r7, #28]
      break;
 800436e:	e3c2      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d103      	bne.n	800437e <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
        frequency = HAL_RCC_GetSysClockFreq();
 8004376:	f7ff fb83 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 800437a:	61f8      	str	r0, [r7, #28]
      break;
 800437c:	e3bb      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 800437e:	4b0e      	ldr	r3, [pc, #56]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800438a:	d105      	bne.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d102      	bne.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HSI_VALUE;
 8004392:	4b0b      	ldr	r3, [pc, #44]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8004394:	61fb      	str	r3, [r7, #28]
      break;
 8004396:	e3ae      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004398:	4b07      	ldr	r3, [pc, #28]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	f040 83a7 	bne.w	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	f040 83a3 	bne.w	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
        frequency = LSE_VALUE;
 80043b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043b4:	61fb      	str	r3, [r7, #28]
      break;
 80043b6:	e39e      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80043b8:	40021000 	.word	0x40021000
 80043bc:	0003d090 	.word	0x0003d090
 80043c0:	00f42400 	.word	0x00f42400
 80043c4:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80043c8:	4ba2      	ldr	r3, [pc, #648]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d103      	bne.n	80043e2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
        frequency = HAL_RCC_GetPCLK1Freq();
 80043da:	f7ff fbbf 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 80043de:	61f8      	str	r0, [r7, #28]
      break;
 80043e0:	e38b      	b.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d103      	bne.n	80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
        frequency = HAL_RCC_GetSysClockFreq();
 80043e8:	f7ff fb4a 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 80043ec:	61f8      	str	r0, [r7, #28]
      break;
 80043ee:	e384      	b.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80043f0:	4b98      	ldr	r3, [pc, #608]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043fc:	d105      	bne.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	2b08      	cmp	r3, #8
 8004402:	d102      	bne.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
        frequency = HSI_VALUE;
 8004404:	4b94      	ldr	r3, [pc, #592]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004406:	61fb      	str	r3, [r7, #28]
      break;
 8004408:	e377      	b.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800440a:	4b92      	ldr	r3, [pc, #584]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800440c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b02      	cmp	r3, #2
 8004416:	f040 8370 	bne.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b0c      	cmp	r3, #12
 800441e:	f040 836c 	bne.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
        frequency = LSE_VALUE;
 8004422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004426:	61fb      	str	r3, [r7, #28]
      break;
 8004428:	e367      	b.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800442a:	4b8a      	ldr	r3, [pc, #552]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004430:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004434:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d103      	bne.n	8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
        frequency = HAL_RCC_GetPCLK1Freq();
 800443c:	f7ff fb8e 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 8004440:	61f8      	str	r0, [r7, #28]
      break;
 8004442:	e35c      	b.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	2b10      	cmp	r3, #16
 8004448:	d103      	bne.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
        frequency = HAL_RCC_GetSysClockFreq();
 800444a:	f7ff fb19 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 800444e:	61f8      	str	r0, [r7, #28]
      break;
 8004450:	e355      	b.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004452:	4b80      	ldr	r3, [pc, #512]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800445a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800445e:	d105      	bne.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	2b20      	cmp	r3, #32
 8004464:	d102      	bne.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x390>
        frequency = HSI_VALUE;
 8004466:	4b7c      	ldr	r3, [pc, #496]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004468:	61fb      	str	r3, [r7, #28]
      break;
 800446a:	e348      	b.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800446c:	4b79      	ldr	r3, [pc, #484]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b02      	cmp	r3, #2
 8004478:	f040 8341 	bne.w	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	2b30      	cmp	r3, #48	@ 0x30
 8004480:	f040 833d 	bne.w	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        frequency = LSE_VALUE;
 8004484:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004488:	61fb      	str	r3, [r7, #28]
      break;
 800448a:	e338      	b.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800448c:	4b71      	ldr	r3, [pc, #452]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004492:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004496:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d103      	bne.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        frequency = HAL_RCC_GetPCLK1Freq();
 800449e:	f7ff fb5d 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 80044a2:	61f8      	str	r0, [r7, #28]
      break;
 80044a4:	e32d      	b.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	2b40      	cmp	r3, #64	@ 0x40
 80044aa:	d103      	bne.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        frequency = HAL_RCC_GetSysClockFreq();
 80044ac:	f7ff fae8 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 80044b0:	61f8      	str	r0, [r7, #28]
      break;
 80044b2:	e326      	b.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80044b4:	4b67      	ldr	r3, [pc, #412]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044c0:	d105      	bne.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b80      	cmp	r3, #128	@ 0x80
 80044c6:	d102      	bne.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
        frequency = HSI_VALUE;
 80044c8:	4b63      	ldr	r3, [pc, #396]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80044ca:	61fb      	str	r3, [r7, #28]
      break;
 80044cc:	e319      	b.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80044ce:	4b61      	ldr	r3, [pc, #388]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80044d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b02      	cmp	r3, #2
 80044da:	f040 8312 	bne.w	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2bc0      	cmp	r3, #192	@ 0xc0
 80044e2:	f040 830e 	bne.w	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
        frequency = LSE_VALUE;
 80044e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044ea:	61fb      	str	r3, [r7, #28]
      break;
 80044ec:	e309      	b.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80044ee:	4b59      	ldr	r3, [pc, #356]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044f8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d103      	bne.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004500:	f7ff fb2c 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 8004504:	61f8      	str	r0, [r7, #28]
      break;
 8004506:	e2fe      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800450e:	d103      	bne.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
        frequency = HAL_RCC_GetSysClockFreq();
 8004510:	f7ff fab6 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8004514:	61f8      	str	r0, [r7, #28]
      break;
 8004516:	e2f6      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004518:	4b4e      	ldr	r3, [pc, #312]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004524:	d106      	bne.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800452c:	d102      	bne.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
        frequency = HSI_VALUE;
 800452e:	4b4a      	ldr	r3, [pc, #296]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004530:	61fb      	str	r3, [r7, #28]
      break;
 8004532:	e2e8      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004534:	4b47      	ldr	r3, [pc, #284]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b02      	cmp	r3, #2
 8004540:	f040 82e1 	bne.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800454a:	f040 82dc 	bne.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
        frequency = LSE_VALUE;
 800454e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004552:	61fb      	str	r3, [r7, #28]
      break;
 8004554:	e2d7      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004556:	4b3f      	ldr	r3, [pc, #252]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004560:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d103      	bne.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004568:	f7ff faf8 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 800456c:	61f8      	str	r0, [r7, #28]
      break;
 800456e:	e2cc      	b.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004576:	d103      	bne.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
        frequency = HAL_RCC_GetSysClockFreq();
 8004578:	f7ff fa82 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 800457c:	61f8      	str	r0, [r7, #28]
      break;
 800457e:	e2c4      	b.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004580:	4b34      	ldr	r3, [pc, #208]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800458c:	d106      	bne.n	800459c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004594:	d102      	bne.n	800459c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
        frequency = HSI_VALUE;
 8004596:	4b30      	ldr	r3, [pc, #192]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004598:	61fb      	str	r3, [r7, #28]
      break;
 800459a:	e2b6      	b.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800459c:	4b2d      	ldr	r3, [pc, #180]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	f040 82af 	bne.w	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045b2:	f040 82aa 	bne.w	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
        frequency = LSE_VALUE;
 80045b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045ba:	61fb      	str	r3, [r7, #28]
      break;
 80045bc:	e2a5      	b.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80045be:	4b25      	ldr	r3, [pc, #148]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80045c8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d103      	bne.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        frequency = HAL_RCC_GetPCLK1Freq();
 80045d0:	f7ff fac4 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 80045d4:	61f8      	str	r0, [r7, #28]
      break;
 80045d6:	e29a      	b.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045de:	d103      	bne.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        frequency = HAL_RCC_GetSysClockFreq();
 80045e0:	f7ff fa4e 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 80045e4:	61f8      	str	r0, [r7, #28]
      break;
 80045e6:	e292      	b.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80045e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045f4:	f040 828b 	bne.w	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045fe:	f040 8286 	bne.w	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
        frequency = HSI_VALUE;
 8004602:	4b15      	ldr	r3, [pc, #84]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004604:	61fb      	str	r3, [r7, #28]
      break;
 8004606:	e282      	b.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004608:	4b12      	ldr	r3, [pc, #72]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004612:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
        frequency = HAL_RCC_GetPCLK1Freq();
 800461a:	f7ff fa9f 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 800461e:	61f8      	str	r0, [r7, #28]
      break;
 8004620:	e277      	b.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004628:	d103      	bne.n	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
        frequency = HAL_RCC_GetSysClockFreq();
 800462a:	f7ff fa29 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 800462e:	61f8      	str	r0, [r7, #28]
      break;
 8004630:	e26f      	b.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004632:	4b08      	ldr	r3, [pc, #32]	@ (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800463a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800463e:	f040 8268 	bne.w	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004648:	f040 8263 	bne.w	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
        frequency = HSI_VALUE;
 800464c:	4b02      	ldr	r3, [pc, #8]	@ (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800464e:	61fb      	str	r3, [r7, #28]
      break;
 8004650:	e25f      	b.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004652:	bf00      	nop
 8004654:	40021000 	.word	0x40021000
 8004658:	00f42400 	.word	0x00f42400
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800465c:	4ba0      	ldr	r3, [pc, #640]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004662:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004666:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d103      	bne.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
        frequency = HAL_RCC_GetPCLK1Freq();
 800466e:	f7ff fa75 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 8004672:	61f8      	str	r0, [r7, #28]
      break;
 8004674:	e24f      	b.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800467c:	d103      	bne.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
        frequency = HAL_RCC_GetSysClockFreq();
 800467e:	f7ff f9ff 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8004682:	61f8      	str	r0, [r7, #28]
      break;
 8004684:	e247      	b.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8004686:	4b96      	ldr	r3, [pc, #600]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800468e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004692:	f040 8240 	bne.w	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800469c:	f040 823b 	bne.w	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        frequency = HSI_VALUE;
 80046a0:	4b90      	ldr	r3, [pc, #576]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80046a2:	61fb      	str	r3, [r7, #28]
      break;
 80046a4:	e237      	b.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80046a6:	4b8e      	ldr	r3, [pc, #568]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80046a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046ac:	f003 0303 	and.w	r3, r3, #3
 80046b0:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d103      	bne.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
        frequency = HAL_RCC_GetPCLK1Freq();
 80046b8:	f7ff fa50 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 80046bc:	61f8      	str	r0, [r7, #28]
      break;
 80046be:	e22c      	b.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if(srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d103      	bne.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        frequency = HAL_RCC_GetSysClockFreq();
 80046c6:	f7ff f9db 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 80046ca:	61f8      	str	r0, [r7, #28]
      break;
 80046cc:	e225      	b.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80046ce:	4b84      	ldr	r3, [pc, #528]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046da:	f040 821e 	bne.w	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	f040 821a 	bne.w	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
        frequency = HSI_VALUE;
 80046e6:	4b7f      	ldr	r3, [pc, #508]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80046e8:	61fb      	str	r3, [r7, #28]
      break;
 80046ea:	e216      	b.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80046ec:	4b7c      	ldr	r3, [pc, #496]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80046f6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d103      	bne.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
        frequency = HAL_RCC_GetPCLK1Freq();
 80046fe:	f7ff fa2d 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 8004702:	61f8      	str	r0, [r7, #28]
      break;
 8004704:	e20b      	b.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004706:	4b76      	ldr	r3, [pc, #472]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004708:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b02      	cmp	r3, #2
 8004712:	d107      	bne.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800471a:	d103      	bne.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
        frequency = LSI_VALUE;
 800471c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	e01e      	b.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004724:	4b6e      	ldr	r3, [pc, #440]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800472c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004730:	d106      	bne.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004738:	d102      	bne.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        frequency = HSI_VALUE;
 800473a:	4b6a      	ldr	r3, [pc, #424]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800473c:	61fb      	str	r3, [r7, #28]
 800473e:	e010      	b.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004740:	4b67      	ldr	r3, [pc, #412]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b02      	cmp	r3, #2
 800474c:	f040 81e7 	bne.w	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004756:	f040 81e2 	bne.w	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
        frequency = LSE_VALUE;
 800475a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800475e:	61fb      	str	r3, [r7, #28]
      break;
 8004760:	e1dd      	b.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8004762:	e1dc      	b.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004764:	4b5e      	ldr	r3, [pc, #376]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800476e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d103      	bne.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
        frequency = HAL_RCC_GetSysClockFreq();
 8004776:	f7ff f983 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 800477a:	61f8      	str	r0, [r7, #28]
      break;
 800477c:	e1d1      	b.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004784:	d11b      	bne.n	80047be <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8004786:	4b56      	ldr	r3, [pc, #344]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 81c7 	beq.w	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004794:	4b52      	ldr	r3, [pc, #328]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	0a1b      	lsrs	r3, r3, #8
 800479a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800479e:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	fb03 f202 	mul.w	r2, r3, r2
 80047a8:	4b4d      	ldr	r3, [pc, #308]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	0d5b      	lsrs	r3, r3, #21
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	3301      	adds	r3, #1
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ba:	61fb      	str	r3, [r7, #28]
      break;
 80047bc:	e1b1      	b.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047c4:	d102      	bne.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        frequency = EXTERNAL_CLOCK_VALUE;
 80047c6:	4b48      	ldr	r3, [pc, #288]	@ (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80047c8:	61fb      	str	r3, [r7, #28]
      break;
 80047ca:	e1aa      	b.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 80047cc:	4b44      	ldr	r3, [pc, #272]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047d8:	f040 81a3 	bne.w	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047e2:	f040 819e 	bne.w	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
        frequency = HSI_VALUE;
 80047e6:	4b3f      	ldr	r3, [pc, #252]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80047e8:	61fb      	str	r3, [r7, #28]
      break;
 80047ea:	e19a      	b.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047ec:	4b3c      	ldr	r3, [pc, #240]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80047f6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d103      	bne.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
        frequency = HAL_RCC_GetSysClockFreq();
 80047fe:	f7ff f93f 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8004802:	61f8      	str	r0, [r7, #28]
      break;
 8004804:	e18f      	b.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800480c:	d11b      	bne.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800480e:	4b34      	ldr	r3, [pc, #208]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 8185 	beq.w	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800481c:	4b30      	ldr	r3, [pc, #192]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	0a1b      	lsrs	r3, r3, #8
 8004822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004826:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	fb03 f202 	mul.w	r2, r3, r2
 8004830:	4b2b      	ldr	r3, [pc, #172]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	0d5b      	lsrs	r3, r3, #21
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	3301      	adds	r3, #1
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004842:	61fb      	str	r3, [r7, #28]
      break;
 8004844:	e16f      	b.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800484c:	d102      	bne.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        frequency = EXTERNAL_CLOCK_VALUE;
 800484e:	4b26      	ldr	r3, [pc, #152]	@ (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004850:	61fb      	str	r3, [r7, #28]
      break;
 8004852:	e168      	b.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 8004854:	4b22      	ldr	r3, [pc, #136]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800485c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004860:	f040 8161 	bne.w	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800486a:	f040 815c 	bne.w	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
        frequency = HSI_VALUE;
 800486e:	4b1d      	ldr	r3, [pc, #116]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004870:	61fb      	str	r3, [r7, #28]
      break;
 8004872:	e158      	b.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004874:	4b1a      	ldr	r3, [pc, #104]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800487a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800487e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004886:	d103      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004888:	f7ff f968 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 800488c:	61f8      	str	r0, [r7, #28]
      break;
 800488e:	e14c      	b.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d102      	bne.n	800489c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
        frequency = HSE_VALUE;
 8004896:	4b15      	ldr	r3, [pc, #84]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004898:	61fb      	str	r3, [r7, #28]
      break;
 800489a:	e146      	b.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048a2:	f040 8142 	bne.w	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80048a6:	4b0e      	ldr	r3, [pc, #56]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 813b 	beq.w	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80048b4:	4b0a      	ldr	r3, [pc, #40]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	0a1b      	lsrs	r3, r3, #8
 80048ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048be:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	fb03 f202 	mul.w	r2, r3, r2
 80048c8:	4b05      	ldr	r3, [pc, #20]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	0d5b      	lsrs	r3, r3, #21
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	3301      	adds	r3, #1
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048da:	61fb      	str	r3, [r7, #28]
      break;
 80048dc:	e125      	b.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 80048de:	bf00      	nop
 80048e0:	40021000 	.word	0x40021000
 80048e4:	00f42400 	.word	0x00f42400
 80048e8:	00bb8000 	.word	0x00bb8000
 80048ec:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 80048f0:	4b96      	ldr	r3, [pc, #600]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80048fa:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004902:	d114      	bne.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004904:	4b91      	ldr	r3, [pc, #580]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	0a1b      	lsrs	r3, r3, #8
 800490a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800490e:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	fb03 f202 	mul.w	r2, r3, r2
 8004918:	4b8c      	ldr	r3, [pc, #560]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	0d5b      	lsrs	r3, r3, #21
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	3301      	adds	r3, #1
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	fbb2 f3f3 	udiv	r3, r2, r3
 800492a:	61fb      	str	r3, [r7, #28]
      break;
 800492c:	e0ff      	b.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 800492e:	4b87      	ldr	r3, [pc, #540]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004930:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b02      	cmp	r3, #2
 800493a:	f040 80f8 	bne.w	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	f040 80f4 	bne.w	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
        frequency = HSI48_VALUE;
 8004946:	4b82      	ldr	r3, [pc, #520]	@ (8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8004948:	61fb      	str	r3, [r7, #28]
      break;
 800494a:	e0f0      	b.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800494c:	4b7f      	ldr	r3, [pc, #508]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004952:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004956:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800495e:	d114      	bne.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004960:	4b7a      	ldr	r3, [pc, #488]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	0a1b      	lsrs	r3, r3, #8
 8004966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800496a:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	fb03 f202 	mul.w	r2, r3, r2
 8004974:	4b75      	ldr	r3, [pc, #468]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	0d5b      	lsrs	r3, r3, #21
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	3301      	adds	r3, #1
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	fbb2 f3f3 	udiv	r3, r2, r3
 8004986:	61fb      	str	r3, [r7, #28]
      break;
 8004988:	e0d3      	b.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 800498a:	4b70      	ldr	r3, [pc, #448]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800498c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b02      	cmp	r3, #2
 8004996:	f040 80cc 	bne.w	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f040 80c8 	bne.w	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
        frequency = HSI48_VALUE;
 80049a2:	4b6b      	ldr	r3, [pc, #428]	@ (8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80049a4:	61fb      	str	r3, [r7, #28]
      break;
 80049a6:	e0c4      	b.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 80049a8:	4b68      	ldr	r3, [pc, #416]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80049b2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049ba:	d129      	bne.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 80049bc:	4b63      	ldr	r3, [pc, #396]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80b6 	beq.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80049ca:	4b60      	ldr	r3, [pc, #384]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	0a1b      	lsrs	r3, r3, #8
 80049d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049d4:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80049d6:	4b5d      	ldr	r3, [pc, #372]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	0edb      	lsrs	r3, r3, #27
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x922>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80049e8:	4b58      	ldr	r3, [pc, #352]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
              pllp = 17U;
 80049f4:	2311      	movs	r3, #17
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	e001      	b.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x922>
              pllp = 7U;
 80049fa:	2307      	movs	r3, #7
 80049fc:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	fb03 f202 	mul.w	r2, r3, r2
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0c:	61fb      	str	r3, [r7, #28]
      break;
 8004a0e:	e092      	b.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a16:	f040 808e 	bne.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
        frequency = HAL_RCC_GetSysClockFreq();
 8004a1a:	f7ff f831 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8004a1e:	61f8      	str	r0, [r7, #28]
      break;
 8004a20:	e089      	b.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 8004a22:	4b4a      	ldr	r3, [pc, #296]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a28:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004a2c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a34:	d128      	bne.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8004a36:	4b45      	ldr	r3, [pc, #276]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d07b      	beq.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004a42:	4b42      	ldr	r3, [pc, #264]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	0a1b      	lsrs	r3, r3, #8
 8004a48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a4c:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	0edb      	lsrs	r3, r3, #27
 8004a54:	f003 031f 	and.w	r3, r3, #31
 8004a58:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004a60:	4b3a      	ldr	r3, [pc, #232]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
              pllp = 17U;
 8004a6c:	2311      	movs	r3, #17
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	e001      	b.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
              pllp = 7U;
 8004a72:	2307      	movs	r3, #7
 8004a74:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	fb03 f202 	mul.w	r2, r3, r2
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a84:	61fb      	str	r3, [r7, #28]
      break;
 8004a86:	e058      	b.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a8e:	d154      	bne.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
        frequency = HAL_RCC_GetSysClockFreq();
 8004a90:	f7fe fff6 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8004a94:	61f8      	str	r0, [r7, #28]
      break;
 8004a96:	e050      	b.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 8004a98:	4b2c      	ldr	r3, [pc, #176]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a9e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004aa2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004aaa:	d114      	bne.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004aac:	4b27      	ldr	r3, [pc, #156]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	0a1b      	lsrs	r3, r3, #8
 8004ab2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ab6:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	fb03 f202 	mul.w	r2, r3, r2
 8004ac0:	4b22      	ldr	r3, [pc, #136]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	0d5b      	lsrs	r3, r3, #21
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	3301      	adds	r3, #1
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad2:	61fb      	str	r3, [r7, #28]
      break;
 8004ad4:	e033      	b.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004adc:	d102      	bne.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa08>
        frequency = HSI_VALUE;
 8004ade:	4b1d      	ldr	r3, [pc, #116]	@ (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8004ae0:	61fb      	str	r3, [r7, #28]
      break;
 8004ae2:	e02c      	b.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d129      	bne.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
        frequency = HAL_RCC_GetSysClockFreq();
 8004aea:	f7fe ffc9 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8004aee:	61f8      	str	r0, [r7, #28]
      break;
 8004af0:	e025      	b.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      break;
 8004af2:	bf00      	nop
 8004af4:	e024      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004af6:	bf00      	nop
 8004af8:	e022      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004afa:	bf00      	nop
 8004afc:	e020      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004afe:	bf00      	nop
 8004b00:	e01e      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004b02:	bf00      	nop
 8004b04:	e01c      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004b06:	bf00      	nop
 8004b08:	e01a      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004b0a:	bf00      	nop
 8004b0c:	e018      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004b0e:	bf00      	nop
 8004b10:	e016      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004b12:	bf00      	nop
 8004b14:	e014      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004b16:	bf00      	nop
 8004b18:	e012      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004b1a:	bf00      	nop
 8004b1c:	e010      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004b1e:	bf00      	nop
 8004b20:	e00e      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004b22:	bf00      	nop
 8004b24:	e00c      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004b26:	bf00      	nop
 8004b28:	e00a      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e008      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e006      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004b32:	bf00      	nop
 8004b34:	e004      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004b36:	bf00      	nop
 8004b38:	e002      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004b3a:	bf00      	nop
 8004b3c:	e000      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004b3e:	bf00      	nop
    }
  }

  return(frequency);
 8004b40:	69fb      	ldr	r3, [r7, #28]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3720      	adds	r7, #32
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	02dc6c00 	.word	0x02dc6c00
 8004b54:	00f42400 	.word	0x00f42400

08004b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e049      	b.n	8004bfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fc feca 	bl	8001918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3304      	adds	r3, #4
 8004b94:	4619      	mov	r1, r3
 8004b96:	4610      	mov	r0, r2
 8004b98:	f000 feda 	bl	8005950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d001      	beq.n	8004c20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e04c      	b.n	8004cba <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a26      	ldr	r2, [pc, #152]	@ (8004cc8 <HAL_TIM_Base_Start+0xc0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d022      	beq.n	8004c78 <HAL_TIM_Base_Start+0x70>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c3a:	d01d      	beq.n	8004c78 <HAL_TIM_Base_Start+0x70>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a22      	ldr	r2, [pc, #136]	@ (8004ccc <HAL_TIM_Base_Start+0xc4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d018      	beq.n	8004c78 <HAL_TIM_Base_Start+0x70>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a21      	ldr	r2, [pc, #132]	@ (8004cd0 <HAL_TIM_Base_Start+0xc8>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d013      	beq.n	8004c78 <HAL_TIM_Base_Start+0x70>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1f      	ldr	r2, [pc, #124]	@ (8004cd4 <HAL_TIM_Base_Start+0xcc>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00e      	beq.n	8004c78 <HAL_TIM_Base_Start+0x70>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd8 <HAL_TIM_Base_Start+0xd0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d009      	beq.n	8004c78 <HAL_TIM_Base_Start+0x70>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1c      	ldr	r2, [pc, #112]	@ (8004cdc <HAL_TIM_Base_Start+0xd4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <HAL_TIM_Base_Start+0x70>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1b      	ldr	r2, [pc, #108]	@ (8004ce0 <HAL_TIM_Base_Start+0xd8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d115      	bne.n	8004ca4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	4b19      	ldr	r3, [pc, #100]	@ (8004ce4 <HAL_TIM_Base_Start+0xdc>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b06      	cmp	r3, #6
 8004c88:	d015      	beq.n	8004cb6 <HAL_TIM_Base_Start+0xae>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c90:	d011      	beq.n	8004cb6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0201 	orr.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca2:	e008      	b.n	8004cb6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	e000      	b.n	8004cb8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40000400 	.word	0x40000400
 8004cd0:	40000800 	.word	0x40000800
 8004cd4:	40000c00 	.word	0x40000c00
 8004cd8:	40013400 	.word	0x40013400
 8004cdc:	40014000 	.word	0x40014000
 8004ce0:	40015000 	.word	0x40015000
 8004ce4:	00010007 	.word	0x00010007

08004ce8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e049      	b.n	8004d8e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f89d 	bl	8004e4e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3304      	adds	r3, #4
 8004d24:	4619      	mov	r1, r3
 8004d26:	4610      	mov	r0, r2
 8004d28:	f000 fe12 	bl	8005950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2202      	movs	r2, #2
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6a1a      	ldr	r2, [r3, #32]
 8004dac:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004db0:	4013      	ands	r3, r2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10f      	bne.n	8004dd6 <HAL_TIM_OC_DeInit+0x40>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6a1a      	ldr	r2, [r3, #32]
 8004dbc:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d107      	bne.n	8004dd6 <HAL_TIM_OC_DeInit+0x40>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0201 	bic.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f843 	bl	8004e62 <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
	...

08004e78 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d109      	bne.n	8004e9c <HAL_TIM_OC_Start+0x24>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	bf14      	ite	ne
 8004e94:	2301      	movne	r3, #1
 8004e96:	2300      	moveq	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	e03c      	b.n	8004f16 <HAL_TIM_OC_Start+0x9e>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d109      	bne.n	8004eb6 <HAL_TIM_OC_Start+0x3e>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	bf14      	ite	ne
 8004eae:	2301      	movne	r3, #1
 8004eb0:	2300      	moveq	r3, #0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	e02f      	b.n	8004f16 <HAL_TIM_OC_Start+0x9e>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d109      	bne.n	8004ed0 <HAL_TIM_OC_Start+0x58>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	bf14      	ite	ne
 8004ec8:	2301      	movne	r3, #1
 8004eca:	2300      	moveq	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	e022      	b.n	8004f16 <HAL_TIM_OC_Start+0x9e>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b0c      	cmp	r3, #12
 8004ed4:	d109      	bne.n	8004eea <HAL_TIM_OC_Start+0x72>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	bf14      	ite	ne
 8004ee2:	2301      	movne	r3, #1
 8004ee4:	2300      	moveq	r3, #0
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	e015      	b.n	8004f16 <HAL_TIM_OC_Start+0x9e>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d109      	bne.n	8004f04 <HAL_TIM_OC_Start+0x8c>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	bf14      	ite	ne
 8004efc:	2301      	movne	r3, #1
 8004efe:	2300      	moveq	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	e008      	b.n	8004f16 <HAL_TIM_OC_Start+0x9e>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	bf14      	ite	ne
 8004f10:	2301      	movne	r3, #1
 8004f12:	2300      	moveq	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e0a6      	b.n	800506c <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d104      	bne.n	8004f2e <HAL_TIM_OC_Start+0xb6>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f2c:	e023      	b.n	8004f76 <HAL_TIM_OC_Start+0xfe>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d104      	bne.n	8004f3e <HAL_TIM_OC_Start+0xc6>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f3c:	e01b      	b.n	8004f76 <HAL_TIM_OC_Start+0xfe>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d104      	bne.n	8004f4e <HAL_TIM_OC_Start+0xd6>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f4c:	e013      	b.n	8004f76 <HAL_TIM_OC_Start+0xfe>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b0c      	cmp	r3, #12
 8004f52:	d104      	bne.n	8004f5e <HAL_TIM_OC_Start+0xe6>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f5c:	e00b      	b.n	8004f76 <HAL_TIM_OC_Start+0xfe>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b10      	cmp	r3, #16
 8004f62:	d104      	bne.n	8004f6e <HAL_TIM_OC_Start+0xf6>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f6c:	e003      	b.n	8004f76 <HAL_TIM_OC_Start+0xfe>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2202      	movs	r2, #2
 8004f72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	6839      	ldr	r1, [r7, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f001 fa40 	bl	8006404 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a3a      	ldr	r2, [pc, #232]	@ (8005074 <HAL_TIM_OC_Start+0x1fc>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d018      	beq.n	8004fc0 <HAL_TIM_OC_Start+0x148>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a39      	ldr	r2, [pc, #228]	@ (8005078 <HAL_TIM_OC_Start+0x200>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d013      	beq.n	8004fc0 <HAL_TIM_OC_Start+0x148>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a37      	ldr	r2, [pc, #220]	@ (800507c <HAL_TIM_OC_Start+0x204>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00e      	beq.n	8004fc0 <HAL_TIM_OC_Start+0x148>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a36      	ldr	r2, [pc, #216]	@ (8005080 <HAL_TIM_OC_Start+0x208>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d009      	beq.n	8004fc0 <HAL_TIM_OC_Start+0x148>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a34      	ldr	r2, [pc, #208]	@ (8005084 <HAL_TIM_OC_Start+0x20c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d004      	beq.n	8004fc0 <HAL_TIM_OC_Start+0x148>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a33      	ldr	r2, [pc, #204]	@ (8005088 <HAL_TIM_OC_Start+0x210>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d101      	bne.n	8004fc4 <HAL_TIM_OC_Start+0x14c>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e000      	b.n	8004fc6 <HAL_TIM_OC_Start+0x14e>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d007      	beq.n	8004fda <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a25      	ldr	r2, [pc, #148]	@ (8005074 <HAL_TIM_OC_Start+0x1fc>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d022      	beq.n	800502a <HAL_TIM_OC_Start+0x1b2>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fec:	d01d      	beq.n	800502a <HAL_TIM_OC_Start+0x1b2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a26      	ldr	r2, [pc, #152]	@ (800508c <HAL_TIM_OC_Start+0x214>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d018      	beq.n	800502a <HAL_TIM_OC_Start+0x1b2>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a24      	ldr	r2, [pc, #144]	@ (8005090 <HAL_TIM_OC_Start+0x218>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d013      	beq.n	800502a <HAL_TIM_OC_Start+0x1b2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a23      	ldr	r2, [pc, #140]	@ (8005094 <HAL_TIM_OC_Start+0x21c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00e      	beq.n	800502a <HAL_TIM_OC_Start+0x1b2>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a19      	ldr	r2, [pc, #100]	@ (8005078 <HAL_TIM_OC_Start+0x200>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d009      	beq.n	800502a <HAL_TIM_OC_Start+0x1b2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a18      	ldr	r2, [pc, #96]	@ (800507c <HAL_TIM_OC_Start+0x204>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d004      	beq.n	800502a <HAL_TIM_OC_Start+0x1b2>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a18      	ldr	r2, [pc, #96]	@ (8005088 <HAL_TIM_OC_Start+0x210>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d115      	bne.n	8005056 <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	4b19      	ldr	r3, [pc, #100]	@ (8005098 <HAL_TIM_OC_Start+0x220>)
 8005032:	4013      	ands	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b06      	cmp	r3, #6
 800503a:	d015      	beq.n	8005068 <HAL_TIM_OC_Start+0x1f0>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005042:	d011      	beq.n	8005068 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005054:	e008      	b.n	8005068 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0201 	orr.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	e000      	b.n	800506a <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005068:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40012c00 	.word	0x40012c00
 8005078:	40013400 	.word	0x40013400
 800507c:	40014000 	.word	0x40014000
 8005080:	40014400 	.word	0x40014400
 8005084:	40014800 	.word	0x40014800
 8005088:	40015000 	.word	0x40015000
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	00010007 	.word	0x00010007

0800509c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e049      	b.n	8005142 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f841 	bl	800514a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3304      	adds	r3, #4
 80050d8:	4619      	mov	r1, r3
 80050da:	4610      	mov	r0, r2
 80050dc:	f000 fc38 	bl	8005950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
	...

08005160 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d109      	bne.n	8005184 <HAL_TIM_PWM_Start+0x24>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b01      	cmp	r3, #1
 800517a:	bf14      	ite	ne
 800517c:	2301      	movne	r3, #1
 800517e:	2300      	moveq	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	e03c      	b.n	80051fe <HAL_TIM_PWM_Start+0x9e>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b04      	cmp	r3, #4
 8005188:	d109      	bne.n	800519e <HAL_TIM_PWM_Start+0x3e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b01      	cmp	r3, #1
 8005194:	bf14      	ite	ne
 8005196:	2301      	movne	r3, #1
 8005198:	2300      	moveq	r3, #0
 800519a:	b2db      	uxtb	r3, r3
 800519c:	e02f      	b.n	80051fe <HAL_TIM_PWM_Start+0x9e>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d109      	bne.n	80051b8 <HAL_TIM_PWM_Start+0x58>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	bf14      	ite	ne
 80051b0:	2301      	movne	r3, #1
 80051b2:	2300      	moveq	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	e022      	b.n	80051fe <HAL_TIM_PWM_Start+0x9e>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2b0c      	cmp	r3, #12
 80051bc:	d109      	bne.n	80051d2 <HAL_TIM_PWM_Start+0x72>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	bf14      	ite	ne
 80051ca:	2301      	movne	r3, #1
 80051cc:	2300      	moveq	r3, #0
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	e015      	b.n	80051fe <HAL_TIM_PWM_Start+0x9e>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d109      	bne.n	80051ec <HAL_TIM_PWM_Start+0x8c>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	bf14      	ite	ne
 80051e4:	2301      	movne	r3, #1
 80051e6:	2300      	moveq	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	e008      	b.n	80051fe <HAL_TIM_PWM_Start+0x9e>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	bf14      	ite	ne
 80051f8:	2301      	movne	r3, #1
 80051fa:	2300      	moveq	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e0a6      	b.n	8005354 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d104      	bne.n	8005216 <HAL_TIM_PWM_Start+0xb6>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005214:	e023      	b.n	800525e <HAL_TIM_PWM_Start+0xfe>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b04      	cmp	r3, #4
 800521a:	d104      	bne.n	8005226 <HAL_TIM_PWM_Start+0xc6>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005224:	e01b      	b.n	800525e <HAL_TIM_PWM_Start+0xfe>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b08      	cmp	r3, #8
 800522a:	d104      	bne.n	8005236 <HAL_TIM_PWM_Start+0xd6>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005234:	e013      	b.n	800525e <HAL_TIM_PWM_Start+0xfe>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b0c      	cmp	r3, #12
 800523a:	d104      	bne.n	8005246 <HAL_TIM_PWM_Start+0xe6>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005244:	e00b      	b.n	800525e <HAL_TIM_PWM_Start+0xfe>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b10      	cmp	r3, #16
 800524a:	d104      	bne.n	8005256 <HAL_TIM_PWM_Start+0xf6>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005254:	e003      	b.n	800525e <HAL_TIM_PWM_Start+0xfe>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2202      	movs	r2, #2
 800525a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2201      	movs	r2, #1
 8005264:	6839      	ldr	r1, [r7, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f001 f8cc 	bl	8006404 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a3a      	ldr	r2, [pc, #232]	@ (800535c <HAL_TIM_PWM_Start+0x1fc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d018      	beq.n	80052a8 <HAL_TIM_PWM_Start+0x148>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a39      	ldr	r2, [pc, #228]	@ (8005360 <HAL_TIM_PWM_Start+0x200>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d013      	beq.n	80052a8 <HAL_TIM_PWM_Start+0x148>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a37      	ldr	r2, [pc, #220]	@ (8005364 <HAL_TIM_PWM_Start+0x204>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d00e      	beq.n	80052a8 <HAL_TIM_PWM_Start+0x148>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a36      	ldr	r2, [pc, #216]	@ (8005368 <HAL_TIM_PWM_Start+0x208>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d009      	beq.n	80052a8 <HAL_TIM_PWM_Start+0x148>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a34      	ldr	r2, [pc, #208]	@ (800536c <HAL_TIM_PWM_Start+0x20c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d004      	beq.n	80052a8 <HAL_TIM_PWM_Start+0x148>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a33      	ldr	r2, [pc, #204]	@ (8005370 <HAL_TIM_PWM_Start+0x210>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d101      	bne.n	80052ac <HAL_TIM_PWM_Start+0x14c>
 80052a8:	2301      	movs	r3, #1
 80052aa:	e000      	b.n	80052ae <HAL_TIM_PWM_Start+0x14e>
 80052ac:	2300      	movs	r3, #0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d007      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a25      	ldr	r2, [pc, #148]	@ (800535c <HAL_TIM_PWM_Start+0x1fc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d022      	beq.n	8005312 <HAL_TIM_PWM_Start+0x1b2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052d4:	d01d      	beq.n	8005312 <HAL_TIM_PWM_Start+0x1b2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a26      	ldr	r2, [pc, #152]	@ (8005374 <HAL_TIM_PWM_Start+0x214>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d018      	beq.n	8005312 <HAL_TIM_PWM_Start+0x1b2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a24      	ldr	r2, [pc, #144]	@ (8005378 <HAL_TIM_PWM_Start+0x218>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <HAL_TIM_PWM_Start+0x1b2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a23      	ldr	r2, [pc, #140]	@ (800537c <HAL_TIM_PWM_Start+0x21c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00e      	beq.n	8005312 <HAL_TIM_PWM_Start+0x1b2>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a19      	ldr	r2, [pc, #100]	@ (8005360 <HAL_TIM_PWM_Start+0x200>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d009      	beq.n	8005312 <HAL_TIM_PWM_Start+0x1b2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a18      	ldr	r2, [pc, #96]	@ (8005364 <HAL_TIM_PWM_Start+0x204>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d004      	beq.n	8005312 <HAL_TIM_PWM_Start+0x1b2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a18      	ldr	r2, [pc, #96]	@ (8005370 <HAL_TIM_PWM_Start+0x210>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d115      	bne.n	800533e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	4b19      	ldr	r3, [pc, #100]	@ (8005380 <HAL_TIM_PWM_Start+0x220>)
 800531a:	4013      	ands	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b06      	cmp	r3, #6
 8005322:	d015      	beq.n	8005350 <HAL_TIM_PWM_Start+0x1f0>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800532a:	d011      	beq.n	8005350 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533c:	e008      	b.n	8005350 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f042 0201 	orr.w	r2, r2, #1
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	e000      	b.n	8005352 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005350:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40012c00 	.word	0x40012c00
 8005360:	40013400 	.word	0x40013400
 8005364:	40014000 	.word	0x40014000
 8005368:	40014400 	.word	0x40014400
 800536c:	40014800 	.word	0x40014800
 8005370:	40015000 	.word	0x40015000
 8005374:	40000400 	.word	0x40000400
 8005378:	40000800 	.word	0x40000800
 800537c:	40000c00 	.word	0x40000c00
 8005380:	00010007 	.word	0x00010007

08005384 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005390:	2300      	movs	r3, #0
 8005392:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800539e:	2302      	movs	r3, #2
 80053a0:	e066      	b.n	8005470 <HAL_TIM_OC_ConfigChannel+0xec>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b14      	cmp	r3, #20
 80053ae:	d857      	bhi.n	8005460 <HAL_TIM_OC_ConfigChannel+0xdc>
 80053b0:	a201      	add	r2, pc, #4	@ (adr r2, 80053b8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80053b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b6:	bf00      	nop
 80053b8:	0800540d 	.word	0x0800540d
 80053bc:	08005461 	.word	0x08005461
 80053c0:	08005461 	.word	0x08005461
 80053c4:	08005461 	.word	0x08005461
 80053c8:	0800541b 	.word	0x0800541b
 80053cc:	08005461 	.word	0x08005461
 80053d0:	08005461 	.word	0x08005461
 80053d4:	08005461 	.word	0x08005461
 80053d8:	08005429 	.word	0x08005429
 80053dc:	08005461 	.word	0x08005461
 80053e0:	08005461 	.word	0x08005461
 80053e4:	08005461 	.word	0x08005461
 80053e8:	08005437 	.word	0x08005437
 80053ec:	08005461 	.word	0x08005461
 80053f0:	08005461 	.word	0x08005461
 80053f4:	08005461 	.word	0x08005461
 80053f8:	08005445 	.word	0x08005445
 80053fc:	08005461 	.word	0x08005461
 8005400:	08005461 	.word	0x08005461
 8005404:	08005461 	.word	0x08005461
 8005408:	08005453 	.word	0x08005453
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68b9      	ldr	r1, [r7, #8]
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fb50 	bl	8005ab8 <TIM_OC1_SetConfig>
      break;
 8005418:	e025      	b.n	8005466 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fbe3 	bl	8005bec <TIM_OC2_SetConfig>
      break;
 8005426:	e01e      	b.n	8005466 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fc70 	bl	8005d14 <TIM_OC3_SetConfig>
      break;
 8005434:	e017      	b.n	8005466 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68b9      	ldr	r1, [r7, #8]
 800543c:	4618      	mov	r0, r3
 800543e:	f000 fcfb 	bl	8005e38 <TIM_OC4_SetConfig>
      break;
 8005442:	e010      	b.n	8005466 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fd88 	bl	8005f60 <TIM_OC5_SetConfig>
      break;
 8005450:	e009      	b.n	8005466 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fdeb 	bl	8006034 <TIM_OC6_SetConfig>
      break;
 800545e:	e002      	b.n	8005466 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	75fb      	strb	r3, [r7, #23]
      break;
 8005464:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800546e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005492:	2302      	movs	r3, #2
 8005494:	e0ff      	b.n	8005696 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b14      	cmp	r3, #20
 80054a2:	f200 80f0 	bhi.w	8005686 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054a6:	a201      	add	r2, pc, #4	@ (adr r2, 80054ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ac:	08005501 	.word	0x08005501
 80054b0:	08005687 	.word	0x08005687
 80054b4:	08005687 	.word	0x08005687
 80054b8:	08005687 	.word	0x08005687
 80054bc:	08005541 	.word	0x08005541
 80054c0:	08005687 	.word	0x08005687
 80054c4:	08005687 	.word	0x08005687
 80054c8:	08005687 	.word	0x08005687
 80054cc:	08005583 	.word	0x08005583
 80054d0:	08005687 	.word	0x08005687
 80054d4:	08005687 	.word	0x08005687
 80054d8:	08005687 	.word	0x08005687
 80054dc:	080055c3 	.word	0x080055c3
 80054e0:	08005687 	.word	0x08005687
 80054e4:	08005687 	.word	0x08005687
 80054e8:	08005687 	.word	0x08005687
 80054ec:	08005605 	.word	0x08005605
 80054f0:	08005687 	.word	0x08005687
 80054f4:	08005687 	.word	0x08005687
 80054f8:	08005687 	.word	0x08005687
 80054fc:	08005645 	.word	0x08005645
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fad6 	bl	8005ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0208 	orr.w	r2, r2, #8
 800551a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699a      	ldr	r2, [r3, #24]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0204 	bic.w	r2, r2, #4
 800552a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6999      	ldr	r1, [r3, #24]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	619a      	str	r2, [r3, #24]
      break;
 800553e:	e0a5      	b.n	800568c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fb50 	bl	8005bec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800555a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800556a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6999      	ldr	r1, [r3, #24]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	021a      	lsls	r2, r3, #8
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	619a      	str	r2, [r3, #24]
      break;
 8005580:	e084      	b.n	800568c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	4618      	mov	r0, r3
 800558a:	f000 fbc3 	bl	8005d14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f042 0208 	orr.w	r2, r2, #8
 800559c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69da      	ldr	r2, [r3, #28]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0204 	bic.w	r2, r2, #4
 80055ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69d9      	ldr	r1, [r3, #28]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	691a      	ldr	r2, [r3, #16]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	61da      	str	r2, [r3, #28]
      break;
 80055c0:	e064      	b.n	800568c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68b9      	ldr	r1, [r7, #8]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 fc35 	bl	8005e38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69da      	ldr	r2, [r3, #28]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69da      	ldr	r2, [r3, #28]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69d9      	ldr	r1, [r3, #28]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	021a      	lsls	r2, r3, #8
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	61da      	str	r2, [r3, #28]
      break;
 8005602:	e043      	b.n	800568c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68b9      	ldr	r1, [r7, #8]
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fca8 	bl	8005f60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0208 	orr.w	r2, r2, #8
 800561e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0204 	bic.w	r2, r2, #4
 800562e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005642:	e023      	b.n	800568c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fcf2 	bl	8006034 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800565e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800566e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	021a      	lsls	r2, r3, #8
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005684:	e002      	b.n	800568c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	75fb      	strb	r3, [r7, #23]
      break;
 800568a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005694:	7dfb      	ldrb	r3, [r7, #23]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop

080056a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_TIM_ConfigClockSource+0x1c>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e0f6      	b.n	80058aa <HAL_TIM_ConfigClockSource+0x20a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80056da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80056de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a6f      	ldr	r2, [pc, #444]	@ (80058b4 <HAL_TIM_ConfigClockSource+0x214>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	f000 80c1 	beq.w	800587e <HAL_TIM_ConfigClockSource+0x1de>
 80056fc:	4a6d      	ldr	r2, [pc, #436]	@ (80058b4 <HAL_TIM_ConfigClockSource+0x214>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	f200 80c6 	bhi.w	8005890 <HAL_TIM_ConfigClockSource+0x1f0>
 8005704:	4a6c      	ldr	r2, [pc, #432]	@ (80058b8 <HAL_TIM_ConfigClockSource+0x218>)
 8005706:	4293      	cmp	r3, r2
 8005708:	f000 80b9 	beq.w	800587e <HAL_TIM_ConfigClockSource+0x1de>
 800570c:	4a6a      	ldr	r2, [pc, #424]	@ (80058b8 <HAL_TIM_ConfigClockSource+0x218>)
 800570e:	4293      	cmp	r3, r2
 8005710:	f200 80be 	bhi.w	8005890 <HAL_TIM_ConfigClockSource+0x1f0>
 8005714:	4a69      	ldr	r2, [pc, #420]	@ (80058bc <HAL_TIM_ConfigClockSource+0x21c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	f000 80b1 	beq.w	800587e <HAL_TIM_ConfigClockSource+0x1de>
 800571c:	4a67      	ldr	r2, [pc, #412]	@ (80058bc <HAL_TIM_ConfigClockSource+0x21c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	f200 80b6 	bhi.w	8005890 <HAL_TIM_ConfigClockSource+0x1f0>
 8005724:	4a66      	ldr	r2, [pc, #408]	@ (80058c0 <HAL_TIM_ConfigClockSource+0x220>)
 8005726:	4293      	cmp	r3, r2
 8005728:	f000 80a9 	beq.w	800587e <HAL_TIM_ConfigClockSource+0x1de>
 800572c:	4a64      	ldr	r2, [pc, #400]	@ (80058c0 <HAL_TIM_ConfigClockSource+0x220>)
 800572e:	4293      	cmp	r3, r2
 8005730:	f200 80ae 	bhi.w	8005890 <HAL_TIM_ConfigClockSource+0x1f0>
 8005734:	4a63      	ldr	r2, [pc, #396]	@ (80058c4 <HAL_TIM_ConfigClockSource+0x224>)
 8005736:	4293      	cmp	r3, r2
 8005738:	f000 80a1 	beq.w	800587e <HAL_TIM_ConfigClockSource+0x1de>
 800573c:	4a61      	ldr	r2, [pc, #388]	@ (80058c4 <HAL_TIM_ConfigClockSource+0x224>)
 800573e:	4293      	cmp	r3, r2
 8005740:	f200 80a6 	bhi.w	8005890 <HAL_TIM_ConfigClockSource+0x1f0>
 8005744:	4a60      	ldr	r2, [pc, #384]	@ (80058c8 <HAL_TIM_ConfigClockSource+0x228>)
 8005746:	4293      	cmp	r3, r2
 8005748:	f000 8099 	beq.w	800587e <HAL_TIM_ConfigClockSource+0x1de>
 800574c:	4a5e      	ldr	r2, [pc, #376]	@ (80058c8 <HAL_TIM_ConfigClockSource+0x228>)
 800574e:	4293      	cmp	r3, r2
 8005750:	f200 809e 	bhi.w	8005890 <HAL_TIM_ConfigClockSource+0x1f0>
 8005754:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005758:	f000 8091 	beq.w	800587e <HAL_TIM_ConfigClockSource+0x1de>
 800575c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005760:	f200 8096 	bhi.w	8005890 <HAL_TIM_ConfigClockSource+0x1f0>
 8005764:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005768:	f000 8089 	beq.w	800587e <HAL_TIM_ConfigClockSource+0x1de>
 800576c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005770:	f200 808e 	bhi.w	8005890 <HAL_TIM_ConfigClockSource+0x1f0>
 8005774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005778:	d03e      	beq.n	80057f8 <HAL_TIM_ConfigClockSource+0x158>
 800577a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800577e:	f200 8087 	bhi.w	8005890 <HAL_TIM_ConfigClockSource+0x1f0>
 8005782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005786:	f000 8086 	beq.w	8005896 <HAL_TIM_ConfigClockSource+0x1f6>
 800578a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800578e:	d87f      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x1f0>
 8005790:	2b70      	cmp	r3, #112	@ 0x70
 8005792:	d01a      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x12a>
 8005794:	2b70      	cmp	r3, #112	@ 0x70
 8005796:	d87b      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x1f0>
 8005798:	2b60      	cmp	r3, #96	@ 0x60
 800579a:	d050      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x19e>
 800579c:	2b60      	cmp	r3, #96	@ 0x60
 800579e:	d877      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x1f0>
 80057a0:	2b50      	cmp	r3, #80	@ 0x50
 80057a2:	d03c      	beq.n	800581e <HAL_TIM_ConfigClockSource+0x17e>
 80057a4:	2b50      	cmp	r3, #80	@ 0x50
 80057a6:	d873      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x1f0>
 80057a8:	2b40      	cmp	r3, #64	@ 0x40
 80057aa:	d058      	beq.n	800585e <HAL_TIM_ConfigClockSource+0x1be>
 80057ac:	2b40      	cmp	r3, #64	@ 0x40
 80057ae:	d86f      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x1f0>
 80057b0:	2b30      	cmp	r3, #48	@ 0x30
 80057b2:	d064      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x1de>
 80057b4:	2b30      	cmp	r3, #48	@ 0x30
 80057b6:	d86b      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x1f0>
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d060      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x1de>
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d867      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x1f0>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d05c      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x1de>
 80057c4:	2b10      	cmp	r3, #16
 80057c6:	d05a      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x1de>
 80057c8:	e062      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057da:	f000 fdf3 	bl	80063c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80057ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	609a      	str	r2, [r3, #8]
      break;
 80057f6:	e04f      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005808:	f000 fddc 	bl	80063c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800581a:	609a      	str	r2, [r3, #8]
      break;
 800581c:	e03c      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800582a:	461a      	mov	r2, r3
 800582c:	f000 fd4e 	bl	80062cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2150      	movs	r1, #80	@ 0x50
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fda7 	bl	800638a <TIM_ITRx_SetConfig>
      break;
 800583c:	e02c      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800584a:	461a      	mov	r2, r3
 800584c:	f000 fd6d 	bl	800632a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2160      	movs	r1, #96	@ 0x60
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fd97 	bl	800638a <TIM_ITRx_SetConfig>
      break;
 800585c:	e01c      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800586a:	461a      	mov	r2, r3
 800586c:	f000 fd2e 	bl	80062cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2140      	movs	r1, #64	@ 0x40
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fd87 	bl	800638a <TIM_ITRx_SetConfig>
      break;
 800587c:	e00c      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4619      	mov	r1, r3
 8005888:	4610      	mov	r0, r2
 800588a:	f000 fd7e 	bl	800638a <TIM_ITRx_SetConfig>
      break;
 800588e:	e003      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
      break;
 8005894:	e000      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005896:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	00100070 	.word	0x00100070
 80058b8:	00100060 	.word	0x00100060
 80058bc:	00100050 	.word	0x00100050
 80058c0:	00100040 	.word	0x00100040
 80058c4:	00100030 	.word	0x00100030
 80058c8:	00100020 	.word	0x00100020

080058cc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e031      	b.n	8005948 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80058f4:	6839      	ldr	r1, [r7, #0]
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fc08 	bl	800610c <TIM_SlaveTimer_SetConfig>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e018      	b.n	8005948 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005924:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005934:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a4c      	ldr	r2, [pc, #304]	@ (8005a94 <TIM_Base_SetConfig+0x144>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d017      	beq.n	8005998 <TIM_Base_SetConfig+0x48>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800596e:	d013      	beq.n	8005998 <TIM_Base_SetConfig+0x48>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a49      	ldr	r2, [pc, #292]	@ (8005a98 <TIM_Base_SetConfig+0x148>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00f      	beq.n	8005998 <TIM_Base_SetConfig+0x48>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a48      	ldr	r2, [pc, #288]	@ (8005a9c <TIM_Base_SetConfig+0x14c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00b      	beq.n	8005998 <TIM_Base_SetConfig+0x48>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a47      	ldr	r2, [pc, #284]	@ (8005aa0 <TIM_Base_SetConfig+0x150>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d007      	beq.n	8005998 <TIM_Base_SetConfig+0x48>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a46      	ldr	r2, [pc, #280]	@ (8005aa4 <TIM_Base_SetConfig+0x154>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_Base_SetConfig+0x48>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a45      	ldr	r2, [pc, #276]	@ (8005aa8 <TIM_Base_SetConfig+0x158>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d108      	bne.n	80059aa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800599e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a39      	ldr	r2, [pc, #228]	@ (8005a94 <TIM_Base_SetConfig+0x144>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d023      	beq.n	80059fa <TIM_Base_SetConfig+0xaa>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059b8:	d01f      	beq.n	80059fa <TIM_Base_SetConfig+0xaa>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a36      	ldr	r2, [pc, #216]	@ (8005a98 <TIM_Base_SetConfig+0x148>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d01b      	beq.n	80059fa <TIM_Base_SetConfig+0xaa>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a35      	ldr	r2, [pc, #212]	@ (8005a9c <TIM_Base_SetConfig+0x14c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d017      	beq.n	80059fa <TIM_Base_SetConfig+0xaa>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a34      	ldr	r2, [pc, #208]	@ (8005aa0 <TIM_Base_SetConfig+0x150>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d013      	beq.n	80059fa <TIM_Base_SetConfig+0xaa>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a33      	ldr	r2, [pc, #204]	@ (8005aa4 <TIM_Base_SetConfig+0x154>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00f      	beq.n	80059fa <TIM_Base_SetConfig+0xaa>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a33      	ldr	r2, [pc, #204]	@ (8005aac <TIM_Base_SetConfig+0x15c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00b      	beq.n	80059fa <TIM_Base_SetConfig+0xaa>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a32      	ldr	r2, [pc, #200]	@ (8005ab0 <TIM_Base_SetConfig+0x160>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d007      	beq.n	80059fa <TIM_Base_SetConfig+0xaa>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a31      	ldr	r2, [pc, #196]	@ (8005ab4 <TIM_Base_SetConfig+0x164>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d003      	beq.n	80059fa <TIM_Base_SetConfig+0xaa>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a2c      	ldr	r2, [pc, #176]	@ (8005aa8 <TIM_Base_SetConfig+0x158>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d108      	bne.n	8005a0c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a18      	ldr	r2, [pc, #96]	@ (8005a94 <TIM_Base_SetConfig+0x144>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d013      	beq.n	8005a60 <TIM_Base_SetConfig+0x110>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa4 <TIM_Base_SetConfig+0x154>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00f      	beq.n	8005a60 <TIM_Base_SetConfig+0x110>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a1a      	ldr	r2, [pc, #104]	@ (8005aac <TIM_Base_SetConfig+0x15c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00b      	beq.n	8005a60 <TIM_Base_SetConfig+0x110>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a19      	ldr	r2, [pc, #100]	@ (8005ab0 <TIM_Base_SetConfig+0x160>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d007      	beq.n	8005a60 <TIM_Base_SetConfig+0x110>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a18      	ldr	r2, [pc, #96]	@ (8005ab4 <TIM_Base_SetConfig+0x164>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_Base_SetConfig+0x110>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a13      	ldr	r2, [pc, #76]	@ (8005aa8 <TIM_Base_SetConfig+0x158>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d103      	bne.n	8005a68 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d105      	bne.n	8005a86 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f023 0201 	bic.w	r2, r3, #1
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	611a      	str	r2, [r3, #16]
  }
}
 8005a86:	bf00      	nop
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	40012c00 	.word	0x40012c00
 8005a98:	40000400 	.word	0x40000400
 8005a9c:	40000800 	.word	0x40000800
 8005aa0:	40000c00 	.word	0x40000c00
 8005aa4:	40013400 	.word	0x40013400
 8005aa8:	40015000 	.word	0x40015000
 8005aac:	40014000 	.word	0x40014000
 8005ab0:	40014400 	.word	0x40014400
 8005ab4:	40014800 	.word	0x40014800

08005ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	f023 0201 	bic.w	r2, r3, #1
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0303 	bic.w	r3, r3, #3
 8005af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f023 0302 	bic.w	r3, r3, #2
 8005b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a30      	ldr	r2, [pc, #192]	@ (8005bd4 <TIM_OC1_SetConfig+0x11c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d013      	beq.n	8005b40 <TIM_OC1_SetConfig+0x88>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a2f      	ldr	r2, [pc, #188]	@ (8005bd8 <TIM_OC1_SetConfig+0x120>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00f      	beq.n	8005b40 <TIM_OC1_SetConfig+0x88>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a2e      	ldr	r2, [pc, #184]	@ (8005bdc <TIM_OC1_SetConfig+0x124>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00b      	beq.n	8005b40 <TIM_OC1_SetConfig+0x88>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a2d      	ldr	r2, [pc, #180]	@ (8005be0 <TIM_OC1_SetConfig+0x128>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d007      	beq.n	8005b40 <TIM_OC1_SetConfig+0x88>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a2c      	ldr	r2, [pc, #176]	@ (8005be4 <TIM_OC1_SetConfig+0x12c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d003      	beq.n	8005b40 <TIM_OC1_SetConfig+0x88>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a2b      	ldr	r2, [pc, #172]	@ (8005be8 <TIM_OC1_SetConfig+0x130>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d10c      	bne.n	8005b5a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f023 0308 	bic.w	r3, r3, #8
 8005b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f023 0304 	bic.w	r3, r3, #4
 8005b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd4 <TIM_OC1_SetConfig+0x11c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d013      	beq.n	8005b8a <TIM_OC1_SetConfig+0xd2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a1c      	ldr	r2, [pc, #112]	@ (8005bd8 <TIM_OC1_SetConfig+0x120>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00f      	beq.n	8005b8a <TIM_OC1_SetConfig+0xd2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8005bdc <TIM_OC1_SetConfig+0x124>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d00b      	beq.n	8005b8a <TIM_OC1_SetConfig+0xd2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a1a      	ldr	r2, [pc, #104]	@ (8005be0 <TIM_OC1_SetConfig+0x128>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d007      	beq.n	8005b8a <TIM_OC1_SetConfig+0xd2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a19      	ldr	r2, [pc, #100]	@ (8005be4 <TIM_OC1_SetConfig+0x12c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d003      	beq.n	8005b8a <TIM_OC1_SetConfig+0xd2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a18      	ldr	r2, [pc, #96]	@ (8005be8 <TIM_OC1_SetConfig+0x130>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d111      	bne.n	8005bae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	621a      	str	r2, [r3, #32]
}
 8005bc8:	bf00      	nop
 8005bca:	371c      	adds	r7, #28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	40012c00 	.word	0x40012c00
 8005bd8:	40013400 	.word	0x40013400
 8005bdc:	40014000 	.word	0x40014000
 8005be0:	40014400 	.word	0x40014400
 8005be4:	40014800 	.word	0x40014800
 8005be8:	40015000 	.word	0x40015000

08005bec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	f023 0210 	bic.w	r2, r3, #16
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	021b      	lsls	r3, r3, #8
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f023 0320 	bic.w	r3, r3, #32
 8005c3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a2c      	ldr	r2, [pc, #176]	@ (8005cfc <TIM_OC2_SetConfig+0x110>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d007      	beq.n	8005c60 <TIM_OC2_SetConfig+0x74>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a2b      	ldr	r2, [pc, #172]	@ (8005d00 <TIM_OC2_SetConfig+0x114>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d003      	beq.n	8005c60 <TIM_OC2_SetConfig+0x74>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a2a      	ldr	r2, [pc, #168]	@ (8005d04 <TIM_OC2_SetConfig+0x118>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d10d      	bne.n	8005c7c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8005cfc <TIM_OC2_SetConfig+0x110>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d013      	beq.n	8005cac <TIM_OC2_SetConfig+0xc0>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a1e      	ldr	r2, [pc, #120]	@ (8005d00 <TIM_OC2_SetConfig+0x114>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d00f      	beq.n	8005cac <TIM_OC2_SetConfig+0xc0>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005d08 <TIM_OC2_SetConfig+0x11c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00b      	beq.n	8005cac <TIM_OC2_SetConfig+0xc0>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a1d      	ldr	r2, [pc, #116]	@ (8005d0c <TIM_OC2_SetConfig+0x120>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d007      	beq.n	8005cac <TIM_OC2_SetConfig+0xc0>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005d10 <TIM_OC2_SetConfig+0x124>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d003      	beq.n	8005cac <TIM_OC2_SetConfig+0xc0>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a17      	ldr	r2, [pc, #92]	@ (8005d04 <TIM_OC2_SetConfig+0x118>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d113      	bne.n	8005cd4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40013400 	.word	0x40013400
 8005d04:	40015000 	.word	0x40015000
 8005d08:	40014000 	.word	0x40014000
 8005d0c:	40014400 	.word	0x40014400
 8005d10:	40014800 	.word	0x40014800

08005d14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0303 	bic.w	r3, r3, #3
 8005d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	021b      	lsls	r3, r3, #8
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a2b      	ldr	r2, [pc, #172]	@ (8005e20 <TIM_OC3_SetConfig+0x10c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d007      	beq.n	8005d86 <TIM_OC3_SetConfig+0x72>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a2a      	ldr	r2, [pc, #168]	@ (8005e24 <TIM_OC3_SetConfig+0x110>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d003      	beq.n	8005d86 <TIM_OC3_SetConfig+0x72>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a29      	ldr	r2, [pc, #164]	@ (8005e28 <TIM_OC3_SetConfig+0x114>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d10d      	bne.n	8005da2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a1e      	ldr	r2, [pc, #120]	@ (8005e20 <TIM_OC3_SetConfig+0x10c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d013      	beq.n	8005dd2 <TIM_OC3_SetConfig+0xbe>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a1d      	ldr	r2, [pc, #116]	@ (8005e24 <TIM_OC3_SetConfig+0x110>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00f      	beq.n	8005dd2 <TIM_OC3_SetConfig+0xbe>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e2c <TIM_OC3_SetConfig+0x118>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00b      	beq.n	8005dd2 <TIM_OC3_SetConfig+0xbe>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005e30 <TIM_OC3_SetConfig+0x11c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d007      	beq.n	8005dd2 <TIM_OC3_SetConfig+0xbe>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a1b      	ldr	r2, [pc, #108]	@ (8005e34 <TIM_OC3_SetConfig+0x120>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d003      	beq.n	8005dd2 <TIM_OC3_SetConfig+0xbe>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a16      	ldr	r2, [pc, #88]	@ (8005e28 <TIM_OC3_SetConfig+0x114>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d113      	bne.n	8005dfa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	621a      	str	r2, [r3, #32]
}
 8005e14:	bf00      	nop
 8005e16:	371c      	adds	r7, #28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	40012c00 	.word	0x40012c00
 8005e24:	40013400 	.word	0x40013400
 8005e28:	40015000 	.word	0x40015000
 8005e2c:	40014000 	.word	0x40014000
 8005e30:	40014400 	.word	0x40014400
 8005e34:	40014800 	.word	0x40014800

08005e38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	031b      	lsls	r3, r3, #12
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a2c      	ldr	r2, [pc, #176]	@ (8005f48 <TIM_OC4_SetConfig+0x110>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d007      	beq.n	8005eac <TIM_OC4_SetConfig+0x74>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a2b      	ldr	r2, [pc, #172]	@ (8005f4c <TIM_OC4_SetConfig+0x114>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d003      	beq.n	8005eac <TIM_OC4_SetConfig+0x74>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8005f50 <TIM_OC4_SetConfig+0x118>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d10d      	bne.n	8005ec8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	031b      	lsls	r3, r3, #12
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ec6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a1f      	ldr	r2, [pc, #124]	@ (8005f48 <TIM_OC4_SetConfig+0x110>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d013      	beq.n	8005ef8 <TIM_OC4_SetConfig+0xc0>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8005f4c <TIM_OC4_SetConfig+0x114>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d00f      	beq.n	8005ef8 <TIM_OC4_SetConfig+0xc0>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a1e      	ldr	r2, [pc, #120]	@ (8005f54 <TIM_OC4_SetConfig+0x11c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00b      	beq.n	8005ef8 <TIM_OC4_SetConfig+0xc0>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8005f58 <TIM_OC4_SetConfig+0x120>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d007      	beq.n	8005ef8 <TIM_OC4_SetConfig+0xc0>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a1c      	ldr	r2, [pc, #112]	@ (8005f5c <TIM_OC4_SetConfig+0x124>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d003      	beq.n	8005ef8 <TIM_OC4_SetConfig+0xc0>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a17      	ldr	r2, [pc, #92]	@ (8005f50 <TIM_OC4_SetConfig+0x118>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d113      	bne.n	8005f20 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005efe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f06:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	019b      	lsls	r3, r3, #6
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	019b      	lsls	r3, r3, #6
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40012c00 	.word	0x40012c00
 8005f4c:	40013400 	.word	0x40013400
 8005f50:	40015000 	.word	0x40015000
 8005f54:	40014000 	.word	0x40014000
 8005f58:	40014400 	.word	0x40014400
 8005f5c:	40014800 	.word	0x40014800

08005f60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005fa4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	041b      	lsls	r3, r3, #16
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a19      	ldr	r2, [pc, #100]	@ (800601c <TIM_OC5_SetConfig+0xbc>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d013      	beq.n	8005fe2 <TIM_OC5_SetConfig+0x82>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a18      	ldr	r2, [pc, #96]	@ (8006020 <TIM_OC5_SetConfig+0xc0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d00f      	beq.n	8005fe2 <TIM_OC5_SetConfig+0x82>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a17      	ldr	r2, [pc, #92]	@ (8006024 <TIM_OC5_SetConfig+0xc4>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00b      	beq.n	8005fe2 <TIM_OC5_SetConfig+0x82>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a16      	ldr	r2, [pc, #88]	@ (8006028 <TIM_OC5_SetConfig+0xc8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d007      	beq.n	8005fe2 <TIM_OC5_SetConfig+0x82>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a15      	ldr	r2, [pc, #84]	@ (800602c <TIM_OC5_SetConfig+0xcc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d003      	beq.n	8005fe2 <TIM_OC5_SetConfig+0x82>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a14      	ldr	r2, [pc, #80]	@ (8006030 <TIM_OC5_SetConfig+0xd0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d109      	bne.n	8005ff6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	021b      	lsls	r3, r3, #8
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	621a      	str	r2, [r3, #32]
}
 8006010:	bf00      	nop
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	40012c00 	.word	0x40012c00
 8006020:	40013400 	.word	0x40013400
 8006024:	40014000 	.word	0x40014000
 8006028:	40014400 	.word	0x40014400
 800602c:	40014800 	.word	0x40014800
 8006030:	40015000 	.word	0x40015000

08006034 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800605a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006062:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4313      	orrs	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800607a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	051b      	lsls	r3, r3, #20
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	4313      	orrs	r3, r2
 8006086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a1a      	ldr	r2, [pc, #104]	@ (80060f4 <TIM_OC6_SetConfig+0xc0>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d013      	beq.n	80060b8 <TIM_OC6_SetConfig+0x84>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a19      	ldr	r2, [pc, #100]	@ (80060f8 <TIM_OC6_SetConfig+0xc4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d00f      	beq.n	80060b8 <TIM_OC6_SetConfig+0x84>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a18      	ldr	r2, [pc, #96]	@ (80060fc <TIM_OC6_SetConfig+0xc8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00b      	beq.n	80060b8 <TIM_OC6_SetConfig+0x84>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a17      	ldr	r2, [pc, #92]	@ (8006100 <TIM_OC6_SetConfig+0xcc>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d007      	beq.n	80060b8 <TIM_OC6_SetConfig+0x84>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a16      	ldr	r2, [pc, #88]	@ (8006104 <TIM_OC6_SetConfig+0xd0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d003      	beq.n	80060b8 <TIM_OC6_SetConfig+0x84>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a15      	ldr	r2, [pc, #84]	@ (8006108 <TIM_OC6_SetConfig+0xd4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d109      	bne.n	80060cc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	029b      	lsls	r3, r3, #10
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	621a      	str	r2, [r3, #32]
}
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40012c00 	.word	0x40012c00
 80060f8:	40013400 	.word	0x40013400
 80060fc:	40014000 	.word	0x40014000
 8006100:	40014400 	.word	0x40014400
 8006104:	40014800 	.word	0x40014800
 8006108:	40015000 	.word	0x40015000

0800610c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800612c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800613e:	f023 0307 	bic.w	r3, r3, #7
 8006142:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	4a56      	ldr	r2, [pc, #344]	@ (80062b4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	f000 80a2 	beq.w	80062a6 <TIM_SlaveTimer_SetConfig+0x19a>
 8006162:	4a54      	ldr	r2, [pc, #336]	@ (80062b4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8006164:	4293      	cmp	r3, r2
 8006166:	f200 809b 	bhi.w	80062a0 <TIM_SlaveTimer_SetConfig+0x194>
 800616a:	4a53      	ldr	r2, [pc, #332]	@ (80062b8 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800616c:	4293      	cmp	r3, r2
 800616e:	f000 809a 	beq.w	80062a6 <TIM_SlaveTimer_SetConfig+0x19a>
 8006172:	4a51      	ldr	r2, [pc, #324]	@ (80062b8 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8006174:	4293      	cmp	r3, r2
 8006176:	f200 8093 	bhi.w	80062a0 <TIM_SlaveTimer_SetConfig+0x194>
 800617a:	4a50      	ldr	r2, [pc, #320]	@ (80062bc <TIM_SlaveTimer_SetConfig+0x1b0>)
 800617c:	4293      	cmp	r3, r2
 800617e:	f000 8092 	beq.w	80062a6 <TIM_SlaveTimer_SetConfig+0x19a>
 8006182:	4a4e      	ldr	r2, [pc, #312]	@ (80062bc <TIM_SlaveTimer_SetConfig+0x1b0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	f200 808b 	bhi.w	80062a0 <TIM_SlaveTimer_SetConfig+0x194>
 800618a:	4a4d      	ldr	r2, [pc, #308]	@ (80062c0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	f000 808a 	beq.w	80062a6 <TIM_SlaveTimer_SetConfig+0x19a>
 8006192:	4a4b      	ldr	r2, [pc, #300]	@ (80062c0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8006194:	4293      	cmp	r3, r2
 8006196:	f200 8083 	bhi.w	80062a0 <TIM_SlaveTimer_SetConfig+0x194>
 800619a:	4a4a      	ldr	r2, [pc, #296]	@ (80062c4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	f000 8082 	beq.w	80062a6 <TIM_SlaveTimer_SetConfig+0x19a>
 80061a2:	4a48      	ldr	r2, [pc, #288]	@ (80062c4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d87b      	bhi.n	80062a0 <TIM_SlaveTimer_SetConfig+0x194>
 80061a8:	4a47      	ldr	r2, [pc, #284]	@ (80062c8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d07b      	beq.n	80062a6 <TIM_SlaveTimer_SetConfig+0x19a>
 80061ae:	4a46      	ldr	r2, [pc, #280]	@ (80062c8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d875      	bhi.n	80062a0 <TIM_SlaveTimer_SetConfig+0x194>
 80061b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80061b8:	d075      	beq.n	80062a6 <TIM_SlaveTimer_SetConfig+0x19a>
 80061ba:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80061be:	d86f      	bhi.n	80062a0 <TIM_SlaveTimer_SetConfig+0x194>
 80061c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061c4:	d06f      	beq.n	80062a6 <TIM_SlaveTimer_SetConfig+0x19a>
 80061c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061ca:	d869      	bhi.n	80062a0 <TIM_SlaveTimer_SetConfig+0x194>
 80061cc:	2b70      	cmp	r3, #112	@ 0x70
 80061ce:	d01a      	beq.n	8006206 <TIM_SlaveTimer_SetConfig+0xfa>
 80061d0:	2b70      	cmp	r3, #112	@ 0x70
 80061d2:	d865      	bhi.n	80062a0 <TIM_SlaveTimer_SetConfig+0x194>
 80061d4:	2b60      	cmp	r3, #96	@ 0x60
 80061d6:	d059      	beq.n	800628c <TIM_SlaveTimer_SetConfig+0x180>
 80061d8:	2b60      	cmp	r3, #96	@ 0x60
 80061da:	d861      	bhi.n	80062a0 <TIM_SlaveTimer_SetConfig+0x194>
 80061dc:	2b50      	cmp	r3, #80	@ 0x50
 80061de:	d04b      	beq.n	8006278 <TIM_SlaveTimer_SetConfig+0x16c>
 80061e0:	2b50      	cmp	r3, #80	@ 0x50
 80061e2:	d85d      	bhi.n	80062a0 <TIM_SlaveTimer_SetConfig+0x194>
 80061e4:	2b40      	cmp	r3, #64	@ 0x40
 80061e6:	d019      	beq.n	800621c <TIM_SlaveTimer_SetConfig+0x110>
 80061e8:	2b40      	cmp	r3, #64	@ 0x40
 80061ea:	d859      	bhi.n	80062a0 <TIM_SlaveTimer_SetConfig+0x194>
 80061ec:	2b30      	cmp	r3, #48	@ 0x30
 80061ee:	d05a      	beq.n	80062a6 <TIM_SlaveTimer_SetConfig+0x19a>
 80061f0:	2b30      	cmp	r3, #48	@ 0x30
 80061f2:	d855      	bhi.n	80062a0 <TIM_SlaveTimer_SetConfig+0x194>
 80061f4:	2b20      	cmp	r3, #32
 80061f6:	d056      	beq.n	80062a6 <TIM_SlaveTimer_SetConfig+0x19a>
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	d851      	bhi.n	80062a0 <TIM_SlaveTimer_SetConfig+0x194>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d052      	beq.n	80062a6 <TIM_SlaveTimer_SetConfig+0x19a>
 8006200:	2b10      	cmp	r3, #16
 8006202:	d050      	beq.n	80062a6 <TIM_SlaveTimer_SetConfig+0x19a>
 8006204:	e04c      	b.n	80062a0 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006216:	f000 f8d5 	bl	80063c4 <TIM_ETR_SetConfig>
      break;
 800621a:	e045      	b.n	80062a8 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b05      	cmp	r3, #5
 8006222:	d004      	beq.n	800622e <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006228:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 800622c:	d101      	bne.n	8006232 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e03b      	b.n	80062aa <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6a1a      	ldr	r2, [r3, #32]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0201 	bic.w	r2, r2, #1
 8006248:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006258:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	4313      	orrs	r3, r2
 8006264:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	621a      	str	r2, [r3, #32]
      break;
 8006276:	e017      	b.n	80062a8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006284:	461a      	mov	r2, r3
 8006286:	f000 f821 	bl	80062cc <TIM_TI1_ConfigInputStage>
      break;
 800628a:	e00d      	b.n	80062a8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006298:	461a      	mov	r2, r3
 800629a:	f000 f846 	bl	800632a <TIM_TI2_ConfigInputStage>
      break;
 800629e:	e003      	b.n	80062a8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	75fb      	strb	r3, [r7, #23]
      break;
 80062a4:	e000      	b.n	80062a8 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 80062a6:	bf00      	nop
  }

  return status;
 80062a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	00100070 	.word	0x00100070
 80062b8:	00100060 	.word	0x00100060
 80062bc:	00100050 	.word	0x00100050
 80062c0:	00100040 	.word	0x00100040
 80062c4:	00100030 	.word	0x00100030
 80062c8:	00100020 	.word	0x00100020

080062cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f023 0201 	bic.w	r2, r3, #1
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	4313      	orrs	r3, r2
 8006300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f023 030a 	bic.w	r3, r3, #10
 8006308:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	4313      	orrs	r3, r2
 8006310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	621a      	str	r2, [r3, #32]
}
 800631e:	bf00      	nop
 8006320:	371c      	adds	r7, #28
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800632a:	b480      	push	{r7}
 800632c:	b087      	sub	sp, #28
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	f023 0210 	bic.w	r2, r3, #16
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006354:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	031b      	lsls	r3, r3, #12
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4313      	orrs	r3, r2
 800635e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006366:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	621a      	str	r2, [r3, #32]
}
 800637e:	bf00      	nop
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800638a:	b480      	push	{r7}
 800638c:	b085      	sub	sp, #20
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80063a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f043 0307 	orr.w	r3, r3, #7
 80063b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	609a      	str	r2, [r3, #8]
}
 80063b8:	bf00      	nop
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	021a      	lsls	r2, r3, #8
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	431a      	orrs	r2, r3
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	609a      	str	r2, [r3, #8]
}
 80063f8:	bf00      	nop
 80063fa:	371c      	adds	r7, #28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f003 031f 	and.w	r3, r3, #31
 8006416:	2201      	movs	r2, #1
 8006418:	fa02 f303 	lsl.w	r3, r2, r3
 800641c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6a1a      	ldr	r2, [r3, #32]
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	43db      	mvns	r3, r3
 8006426:	401a      	ands	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a1a      	ldr	r2, [r3, #32]
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f003 031f 	and.w	r3, r3, #31
 8006436:	6879      	ldr	r1, [r7, #4]
 8006438:	fa01 f303 	lsl.w	r3, r1, r3
 800643c:	431a      	orrs	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	621a      	str	r2, [r3, #32]
}
 8006442:	bf00      	nop
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
	...

08006450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006464:	2302      	movs	r3, #2
 8006466:	e074      	b.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a34      	ldr	r2, [pc, #208]	@ (8006560 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d009      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a33      	ldr	r2, [pc, #204]	@ (8006564 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d004      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a31      	ldr	r2, [pc, #196]	@ (8006568 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d108      	bne.n	80064b8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80064be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a21      	ldr	r2, [pc, #132]	@ (8006560 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d022      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064e8:	d01d      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a1f      	ldr	r2, [pc, #124]	@ (800656c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d018      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006570 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1c      	ldr	r2, [pc, #112]	@ (8006574 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00e      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a15      	ldr	r2, [pc, #84]	@ (8006564 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d009      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a18      	ldr	r2, [pc, #96]	@ (8006578 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d004      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a11      	ldr	r2, [pc, #68]	@ (8006568 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d10c      	bne.n	8006540 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800652c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	4313      	orrs	r3, r2
 8006536:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40012c00 	.word	0x40012c00
 8006564:	40013400 	.word	0x40013400
 8006568:	40015000 	.word	0x40015000
 800656c:	40000400 	.word	0x40000400
 8006570:	40000800 	.word	0x40000800
 8006574:	40000c00 	.word	0x40000c00
 8006578:	40014000 	.word	0x40014000

0800657c <atoi>:
 800657c:	220a      	movs	r2, #10
 800657e:	2100      	movs	r1, #0
 8006580:	f000 b87c 	b.w	800667c <strtol>

08006584 <_strtol_l.isra.0>:
 8006584:	2b24      	cmp	r3, #36	@ 0x24
 8006586:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800658a:	4686      	mov	lr, r0
 800658c:	4690      	mov	r8, r2
 800658e:	d801      	bhi.n	8006594 <_strtol_l.isra.0+0x10>
 8006590:	2b01      	cmp	r3, #1
 8006592:	d106      	bne.n	80065a2 <_strtol_l.isra.0+0x1e>
 8006594:	f000 f8b2 	bl	80066fc <__errno>
 8006598:	2316      	movs	r3, #22
 800659a:	6003      	str	r3, [r0, #0]
 800659c:	2000      	movs	r0, #0
 800659e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a2:	4834      	ldr	r0, [pc, #208]	@ (8006674 <_strtol_l.isra.0+0xf0>)
 80065a4:	460d      	mov	r5, r1
 80065a6:	462a      	mov	r2, r5
 80065a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065ac:	5d06      	ldrb	r6, [r0, r4]
 80065ae:	f016 0608 	ands.w	r6, r6, #8
 80065b2:	d1f8      	bne.n	80065a6 <_strtol_l.isra.0+0x22>
 80065b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80065b6:	d110      	bne.n	80065da <_strtol_l.isra.0+0x56>
 80065b8:	782c      	ldrb	r4, [r5, #0]
 80065ba:	2601      	movs	r6, #1
 80065bc:	1c95      	adds	r5, r2, #2
 80065be:	f033 0210 	bics.w	r2, r3, #16
 80065c2:	d115      	bne.n	80065f0 <_strtol_l.isra.0+0x6c>
 80065c4:	2c30      	cmp	r4, #48	@ 0x30
 80065c6:	d10d      	bne.n	80065e4 <_strtol_l.isra.0+0x60>
 80065c8:	782a      	ldrb	r2, [r5, #0]
 80065ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80065ce:	2a58      	cmp	r2, #88	@ 0x58
 80065d0:	d108      	bne.n	80065e4 <_strtol_l.isra.0+0x60>
 80065d2:	786c      	ldrb	r4, [r5, #1]
 80065d4:	3502      	adds	r5, #2
 80065d6:	2310      	movs	r3, #16
 80065d8:	e00a      	b.n	80065f0 <_strtol_l.isra.0+0x6c>
 80065da:	2c2b      	cmp	r4, #43	@ 0x2b
 80065dc:	bf04      	itt	eq
 80065de:	782c      	ldrbeq	r4, [r5, #0]
 80065e0:	1c95      	addeq	r5, r2, #2
 80065e2:	e7ec      	b.n	80065be <_strtol_l.isra.0+0x3a>
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1f6      	bne.n	80065d6 <_strtol_l.isra.0+0x52>
 80065e8:	2c30      	cmp	r4, #48	@ 0x30
 80065ea:	bf14      	ite	ne
 80065ec:	230a      	movne	r3, #10
 80065ee:	2308      	moveq	r3, #8
 80065f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80065f4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80065f8:	2200      	movs	r2, #0
 80065fa:	fbbc f9f3 	udiv	r9, ip, r3
 80065fe:	4610      	mov	r0, r2
 8006600:	fb03 ca19 	mls	sl, r3, r9, ip
 8006604:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006608:	2f09      	cmp	r7, #9
 800660a:	d80f      	bhi.n	800662c <_strtol_l.isra.0+0xa8>
 800660c:	463c      	mov	r4, r7
 800660e:	42a3      	cmp	r3, r4
 8006610:	dd1b      	ble.n	800664a <_strtol_l.isra.0+0xc6>
 8006612:	1c57      	adds	r7, r2, #1
 8006614:	d007      	beq.n	8006626 <_strtol_l.isra.0+0xa2>
 8006616:	4581      	cmp	r9, r0
 8006618:	d314      	bcc.n	8006644 <_strtol_l.isra.0+0xc0>
 800661a:	d101      	bne.n	8006620 <_strtol_l.isra.0+0x9c>
 800661c:	45a2      	cmp	sl, r4
 800661e:	db11      	blt.n	8006644 <_strtol_l.isra.0+0xc0>
 8006620:	fb00 4003 	mla	r0, r0, r3, r4
 8006624:	2201      	movs	r2, #1
 8006626:	f815 4b01 	ldrb.w	r4, [r5], #1
 800662a:	e7eb      	b.n	8006604 <_strtol_l.isra.0+0x80>
 800662c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006630:	2f19      	cmp	r7, #25
 8006632:	d801      	bhi.n	8006638 <_strtol_l.isra.0+0xb4>
 8006634:	3c37      	subs	r4, #55	@ 0x37
 8006636:	e7ea      	b.n	800660e <_strtol_l.isra.0+0x8a>
 8006638:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800663c:	2f19      	cmp	r7, #25
 800663e:	d804      	bhi.n	800664a <_strtol_l.isra.0+0xc6>
 8006640:	3c57      	subs	r4, #87	@ 0x57
 8006642:	e7e4      	b.n	800660e <_strtol_l.isra.0+0x8a>
 8006644:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006648:	e7ed      	b.n	8006626 <_strtol_l.isra.0+0xa2>
 800664a:	1c53      	adds	r3, r2, #1
 800664c:	d108      	bne.n	8006660 <_strtol_l.isra.0+0xdc>
 800664e:	2322      	movs	r3, #34	@ 0x22
 8006650:	f8ce 3000 	str.w	r3, [lr]
 8006654:	4660      	mov	r0, ip
 8006656:	f1b8 0f00 	cmp.w	r8, #0
 800665a:	d0a0      	beq.n	800659e <_strtol_l.isra.0+0x1a>
 800665c:	1e69      	subs	r1, r5, #1
 800665e:	e006      	b.n	800666e <_strtol_l.isra.0+0xea>
 8006660:	b106      	cbz	r6, 8006664 <_strtol_l.isra.0+0xe0>
 8006662:	4240      	negs	r0, r0
 8006664:	f1b8 0f00 	cmp.w	r8, #0
 8006668:	d099      	beq.n	800659e <_strtol_l.isra.0+0x1a>
 800666a:	2a00      	cmp	r2, #0
 800666c:	d1f6      	bne.n	800665c <_strtol_l.isra.0+0xd8>
 800666e:	f8c8 1000 	str.w	r1, [r8]
 8006672:	e794      	b.n	800659e <_strtol_l.isra.0+0x1a>
 8006674:	08007c9d 	.word	0x08007c9d

08006678 <_strtol_r>:
 8006678:	f7ff bf84 	b.w	8006584 <_strtol_l.isra.0>

0800667c <strtol>:
 800667c:	4613      	mov	r3, r2
 800667e:	460a      	mov	r2, r1
 8006680:	4601      	mov	r1, r0
 8006682:	4802      	ldr	r0, [pc, #8]	@ (800668c <strtol+0x10>)
 8006684:	6800      	ldr	r0, [r0, #0]
 8006686:	f7ff bf7d 	b.w	8006584 <_strtol_l.isra.0>
 800668a:	bf00      	nop
 800668c:	20003a34 	.word	0x20003a34

08006690 <siscanf>:
 8006690:	b40e      	push	{r1, r2, r3}
 8006692:	b570      	push	{r4, r5, r6, lr}
 8006694:	b09d      	sub	sp, #116	@ 0x74
 8006696:	ac21      	add	r4, sp, #132	@ 0x84
 8006698:	2500      	movs	r5, #0
 800669a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800669e:	f854 6b04 	ldr.w	r6, [r4], #4
 80066a2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80066a6:	951b      	str	r5, [sp, #108]	@ 0x6c
 80066a8:	9002      	str	r0, [sp, #8]
 80066aa:	9006      	str	r0, [sp, #24]
 80066ac:	f7f9 fdb8 	bl	8000220 <strlen>
 80066b0:	4b0b      	ldr	r3, [pc, #44]	@ (80066e0 <siscanf+0x50>)
 80066b2:	9003      	str	r0, [sp, #12]
 80066b4:	9007      	str	r0, [sp, #28]
 80066b6:	480b      	ldr	r0, [pc, #44]	@ (80066e4 <siscanf+0x54>)
 80066b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80066be:	f8ad 3016 	strh.w	r3, [sp, #22]
 80066c2:	4632      	mov	r2, r6
 80066c4:	4623      	mov	r3, r4
 80066c6:	a902      	add	r1, sp, #8
 80066c8:	6800      	ldr	r0, [r0, #0]
 80066ca:	950f      	str	r5, [sp, #60]	@ 0x3c
 80066cc:	9514      	str	r5, [sp, #80]	@ 0x50
 80066ce:	9401      	str	r4, [sp, #4]
 80066d0:	f000 f9a0 	bl	8006a14 <__ssvfiscanf_r>
 80066d4:	b01d      	add	sp, #116	@ 0x74
 80066d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80066da:	b003      	add	sp, #12
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	080066e9 	.word	0x080066e9
 80066e4:	20003a34 	.word	0x20003a34

080066e8 <__seofread>:
 80066e8:	2000      	movs	r0, #0
 80066ea:	4770      	bx	lr

080066ec <memset>:
 80066ec:	4402      	add	r2, r0
 80066ee:	4603      	mov	r3, r0
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d100      	bne.n	80066f6 <memset+0xa>
 80066f4:	4770      	bx	lr
 80066f6:	f803 1b01 	strb.w	r1, [r3], #1
 80066fa:	e7f9      	b.n	80066f0 <memset+0x4>

080066fc <__errno>:
 80066fc:	4b01      	ldr	r3, [pc, #4]	@ (8006704 <__errno+0x8>)
 80066fe:	6818      	ldr	r0, [r3, #0]
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	20003a34 	.word	0x20003a34

08006708 <__libc_init_array>:
 8006708:	b570      	push	{r4, r5, r6, lr}
 800670a:	4d0d      	ldr	r5, [pc, #52]	@ (8006740 <__libc_init_array+0x38>)
 800670c:	4c0d      	ldr	r4, [pc, #52]	@ (8006744 <__libc_init_array+0x3c>)
 800670e:	1b64      	subs	r4, r4, r5
 8006710:	10a4      	asrs	r4, r4, #2
 8006712:	2600      	movs	r6, #0
 8006714:	42a6      	cmp	r6, r4
 8006716:	d109      	bne.n	800672c <__libc_init_array+0x24>
 8006718:	4d0b      	ldr	r5, [pc, #44]	@ (8006748 <__libc_init_array+0x40>)
 800671a:	4c0c      	ldr	r4, [pc, #48]	@ (800674c <__libc_init_array+0x44>)
 800671c:	f000 fd68 	bl	80071f0 <_init>
 8006720:	1b64      	subs	r4, r4, r5
 8006722:	10a4      	asrs	r4, r4, #2
 8006724:	2600      	movs	r6, #0
 8006726:	42a6      	cmp	r6, r4
 8006728:	d105      	bne.n	8006736 <__libc_init_array+0x2e>
 800672a:	bd70      	pop	{r4, r5, r6, pc}
 800672c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006730:	4798      	blx	r3
 8006732:	3601      	adds	r6, #1
 8006734:	e7ee      	b.n	8006714 <__libc_init_array+0xc>
 8006736:	f855 3b04 	ldr.w	r3, [r5], #4
 800673a:	4798      	blx	r3
 800673c:	3601      	adds	r6, #1
 800673e:	e7f2      	b.n	8006726 <__libc_init_array+0x1e>
 8006740:	08007dc4 	.word	0x08007dc4
 8006744:	08007dc4 	.word	0x08007dc4
 8006748:	08007dc4 	.word	0x08007dc4
 800674c:	08007dc8 	.word	0x08007dc8

08006750 <__retarget_lock_acquire_recursive>:
 8006750:	4770      	bx	lr

08006752 <__retarget_lock_release_recursive>:
 8006752:	4770      	bx	lr

08006754 <memcpy>:
 8006754:	440a      	add	r2, r1
 8006756:	4291      	cmp	r1, r2
 8006758:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800675c:	d100      	bne.n	8006760 <memcpy+0xc>
 800675e:	4770      	bx	lr
 8006760:	b510      	push	{r4, lr}
 8006762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006766:	f803 4f01 	strb.w	r4, [r3, #1]!
 800676a:	4291      	cmp	r1, r2
 800676c:	d1f9      	bne.n	8006762 <memcpy+0xe>
 800676e:	bd10      	pop	{r4, pc}

08006770 <_free_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	4605      	mov	r5, r0
 8006774:	2900      	cmp	r1, #0
 8006776:	d041      	beq.n	80067fc <_free_r+0x8c>
 8006778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800677c:	1f0c      	subs	r4, r1, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	bfb8      	it	lt
 8006782:	18e4      	addlt	r4, r4, r3
 8006784:	f000 f8e0 	bl	8006948 <__malloc_lock>
 8006788:	4a1d      	ldr	r2, [pc, #116]	@ (8006800 <_free_r+0x90>)
 800678a:	6813      	ldr	r3, [r2, #0]
 800678c:	b933      	cbnz	r3, 800679c <_free_r+0x2c>
 800678e:	6063      	str	r3, [r4, #4]
 8006790:	6014      	str	r4, [r2, #0]
 8006792:	4628      	mov	r0, r5
 8006794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006798:	f000 b8dc 	b.w	8006954 <__malloc_unlock>
 800679c:	42a3      	cmp	r3, r4
 800679e:	d908      	bls.n	80067b2 <_free_r+0x42>
 80067a0:	6820      	ldr	r0, [r4, #0]
 80067a2:	1821      	adds	r1, r4, r0
 80067a4:	428b      	cmp	r3, r1
 80067a6:	bf01      	itttt	eq
 80067a8:	6819      	ldreq	r1, [r3, #0]
 80067aa:	685b      	ldreq	r3, [r3, #4]
 80067ac:	1809      	addeq	r1, r1, r0
 80067ae:	6021      	streq	r1, [r4, #0]
 80067b0:	e7ed      	b.n	800678e <_free_r+0x1e>
 80067b2:	461a      	mov	r2, r3
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	b10b      	cbz	r3, 80067bc <_free_r+0x4c>
 80067b8:	42a3      	cmp	r3, r4
 80067ba:	d9fa      	bls.n	80067b2 <_free_r+0x42>
 80067bc:	6811      	ldr	r1, [r2, #0]
 80067be:	1850      	adds	r0, r2, r1
 80067c0:	42a0      	cmp	r0, r4
 80067c2:	d10b      	bne.n	80067dc <_free_r+0x6c>
 80067c4:	6820      	ldr	r0, [r4, #0]
 80067c6:	4401      	add	r1, r0
 80067c8:	1850      	adds	r0, r2, r1
 80067ca:	4283      	cmp	r3, r0
 80067cc:	6011      	str	r1, [r2, #0]
 80067ce:	d1e0      	bne.n	8006792 <_free_r+0x22>
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	6053      	str	r3, [r2, #4]
 80067d6:	4408      	add	r0, r1
 80067d8:	6010      	str	r0, [r2, #0]
 80067da:	e7da      	b.n	8006792 <_free_r+0x22>
 80067dc:	d902      	bls.n	80067e4 <_free_r+0x74>
 80067de:	230c      	movs	r3, #12
 80067e0:	602b      	str	r3, [r5, #0]
 80067e2:	e7d6      	b.n	8006792 <_free_r+0x22>
 80067e4:	6820      	ldr	r0, [r4, #0]
 80067e6:	1821      	adds	r1, r4, r0
 80067e8:	428b      	cmp	r3, r1
 80067ea:	bf04      	itt	eq
 80067ec:	6819      	ldreq	r1, [r3, #0]
 80067ee:	685b      	ldreq	r3, [r3, #4]
 80067f0:	6063      	str	r3, [r4, #4]
 80067f2:	bf04      	itt	eq
 80067f4:	1809      	addeq	r1, r1, r0
 80067f6:	6021      	streq	r1, [r4, #0]
 80067f8:	6054      	str	r4, [r2, #4]
 80067fa:	e7ca      	b.n	8006792 <_free_r+0x22>
 80067fc:	bd38      	pop	{r3, r4, r5, pc}
 80067fe:	bf00      	nop
 8006800:	20003ea8 	.word	0x20003ea8

08006804 <sbrk_aligned>:
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	4e0f      	ldr	r6, [pc, #60]	@ (8006844 <sbrk_aligned+0x40>)
 8006808:	460c      	mov	r4, r1
 800680a:	6831      	ldr	r1, [r6, #0]
 800680c:	4605      	mov	r5, r0
 800680e:	b911      	cbnz	r1, 8006816 <sbrk_aligned+0x12>
 8006810:	f000 fc38 	bl	8007084 <_sbrk_r>
 8006814:	6030      	str	r0, [r6, #0]
 8006816:	4621      	mov	r1, r4
 8006818:	4628      	mov	r0, r5
 800681a:	f000 fc33 	bl	8007084 <_sbrk_r>
 800681e:	1c43      	adds	r3, r0, #1
 8006820:	d103      	bne.n	800682a <sbrk_aligned+0x26>
 8006822:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006826:	4620      	mov	r0, r4
 8006828:	bd70      	pop	{r4, r5, r6, pc}
 800682a:	1cc4      	adds	r4, r0, #3
 800682c:	f024 0403 	bic.w	r4, r4, #3
 8006830:	42a0      	cmp	r0, r4
 8006832:	d0f8      	beq.n	8006826 <sbrk_aligned+0x22>
 8006834:	1a21      	subs	r1, r4, r0
 8006836:	4628      	mov	r0, r5
 8006838:	f000 fc24 	bl	8007084 <_sbrk_r>
 800683c:	3001      	adds	r0, #1
 800683e:	d1f2      	bne.n	8006826 <sbrk_aligned+0x22>
 8006840:	e7ef      	b.n	8006822 <sbrk_aligned+0x1e>
 8006842:	bf00      	nop
 8006844:	20003ea4 	.word	0x20003ea4

08006848 <_malloc_r>:
 8006848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800684c:	1ccd      	adds	r5, r1, #3
 800684e:	f025 0503 	bic.w	r5, r5, #3
 8006852:	3508      	adds	r5, #8
 8006854:	2d0c      	cmp	r5, #12
 8006856:	bf38      	it	cc
 8006858:	250c      	movcc	r5, #12
 800685a:	2d00      	cmp	r5, #0
 800685c:	4606      	mov	r6, r0
 800685e:	db01      	blt.n	8006864 <_malloc_r+0x1c>
 8006860:	42a9      	cmp	r1, r5
 8006862:	d904      	bls.n	800686e <_malloc_r+0x26>
 8006864:	230c      	movs	r3, #12
 8006866:	6033      	str	r3, [r6, #0]
 8006868:	2000      	movs	r0, #0
 800686a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800686e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006944 <_malloc_r+0xfc>
 8006872:	f000 f869 	bl	8006948 <__malloc_lock>
 8006876:	f8d8 3000 	ldr.w	r3, [r8]
 800687a:	461c      	mov	r4, r3
 800687c:	bb44      	cbnz	r4, 80068d0 <_malloc_r+0x88>
 800687e:	4629      	mov	r1, r5
 8006880:	4630      	mov	r0, r6
 8006882:	f7ff ffbf 	bl	8006804 <sbrk_aligned>
 8006886:	1c43      	adds	r3, r0, #1
 8006888:	4604      	mov	r4, r0
 800688a:	d158      	bne.n	800693e <_malloc_r+0xf6>
 800688c:	f8d8 4000 	ldr.w	r4, [r8]
 8006890:	4627      	mov	r7, r4
 8006892:	2f00      	cmp	r7, #0
 8006894:	d143      	bne.n	800691e <_malloc_r+0xd6>
 8006896:	2c00      	cmp	r4, #0
 8006898:	d04b      	beq.n	8006932 <_malloc_r+0xea>
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	4639      	mov	r1, r7
 800689e:	4630      	mov	r0, r6
 80068a0:	eb04 0903 	add.w	r9, r4, r3
 80068a4:	f000 fbee 	bl	8007084 <_sbrk_r>
 80068a8:	4581      	cmp	r9, r0
 80068aa:	d142      	bne.n	8006932 <_malloc_r+0xea>
 80068ac:	6821      	ldr	r1, [r4, #0]
 80068ae:	1a6d      	subs	r5, r5, r1
 80068b0:	4629      	mov	r1, r5
 80068b2:	4630      	mov	r0, r6
 80068b4:	f7ff ffa6 	bl	8006804 <sbrk_aligned>
 80068b8:	3001      	adds	r0, #1
 80068ba:	d03a      	beq.n	8006932 <_malloc_r+0xea>
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	442b      	add	r3, r5
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	f8d8 3000 	ldr.w	r3, [r8]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	bb62      	cbnz	r2, 8006924 <_malloc_r+0xdc>
 80068ca:	f8c8 7000 	str.w	r7, [r8]
 80068ce:	e00f      	b.n	80068f0 <_malloc_r+0xa8>
 80068d0:	6822      	ldr	r2, [r4, #0]
 80068d2:	1b52      	subs	r2, r2, r5
 80068d4:	d420      	bmi.n	8006918 <_malloc_r+0xd0>
 80068d6:	2a0b      	cmp	r2, #11
 80068d8:	d917      	bls.n	800690a <_malloc_r+0xc2>
 80068da:	1961      	adds	r1, r4, r5
 80068dc:	42a3      	cmp	r3, r4
 80068de:	6025      	str	r5, [r4, #0]
 80068e0:	bf18      	it	ne
 80068e2:	6059      	strne	r1, [r3, #4]
 80068e4:	6863      	ldr	r3, [r4, #4]
 80068e6:	bf08      	it	eq
 80068e8:	f8c8 1000 	streq.w	r1, [r8]
 80068ec:	5162      	str	r2, [r4, r5]
 80068ee:	604b      	str	r3, [r1, #4]
 80068f0:	4630      	mov	r0, r6
 80068f2:	f000 f82f 	bl	8006954 <__malloc_unlock>
 80068f6:	f104 000b 	add.w	r0, r4, #11
 80068fa:	1d23      	adds	r3, r4, #4
 80068fc:	f020 0007 	bic.w	r0, r0, #7
 8006900:	1ac2      	subs	r2, r0, r3
 8006902:	bf1c      	itt	ne
 8006904:	1a1b      	subne	r3, r3, r0
 8006906:	50a3      	strne	r3, [r4, r2]
 8006908:	e7af      	b.n	800686a <_malloc_r+0x22>
 800690a:	6862      	ldr	r2, [r4, #4]
 800690c:	42a3      	cmp	r3, r4
 800690e:	bf0c      	ite	eq
 8006910:	f8c8 2000 	streq.w	r2, [r8]
 8006914:	605a      	strne	r2, [r3, #4]
 8006916:	e7eb      	b.n	80068f0 <_malloc_r+0xa8>
 8006918:	4623      	mov	r3, r4
 800691a:	6864      	ldr	r4, [r4, #4]
 800691c:	e7ae      	b.n	800687c <_malloc_r+0x34>
 800691e:	463c      	mov	r4, r7
 8006920:	687f      	ldr	r7, [r7, #4]
 8006922:	e7b6      	b.n	8006892 <_malloc_r+0x4a>
 8006924:	461a      	mov	r2, r3
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	42a3      	cmp	r3, r4
 800692a:	d1fb      	bne.n	8006924 <_malloc_r+0xdc>
 800692c:	2300      	movs	r3, #0
 800692e:	6053      	str	r3, [r2, #4]
 8006930:	e7de      	b.n	80068f0 <_malloc_r+0xa8>
 8006932:	230c      	movs	r3, #12
 8006934:	6033      	str	r3, [r6, #0]
 8006936:	4630      	mov	r0, r6
 8006938:	f000 f80c 	bl	8006954 <__malloc_unlock>
 800693c:	e794      	b.n	8006868 <_malloc_r+0x20>
 800693e:	6005      	str	r5, [r0, #0]
 8006940:	e7d6      	b.n	80068f0 <_malloc_r+0xa8>
 8006942:	bf00      	nop
 8006944:	20003ea8 	.word	0x20003ea8

08006948 <__malloc_lock>:
 8006948:	4801      	ldr	r0, [pc, #4]	@ (8006950 <__malloc_lock+0x8>)
 800694a:	f7ff bf01 	b.w	8006750 <__retarget_lock_acquire_recursive>
 800694e:	bf00      	nop
 8006950:	20003ea0 	.word	0x20003ea0

08006954 <__malloc_unlock>:
 8006954:	4801      	ldr	r0, [pc, #4]	@ (800695c <__malloc_unlock+0x8>)
 8006956:	f7ff befc 	b.w	8006752 <__retarget_lock_release_recursive>
 800695a:	bf00      	nop
 800695c:	20003ea0 	.word	0x20003ea0

08006960 <_sungetc_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	1c4b      	adds	r3, r1, #1
 8006964:	4614      	mov	r4, r2
 8006966:	d103      	bne.n	8006970 <_sungetc_r+0x10>
 8006968:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800696c:	4628      	mov	r0, r5
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	8993      	ldrh	r3, [r2, #12]
 8006972:	f023 0320 	bic.w	r3, r3, #32
 8006976:	8193      	strh	r3, [r2, #12]
 8006978:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800697a:	6852      	ldr	r2, [r2, #4]
 800697c:	b2cd      	uxtb	r5, r1
 800697e:	b18b      	cbz	r3, 80069a4 <_sungetc_r+0x44>
 8006980:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006982:	4293      	cmp	r3, r2
 8006984:	dd08      	ble.n	8006998 <_sungetc_r+0x38>
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	1e5a      	subs	r2, r3, #1
 800698a:	6022      	str	r2, [r4, #0]
 800698c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006990:	6863      	ldr	r3, [r4, #4]
 8006992:	3301      	adds	r3, #1
 8006994:	6063      	str	r3, [r4, #4]
 8006996:	e7e9      	b.n	800696c <_sungetc_r+0xc>
 8006998:	4621      	mov	r1, r4
 800699a:	f000 fb38 	bl	800700e <__submore>
 800699e:	2800      	cmp	r0, #0
 80069a0:	d0f1      	beq.n	8006986 <_sungetc_r+0x26>
 80069a2:	e7e1      	b.n	8006968 <_sungetc_r+0x8>
 80069a4:	6921      	ldr	r1, [r4, #16]
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	b151      	cbz	r1, 80069c0 <_sungetc_r+0x60>
 80069aa:	4299      	cmp	r1, r3
 80069ac:	d208      	bcs.n	80069c0 <_sungetc_r+0x60>
 80069ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80069b2:	42a9      	cmp	r1, r5
 80069b4:	d104      	bne.n	80069c0 <_sungetc_r+0x60>
 80069b6:	3b01      	subs	r3, #1
 80069b8:	3201      	adds	r2, #1
 80069ba:	6023      	str	r3, [r4, #0]
 80069bc:	6062      	str	r2, [r4, #4]
 80069be:	e7d5      	b.n	800696c <_sungetc_r+0xc>
 80069c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80069c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80069ca:	2303      	movs	r3, #3
 80069cc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80069ce:	4623      	mov	r3, r4
 80069d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80069d4:	6023      	str	r3, [r4, #0]
 80069d6:	2301      	movs	r3, #1
 80069d8:	e7dc      	b.n	8006994 <_sungetc_r+0x34>

080069da <__ssrefill_r>:
 80069da:	b510      	push	{r4, lr}
 80069dc:	460c      	mov	r4, r1
 80069de:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80069e0:	b169      	cbz	r1, 80069fe <__ssrefill_r+0x24>
 80069e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069e6:	4299      	cmp	r1, r3
 80069e8:	d001      	beq.n	80069ee <__ssrefill_r+0x14>
 80069ea:	f7ff fec1 	bl	8006770 <_free_r>
 80069ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069f0:	6063      	str	r3, [r4, #4]
 80069f2:	2000      	movs	r0, #0
 80069f4:	6360      	str	r0, [r4, #52]	@ 0x34
 80069f6:	b113      	cbz	r3, 80069fe <__ssrefill_r+0x24>
 80069f8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80069fa:	6023      	str	r3, [r4, #0]
 80069fc:	bd10      	pop	{r4, pc}
 80069fe:	6923      	ldr	r3, [r4, #16]
 8006a00:	6023      	str	r3, [r4, #0]
 8006a02:	2300      	movs	r3, #0
 8006a04:	6063      	str	r3, [r4, #4]
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	f043 0320 	orr.w	r3, r3, #32
 8006a0c:	81a3      	strh	r3, [r4, #12]
 8006a0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a12:	e7f3      	b.n	80069fc <__ssrefill_r+0x22>

08006a14 <__ssvfiscanf_r>:
 8006a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a18:	460c      	mov	r4, r1
 8006a1a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8006a1e:	2100      	movs	r1, #0
 8006a20:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006a24:	49a6      	ldr	r1, [pc, #664]	@ (8006cc0 <__ssvfiscanf_r+0x2ac>)
 8006a26:	91a0      	str	r1, [sp, #640]	@ 0x280
 8006a28:	f10d 0804 	add.w	r8, sp, #4
 8006a2c:	49a5      	ldr	r1, [pc, #660]	@ (8006cc4 <__ssvfiscanf_r+0x2b0>)
 8006a2e:	4fa6      	ldr	r7, [pc, #664]	@ (8006cc8 <__ssvfiscanf_r+0x2b4>)
 8006a30:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006a34:	4606      	mov	r6, r0
 8006a36:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	f892 9000 	ldrb.w	r9, [r2]
 8006a3e:	f1b9 0f00 	cmp.w	r9, #0
 8006a42:	f000 8158 	beq.w	8006cf6 <__ssvfiscanf_r+0x2e2>
 8006a46:	f817 3009 	ldrb.w	r3, [r7, r9]
 8006a4a:	f013 0308 	ands.w	r3, r3, #8
 8006a4e:	f102 0501 	add.w	r5, r2, #1
 8006a52:	d019      	beq.n	8006a88 <__ssvfiscanf_r+0x74>
 8006a54:	6863      	ldr	r3, [r4, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	dd0f      	ble.n	8006a7a <__ssvfiscanf_r+0x66>
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	781a      	ldrb	r2, [r3, #0]
 8006a5e:	5cba      	ldrb	r2, [r7, r2]
 8006a60:	0712      	lsls	r2, r2, #28
 8006a62:	d401      	bmi.n	8006a68 <__ssvfiscanf_r+0x54>
 8006a64:	462a      	mov	r2, r5
 8006a66:	e7e8      	b.n	8006a3a <__ssvfiscanf_r+0x26>
 8006a68:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006a6a:	3201      	adds	r2, #1
 8006a6c:	9245      	str	r2, [sp, #276]	@ 0x114
 8006a6e:	6862      	ldr	r2, [r4, #4]
 8006a70:	3301      	adds	r3, #1
 8006a72:	3a01      	subs	r2, #1
 8006a74:	6062      	str	r2, [r4, #4]
 8006a76:	6023      	str	r3, [r4, #0]
 8006a78:	e7ec      	b.n	8006a54 <__ssvfiscanf_r+0x40>
 8006a7a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006a7c:	4621      	mov	r1, r4
 8006a7e:	4630      	mov	r0, r6
 8006a80:	4798      	blx	r3
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d0e9      	beq.n	8006a5a <__ssvfiscanf_r+0x46>
 8006a86:	e7ed      	b.n	8006a64 <__ssvfiscanf_r+0x50>
 8006a88:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8006a8c:	f040 8085 	bne.w	8006b9a <__ssvfiscanf_r+0x186>
 8006a90:	9341      	str	r3, [sp, #260]	@ 0x104
 8006a92:	9343      	str	r3, [sp, #268]	@ 0x10c
 8006a94:	7853      	ldrb	r3, [r2, #1]
 8006a96:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a98:	bf02      	ittt	eq
 8006a9a:	2310      	moveq	r3, #16
 8006a9c:	1c95      	addeq	r5, r2, #2
 8006a9e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8006aa0:	220a      	movs	r2, #10
 8006aa2:	46aa      	mov	sl, r5
 8006aa4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006aa8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8006aac:	2b09      	cmp	r3, #9
 8006aae:	d91e      	bls.n	8006aee <__ssvfiscanf_r+0xda>
 8006ab0:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8006ccc <__ssvfiscanf_r+0x2b8>
 8006ab4:	2203      	movs	r2, #3
 8006ab6:	4658      	mov	r0, fp
 8006ab8:	f7f9 fbba 	bl	8000230 <memchr>
 8006abc:	b138      	cbz	r0, 8006ace <__ssvfiscanf_r+0xba>
 8006abe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006ac0:	eba0 000b 	sub.w	r0, r0, fp
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	4083      	lsls	r3, r0
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	9341      	str	r3, [sp, #260]	@ 0x104
 8006acc:	4655      	mov	r5, sl
 8006ace:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006ad2:	2b78      	cmp	r3, #120	@ 0x78
 8006ad4:	d806      	bhi.n	8006ae4 <__ssvfiscanf_r+0xd0>
 8006ad6:	2b57      	cmp	r3, #87	@ 0x57
 8006ad8:	d810      	bhi.n	8006afc <__ssvfiscanf_r+0xe8>
 8006ada:	2b25      	cmp	r3, #37	@ 0x25
 8006adc:	d05d      	beq.n	8006b9a <__ssvfiscanf_r+0x186>
 8006ade:	d857      	bhi.n	8006b90 <__ssvfiscanf_r+0x17c>
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d075      	beq.n	8006bd0 <__ssvfiscanf_r+0x1bc>
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006ae8:	230a      	movs	r3, #10
 8006aea:	9342      	str	r3, [sp, #264]	@ 0x108
 8006aec:	e088      	b.n	8006c00 <__ssvfiscanf_r+0x1ec>
 8006aee:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006af0:	fb02 1103 	mla	r1, r2, r3, r1
 8006af4:	3930      	subs	r1, #48	@ 0x30
 8006af6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006af8:	4655      	mov	r5, sl
 8006afa:	e7d2      	b.n	8006aa2 <__ssvfiscanf_r+0x8e>
 8006afc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006b00:	2a20      	cmp	r2, #32
 8006b02:	d8ef      	bhi.n	8006ae4 <__ssvfiscanf_r+0xd0>
 8006b04:	a101      	add	r1, pc, #4	@ (adr r1, 8006b0c <__ssvfiscanf_r+0xf8>)
 8006b06:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b0a:	bf00      	nop
 8006b0c:	08006bdf 	.word	0x08006bdf
 8006b10:	08006ae5 	.word	0x08006ae5
 8006b14:	08006ae5 	.word	0x08006ae5
 8006b18:	08006c39 	.word	0x08006c39
 8006b1c:	08006ae5 	.word	0x08006ae5
 8006b20:	08006ae5 	.word	0x08006ae5
 8006b24:	08006ae5 	.word	0x08006ae5
 8006b28:	08006ae5 	.word	0x08006ae5
 8006b2c:	08006ae5 	.word	0x08006ae5
 8006b30:	08006ae5 	.word	0x08006ae5
 8006b34:	08006ae5 	.word	0x08006ae5
 8006b38:	08006c4f 	.word	0x08006c4f
 8006b3c:	08006c35 	.word	0x08006c35
 8006b40:	08006b97 	.word	0x08006b97
 8006b44:	08006b97 	.word	0x08006b97
 8006b48:	08006b97 	.word	0x08006b97
 8006b4c:	08006ae5 	.word	0x08006ae5
 8006b50:	08006bf1 	.word	0x08006bf1
 8006b54:	08006ae5 	.word	0x08006ae5
 8006b58:	08006ae5 	.word	0x08006ae5
 8006b5c:	08006ae5 	.word	0x08006ae5
 8006b60:	08006ae5 	.word	0x08006ae5
 8006b64:	08006c5f 	.word	0x08006c5f
 8006b68:	08006bf9 	.word	0x08006bf9
 8006b6c:	08006bd7 	.word	0x08006bd7
 8006b70:	08006ae5 	.word	0x08006ae5
 8006b74:	08006ae5 	.word	0x08006ae5
 8006b78:	08006c5b 	.word	0x08006c5b
 8006b7c:	08006ae5 	.word	0x08006ae5
 8006b80:	08006c35 	.word	0x08006c35
 8006b84:	08006ae5 	.word	0x08006ae5
 8006b88:	08006ae5 	.word	0x08006ae5
 8006b8c:	08006bdf 	.word	0x08006bdf
 8006b90:	3b45      	subs	r3, #69	@ 0x45
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d8a6      	bhi.n	8006ae4 <__ssvfiscanf_r+0xd0>
 8006b96:	2305      	movs	r3, #5
 8006b98:	e031      	b.n	8006bfe <__ssvfiscanf_r+0x1ea>
 8006b9a:	6863      	ldr	r3, [r4, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	dd0d      	ble.n	8006bbc <__ssvfiscanf_r+0x1a8>
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	781a      	ldrb	r2, [r3, #0]
 8006ba4:	454a      	cmp	r2, r9
 8006ba6:	f040 80a6 	bne.w	8006cf6 <__ssvfiscanf_r+0x2e2>
 8006baa:	3301      	adds	r3, #1
 8006bac:	6862      	ldr	r2, [r4, #4]
 8006bae:	6023      	str	r3, [r4, #0]
 8006bb0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006bb2:	3a01      	subs	r2, #1
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	6062      	str	r2, [r4, #4]
 8006bb8:	9345      	str	r3, [sp, #276]	@ 0x114
 8006bba:	e753      	b.n	8006a64 <__ssvfiscanf_r+0x50>
 8006bbc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	4798      	blx	r3
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	d0eb      	beq.n	8006ba0 <__ssvfiscanf_r+0x18c>
 8006bc8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	f040 808b 	bne.w	8006ce6 <__ssvfiscanf_r+0x2d2>
 8006bd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bd4:	e08b      	b.n	8006cee <__ssvfiscanf_r+0x2da>
 8006bd6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006bd8:	f042 0220 	orr.w	r2, r2, #32
 8006bdc:	9241      	str	r2, [sp, #260]	@ 0x104
 8006bde:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006be0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006be4:	9241      	str	r2, [sp, #260]	@ 0x104
 8006be6:	2210      	movs	r2, #16
 8006be8:	2b6e      	cmp	r3, #110	@ 0x6e
 8006bea:	9242      	str	r2, [sp, #264]	@ 0x108
 8006bec:	d902      	bls.n	8006bf4 <__ssvfiscanf_r+0x1e0>
 8006bee:	e005      	b.n	8006bfc <__ssvfiscanf_r+0x1e8>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	9342      	str	r3, [sp, #264]	@ 0x108
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e002      	b.n	8006bfe <__ssvfiscanf_r+0x1ea>
 8006bf8:	2308      	movs	r3, #8
 8006bfa:	9342      	str	r3, [sp, #264]	@ 0x108
 8006bfc:	2304      	movs	r3, #4
 8006bfe:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006c00:	6863      	ldr	r3, [r4, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	dd39      	ble.n	8006c7a <__ssvfiscanf_r+0x266>
 8006c06:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006c08:	0659      	lsls	r1, r3, #25
 8006c0a:	d404      	bmi.n	8006c16 <__ssvfiscanf_r+0x202>
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	781a      	ldrb	r2, [r3, #0]
 8006c10:	5cba      	ldrb	r2, [r7, r2]
 8006c12:	0712      	lsls	r2, r2, #28
 8006c14:	d438      	bmi.n	8006c88 <__ssvfiscanf_r+0x274>
 8006c16:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	dc47      	bgt.n	8006cac <__ssvfiscanf_r+0x298>
 8006c1c:	466b      	mov	r3, sp
 8006c1e:	4622      	mov	r2, r4
 8006c20:	a941      	add	r1, sp, #260	@ 0x104
 8006c22:	4630      	mov	r0, r6
 8006c24:	f000 f86c 	bl	8006d00 <_scanf_chars>
 8006c28:	2801      	cmp	r0, #1
 8006c2a:	d064      	beq.n	8006cf6 <__ssvfiscanf_r+0x2e2>
 8006c2c:	2802      	cmp	r0, #2
 8006c2e:	f47f af19 	bne.w	8006a64 <__ssvfiscanf_r+0x50>
 8006c32:	e7c9      	b.n	8006bc8 <__ssvfiscanf_r+0x1b4>
 8006c34:	220a      	movs	r2, #10
 8006c36:	e7d7      	b.n	8006be8 <__ssvfiscanf_r+0x1d4>
 8006c38:	4629      	mov	r1, r5
 8006c3a:	4640      	mov	r0, r8
 8006c3c:	f000 f9ae 	bl	8006f9c <__sccl>
 8006c40:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c46:	9341      	str	r3, [sp, #260]	@ 0x104
 8006c48:	4605      	mov	r5, r0
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e7d7      	b.n	8006bfe <__ssvfiscanf_r+0x1ea>
 8006c4e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c54:	9341      	str	r3, [sp, #260]	@ 0x104
 8006c56:	2300      	movs	r3, #0
 8006c58:	e7d1      	b.n	8006bfe <__ssvfiscanf_r+0x1ea>
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	e7cf      	b.n	8006bfe <__ssvfiscanf_r+0x1ea>
 8006c5e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006c60:	06c3      	lsls	r3, r0, #27
 8006c62:	f53f aeff 	bmi.w	8006a64 <__ssvfiscanf_r+0x50>
 8006c66:	9b00      	ldr	r3, [sp, #0]
 8006c68:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006c6a:	1d19      	adds	r1, r3, #4
 8006c6c:	9100      	str	r1, [sp, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	07c0      	lsls	r0, r0, #31
 8006c72:	bf4c      	ite	mi
 8006c74:	801a      	strhmi	r2, [r3, #0]
 8006c76:	601a      	strpl	r2, [r3, #0]
 8006c78:	e6f4      	b.n	8006a64 <__ssvfiscanf_r+0x50>
 8006c7a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	4630      	mov	r0, r6
 8006c80:	4798      	blx	r3
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d0bf      	beq.n	8006c06 <__ssvfiscanf_r+0x1f2>
 8006c86:	e79f      	b.n	8006bc8 <__ssvfiscanf_r+0x1b4>
 8006c88:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006c8a:	3201      	adds	r2, #1
 8006c8c:	9245      	str	r2, [sp, #276]	@ 0x114
 8006c8e:	6862      	ldr	r2, [r4, #4]
 8006c90:	3a01      	subs	r2, #1
 8006c92:	2a00      	cmp	r2, #0
 8006c94:	6062      	str	r2, [r4, #4]
 8006c96:	dd02      	ble.n	8006c9e <__ssvfiscanf_r+0x28a>
 8006c98:	3301      	adds	r3, #1
 8006c9a:	6023      	str	r3, [r4, #0]
 8006c9c:	e7b6      	b.n	8006c0c <__ssvfiscanf_r+0x1f8>
 8006c9e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	4798      	blx	r3
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d0b0      	beq.n	8006c0c <__ssvfiscanf_r+0x1f8>
 8006caa:	e78d      	b.n	8006bc8 <__ssvfiscanf_r+0x1b4>
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	dc0f      	bgt.n	8006cd0 <__ssvfiscanf_r+0x2bc>
 8006cb0:	466b      	mov	r3, sp
 8006cb2:	4622      	mov	r2, r4
 8006cb4:	a941      	add	r1, sp, #260	@ 0x104
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f000 f87c 	bl	8006db4 <_scanf_i>
 8006cbc:	e7b4      	b.n	8006c28 <__ssvfiscanf_r+0x214>
 8006cbe:	bf00      	nop
 8006cc0:	08006961 	.word	0x08006961
 8006cc4:	080069db 	.word	0x080069db
 8006cc8:	08007c9d 	.word	0x08007c9d
 8006ccc:	08007d9d 	.word	0x08007d9d
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8006cfc <__ssvfiscanf_r+0x2e8>)
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f43f aec6 	beq.w	8006a64 <__ssvfiscanf_r+0x50>
 8006cd8:	466b      	mov	r3, sp
 8006cda:	4622      	mov	r2, r4
 8006cdc:	a941      	add	r1, sp, #260	@ 0x104
 8006cde:	4630      	mov	r0, r6
 8006ce0:	f3af 8000 	nop.w
 8006ce4:	e7a0      	b.n	8006c28 <__ssvfiscanf_r+0x214>
 8006ce6:	89a3      	ldrh	r3, [r4, #12]
 8006ce8:	065b      	lsls	r3, r3, #25
 8006cea:	f53f af71 	bmi.w	8006bd0 <__ssvfiscanf_r+0x1bc>
 8006cee:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8006cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006cf8:	e7f9      	b.n	8006cee <__ssvfiscanf_r+0x2da>
 8006cfa:	bf00      	nop
 8006cfc:	00000000 	.word	0x00000000

08006d00 <_scanf_chars>:
 8006d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d04:	4615      	mov	r5, r2
 8006d06:	688a      	ldr	r2, [r1, #8]
 8006d08:	4680      	mov	r8, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	b932      	cbnz	r2, 8006d1c <_scanf_chars+0x1c>
 8006d0e:	698a      	ldr	r2, [r1, #24]
 8006d10:	2a00      	cmp	r2, #0
 8006d12:	bf14      	ite	ne
 8006d14:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8006d18:	2201      	moveq	r2, #1
 8006d1a:	608a      	str	r2, [r1, #8]
 8006d1c:	6822      	ldr	r2, [r4, #0]
 8006d1e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006db0 <_scanf_chars+0xb0>
 8006d22:	06d1      	lsls	r1, r2, #27
 8006d24:	bf5f      	itttt	pl
 8006d26:	681a      	ldrpl	r2, [r3, #0]
 8006d28:	1d11      	addpl	r1, r2, #4
 8006d2a:	6019      	strpl	r1, [r3, #0]
 8006d2c:	6816      	ldrpl	r6, [r2, #0]
 8006d2e:	2700      	movs	r7, #0
 8006d30:	69a0      	ldr	r0, [r4, #24]
 8006d32:	b188      	cbz	r0, 8006d58 <_scanf_chars+0x58>
 8006d34:	2801      	cmp	r0, #1
 8006d36:	d107      	bne.n	8006d48 <_scanf_chars+0x48>
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	781a      	ldrb	r2, [r3, #0]
 8006d3c:	6963      	ldr	r3, [r4, #20]
 8006d3e:	5c9b      	ldrb	r3, [r3, r2]
 8006d40:	b953      	cbnz	r3, 8006d58 <_scanf_chars+0x58>
 8006d42:	2f00      	cmp	r7, #0
 8006d44:	d031      	beq.n	8006daa <_scanf_chars+0xaa>
 8006d46:	e022      	b.n	8006d8e <_scanf_chars+0x8e>
 8006d48:	2802      	cmp	r0, #2
 8006d4a:	d120      	bne.n	8006d8e <_scanf_chars+0x8e>
 8006d4c:	682b      	ldr	r3, [r5, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006d54:	071b      	lsls	r3, r3, #28
 8006d56:	d41a      	bmi.n	8006d8e <_scanf_chars+0x8e>
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	06da      	lsls	r2, r3, #27
 8006d5c:	bf5e      	ittt	pl
 8006d5e:	682b      	ldrpl	r3, [r5, #0]
 8006d60:	781b      	ldrbpl	r3, [r3, #0]
 8006d62:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006d66:	682a      	ldr	r2, [r5, #0]
 8006d68:	686b      	ldr	r3, [r5, #4]
 8006d6a:	3201      	adds	r2, #1
 8006d6c:	602a      	str	r2, [r5, #0]
 8006d6e:	68a2      	ldr	r2, [r4, #8]
 8006d70:	3b01      	subs	r3, #1
 8006d72:	3a01      	subs	r2, #1
 8006d74:	606b      	str	r3, [r5, #4]
 8006d76:	3701      	adds	r7, #1
 8006d78:	60a2      	str	r2, [r4, #8]
 8006d7a:	b142      	cbz	r2, 8006d8e <_scanf_chars+0x8e>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	dcd7      	bgt.n	8006d30 <_scanf_chars+0x30>
 8006d80:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006d84:	4629      	mov	r1, r5
 8006d86:	4640      	mov	r0, r8
 8006d88:	4798      	blx	r3
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d0d0      	beq.n	8006d30 <_scanf_chars+0x30>
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	f013 0310 	ands.w	r3, r3, #16
 8006d94:	d105      	bne.n	8006da2 <_scanf_chars+0xa2>
 8006d96:	68e2      	ldr	r2, [r4, #12]
 8006d98:	3201      	adds	r2, #1
 8006d9a:	60e2      	str	r2, [r4, #12]
 8006d9c:	69a2      	ldr	r2, [r4, #24]
 8006d9e:	b102      	cbz	r2, 8006da2 <_scanf_chars+0xa2>
 8006da0:	7033      	strb	r3, [r6, #0]
 8006da2:	6923      	ldr	r3, [r4, #16]
 8006da4:	443b      	add	r3, r7
 8006da6:	6123      	str	r3, [r4, #16]
 8006da8:	2000      	movs	r0, #0
 8006daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dae:	bf00      	nop
 8006db0:	08007c9d 	.word	0x08007c9d

08006db4 <_scanf_i>:
 8006db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db8:	4698      	mov	r8, r3
 8006dba:	4b74      	ldr	r3, [pc, #464]	@ (8006f8c <_scanf_i+0x1d8>)
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	4682      	mov	sl, r0
 8006dc0:	4616      	mov	r6, r2
 8006dc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	ab03      	add	r3, sp, #12
 8006dca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006dce:	4b70      	ldr	r3, [pc, #448]	@ (8006f90 <_scanf_i+0x1dc>)
 8006dd0:	69a1      	ldr	r1, [r4, #24]
 8006dd2:	4a70      	ldr	r2, [pc, #448]	@ (8006f94 <_scanf_i+0x1e0>)
 8006dd4:	2903      	cmp	r1, #3
 8006dd6:	bf08      	it	eq
 8006dd8:	461a      	moveq	r2, r3
 8006dda:	68a3      	ldr	r3, [r4, #8]
 8006ddc:	9201      	str	r2, [sp, #4]
 8006dde:	1e5a      	subs	r2, r3, #1
 8006de0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006de4:	bf88      	it	hi
 8006de6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006dea:	4627      	mov	r7, r4
 8006dec:	bf82      	ittt	hi
 8006dee:	eb03 0905 	addhi.w	r9, r3, r5
 8006df2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006df6:	60a3      	strhi	r3, [r4, #8]
 8006df8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006dfc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8006e00:	bf98      	it	ls
 8006e02:	f04f 0900 	movls.w	r9, #0
 8006e06:	6023      	str	r3, [r4, #0]
 8006e08:	463d      	mov	r5, r7
 8006e0a:	f04f 0b00 	mov.w	fp, #0
 8006e0e:	6831      	ldr	r1, [r6, #0]
 8006e10:	ab03      	add	r3, sp, #12
 8006e12:	7809      	ldrb	r1, [r1, #0]
 8006e14:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006e18:	2202      	movs	r2, #2
 8006e1a:	f7f9 fa09 	bl	8000230 <memchr>
 8006e1e:	b328      	cbz	r0, 8006e6c <_scanf_i+0xb8>
 8006e20:	f1bb 0f01 	cmp.w	fp, #1
 8006e24:	d159      	bne.n	8006eda <_scanf_i+0x126>
 8006e26:	6862      	ldr	r2, [r4, #4]
 8006e28:	b92a      	cbnz	r2, 8006e36 <_scanf_i+0x82>
 8006e2a:	6822      	ldr	r2, [r4, #0]
 8006e2c:	2108      	movs	r1, #8
 8006e2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e32:	6061      	str	r1, [r4, #4]
 8006e34:	6022      	str	r2, [r4, #0]
 8006e36:	6822      	ldr	r2, [r4, #0]
 8006e38:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8006e3c:	6022      	str	r2, [r4, #0]
 8006e3e:	68a2      	ldr	r2, [r4, #8]
 8006e40:	1e51      	subs	r1, r2, #1
 8006e42:	60a1      	str	r1, [r4, #8]
 8006e44:	b192      	cbz	r2, 8006e6c <_scanf_i+0xb8>
 8006e46:	6832      	ldr	r2, [r6, #0]
 8006e48:	1c51      	adds	r1, r2, #1
 8006e4a:	6031      	str	r1, [r6, #0]
 8006e4c:	7812      	ldrb	r2, [r2, #0]
 8006e4e:	f805 2b01 	strb.w	r2, [r5], #1
 8006e52:	6872      	ldr	r2, [r6, #4]
 8006e54:	3a01      	subs	r2, #1
 8006e56:	2a00      	cmp	r2, #0
 8006e58:	6072      	str	r2, [r6, #4]
 8006e5a:	dc07      	bgt.n	8006e6c <_scanf_i+0xb8>
 8006e5c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006e60:	4631      	mov	r1, r6
 8006e62:	4650      	mov	r0, sl
 8006e64:	4790      	blx	r2
 8006e66:	2800      	cmp	r0, #0
 8006e68:	f040 8085 	bne.w	8006f76 <_scanf_i+0x1c2>
 8006e6c:	f10b 0b01 	add.w	fp, fp, #1
 8006e70:	f1bb 0f03 	cmp.w	fp, #3
 8006e74:	d1cb      	bne.n	8006e0e <_scanf_i+0x5a>
 8006e76:	6863      	ldr	r3, [r4, #4]
 8006e78:	b90b      	cbnz	r3, 8006e7e <_scanf_i+0xca>
 8006e7a:	230a      	movs	r3, #10
 8006e7c:	6063      	str	r3, [r4, #4]
 8006e7e:	6863      	ldr	r3, [r4, #4]
 8006e80:	4945      	ldr	r1, [pc, #276]	@ (8006f98 <_scanf_i+0x1e4>)
 8006e82:	6960      	ldr	r0, [r4, #20]
 8006e84:	1ac9      	subs	r1, r1, r3
 8006e86:	f000 f889 	bl	8006f9c <__sccl>
 8006e8a:	f04f 0b00 	mov.w	fp, #0
 8006e8e:	68a3      	ldr	r3, [r4, #8]
 8006e90:	6822      	ldr	r2, [r4, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d03d      	beq.n	8006f12 <_scanf_i+0x15e>
 8006e96:	6831      	ldr	r1, [r6, #0]
 8006e98:	6960      	ldr	r0, [r4, #20]
 8006e9a:	f891 c000 	ldrb.w	ip, [r1]
 8006e9e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d035      	beq.n	8006f12 <_scanf_i+0x15e>
 8006ea6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8006eaa:	d124      	bne.n	8006ef6 <_scanf_i+0x142>
 8006eac:	0510      	lsls	r0, r2, #20
 8006eae:	d522      	bpl.n	8006ef6 <_scanf_i+0x142>
 8006eb0:	f10b 0b01 	add.w	fp, fp, #1
 8006eb4:	f1b9 0f00 	cmp.w	r9, #0
 8006eb8:	d003      	beq.n	8006ec2 <_scanf_i+0x10e>
 8006eba:	3301      	adds	r3, #1
 8006ebc:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8006ec0:	60a3      	str	r3, [r4, #8]
 8006ec2:	6873      	ldr	r3, [r6, #4]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	6073      	str	r3, [r6, #4]
 8006eca:	dd1b      	ble.n	8006f04 <_scanf_i+0x150>
 8006ecc:	6833      	ldr	r3, [r6, #0]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	6033      	str	r3, [r6, #0]
 8006ed2:	68a3      	ldr	r3, [r4, #8]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	60a3      	str	r3, [r4, #8]
 8006ed8:	e7d9      	b.n	8006e8e <_scanf_i+0xda>
 8006eda:	f1bb 0f02 	cmp.w	fp, #2
 8006ede:	d1ae      	bne.n	8006e3e <_scanf_i+0x8a>
 8006ee0:	6822      	ldr	r2, [r4, #0]
 8006ee2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8006ee6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006eea:	d1c4      	bne.n	8006e76 <_scanf_i+0xc2>
 8006eec:	2110      	movs	r1, #16
 8006eee:	6061      	str	r1, [r4, #4]
 8006ef0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ef4:	e7a2      	b.n	8006e3c <_scanf_i+0x88>
 8006ef6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8006efa:	6022      	str	r2, [r4, #0]
 8006efc:	780b      	ldrb	r3, [r1, #0]
 8006efe:	f805 3b01 	strb.w	r3, [r5], #1
 8006f02:	e7de      	b.n	8006ec2 <_scanf_i+0x10e>
 8006f04:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006f08:	4631      	mov	r1, r6
 8006f0a:	4650      	mov	r0, sl
 8006f0c:	4798      	blx	r3
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d0df      	beq.n	8006ed2 <_scanf_i+0x11e>
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	05d9      	lsls	r1, r3, #23
 8006f16:	d50d      	bpl.n	8006f34 <_scanf_i+0x180>
 8006f18:	42bd      	cmp	r5, r7
 8006f1a:	d909      	bls.n	8006f30 <_scanf_i+0x17c>
 8006f1c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006f20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f24:	4632      	mov	r2, r6
 8006f26:	4650      	mov	r0, sl
 8006f28:	4798      	blx	r3
 8006f2a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8006f2e:	464d      	mov	r5, r9
 8006f30:	42bd      	cmp	r5, r7
 8006f32:	d028      	beq.n	8006f86 <_scanf_i+0x1d2>
 8006f34:	6822      	ldr	r2, [r4, #0]
 8006f36:	f012 0210 	ands.w	r2, r2, #16
 8006f3a:	d113      	bne.n	8006f64 <_scanf_i+0x1b0>
 8006f3c:	702a      	strb	r2, [r5, #0]
 8006f3e:	6863      	ldr	r3, [r4, #4]
 8006f40:	9e01      	ldr	r6, [sp, #4]
 8006f42:	4639      	mov	r1, r7
 8006f44:	4650      	mov	r0, sl
 8006f46:	47b0      	blx	r6
 8006f48:	f8d8 3000 	ldr.w	r3, [r8]
 8006f4c:	6821      	ldr	r1, [r4, #0]
 8006f4e:	1d1a      	adds	r2, r3, #4
 8006f50:	f8c8 2000 	str.w	r2, [r8]
 8006f54:	f011 0f20 	tst.w	r1, #32
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	d00f      	beq.n	8006f7c <_scanf_i+0x1c8>
 8006f5c:	6018      	str	r0, [r3, #0]
 8006f5e:	68e3      	ldr	r3, [r4, #12]
 8006f60:	3301      	adds	r3, #1
 8006f62:	60e3      	str	r3, [r4, #12]
 8006f64:	6923      	ldr	r3, [r4, #16]
 8006f66:	1bed      	subs	r5, r5, r7
 8006f68:	445d      	add	r5, fp
 8006f6a:	442b      	add	r3, r5
 8006f6c:	6123      	str	r3, [r4, #16]
 8006f6e:	2000      	movs	r0, #0
 8006f70:	b007      	add	sp, #28
 8006f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f76:	f04f 0b00 	mov.w	fp, #0
 8006f7a:	e7ca      	b.n	8006f12 <_scanf_i+0x15e>
 8006f7c:	07ca      	lsls	r2, r1, #31
 8006f7e:	bf4c      	ite	mi
 8006f80:	8018      	strhmi	r0, [r3, #0]
 8006f82:	6018      	strpl	r0, [r3, #0]
 8006f84:	e7eb      	b.n	8006f5e <_scanf_i+0x1aa>
 8006f86:	2001      	movs	r0, #1
 8006f88:	e7f2      	b.n	8006f70 <_scanf_i+0x1bc>
 8006f8a:	bf00      	nop
 8006f8c:	08007380 	.word	0x08007380
 8006f90:	08006679 	.word	0x08006679
 8006f94:	080071dd 	.word	0x080071dd
 8006f98:	08007db1 	.word	0x08007db1

08006f9c <__sccl>:
 8006f9c:	b570      	push	{r4, r5, r6, lr}
 8006f9e:	780b      	ldrb	r3, [r1, #0]
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	2b5e      	cmp	r3, #94	@ 0x5e
 8006fa4:	bf0b      	itete	eq
 8006fa6:	784b      	ldrbeq	r3, [r1, #1]
 8006fa8:	1c4a      	addne	r2, r1, #1
 8006faa:	1c8a      	addeq	r2, r1, #2
 8006fac:	2100      	movne	r1, #0
 8006fae:	bf08      	it	eq
 8006fb0:	2101      	moveq	r1, #1
 8006fb2:	3801      	subs	r0, #1
 8006fb4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8006fb8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006fbc:	42a8      	cmp	r0, r5
 8006fbe:	d1fb      	bne.n	8006fb8 <__sccl+0x1c>
 8006fc0:	b90b      	cbnz	r3, 8006fc6 <__sccl+0x2a>
 8006fc2:	1e50      	subs	r0, r2, #1
 8006fc4:	bd70      	pop	{r4, r5, r6, pc}
 8006fc6:	f081 0101 	eor.w	r1, r1, #1
 8006fca:	54e1      	strb	r1, [r4, r3]
 8006fcc:	4610      	mov	r0, r2
 8006fce:	4602      	mov	r2, r0
 8006fd0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006fd4:	2d2d      	cmp	r5, #45	@ 0x2d
 8006fd6:	d005      	beq.n	8006fe4 <__sccl+0x48>
 8006fd8:	2d5d      	cmp	r5, #93	@ 0x5d
 8006fda:	d016      	beq.n	800700a <__sccl+0x6e>
 8006fdc:	2d00      	cmp	r5, #0
 8006fde:	d0f1      	beq.n	8006fc4 <__sccl+0x28>
 8006fe0:	462b      	mov	r3, r5
 8006fe2:	e7f2      	b.n	8006fca <__sccl+0x2e>
 8006fe4:	7846      	ldrb	r6, [r0, #1]
 8006fe6:	2e5d      	cmp	r6, #93	@ 0x5d
 8006fe8:	d0fa      	beq.n	8006fe0 <__sccl+0x44>
 8006fea:	42b3      	cmp	r3, r6
 8006fec:	dcf8      	bgt.n	8006fe0 <__sccl+0x44>
 8006fee:	3002      	adds	r0, #2
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	3201      	adds	r2, #1
 8006ff4:	4296      	cmp	r6, r2
 8006ff6:	54a1      	strb	r1, [r4, r2]
 8006ff8:	dcfb      	bgt.n	8006ff2 <__sccl+0x56>
 8006ffa:	1af2      	subs	r2, r6, r3
 8006ffc:	3a01      	subs	r2, #1
 8006ffe:	1c5d      	adds	r5, r3, #1
 8007000:	42b3      	cmp	r3, r6
 8007002:	bfa8      	it	ge
 8007004:	2200      	movge	r2, #0
 8007006:	18ab      	adds	r3, r5, r2
 8007008:	e7e1      	b.n	8006fce <__sccl+0x32>
 800700a:	4610      	mov	r0, r2
 800700c:	e7da      	b.n	8006fc4 <__sccl+0x28>

0800700e <__submore>:
 800700e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007012:	460c      	mov	r4, r1
 8007014:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007016:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800701a:	4299      	cmp	r1, r3
 800701c:	d11d      	bne.n	800705a <__submore+0x4c>
 800701e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007022:	f7ff fc11 	bl	8006848 <_malloc_r>
 8007026:	b918      	cbnz	r0, 8007030 <__submore+0x22>
 8007028:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800702c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007030:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007034:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007036:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800703a:	6360      	str	r0, [r4, #52]	@ 0x34
 800703c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007040:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007044:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8007048:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800704c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8007050:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007054:	6020      	str	r0, [r4, #0]
 8007056:	2000      	movs	r0, #0
 8007058:	e7e8      	b.n	800702c <__submore+0x1e>
 800705a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800705c:	0077      	lsls	r7, r6, #1
 800705e:	463a      	mov	r2, r7
 8007060:	f000 f820 	bl	80070a4 <_realloc_r>
 8007064:	4605      	mov	r5, r0
 8007066:	2800      	cmp	r0, #0
 8007068:	d0de      	beq.n	8007028 <__submore+0x1a>
 800706a:	eb00 0806 	add.w	r8, r0, r6
 800706e:	4601      	mov	r1, r0
 8007070:	4632      	mov	r2, r6
 8007072:	4640      	mov	r0, r8
 8007074:	f7ff fb6e 	bl	8006754 <memcpy>
 8007078:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800707c:	f8c4 8000 	str.w	r8, [r4]
 8007080:	e7e9      	b.n	8007056 <__submore+0x48>
	...

08007084 <_sbrk_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4d06      	ldr	r5, [pc, #24]	@ (80070a0 <_sbrk_r+0x1c>)
 8007088:	2300      	movs	r3, #0
 800708a:	4604      	mov	r4, r0
 800708c:	4608      	mov	r0, r1
 800708e:	602b      	str	r3, [r5, #0]
 8007090:	f7fa fdee 	bl	8001c70 <_sbrk>
 8007094:	1c43      	adds	r3, r0, #1
 8007096:	d102      	bne.n	800709e <_sbrk_r+0x1a>
 8007098:	682b      	ldr	r3, [r5, #0]
 800709a:	b103      	cbz	r3, 800709e <_sbrk_r+0x1a>
 800709c:	6023      	str	r3, [r4, #0]
 800709e:	bd38      	pop	{r3, r4, r5, pc}
 80070a0:	20003e9c 	.word	0x20003e9c

080070a4 <_realloc_r>:
 80070a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a8:	4607      	mov	r7, r0
 80070aa:	4614      	mov	r4, r2
 80070ac:	460d      	mov	r5, r1
 80070ae:	b921      	cbnz	r1, 80070ba <_realloc_r+0x16>
 80070b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070b4:	4611      	mov	r1, r2
 80070b6:	f7ff bbc7 	b.w	8006848 <_malloc_r>
 80070ba:	b92a      	cbnz	r2, 80070c8 <_realloc_r+0x24>
 80070bc:	f7ff fb58 	bl	8006770 <_free_r>
 80070c0:	4625      	mov	r5, r4
 80070c2:	4628      	mov	r0, r5
 80070c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c8:	f000 f88a 	bl	80071e0 <_malloc_usable_size_r>
 80070cc:	4284      	cmp	r4, r0
 80070ce:	4606      	mov	r6, r0
 80070d0:	d802      	bhi.n	80070d8 <_realloc_r+0x34>
 80070d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070d6:	d8f4      	bhi.n	80070c2 <_realloc_r+0x1e>
 80070d8:	4621      	mov	r1, r4
 80070da:	4638      	mov	r0, r7
 80070dc:	f7ff fbb4 	bl	8006848 <_malloc_r>
 80070e0:	4680      	mov	r8, r0
 80070e2:	b908      	cbnz	r0, 80070e8 <_realloc_r+0x44>
 80070e4:	4645      	mov	r5, r8
 80070e6:	e7ec      	b.n	80070c2 <_realloc_r+0x1e>
 80070e8:	42b4      	cmp	r4, r6
 80070ea:	4622      	mov	r2, r4
 80070ec:	4629      	mov	r1, r5
 80070ee:	bf28      	it	cs
 80070f0:	4632      	movcs	r2, r6
 80070f2:	f7ff fb2f 	bl	8006754 <memcpy>
 80070f6:	4629      	mov	r1, r5
 80070f8:	4638      	mov	r0, r7
 80070fa:	f7ff fb39 	bl	8006770 <_free_r>
 80070fe:	e7f1      	b.n	80070e4 <_realloc_r+0x40>

08007100 <_strtoul_l.isra.0>:
 8007100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007104:	4e34      	ldr	r6, [pc, #208]	@ (80071d8 <_strtoul_l.isra.0+0xd8>)
 8007106:	4686      	mov	lr, r0
 8007108:	460d      	mov	r5, r1
 800710a:	4628      	mov	r0, r5
 800710c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007110:	5d37      	ldrb	r7, [r6, r4]
 8007112:	f017 0708 	ands.w	r7, r7, #8
 8007116:	d1f8      	bne.n	800710a <_strtoul_l.isra.0+0xa>
 8007118:	2c2d      	cmp	r4, #45	@ 0x2d
 800711a:	d110      	bne.n	800713e <_strtoul_l.isra.0+0x3e>
 800711c:	782c      	ldrb	r4, [r5, #0]
 800711e:	2701      	movs	r7, #1
 8007120:	1c85      	adds	r5, r0, #2
 8007122:	f033 0010 	bics.w	r0, r3, #16
 8007126:	d115      	bne.n	8007154 <_strtoul_l.isra.0+0x54>
 8007128:	2c30      	cmp	r4, #48	@ 0x30
 800712a:	d10d      	bne.n	8007148 <_strtoul_l.isra.0+0x48>
 800712c:	7828      	ldrb	r0, [r5, #0]
 800712e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007132:	2858      	cmp	r0, #88	@ 0x58
 8007134:	d108      	bne.n	8007148 <_strtoul_l.isra.0+0x48>
 8007136:	786c      	ldrb	r4, [r5, #1]
 8007138:	3502      	adds	r5, #2
 800713a:	2310      	movs	r3, #16
 800713c:	e00a      	b.n	8007154 <_strtoul_l.isra.0+0x54>
 800713e:	2c2b      	cmp	r4, #43	@ 0x2b
 8007140:	bf04      	itt	eq
 8007142:	782c      	ldrbeq	r4, [r5, #0]
 8007144:	1c85      	addeq	r5, r0, #2
 8007146:	e7ec      	b.n	8007122 <_strtoul_l.isra.0+0x22>
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1f6      	bne.n	800713a <_strtoul_l.isra.0+0x3a>
 800714c:	2c30      	cmp	r4, #48	@ 0x30
 800714e:	bf14      	ite	ne
 8007150:	230a      	movne	r3, #10
 8007152:	2308      	moveq	r3, #8
 8007154:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8007158:	2600      	movs	r6, #0
 800715a:	fbb8 f8f3 	udiv	r8, r8, r3
 800715e:	fb03 f908 	mul.w	r9, r3, r8
 8007162:	ea6f 0909 	mvn.w	r9, r9
 8007166:	4630      	mov	r0, r6
 8007168:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800716c:	f1bc 0f09 	cmp.w	ip, #9
 8007170:	d810      	bhi.n	8007194 <_strtoul_l.isra.0+0x94>
 8007172:	4664      	mov	r4, ip
 8007174:	42a3      	cmp	r3, r4
 8007176:	dd1e      	ble.n	80071b6 <_strtoul_l.isra.0+0xb6>
 8007178:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800717c:	d007      	beq.n	800718e <_strtoul_l.isra.0+0x8e>
 800717e:	4580      	cmp	r8, r0
 8007180:	d316      	bcc.n	80071b0 <_strtoul_l.isra.0+0xb0>
 8007182:	d101      	bne.n	8007188 <_strtoul_l.isra.0+0x88>
 8007184:	45a1      	cmp	r9, r4
 8007186:	db13      	blt.n	80071b0 <_strtoul_l.isra.0+0xb0>
 8007188:	fb00 4003 	mla	r0, r0, r3, r4
 800718c:	2601      	movs	r6, #1
 800718e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007192:	e7e9      	b.n	8007168 <_strtoul_l.isra.0+0x68>
 8007194:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007198:	f1bc 0f19 	cmp.w	ip, #25
 800719c:	d801      	bhi.n	80071a2 <_strtoul_l.isra.0+0xa2>
 800719e:	3c37      	subs	r4, #55	@ 0x37
 80071a0:	e7e8      	b.n	8007174 <_strtoul_l.isra.0+0x74>
 80071a2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80071a6:	f1bc 0f19 	cmp.w	ip, #25
 80071aa:	d804      	bhi.n	80071b6 <_strtoul_l.isra.0+0xb6>
 80071ac:	3c57      	subs	r4, #87	@ 0x57
 80071ae:	e7e1      	b.n	8007174 <_strtoul_l.isra.0+0x74>
 80071b0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80071b4:	e7eb      	b.n	800718e <_strtoul_l.isra.0+0x8e>
 80071b6:	1c73      	adds	r3, r6, #1
 80071b8:	d106      	bne.n	80071c8 <_strtoul_l.isra.0+0xc8>
 80071ba:	2322      	movs	r3, #34	@ 0x22
 80071bc:	f8ce 3000 	str.w	r3, [lr]
 80071c0:	4630      	mov	r0, r6
 80071c2:	b932      	cbnz	r2, 80071d2 <_strtoul_l.isra.0+0xd2>
 80071c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071c8:	b107      	cbz	r7, 80071cc <_strtoul_l.isra.0+0xcc>
 80071ca:	4240      	negs	r0, r0
 80071cc:	2a00      	cmp	r2, #0
 80071ce:	d0f9      	beq.n	80071c4 <_strtoul_l.isra.0+0xc4>
 80071d0:	b106      	cbz	r6, 80071d4 <_strtoul_l.isra.0+0xd4>
 80071d2:	1e69      	subs	r1, r5, #1
 80071d4:	6011      	str	r1, [r2, #0]
 80071d6:	e7f5      	b.n	80071c4 <_strtoul_l.isra.0+0xc4>
 80071d8:	08007c9d 	.word	0x08007c9d

080071dc <_strtoul_r>:
 80071dc:	f7ff bf90 	b.w	8007100 <_strtoul_l.isra.0>

080071e0 <_malloc_usable_size_r>:
 80071e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071e4:	1f18      	subs	r0, r3, #4
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	bfbc      	itt	lt
 80071ea:	580b      	ldrlt	r3, [r1, r0]
 80071ec:	18c0      	addlt	r0, r0, r3
 80071ee:	4770      	bx	lr

080071f0 <_init>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	bf00      	nop
 80071f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f6:	bc08      	pop	{r3}
 80071f8:	469e      	mov	lr, r3
 80071fa:	4770      	bx	lr

080071fc <_fini>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	bf00      	nop
 8007200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007202:	bc08      	pop	{r3}
 8007204:	469e      	mov	lr, r3
 8007206:	4770      	bx	lr
