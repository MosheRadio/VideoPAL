
VideoStm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .screen       00002760  20000000  20000000  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006d6c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a54  08006f4c  08006f4c  00007f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080079a0  080079a0  0005cc00  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  080079a0  080079a0  000089a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080079a8  080079a8  0005cc00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080079a8  080079a8  000089a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  080079ac  080079ac  000089ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00001568  20002760  080079b0  00009760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000428  20003cc8  08008f18  0000acc8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200040f0  08008f18  0000b0f0  2**0
                  ALLOC
 12 .screenBB     0004ec00  22000000  22000000  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 00000030  00000000  00000000  0005cc00  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e921  00000000  00000000  0005cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000027de  00000000  00000000  0006b551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fd0  00000000  00000000  0006dd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002595f  00000000  00000000  0006ed00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011210  00000000  00000000  0009465f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f83ef  00000000  00000000  000a586f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019dc5e  2**0
                  CONTENTS, READONLY
 21 .debug_rnglists 00000c3f  00000000  00000000  0019dca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004780  00000000  00000000  0019e8e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004d  00000000  00000000  001a3060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20003cc8 	.word	0x20003cc8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006f34 	.word	0x08006f34

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20003ccc 	.word	0x20003ccc
 800021c:	08006f34 	.word	0x08006f34

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <gdiBitBlt>:
		h			Bitmap height, in pixels
		bm			Pointer to the bitmap start position

	return			none
*/
void gdiBitBlt(PGDI_RECT prc, int16_t x, int16_t y, int16_t w, int16_t h, pBMP bm) {
 80002d0:	b490      	push	{r4, r7}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	4608      	mov	r0, r1
 80002da:	4611      	mov	r1, r2
 80002dc:	461a      	mov	r2, r3
 80002de:	4603      	mov	r3, r0
 80002e0:	817b      	strh	r3, [r7, #10]
 80002e2:	460b      	mov	r3, r1
 80002e4:	813b      	strh	r3, [r7, #8]
 80002e6:	4613      	mov	r3, r2
 80002e8:	80fb      	strh	r3, [r7, #6]
int16_t todo;
uint16_t alignment;

//	Calculate clipping region

	if (prc != NULL) {
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d00f      	beq.n	8000310 <gdiBitBlt+0x40>
		x += prc->x;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002f6:	b29a      	uxth	r2, r3
 80002f8:	897b      	ldrh	r3, [r7, #10]
 80002fa:	4413      	add	r3, r2
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	817b      	strh	r3, [r7, #10]
		y += prc->y;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000306:	b29a      	uxth	r2, r3
 8000308:	893b      	ldrh	r3, [r7, #8]
 800030a:	4413      	add	r3, r2
 800030c:	b29b      	uxth	r3, r3
 800030e:	813b      	strh	r3, [r7, #8]
//??		w = min(prc->w, VID_PIXELS_X-x);	// clip X
//??		h = min(prc->w, VID_PIXELS_Y-y);	// clip Y
	}
	alignment = x & 0b0000000000001111;
 8000310:	897b      	ldrh	r3, [r7, #10]
 8000312:	f003 030f 	and.w	r3, r3, #15
 8000316:	82bb      	strh	r3, [r7, #20]
	for(;--h >= 0; y++) {
 8000318:	e2cc      	b.n	80008b4 <gdiBitBlt+0x5e4>
		for (todo = w; todo>0;) {
 800031a:	88fb      	ldrh	r3, [r7, #6]
 800031c:	82fb      	strh	r3, [r7, #22]
 800031e:	e2be      	b.n	800089e <gdiBitBlt+0x5ce>
			if (todo >= 9) {
 8000320:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000324:	2b08      	cmp	r3, #8
 8000326:	dd2d      	ble.n	8000384 <gdiBitBlt+0xb4>
				bitmask.word = (todo >= 16) ?
									0xFFFF		<< (16-alignment):
 8000328:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800032c:	2b0f      	cmp	r3, #15
 800032e:	dd08      	ble.n	8000342 <gdiBitBlt+0x72>
 8000330:	8abb      	ldrh	r3, [r7, #20]
 8000332:	f1c3 0310 	rsb	r3, r3, #16
 8000336:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	461a      	mov	r2, r3
 8000340:	e00c      	b.n	800035c <gdiBitBlt+0x8c>
						masktable[todo-1]		<< (16-alignment);
 8000342:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000346:	3b01      	subs	r3, #1
 8000348:	4a79      	ldr	r2, [pc, #484]	@ (8000530 <gdiBitBlt+0x260>)
 800034a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800034e:	461a      	mov	r2, r3
 8000350:	8abb      	ldrh	r3, [r7, #20]
 8000352:	f1c3 0310 	rsb	r3, r3, #16
 8000356:	fa02 f303 	lsl.w	r3, r2, r3
									0xFFFF		<< (16-alignment):
 800035a:	461a      	mov	r2, r3
				bitmask.word = (todo >= 16) ?
 800035c:	4b75      	ldr	r3, [pc, #468]	@ (8000534 <gdiBitBlt+0x264>)
 800035e:	601a      	str	r2, [r3, #0]
				pattern.word = *bm.halfwords++	<< (16-alignment);
 8000360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000362:	1c9a      	adds	r2, r3, #2
 8000364:	627a      	str	r2, [r7, #36]	@ 0x24
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	461a      	mov	r2, r3
 800036a:	8abb      	ldrh	r3, [r7, #20]
 800036c:	f1c3 0310 	rsb	r3, r3, #16
 8000370:	fa02 f303 	lsl.w	r3, r2, r3
 8000374:	461a      	mov	r2, r3
 8000376:	4b70      	ldr	r3, [pc, #448]	@ (8000538 <gdiBitBlt+0x268>)
 8000378:	601a      	str	r2, [r3, #0]
				todo -= 16;
 800037a:	8afb      	ldrh	r3, [r7, #22]
 800037c:	3b10      	subs	r3, #16
 800037e:	b29b      	uxth	r3, r3
 8000380:	82fb      	strh	r3, [r7, #22]
 8000382:	e01f      	b.n	80003c4 <gdiBitBlt+0xf4>
			} else {
				bitmask.word = masktable[todo-1] << (16-alignment);
 8000384:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000388:	3b01      	subs	r3, #1
 800038a:	4a69      	ldr	r2, [pc, #420]	@ (8000530 <gdiBitBlt+0x260>)
 800038c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000390:	461a      	mov	r2, r3
 8000392:	8abb      	ldrh	r3, [r7, #20]
 8000394:	f1c3 0310 	rsb	r3, r3, #16
 8000398:	fa02 f303 	lsl.w	r3, r2, r3
 800039c:	461a      	mov	r2, r3
 800039e:	4b65      	ldr	r3, [pc, #404]	@ (8000534 <gdiBitBlt+0x264>)
 80003a0:	601a      	str	r2, [r3, #0]
				pattern.word = *bm.bytesinROM++  << (24-alignment);
 80003a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003a4:	1c5a      	adds	r2, r3, #1
 80003a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	461a      	mov	r2, r3
 80003ac:	8abb      	ldrh	r3, [r7, #20]
 80003ae:	f1c3 0318 	rsb	r3, r3, #24
 80003b2:	fa02 f303 	lsl.w	r3, r2, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	4b5f      	ldr	r3, [pc, #380]	@ (8000538 <gdiBitBlt+0x268>)
 80003ba:	601a      	str	r2, [r3, #0]
				todo -= 8;
 80003bc:	8afb      	ldrh	r3, [r7, #22]
 80003be:	3b08      	subs	r3, #8
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	82fb      	strh	r3, [r7, #22]
			}
			switch(rop) {
 80003c4:	4b5d      	ldr	r3, [pc, #372]	@ (800053c <gdiBitBlt+0x26c>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b04      	cmp	r3, #4
 80003ca:	f200 8268 	bhi.w	800089e <gdiBitBlt+0x5ce>
 80003ce:	a201      	add	r2, pc, #4	@ (adr r2, 80003d4 <gdiBitBlt+0x104>)
 80003d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d4:	080003e9 	.word	0x080003e9
 80003d8:	08000545 	.word	0x08000545
 80003dc:	080007cd 	.word	0x080007cd
 80003e0:	0800068d 	.word	0x0800068d
 80003e4:	0800072d 	.word	0x0800072d
				case GDI_ROP_COPY:
					screen[y][x>>4] &= ~bitmask.halfword[1];
 80003e8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80003ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80003f0:	111b      	asrs	r3, r3, #4
 80003f2:	b21b      	sxth	r3, r3
 80003f4:	4618      	mov	r0, r3
 80003f6:	4952      	ldr	r1, [pc, #328]	@ (8000540 <gdiBitBlt+0x270>)
 80003f8:	4613      	mov	r3, r2
 80003fa:	005b      	lsls	r3, r3, #1
 80003fc:	4413      	add	r3, r2
 80003fe:	00da      	lsls	r2, r3, #3
 8000400:	1ad2      	subs	r2, r2, r3
 8000402:	1813      	adds	r3, r2, r0
 8000404:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000408:	b21a      	sxth	r2, r3
 800040a:	4b4a      	ldr	r3, [pc, #296]	@ (8000534 <gdiBitBlt+0x264>)
 800040c:	885b      	ldrh	r3, [r3, #2]
 800040e:	b21b      	sxth	r3, r3
 8000410:	43db      	mvns	r3, r3
 8000412:	b21b      	sxth	r3, r3
 8000414:	4013      	ands	r3, r2
 8000416:	b219      	sxth	r1, r3
 8000418:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800041c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000420:	111b      	asrs	r3, r3, #4
 8000422:	b21b      	sxth	r3, r3
 8000424:	461c      	mov	r4, r3
 8000426:	b288      	uxth	r0, r1
 8000428:	4945      	ldr	r1, [pc, #276]	@ (8000540 <gdiBitBlt+0x270>)
 800042a:	4613      	mov	r3, r2
 800042c:	005b      	lsls	r3, r3, #1
 800042e:	4413      	add	r3, r2
 8000430:	00da      	lsls	r2, r3, #3
 8000432:	1ad2      	subs	r2, r2, r3
 8000434:	1913      	adds	r3, r2, r4
 8000436:	4602      	mov	r2, r0
 8000438:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					screen[y][x>>4] |=  pattern.halfword[1];
 800043c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000440:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000444:	111b      	asrs	r3, r3, #4
 8000446:	b21b      	sxth	r3, r3
 8000448:	4618      	mov	r0, r3
 800044a:	493d      	ldr	r1, [pc, #244]	@ (8000540 <gdiBitBlt+0x270>)
 800044c:	4613      	mov	r3, r2
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	4413      	add	r3, r2
 8000452:	00da      	lsls	r2, r3, #3
 8000454:	1ad2      	subs	r2, r2, r3
 8000456:	1813      	adds	r3, r2, r0
 8000458:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800045c:	4b36      	ldr	r3, [pc, #216]	@ (8000538 <gdiBitBlt+0x268>)
 800045e:	885b      	ldrh	r3, [r3, #2]
 8000460:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000464:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000468:	1100      	asrs	r0, r0, #4
 800046a:	b200      	sxth	r0, r0
 800046c:	4604      	mov	r4, r0
 800046e:	430b      	orrs	r3, r1
 8000470:	b298      	uxth	r0, r3
 8000472:	4933      	ldr	r1, [pc, #204]	@ (8000540 <gdiBitBlt+0x270>)
 8000474:	4613      	mov	r3, r2
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	4413      	add	r3, r2
 800047a:	00da      	lsls	r2, r3, #3
 800047c:	1ad2      	subs	r2, r2, r3
 800047e:	1913      	adds	r3, r2, r4
 8000480:	4602      	mov	r2, r0
 8000482:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (bitmask.halfword[0] != 0) {
 8000486:	4b2b      	ldr	r3, [pc, #172]	@ (8000534 <gdiBitBlt+0x264>)
 8000488:	881b      	ldrh	r3, [r3, #0]
 800048a:	2b00      	cmp	r3, #0
 800048c:	f000 81fe 	beq.w	800088c <gdiBitBlt+0x5bc>
						screen[y][(x>>4)+1] &= ~bitmask.halfword[0];
 8000490:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000494:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000498:	111b      	asrs	r3, r3, #4
 800049a:	b21b      	sxth	r3, r3
 800049c:	1c59      	adds	r1, r3, #1
 800049e:	4828      	ldr	r0, [pc, #160]	@ (8000540 <gdiBitBlt+0x270>)
 80004a0:	4613      	mov	r3, r2
 80004a2:	005b      	lsls	r3, r3, #1
 80004a4:	4413      	add	r3, r2
 80004a6:	00da      	lsls	r2, r3, #3
 80004a8:	1ad2      	subs	r2, r2, r3
 80004aa:	1853      	adds	r3, r2, r1
 80004ac:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80004b0:	b21a      	sxth	r2, r3
 80004b2:	4b20      	ldr	r3, [pc, #128]	@ (8000534 <gdiBitBlt+0x264>)
 80004b4:	881b      	ldrh	r3, [r3, #0]
 80004b6:	b21b      	sxth	r3, r3
 80004b8:	43db      	mvns	r3, r3
 80004ba:	b21b      	sxth	r3, r3
 80004bc:	4013      	ands	r3, r2
 80004be:	b218      	sxth	r0, r3
 80004c0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004c8:	111b      	asrs	r3, r3, #4
 80004ca:	b21b      	sxth	r3, r3
 80004cc:	1c59      	adds	r1, r3, #1
 80004ce:	b284      	uxth	r4, r0
 80004d0:	481b      	ldr	r0, [pc, #108]	@ (8000540 <gdiBitBlt+0x270>)
 80004d2:	4613      	mov	r3, r2
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	4413      	add	r3, r2
 80004d8:	00da      	lsls	r2, r3, #3
 80004da:	1ad2      	subs	r2, r2, r3
 80004dc:	1853      	adds	r3, r2, r1
 80004de:	4622      	mov	r2, r4
 80004e0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						screen[y][(x>>4)+1] |=  pattern.halfword[0];
 80004e4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004ec:	111b      	asrs	r3, r3, #4
 80004ee:	b21b      	sxth	r3, r3
 80004f0:	1c59      	adds	r1, r3, #1
 80004f2:	4813      	ldr	r0, [pc, #76]	@ (8000540 <gdiBitBlt+0x270>)
 80004f4:	4613      	mov	r3, r2
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	4413      	add	r3, r2
 80004fa:	00da      	lsls	r2, r3, #3
 80004fc:	1ad2      	subs	r2, r2, r3
 80004fe:	1853      	adds	r3, r2, r1
 8000500:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000504:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <gdiBitBlt+0x268>)
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800050c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000510:	1109      	asrs	r1, r1, #4
 8000512:	b209      	sxth	r1, r1
 8000514:	3101      	adds	r1, #1
 8000516:	4303      	orrs	r3, r0
 8000518:	b29c      	uxth	r4, r3
 800051a:	4809      	ldr	r0, [pc, #36]	@ (8000540 <gdiBitBlt+0x270>)
 800051c:	4613      	mov	r3, r2
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	4413      	add	r3, r2
 8000522:	00da      	lsls	r2, r3, #3
 8000524:	1ad2      	subs	r2, r2, r3
 8000526:	1853      	adds	r3, r2, r1
 8000528:	4622      	mov	r2, r4
 800052a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					}
					break;
 800052e:	e1ad      	b.n	800088c <gdiBitBlt+0x5bc>
 8000530:	08007330 	.word	0x08007330
 8000534:	20003ce8 	.word	0x20003ce8
 8000538:	20003ce4 	.word	0x20003ce4
 800053c:	20002760 	.word	0x20002760
 8000540:	20000000 	.word	0x20000000
				case GDI_ROP_BONW:	// inverse video
					screen[y][x>>4] |=  bitmask.halfword[1];
 8000544:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000548:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800054c:	111b      	asrs	r3, r3, #4
 800054e:	b21b      	sxth	r3, r3
 8000550:	4618      	mov	r0, r3
 8000552:	49cb      	ldr	r1, [pc, #812]	@ (8000880 <gdiBitBlt+0x5b0>)
 8000554:	4613      	mov	r3, r2
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	4413      	add	r3, r2
 800055a:	00da      	lsls	r2, r3, #3
 800055c:	1ad2      	subs	r2, r2, r3
 800055e:	1813      	adds	r3, r2, r0
 8000560:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000564:	4bc7      	ldr	r3, [pc, #796]	@ (8000884 <gdiBitBlt+0x5b4>)
 8000566:	885b      	ldrh	r3, [r3, #2]
 8000568:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800056c:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000570:	1100      	asrs	r0, r0, #4
 8000572:	b200      	sxth	r0, r0
 8000574:	4604      	mov	r4, r0
 8000576:	430b      	orrs	r3, r1
 8000578:	b298      	uxth	r0, r3
 800057a:	49c1      	ldr	r1, [pc, #772]	@ (8000880 <gdiBitBlt+0x5b0>)
 800057c:	4613      	mov	r3, r2
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	4413      	add	r3, r2
 8000582:	00da      	lsls	r2, r3, #3
 8000584:	1ad2      	subs	r2, r2, r3
 8000586:	1913      	adds	r3, r2, r4
 8000588:	4602      	mov	r2, r0
 800058a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					screen[y][x>>4] &= ~pattern.halfword[1];
 800058e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000592:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000596:	111b      	asrs	r3, r3, #4
 8000598:	b21b      	sxth	r3, r3
 800059a:	4618      	mov	r0, r3
 800059c:	49b8      	ldr	r1, [pc, #736]	@ (8000880 <gdiBitBlt+0x5b0>)
 800059e:	4613      	mov	r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4413      	add	r3, r2
 80005a4:	00da      	lsls	r2, r3, #3
 80005a6:	1ad2      	subs	r2, r2, r3
 80005a8:	1813      	adds	r3, r2, r0
 80005aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	4bb5      	ldr	r3, [pc, #724]	@ (8000888 <gdiBitBlt+0x5b8>)
 80005b2:	885b      	ldrh	r3, [r3, #2]
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	43db      	mvns	r3, r3
 80005b8:	b21b      	sxth	r3, r3
 80005ba:	4013      	ands	r3, r2
 80005bc:	b219      	sxth	r1, r3
 80005be:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005c6:	111b      	asrs	r3, r3, #4
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	461c      	mov	r4, r3
 80005cc:	b288      	uxth	r0, r1
 80005ce:	49ac      	ldr	r1, [pc, #688]	@ (8000880 <gdiBitBlt+0x5b0>)
 80005d0:	4613      	mov	r3, r2
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	4413      	add	r3, r2
 80005d6:	00da      	lsls	r2, r3, #3
 80005d8:	1ad2      	subs	r2, r2, r3
 80005da:	1913      	adds	r3, r2, r4
 80005dc:	4602      	mov	r2, r0
 80005de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (bitmask.halfword[0] != 0) {
 80005e2:	4ba8      	ldr	r3, [pc, #672]	@ (8000884 <gdiBitBlt+0x5b4>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	f000 8152 	beq.w	8000890 <gdiBitBlt+0x5c0>
						screen[y][(x>>4)+1] |=  bitmask.halfword[0];
 80005ec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005f4:	111b      	asrs	r3, r3, #4
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	1c59      	adds	r1, r3, #1
 80005fa:	48a1      	ldr	r0, [pc, #644]	@ (8000880 <gdiBitBlt+0x5b0>)
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	00da      	lsls	r2, r3, #3
 8000604:	1ad2      	subs	r2, r2, r3
 8000606:	1853      	adds	r3, r2, r1
 8000608:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 800060c:	4b9d      	ldr	r3, [pc, #628]	@ (8000884 <gdiBitBlt+0x5b4>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000614:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000618:	1109      	asrs	r1, r1, #4
 800061a:	b209      	sxth	r1, r1
 800061c:	3101      	adds	r1, #1
 800061e:	4303      	orrs	r3, r0
 8000620:	b29c      	uxth	r4, r3
 8000622:	4897      	ldr	r0, [pc, #604]	@ (8000880 <gdiBitBlt+0x5b0>)
 8000624:	4613      	mov	r3, r2
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	4413      	add	r3, r2
 800062a:	00da      	lsls	r2, r3, #3
 800062c:	1ad2      	subs	r2, r2, r3
 800062e:	1853      	adds	r3, r2, r1
 8000630:	4622      	mov	r2, r4
 8000632:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						screen[y][(x>>4)+1] &= ~pattern.halfword[0];
 8000636:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800063a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800063e:	111b      	asrs	r3, r3, #4
 8000640:	b21b      	sxth	r3, r3
 8000642:	1c59      	adds	r1, r3, #1
 8000644:	488e      	ldr	r0, [pc, #568]	@ (8000880 <gdiBitBlt+0x5b0>)
 8000646:	4613      	mov	r3, r2
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	4413      	add	r3, r2
 800064c:	00da      	lsls	r2, r3, #3
 800064e:	1ad2      	subs	r2, r2, r3
 8000650:	1853      	adds	r3, r2, r1
 8000652:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000656:	b21a      	sxth	r2, r3
 8000658:	4b8b      	ldr	r3, [pc, #556]	@ (8000888 <gdiBitBlt+0x5b8>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	b21b      	sxth	r3, r3
 800065e:	43db      	mvns	r3, r3
 8000660:	b21b      	sxth	r3, r3
 8000662:	4013      	ands	r3, r2
 8000664:	b218      	sxth	r0, r3
 8000666:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800066a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800066e:	111b      	asrs	r3, r3, #4
 8000670:	b21b      	sxth	r3, r3
 8000672:	1c59      	adds	r1, r3, #1
 8000674:	b284      	uxth	r4, r0
 8000676:	4882      	ldr	r0, [pc, #520]	@ (8000880 <gdiBitBlt+0x5b0>)
 8000678:	4613      	mov	r3, r2
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	4413      	add	r3, r2
 800067e:	00da      	lsls	r2, r3, #3
 8000680:	1ad2      	subs	r2, r2, r3
 8000682:	1853      	adds	r3, r2, r1
 8000684:	4622      	mov	r2, r4
 8000686:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					}
					break;
 800068a:	e101      	b.n	8000890 <gdiBitBlt+0x5c0>
				case GDI_ROP_XOR:
					screen[y][x>>4] ^= pattern.halfword[1];
 800068c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000690:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000694:	111b      	asrs	r3, r3, #4
 8000696:	b21b      	sxth	r3, r3
 8000698:	4618      	mov	r0, r3
 800069a:	4979      	ldr	r1, [pc, #484]	@ (8000880 <gdiBitBlt+0x5b0>)
 800069c:	4613      	mov	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	00da      	lsls	r2, r3, #3
 80006a4:	1ad2      	subs	r2, r2, r3
 80006a6:	1813      	adds	r3, r2, r0
 80006a8:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80006ac:	4b76      	ldr	r3, [pc, #472]	@ (8000888 <gdiBitBlt+0x5b8>)
 80006ae:	885b      	ldrh	r3, [r3, #2]
 80006b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006b4:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80006b8:	1100      	asrs	r0, r0, #4
 80006ba:	b200      	sxth	r0, r0
 80006bc:	4604      	mov	r4, r0
 80006be:	404b      	eors	r3, r1
 80006c0:	b298      	uxth	r0, r3
 80006c2:	496f      	ldr	r1, [pc, #444]	@ (8000880 <gdiBitBlt+0x5b0>)
 80006c4:	4613      	mov	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4413      	add	r3, r2
 80006ca:	00da      	lsls	r2, r3, #3
 80006cc:	1ad2      	subs	r2, r2, r3
 80006ce:	1913      	adds	r3, r2, r4
 80006d0:	4602      	mov	r2, r0
 80006d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 80006d6:	4b6c      	ldr	r3, [pc, #432]	@ (8000888 <gdiBitBlt+0x5b8>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	f000 80da 	beq.w	8000894 <gdiBitBlt+0x5c4>
						screen[y][(x>>4)+1] ^= pattern.halfword[0];
 80006e0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80006e8:	111b      	asrs	r3, r3, #4
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	1c59      	adds	r1, r3, #1
 80006ee:	4864      	ldr	r0, [pc, #400]	@ (8000880 <gdiBitBlt+0x5b0>)
 80006f0:	4613      	mov	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	00da      	lsls	r2, r3, #3
 80006f8:	1ad2      	subs	r2, r2, r3
 80006fa:	1853      	adds	r3, r2, r1
 80006fc:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000700:	4b61      	ldr	r3, [pc, #388]	@ (8000888 <gdiBitBlt+0x5b8>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000708:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800070c:	1109      	asrs	r1, r1, #4
 800070e:	b209      	sxth	r1, r1
 8000710:	3101      	adds	r1, #1
 8000712:	4043      	eors	r3, r0
 8000714:	b29c      	uxth	r4, r3
 8000716:	485a      	ldr	r0, [pc, #360]	@ (8000880 <gdiBitBlt+0x5b0>)
 8000718:	4613      	mov	r3, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	4413      	add	r3, r2
 800071e:	00da      	lsls	r2, r3, #3
 8000720:	1ad2      	subs	r2, r2, r3
 8000722:	1853      	adds	r3, r2, r1
 8000724:	4622      	mov	r2, r4
 8000726:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 800072a:	e0b3      	b.n	8000894 <gdiBitBlt+0x5c4>
				case GDI_ROP_OR:
					screen[y][x>>4] |= pattern.halfword[1];
 800072c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000730:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000734:	111b      	asrs	r3, r3, #4
 8000736:	b21b      	sxth	r3, r3
 8000738:	4618      	mov	r0, r3
 800073a:	4951      	ldr	r1, [pc, #324]	@ (8000880 <gdiBitBlt+0x5b0>)
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	00da      	lsls	r2, r3, #3
 8000744:	1ad2      	subs	r2, r2, r3
 8000746:	1813      	adds	r3, r2, r0
 8000748:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800074c:	4b4e      	ldr	r3, [pc, #312]	@ (8000888 <gdiBitBlt+0x5b8>)
 800074e:	885b      	ldrh	r3, [r3, #2]
 8000750:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000754:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000758:	1100      	asrs	r0, r0, #4
 800075a:	b200      	sxth	r0, r0
 800075c:	4604      	mov	r4, r0
 800075e:	430b      	orrs	r3, r1
 8000760:	b298      	uxth	r0, r3
 8000762:	4947      	ldr	r1, [pc, #284]	@ (8000880 <gdiBitBlt+0x5b0>)
 8000764:	4613      	mov	r3, r2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	4413      	add	r3, r2
 800076a:	00da      	lsls	r2, r3, #3
 800076c:	1ad2      	subs	r2, r2, r3
 800076e:	1913      	adds	r3, r2, r4
 8000770:	4602      	mov	r2, r0
 8000772:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 8000776:	4b44      	ldr	r3, [pc, #272]	@ (8000888 <gdiBitBlt+0x5b8>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	f000 808c 	beq.w	8000898 <gdiBitBlt+0x5c8>
						screen[y][(x>>4)+1] |= pattern.halfword[0];
 8000780:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000784:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000788:	111b      	asrs	r3, r3, #4
 800078a:	b21b      	sxth	r3, r3
 800078c:	1c59      	adds	r1, r3, #1
 800078e:	483c      	ldr	r0, [pc, #240]	@ (8000880 <gdiBitBlt+0x5b0>)
 8000790:	4613      	mov	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4413      	add	r3, r2
 8000796:	00da      	lsls	r2, r3, #3
 8000798:	1ad2      	subs	r2, r2, r3
 800079a:	1853      	adds	r3, r2, r1
 800079c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80007a0:	4b39      	ldr	r3, [pc, #228]	@ (8000888 <gdiBitBlt+0x5b8>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80007a8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80007ac:	1109      	asrs	r1, r1, #4
 80007ae:	b209      	sxth	r1, r1
 80007b0:	3101      	adds	r1, #1
 80007b2:	4303      	orrs	r3, r0
 80007b4:	b29c      	uxth	r4, r3
 80007b6:	4832      	ldr	r0, [pc, #200]	@ (8000880 <gdiBitBlt+0x5b0>)
 80007b8:	4613      	mov	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	4413      	add	r3, r2
 80007be:	00da      	lsls	r2, r3, #3
 80007c0:	1ad2      	subs	r2, r2, r3
 80007c2:	1853      	adds	r3, r2, r1
 80007c4:	4622      	mov	r2, r4
 80007c6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 80007ca:	e065      	b.n	8000898 <gdiBitBlt+0x5c8>
				case GDI_ROP_NAND:
					screen[y][x>>4] &= ~pattern.halfword[1];
 80007cc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80007d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007d4:	111b      	asrs	r3, r3, #4
 80007d6:	b21b      	sxth	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	4929      	ldr	r1, [pc, #164]	@ (8000880 <gdiBitBlt+0x5b0>)
 80007dc:	4613      	mov	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	4413      	add	r3, r2
 80007e2:	00da      	lsls	r2, r3, #3
 80007e4:	1ad2      	subs	r2, r2, r3
 80007e6:	1813      	adds	r3, r2, r0
 80007e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007ec:	b21a      	sxth	r2, r3
 80007ee:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <gdiBitBlt+0x5b8>)
 80007f0:	885b      	ldrh	r3, [r3, #2]
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	43db      	mvns	r3, r3
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4013      	ands	r3, r2
 80007fa:	b219      	sxth	r1, r3
 80007fc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000800:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000804:	111b      	asrs	r3, r3, #4
 8000806:	b21b      	sxth	r3, r3
 8000808:	461c      	mov	r4, r3
 800080a:	b288      	uxth	r0, r1
 800080c:	491c      	ldr	r1, [pc, #112]	@ (8000880 <gdiBitBlt+0x5b0>)
 800080e:	4613      	mov	r3, r2
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	4413      	add	r3, r2
 8000814:	00da      	lsls	r2, r3, #3
 8000816:	1ad2      	subs	r2, r2, r3
 8000818:	1913      	adds	r3, r2, r4
 800081a:	4602      	mov	r2, r0
 800081c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <gdiBitBlt+0x5b8>)
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d039      	beq.n	800089c <gdiBitBlt+0x5cc>
						screen[y][(x>>4)+1] &= ~pattern.halfword[0];
 8000828:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800082c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000830:	111b      	asrs	r3, r3, #4
 8000832:	b21b      	sxth	r3, r3
 8000834:	1c59      	adds	r1, r3, #1
 8000836:	4812      	ldr	r0, [pc, #72]	@ (8000880 <gdiBitBlt+0x5b0>)
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	00da      	lsls	r2, r3, #3
 8000840:	1ad2      	subs	r2, r2, r3
 8000842:	1853      	adds	r3, r2, r1
 8000844:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000848:	b21a      	sxth	r2, r3
 800084a:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <gdiBitBlt+0x5b8>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	b21b      	sxth	r3, r3
 8000850:	43db      	mvns	r3, r3
 8000852:	b21b      	sxth	r3, r3
 8000854:	4013      	ands	r3, r2
 8000856:	b218      	sxth	r0, r3
 8000858:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800085c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000860:	111b      	asrs	r3, r3, #4
 8000862:	b21b      	sxth	r3, r3
 8000864:	1c59      	adds	r1, r3, #1
 8000866:	b284      	uxth	r4, r0
 8000868:	4805      	ldr	r0, [pc, #20]	@ (8000880 <gdiBitBlt+0x5b0>)
 800086a:	4613      	mov	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	4413      	add	r3, r2
 8000870:	00da      	lsls	r2, r3, #3
 8000872:	1ad2      	subs	r2, r2, r3
 8000874:	1853      	adds	r3, r2, r1
 8000876:	4622      	mov	r2, r4
 8000878:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 800087c:	e00e      	b.n	800089c <gdiBitBlt+0x5cc>
 800087e:	bf00      	nop
 8000880:	20000000 	.word	0x20000000
 8000884:	20003ce8 	.word	0x20003ce8
 8000888:	20003ce4 	.word	0x20003ce4
					break;
 800088c:	bf00      	nop
 800088e:	e006      	b.n	800089e <gdiBitBlt+0x5ce>
					break;
 8000890:	bf00      	nop
 8000892:	e004      	b.n	800089e <gdiBitBlt+0x5ce>
					break;
 8000894:	bf00      	nop
 8000896:	e002      	b.n	800089e <gdiBitBlt+0x5ce>
					break;
 8000898:	bf00      	nop
 800089a:	e000      	b.n	800089e <gdiBitBlt+0x5ce>
					break;
 800089c:	bf00      	nop
		for (todo = w; todo>0;) {
 800089e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f73f ad3c 	bgt.w	8000320 <gdiBitBlt+0x50>
	for(;--h >= 0; y++) {
 80008a8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	3301      	adds	r3, #1
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	813b      	strh	r3, [r7, #8]
 80008b4:	8c3b      	ldrh	r3, [r7, #32]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	843b      	strh	r3, [r7, #32]
 80008bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	f6bf ad2a 	bge.w	800031a <gdiBitBlt+0x4a>
			}
		}
	}
}
 80008c6:	bf00      	nop
 80008c8:	bf00      	nop
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc90      	pop	{r4, r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <gdiDrawTextEx>:
		ptext		Pointer to text

	return			none
*/
void gdiDrawTextEx(int16_t x, int16_t y, char *ptext)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af02      	add	r7, sp, #8
 80008da:	4603      	mov	r3, r0
 80008dc:	603a      	str	r2, [r7, #0]
 80008de:	80fb      	strh	r3, [r7, #6]
 80008e0:	460b      	mov	r3, r1
 80008e2:	80bb      	strh	r3, [r7, #4]

	char		c;

	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH)
 80008e4:	e01a      	b.n	800091c <gdiDrawTextEx+0x48>
		if (c >= GDI_SYSFONT_OFFSET)
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	2b1f      	cmp	r3, #31
 80008ea:	d913      	bls.n	8000914 <gdiDrawTextEx+0x40>
			gdiBitBlt(NULL, x, y, GDI_SYSFONT_WIDTH, GDI_SYSFONT_HEIGHT, (pBMP) gdiSystemFont[c-GDI_SYSFONT_OFFSET]);
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	f1a3 0220 	sub.w	r2, r3, #32
 80008f2:	4613      	mov	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000938 <gdiDrawTextEx+0x64>)
 80008fc:	4413      	add	r3, r2
 80008fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000902:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000906:	9301      	str	r3, [sp, #4]
 8000908:	230a      	movs	r3, #10
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2306      	movs	r3, #6
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff fcde 	bl	80002d0 <gdiBitBlt>
	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH)
 8000914:	88fb      	ldrh	r3, [r7, #6]
 8000916:	3306      	adds	r3, #6
 8000918:	b29b      	uxth	r3, r3
 800091a:	80fb      	strh	r3, [r7, #6]
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	603a      	str	r2, [r7, #0]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	73fb      	strb	r3, [r7, #15]
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1dc      	bne.n	80008e6 <gdiDrawTextEx+0x12>
//	clip here if		if (x >= VID_PIXELS_X - GDI_SYSFONT_WIDTH)
		// else control character handling ...

}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	08006f70 	.word	0x08006f70

0800093c <gdiSetCursor>:
static int cursor_x = 0;
static int cursor_y = 0;

/* Set the pixel cursor position. */
void gdiSetCursor(int x, int y)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
    /* Clamp to the visible area */
    if (x < 0) x = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	da01      	bge.n	8000950 <gdiSetCursor+0x14>
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
    if (y < 0) y = 0;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	da01      	bge.n	800095a <gdiSetCursor+0x1e>
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
    if (x >= VID_PIXELS_X) x = VID_PIXELS_X - GDI_SYSFONT_WIDTH;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 8000960:	d302      	bcc.n	8000968 <gdiSetCursor+0x2c>
 8000962:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8000966:	607b      	str	r3, [r7, #4]
    if (y >= VID_PIXELS_Y) y = VID_PIXELS_Y - GDI_SYSFONT_HEIGHT;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	2bef      	cmp	r3, #239	@ 0xef
 800096c:	dd01      	ble.n	8000972 <gdiSetCursor+0x36>
 800096e:	23e6      	movs	r3, #230	@ 0xe6
 8000970:	603b      	str	r3, [r7, #0]
    cursor_x = x;
 8000972:	4a06      	ldr	r2, [pc, #24]	@ (800098c <gdiSetCursor+0x50>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6013      	str	r3, [r2, #0]
    cursor_y = y;
 8000978:	4a05      	ldr	r2, [pc, #20]	@ (8000990 <gdiSetCursor+0x54>)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	6013      	str	r3, [r2, #0]
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20003cec 	.word	0x20003cec
 8000990:	20003cf0 	.word	0x20003cf0

08000994 <gdiClearScreen>:
    if (y) *y = cursor_y;
}

/* Clear the entire screen and reset the cursor to the top left. */
void gdiClearScreen(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    /* Use the provided video function to clear the frame buffer. */
    vidClearScreen();
 8000998:	f001 f856 	bl	8001a48 <vidClearScreen>
    cursor_x = 0;
 800099c:	4b03      	ldr	r3, [pc, #12]	@ (80009ac <gdiClearScreen+0x18>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
    cursor_y = 0;
 80009a2:	4b03      	ldr	r3, [pc, #12]	@ (80009b0 <gdiClearScreen+0x1c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20003cec 	.word	0x20003cec
 80009b0:	20003cf0 	.word	0x20003cf0

080009b4 <gdiPutChar>:

/* Output a single character at the current cursor position.  Handles
 * carriage return and newline automatically. */
void gdiPutChar(uint8_t ch)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
    switch (ch) {
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	2b0a      	cmp	r3, #10
 80009c2:	d005      	beq.n	80009d0 <gdiPutChar+0x1c>
 80009c4:	2b0d      	cmp	r3, #13
 80009c6:	d113      	bne.n	80009f0 <gdiPutChar+0x3c>
    case '\r':
        /* Carriage return: move to column 0. */
        cursor_x = 0;
 80009c8:	4b20      	ldr	r3, [pc, #128]	@ (8000a4c <gdiPutChar+0x98>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
        return;
 80009ce:	e03a      	b.n	8000a46 <gdiPutChar+0x92>
    case '\n':
        /* Newline: move to next line and column 0. */
        cursor_x = 0;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a4c <gdiPutChar+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
        cursor_y += GDI_SYSFONT_HEIGHT;
 80009d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a50 <gdiPutChar+0x9c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	330a      	adds	r3, #10
 80009dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000a50 <gdiPutChar+0x9c>)
 80009de:	6013      	str	r3, [r2, #0]
        if (cursor_y >= VID_PIXELS_Y) {
 80009e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a50 <gdiPutChar+0x9c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2bef      	cmp	r3, #239	@ 0xef
 80009e6:	dd2d      	ble.n	8000a44 <gdiPutChar+0x90>
            /* Simple scroll-wrap: start at top when bottom is exceeded. */
            cursor_y = 0;
 80009e8:	4b19      	ldr	r3, [pc, #100]	@ (8000a50 <gdiPutChar+0x9c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
        }
        return;
 80009ee:	e029      	b.n	8000a44 <gdiPutChar+0x90>
    default:
        break;
 80009f0:	bf00      	nop
    }
    /* Draw the character using the existing GDI function. */
    char buf[2] = { (char)ch, '\0' };
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	733b      	strb	r3, [r7, #12]
 80009f6:	2300      	movs	r3, #0
 80009f8:	737b      	strb	r3, [r7, #13]
    gdiDrawTextEx(cursor_x, cursor_y, buf);
 80009fa:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <gdiPutChar+0x98>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	b21b      	sxth	r3, r3
 8000a00:	4a13      	ldr	r2, [pc, #76]	@ (8000a50 <gdiPutChar+0x9c>)
 8000a02:	6812      	ldr	r2, [r2, #0]
 8000a04:	b211      	sxth	r1, r2
 8000a06:	f107 020c 	add.w	r2, r7, #12
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff62 	bl	80008d4 <gdiDrawTextEx>
    /* Advance the cursor.  Wrap to the next line if we exceed the width. */
    cursor_x += GDI_SYSFONT_WIDTH;
 8000a10:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <gdiPutChar+0x98>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3306      	adds	r3, #6
 8000a16:	4a0d      	ldr	r2, [pc, #52]	@ (8000a4c <gdiPutChar+0x98>)
 8000a18:	6013      	str	r3, [r2, #0]
    if (cursor_x >= VID_PIXELS_X) {
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <gdiPutChar+0x98>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 8000a22:	d310      	bcc.n	8000a46 <gdiPutChar+0x92>
        cursor_x = 0;
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <gdiPutChar+0x98>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
        cursor_y += GDI_SYSFONT_HEIGHT;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <gdiPutChar+0x9c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	330a      	adds	r3, #10
 8000a30:	4a07      	ldr	r2, [pc, #28]	@ (8000a50 <gdiPutChar+0x9c>)
 8000a32:	6013      	str	r3, [r2, #0]
        if (cursor_y >= VID_PIXELS_Y) {
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <gdiPutChar+0x9c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2bef      	cmp	r3, #239	@ 0xef
 8000a3a:	dd04      	ble.n	8000a46 <gdiPutChar+0x92>
            cursor_y = 0;
 8000a3c:	4b04      	ldr	r3, [pc, #16]	@ (8000a50 <gdiPutChar+0x9c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	e000      	b.n	8000a46 <gdiPutChar+0x92>
        return;
 8000a44:	bf00      	nop
        }
    }
}
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20003cec 	.word	0x20003cec
 8000a50:	20003cf0 	.word	0x20003cf0

08000a54 <parse_csi_number>:

/* Helper: parse numeric prefix of a CSI sequence.  Returns the parsed
 * integer or a default value of 1 if no digits are present. */
static int parse_csi_number(const char *buf, int len)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
    /* Copy into a temporary buffer so we can null‑terminate. */
    char tmp[8] = {0};
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
    int n = (len < (int)sizeof(tmp) - 1) ? len : (int)sizeof(tmp) - 1;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	2b07      	cmp	r3, #7
 8000a6c:	bfa8      	it	ge
 8000a6e:	2307      	movge	r3, #7
 8000a70:	617b      	str	r3, [r7, #20]
    memcpy(tmp, buf, n);
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f005 fd0c 	bl	8006498 <memcpy>
    tmp[n] = '\0';
 8000a80:	f107 0208 	add.w	r2, r7, #8
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	4413      	add	r3, r2
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
    int value = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
    if (tmp[0] == '\0') {
 8000a90:	7a3b      	ldrb	r3, [r7, #8]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d101      	bne.n	8000a9a <parse_csi_number+0x46>
        return 1;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e009      	b.n	8000aae <parse_csi_number+0x5a>
    }
    /* Convert to integer; atoi returns 0 if no digits, default to 1. */
    value = atoi(tmp);
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f005 fc0e 	bl	80062c0 <atoi>
 8000aa4:	6138      	str	r0, [r7, #16]
    return value > 0 ? value : 1;
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	bfb8      	it	lt
 8000aac:	2301      	movlt	r3, #1
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <gdiHandleCSI>:

/* Handle a complete CSI sequence.  The buffer contains everything
 * between the '[' and the final command character. */
void gdiHandleCSI(const char *buf, uint8_t len)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	@ 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	70fb      	strb	r3, [r7, #3]
    if (len == 0) {
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f000 80e5 	beq.w	8000c96 <gdiHandleCSI+0x1de>
        return;
    }
    char cmd = buf[len - 1];
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    switch (cmd) {
 8000ada:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ade:	3b41      	subs	r3, #65	@ 0x41
 8000ae0:	2b25      	cmp	r3, #37	@ 0x25
 8000ae2:	f200 80da 	bhi.w	8000c9a <gdiHandleCSI+0x1e2>
 8000ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8000aec <gdiHandleCSI+0x34>)
 8000ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aec:	08000bbf 	.word	0x08000bbf
 8000af0:	08000bf1 	.word	0x08000bf1
 8000af4:	08000c25 	.word	0x08000c25
 8000af8:	08000c5d 	.word	0x08000c5d
 8000afc:	08000c9b 	.word	0x08000c9b
 8000b00:	08000c9b 	.word	0x08000c9b
 8000b04:	08000c9b 	.word	0x08000c9b
 8000b08:	08000b85 	.word	0x08000b85
 8000b0c:	08000c9b 	.word	0x08000c9b
 8000b10:	08000c91 	.word	0x08000c91
 8000b14:	08000c9b 	.word	0x08000c9b
 8000b18:	08000c9b 	.word	0x08000c9b
 8000b1c:	08000c9b 	.word	0x08000c9b
 8000b20:	08000c9b 	.word	0x08000c9b
 8000b24:	08000c9b 	.word	0x08000c9b
 8000b28:	08000c9b 	.word	0x08000c9b
 8000b2c:	08000c9b 	.word	0x08000c9b
 8000b30:	08000c9b 	.word	0x08000c9b
 8000b34:	08000c9b 	.word	0x08000c9b
 8000b38:	08000c9b 	.word	0x08000c9b
 8000b3c:	08000c9b 	.word	0x08000c9b
 8000b40:	08000c9b 	.word	0x08000c9b
 8000b44:	08000c9b 	.word	0x08000c9b
 8000b48:	08000c9b 	.word	0x08000c9b
 8000b4c:	08000c9b 	.word	0x08000c9b
 8000b50:	08000c9b 	.word	0x08000c9b
 8000b54:	08000c9b 	.word	0x08000c9b
 8000b58:	08000c9b 	.word	0x08000c9b
 8000b5c:	08000c9b 	.word	0x08000c9b
 8000b60:	08000c9b 	.word	0x08000c9b
 8000b64:	08000c9b 	.word	0x08000c9b
 8000b68:	08000c9b 	.word	0x08000c9b
 8000b6c:	08000c9b 	.word	0x08000c9b
 8000b70:	08000c9b 	.word	0x08000c9b
 8000b74:	08000c9b 	.word	0x08000c9b
 8000b78:	08000c9b 	.word	0x08000c9b
 8000b7c:	08000c9b 	.word	0x08000c9b
 8000b80:	08000b85 	.word	0x08000b85
    case 'H': /* CUP: ESC [ <row> ; <col> H */
    case 'f': /* HVP: ESC [ <row> ; <col> f */
    {
        int row = 1, col = 1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
        /* sscanf will parse two integers separated by a semicolon.  If
         * either integer is missing, it will leave the value unchanged. */
        sscanf(buf, "%d;%d", &row, &col);
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	f107 0210 	add.w	r2, r7, #16
 8000b94:	4947      	ldr	r1, [pc, #284]	@ (8000cb4 <gdiHandleCSI+0x1fc>)
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f005 fc1c 	bl	80063d4 <siscanf>
        /* Convert 1‑based row/col into pixel coordinates. */
        gdiSetCursor((col - 1) * GDI_SYSFONT_WIDTH, (row - 1) * GDI_SYSFONT_HEIGHT);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	1e5a      	subs	r2, r3, #1
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	1e5a      	subs	r2, r3, #1
 8000bae:	4613      	mov	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f7ff fec0 	bl	800093c <gdiSetCursor>
        break;
 8000bbc:	e076      	b.n	8000cac <gdiHandleCSI+0x1f4>
    }
    case 'A': /* CUU: cursor up n lines */
    {
        int n = parse_csi_number(buf, len - 1);
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ff45 	bl	8000a54 <parse_csi_number>
 8000bca:	6178      	str	r0, [r7, #20]
        cursor_y -= n * GDI_SYSFONT_HEIGHT;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	f06f 0209 	mvn.w	r2, #9
 8000bd2:	fb03 f202 	mul.w	r2, r3, r2
 8000bd6:	4b38      	ldr	r3, [pc, #224]	@ (8000cb8 <gdiHandleCSI+0x200>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a36      	ldr	r2, [pc, #216]	@ (8000cb8 <gdiHandleCSI+0x200>)
 8000bde:	6013      	str	r3, [r2, #0]
        if (cursor_y < 0) cursor_y = 0;
 8000be0:	4b35      	ldr	r3, [pc, #212]	@ (8000cb8 <gdiHandleCSI+0x200>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	da5a      	bge.n	8000c9e <gdiHandleCSI+0x1e6>
 8000be8:	4b33      	ldr	r3, [pc, #204]	@ (8000cb8 <gdiHandleCSI+0x200>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
        break;
 8000bee:	e056      	b.n	8000c9e <gdiHandleCSI+0x1e6>
    }
    case 'B': /* CUD: cursor down n lines */
    {
        int n = parse_csi_number(buf, len - 1);
 8000bf0:	78fb      	ldrb	r3, [r7, #3]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ff2c 	bl	8000a54 <parse_csi_number>
 8000bfc:	61b8      	str	r0, [r7, #24]
        cursor_y += n * GDI_SYSFONT_HEIGHT;
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb8 <gdiHandleCSI+0x200>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a29      	ldr	r2, [pc, #164]	@ (8000cb8 <gdiHandleCSI+0x200>)
 8000c12:	6013      	str	r3, [r2, #0]
        if (cursor_y >= VID_PIXELS_Y) cursor_y = VID_PIXELS_Y - GDI_SYSFONT_HEIGHT;
 8000c14:	4b28      	ldr	r3, [pc, #160]	@ (8000cb8 <gdiHandleCSI+0x200>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2bef      	cmp	r3, #239	@ 0xef
 8000c1a:	dd42      	ble.n	8000ca2 <gdiHandleCSI+0x1ea>
 8000c1c:	4b26      	ldr	r3, [pc, #152]	@ (8000cb8 <gdiHandleCSI+0x200>)
 8000c1e:	22e6      	movs	r2, #230	@ 0xe6
 8000c20:	601a      	str	r2, [r3, #0]
        break;
 8000c22:	e03e      	b.n	8000ca2 <gdiHandleCSI+0x1ea>
    }
    case 'C': /* CUF: cursor forward n columns */
    {
        int n = parse_csi_number(buf, len - 1);
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	4619      	mov	r1, r3
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ff12 	bl	8000a54 <parse_csi_number>
 8000c30:	61f8      	str	r0, [r7, #28]
        cursor_x += n * GDI_SYSFONT_WIDTH;
 8000c32:	69fa      	ldr	r2, [r7, #28]
 8000c34:	4613      	mov	r3, r2
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	4413      	add	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <gdiHandleCSI+0x204>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a1d      	ldr	r2, [pc, #116]	@ (8000cbc <gdiHandleCSI+0x204>)
 8000c46:	6013      	str	r3, [r2, #0]
        if (cursor_x >= VID_PIXELS_X) cursor_x = VID_PIXELS_X - GDI_SYSFONT_WIDTH;
 8000c48:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <gdiHandleCSI+0x204>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 8000c50:	d329      	bcc.n	8000ca6 <gdiHandleCSI+0x1ee>
 8000c52:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <gdiHandleCSI+0x204>)
 8000c54:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8000c58:	601a      	str	r2, [r3, #0]
        break;
 8000c5a:	e024      	b.n	8000ca6 <gdiHandleCSI+0x1ee>
    }
    case 'D': /* CUB: cursor backward n columns */
    {
        int n = parse_csi_number(buf, len - 1);
 8000c5c:	78fb      	ldrb	r3, [r7, #3]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	4619      	mov	r1, r3
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff fef6 	bl	8000a54 <parse_csi_number>
 8000c68:	6238      	str	r0, [r7, #32]
        cursor_x -= n * GDI_SYSFONT_WIDTH;
 8000c6a:	6a3a      	ldr	r2, [r7, #32]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	0092      	lsls	r2, r2, #2
 8000c70:	1a9b      	subs	r3, r3, r2
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <gdiHandleCSI+0x204>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000cbc <gdiHandleCSI+0x204>)
 8000c7e:	6013      	str	r3, [r2, #0]
        if (cursor_x < 0) cursor_x = 0;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <gdiHandleCSI+0x204>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	da10      	bge.n	8000caa <gdiHandleCSI+0x1f2>
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <gdiHandleCSI+0x204>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
        break;
 8000c8e:	e00c      	b.n	8000caa <gdiHandleCSI+0x1f2>
    }
    case 'J': /* ED: erase display */
    {
        /* Only support ESC [ 2 J (clear entire screen) for now. */
        gdiClearScreen();
 8000c90:	f7ff fe80 	bl	8000994 <gdiClearScreen>
        break;
 8000c94:	e00a      	b.n	8000cac <gdiHandleCSI+0x1f4>
        return;
 8000c96:	bf00      	nop
 8000c98:	e008      	b.n	8000cac <gdiHandleCSI+0x1f4>
    }
    default:
        /* Unsupported CSI command: ignore */
        break;
 8000c9a:	bf00      	nop
 8000c9c:	e006      	b.n	8000cac <gdiHandleCSI+0x1f4>
        break;
 8000c9e:	bf00      	nop
 8000ca0:	e004      	b.n	8000cac <gdiHandleCSI+0x1f4>
        break;
 8000ca2:	bf00      	nop
 8000ca4:	e002      	b.n	8000cac <gdiHandleCSI+0x1f4>
        break;
 8000ca6:	bf00      	nop
 8000ca8:	e000      	b.n	8000cac <gdiHandleCSI+0x1f4>
        break;
 8000caa:	bf00      	nop
    }
}
 8000cac:	3728      	adds	r7, #40	@ 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	08006f4c 	.word	0x08006f4c
 8000cb8:	20003cf0 	.word	0x20003cf0
 8000cbc:	20003cec 	.word	0x20003cec

08000cc0 <gdiVT100Feed>:

/* Feed one character into the VT100 parser.  Maintains a tiny state
 * machine to detect ESC and CSI sequences and calls the appropriate
 * handlers. */
void gdiVT100Feed(uint8_t ch)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
    enum ParserState { STATE_IDLE, STATE_ESC, STATE_CSI };
    static enum ParserState state = STATE_IDLE;
    static char csi_buf[16];
    static uint8_t csi_len = 0;

    switch (state) {
 8000cca:	4b2f      	ldr	r3, [pc, #188]	@ (8000d88 <gdiVT100Feed+0xc8>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d027      	beq.n	8000d22 <gdiVT100Feed+0x62>
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	dc54      	bgt.n	8000d80 <gdiVT100Feed+0xc0>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d002      	beq.n	8000ce0 <gdiVT100Feed+0x20>
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d00c      	beq.n	8000cf8 <gdiVT100Feed+0x38>
            /* Accumulate parameters */
            csi_buf[csi_len++] = ch;
        }
        break;
    }
}
 8000cde:	e04f      	b.n	8000d80 <gdiVT100Feed+0xc0>
        if (ch == 0x1B) {
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	2b1b      	cmp	r3, #27
 8000ce4:	d103      	bne.n	8000cee <gdiVT100Feed+0x2e>
            state = STATE_ESC;
 8000ce6:	4b28      	ldr	r3, [pc, #160]	@ (8000d88 <gdiVT100Feed+0xc8>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
        break;
 8000cec:	e048      	b.n	8000d80 <gdiVT100Feed+0xc0>
            gdiPutChar(ch);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fe5f 	bl	80009b4 <gdiPutChar>
        break;
 8000cf6:	e043      	b.n	8000d80 <gdiVT100Feed+0xc0>
        if (ch == '[') {
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2b5b      	cmp	r3, #91	@ 0x5b
 8000cfc:	d106      	bne.n	8000d0c <gdiVT100Feed+0x4c>
            state = STATE_CSI;
 8000cfe:	4b22      	ldr	r3, [pc, #136]	@ (8000d88 <gdiVT100Feed+0xc8>)
 8000d00:	2202      	movs	r2, #2
 8000d02:	701a      	strb	r2, [r3, #0]
            csi_len = 0;
 8000d04:	4b21      	ldr	r3, [pc, #132]	@ (8000d8c <gdiVT100Feed+0xcc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
        break;
 8000d0a:	e039      	b.n	8000d80 <gdiVT100Feed+0xc0>
            gdiPutChar(0x1B);
 8000d0c:	201b      	movs	r0, #27
 8000d0e:	f7ff fe51 	bl	80009b4 <gdiPutChar>
            gdiPutChar(ch);
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fe4d 	bl	80009b4 <gdiPutChar>
            state = STATE_IDLE;
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <gdiVT100Feed+0xc8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
        break;
 8000d20:	e02e      	b.n	8000d80 <gdiVT100Feed+0xc0>
        if ((ch >= 0x40 && ch <= 0x7E) || csi_len >= (sizeof(csi_buf) - 1)) {
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d26:	d902      	bls.n	8000d2e <gdiVT100Feed+0x6e>
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	2b7e      	cmp	r3, #126	@ 0x7e
 8000d2c:	d903      	bls.n	8000d36 <gdiVT100Feed+0x76>
 8000d2e:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <gdiVT100Feed+0xcc>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b0e      	cmp	r3, #14
 8000d34:	d919      	bls.n	8000d6a <gdiVT100Feed+0xaa>
            csi_buf[csi_len++] = ch;
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <gdiVT100Feed+0xcc>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	b2d1      	uxtb	r1, r2
 8000d3e:	4a13      	ldr	r2, [pc, #76]	@ (8000d8c <gdiVT100Feed+0xcc>)
 8000d40:	7011      	strb	r1, [r2, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	4a12      	ldr	r2, [pc, #72]	@ (8000d90 <gdiVT100Feed+0xd0>)
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	5453      	strb	r3, [r2, r1]
            csi_buf[csi_len] = '\0';
 8000d4a:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <gdiVT100Feed+0xcc>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <gdiVT100Feed+0xd0>)
 8000d52:	2100      	movs	r1, #0
 8000d54:	5499      	strb	r1, [r3, r2]
            gdiHandleCSI(csi_buf, csi_len);
 8000d56:	4b0d      	ldr	r3, [pc, #52]	@ (8000d8c <gdiVT100Feed+0xcc>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480c      	ldr	r0, [pc, #48]	@ (8000d90 <gdiVT100Feed+0xd0>)
 8000d5e:	f7ff feab 	bl	8000ab8 <gdiHandleCSI>
            state = STATE_IDLE;
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <gdiVT100Feed+0xc8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
        break;
 8000d68:	e009      	b.n	8000d7e <gdiVT100Feed+0xbe>
            csi_buf[csi_len++] = ch;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <gdiVT100Feed+0xcc>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	b2d1      	uxtb	r1, r2
 8000d72:	4a06      	ldr	r2, [pc, #24]	@ (8000d8c <gdiVT100Feed+0xcc>)
 8000d74:	7011      	strb	r1, [r2, #0]
 8000d76:	4619      	mov	r1, r3
 8000d78:	4a05      	ldr	r2, [pc, #20]	@ (8000d90 <gdiVT100Feed+0xd0>)
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	5453      	strb	r3, [r2, r1]
        break;
 8000d7e:	bf00      	nop
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20003cf4 	.word	0x20003cf4
 8000d8c:	20003cf5 	.word	0x20003cf5
 8000d90:	20003cf8 	.word	0x20003cf8

08000d94 <Gpio_deinit>:
{
  TimingDelay = nTime;
  while((TimingDelay != 0));
  while(Paused);
}
void Gpio_deinit(GPIO_TypeDef  *GPIOx){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
		for(int i =0; i<15;i++){
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	e008      	b.n	8000db4 <Gpio_deinit+0x20>
			HAL_GPIO_DeInit(GPIOA, i);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000daa:	f001 fd07 	bl	80027bc <HAL_GPIO_DeInit>
		for(int i =0; i<15;i++){
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	3301      	adds	r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2b0e      	cmp	r3, #14
 8000db8:	ddf3      	ble.n	8000da2 <Gpio_deinit+0xe>
		}
	}
 8000dba:	bf00      	nop
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <TIMER_SET>:


void TIMER_SET(uint32_t sys){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]


	if (sys == 16000000){
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a33      	ldr	r2, [pc, #204]	@ (8000e9c <TIMER_SET+0xd8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d113      	bne.n	8000dfc <TIMER_SET+0x38>
		  __HAL_I2S_DISABLE(&hi2s2);
 8000dd4:	4b32      	ldr	r3, [pc, #200]	@ (8000ea0 <TIMER_SET+0xdc>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	69da      	ldr	r2, [r3, #28]
 8000dda:	4b31      	ldr	r3, [pc, #196]	@ (8000ea0 <TIMER_SET+0xdc>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000de2:	61da      	str	r2, [r3, #28]
		   SPI2->I2SPR = 1;
 8000de4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea4 <TIMER_SET+0xe0>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	621a      	str	r2, [r3, #32]
		   __HAL_I2S_ENABLE(&hi2s2);
 8000dea:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea0 <TIMER_SET+0xdc>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	69da      	ldr	r2, [r3, #28]
 8000df0:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea0 <TIMER_SET+0xdc>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000df8:	61da      	str	r2, [r3, #28]
	else if(sys == 120000000){
		__HAL_I2S_DISABLE(&hi2s2);
		SPI2->I2SPR = (7 << SPI_I2SPR_I2SDIV_Pos) | (1 << SPI_I2SPR_ODD_Pos);
		__HAL_I2S_ENABLE(&hi2s2);
	}
}
 8000dfa:	e04a      	b.n	8000e92 <TIMER_SET+0xce>
	else if(sys == 48000000){
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8000ea8 <TIMER_SET+0xe4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d113      	bne.n	8000e2c <TIMER_SET+0x68>
		  __HAL_I2S_DISABLE(&hi2s2);
 8000e04:	4b26      	ldr	r3, [pc, #152]	@ (8000ea0 <TIMER_SET+0xdc>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	69da      	ldr	r2, [r3, #28]
 8000e0a:	4b25      	ldr	r3, [pc, #148]	@ (8000ea0 <TIMER_SET+0xdc>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e12:	61da      	str	r2, [r3, #28]
		  SPI2->I2SPR = (3 << SPI_I2SPR_I2SDIV_Pos)
 8000e14:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <TIMER_SET+0xe0>)
 8000e16:	2203      	movs	r2, #3
 8000e18:	621a      	str	r2, [r3, #32]
		   __HAL_I2S_ENABLE(&hi2s2);
 8000e1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ea0 <TIMER_SET+0xdc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	69da      	ldr	r2, [r3, #28]
 8000e20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea0 <TIMER_SET+0xdc>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e28:	61da      	str	r2, [r3, #28]
}
 8000e2a:	e032      	b.n	8000e92 <TIMER_SET+0xce>
	else if (sys == 96000000){
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8000eac <TIMER_SET+0xe8>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d116      	bne.n	8000e62 <TIMER_SET+0x9e>
		  __HAL_I2S_DISABLE(&hi2s2);
 8000e34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <TIMER_SET+0xdc>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	69da      	ldr	r2, [r3, #28]
 8000e3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <TIMER_SET+0xdc>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e42:	61da      	str	r2, [r3, #28]
		  SPI2->I2SPR = (6 << SPI_I2SPR_I2SDIV_Pos)
 8000e44:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <TIMER_SET+0xe0>)
 8000e46:	2206      	movs	r2, #6
 8000e48:	621a      	str	r2, [r3, #32]
		   __HAL_I2S_ENABLE(&hi2s2);
 8000e4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <TIMER_SET+0xdc>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	69da      	ldr	r2, [r3, #28]
 8000e50:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <TIMER_SET+0xdc>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e58:	61da      	str	r2, [r3, #28]
		   HAL_Delay(1);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f000 feae 	bl	8001bbc <HAL_Delay>
}
 8000e60:	e017      	b.n	8000e92 <TIMER_SET+0xce>
	else if(sys == 120000000){
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a12      	ldr	r2, [pc, #72]	@ (8000eb0 <TIMER_SET+0xec>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d113      	bne.n	8000e92 <TIMER_SET+0xce>
		__HAL_I2S_DISABLE(&hi2s2);
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <TIMER_SET+0xdc>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	69da      	ldr	r2, [r3, #28]
 8000e70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <TIMER_SET+0xdc>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e78:	61da      	str	r2, [r3, #28]
		SPI2->I2SPR = (7 << SPI_I2SPR_I2SDIV_Pos) | (1 << SPI_I2SPR_ODD_Pos);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <TIMER_SET+0xe0>)
 8000e7c:	f240 1207 	movw	r2, #263	@ 0x107
 8000e80:	621a      	str	r2, [r3, #32]
		__HAL_I2S_ENABLE(&hi2s2);
 8000e82:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <TIMER_SET+0xdc>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	69da      	ldr	r2, [r3, #28]
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <TIMER_SET+0xdc>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e90:	61da      	str	r2, [r3, #28]
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	00f42400 	.word	0x00f42400
 8000ea0:	20003d08 	.word	0x20003d08
 8000ea4:	40003800 	.word	0x40003800
 8000ea8:	02dc6c00 	.word	0x02dc6c00
 8000eac:	05b8d800 	.word	0x05b8d800
 8000eb0:	07270e00 	.word	0x07270e00

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_I2S_DeInit(&hi2s2);
 8000eb8:	4846      	ldr	r0, [pc, #280]	@ (8000fd4 <main+0x120>)
 8000eba:	f001 fe41 	bl	8002b40 <HAL_I2S_DeInit>
	HAL_TIM_OC_DeInit(&htim2);
 8000ebe:	4846      	ldr	r0, [pc, #280]	@ (8000fd8 <main+0x124>)
 8000ec0:	f003 fe0b 	bl	8004ada <HAL_TIM_OC_DeInit>
	HAL_TIM_OC_DeInit(&htim3);
 8000ec4:	4845      	ldr	r0, [pc, #276]	@ (8000fdc <main+0x128>)
 8000ec6:	f003 fe08 	bl	8004ada <HAL_TIM_OC_DeInit>
	Gpio_deinit(GPIOA);
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ece:	f7ff ff61 	bl	8000d94 <Gpio_deinit>
	Gpio_deinit(GPIOB);
 8000ed2:	4843      	ldr	r0, [pc, #268]	@ (8000fe0 <main+0x12c>)
 8000ed4:	f7ff ff5e 	bl	8000d94 <Gpio_deinit>
	Gpio_deinit(GPIOC);
 8000ed8:	4842      	ldr	r0, [pc, #264]	@ (8000fe4 <main+0x130>)
 8000eda:	f7ff ff5b 	bl	8000d94 <Gpio_deinit>
	HAL_DMA_DeInit(&hdma_tim3_ch1);
 8000ede:	4842      	ldr	r0, [pc, #264]	@ (8000fe8 <main+0x134>)
 8000ee0:	f001 f846 	bl	8001f70 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_tim3_ch3);
 8000ee4:	4841      	ldr	r0, [pc, #260]	@ (8000fec <main+0x138>)
 8000ee6:	f001 f843 	bl	8001f70 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_spi2_tx);
 8000eea:	4841      	ldr	r0, [pc, #260]	@ (8000ff0 <main+0x13c>)
 8000eec:	f001 f840 	bl	8001f70 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_tim3_ch4);
 8000ef0:	4840      	ldr	r0, [pc, #256]	@ (8000ff4 <main+0x140>)
 8000ef2:	f001 f83d 	bl	8001f70 <HAL_DMA_DeInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef6:	f000 fdf0 	bl	8001ada <HAL_Init>

  /* USER CODE BEGIN Init */

  /* --- Enable Flash prefetch and caches before changing SYSCLK --- */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efa:	4b3f      	ldr	r3, [pc, #252]	@ (8000ff8 <main+0x144>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a3e      	ldr	r2, [pc, #248]	@ (8000ff8 <main+0x144>)
 8000f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f04:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f06:	4b3c      	ldr	r3, [pc, #240]	@ (8000ff8 <main+0x144>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a3b      	ldr	r2, [pc, #236]	@ (8000ff8 <main+0x144>)
 8000f0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f10:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f12:	4b39      	ldr	r3, [pc, #228]	@ (8000ff8 <main+0x144>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a38      	ldr	r2, [pc, #224]	@ (8000ff8 <main+0x144>)
 8000f18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f1c:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1e:	f000 f879 	bl	8001014 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f22:	f000 fa95 	bl	8001450 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f26:	f000 fa51 	bl	80013cc <MX_DMA_Init>
  MX_TIM2_Init();
 8000f2a:	f000 f8e5 	bl	80010f8 <MX_TIM2_Init>
  MX_I2S2_Init();
 8000f2e:	f000 f8bb 	bl	80010a8 <MX_I2S2_Init>
  TIMER_SET(HAL_RCC_GetSysClockFreq());
 8000f32:	f002 fc47 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff43 	bl	8000dc4 <TIMER_SET>
  MX_TIM3_Init();
 8000f3e:	f000 f96f 	bl	8001220 <MX_TIM3_Init>
  //Video_SetupTiming();
  // 1) How many timer ticks per half-word at your clock?


  //do know if it is necessary
  HAL_TIM_Base_Start(&htim2); // start the timer for the video sync
 8000f42:	4825      	ldr	r0, [pc, #148]	@ (8000fd8 <main+0x124>)
 8000f44:	f003 fd02 	bl	800494c <HAL_TIM_Base_Start>

  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);  // OC4Ref → TRGO
 8000f48:	210c      	movs	r1, #12
 8000f4a:	4823      	ldr	r0, [pc, #140]	@ (8000fd8 <main+0x124>)
 8000f4c:	f003 fe36 	bl	8004bbc <HAL_TIM_OC_Start>


  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000f50:	2100      	movs	r1, #0
 8000f52:	4822      	ldr	r0, [pc, #136]	@ (8000fdc <main+0x128>)
 8000f54:	f003 fe32 	bl	8004bbc <HAL_TIM_OC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // this the same
 8000f58:	2104      	movs	r1, #4
 8000f5a:	4820      	ldr	r0, [pc, #128]	@ (8000fdc <main+0x128>)
 8000f5c:	f003 ffa2 	bl	8004ea4 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3);
 8000f60:	2108      	movs	r1, #8
 8000f62:	481e      	ldr	r0, [pc, #120]	@ (8000fdc <main+0x128>)
 8000f64:	f003 fe2a 	bl	8004bbc <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_4);
 8000f68:	210c      	movs	r1, #12
 8000f6a:	481c      	ldr	r0, [pc, #112]	@ (8000fdc <main+0x128>)
 8000f6c:	f003 fe26 	bl	8004bbc <HAL_TIM_OC_Start>



  HAL_DMA_Start(
 8000f70:	4922      	ldr	r1, [pc, #136]	@ (8000ffc <main+0x148>)
 8000f72:	f240 1345 	movw	r3, #325	@ 0x145
 8000f76:	4a22      	ldr	r2, [pc, #136]	@ (8001000 <main+0x14c>)
 8000f78:	481b      	ldr	r0, [pc, #108]	@ (8000fe8 <main+0x134>)
 8000f7a:	f001 f88f 	bl	800209c <HAL_DMA_Start>
    &hdma_tim3_ch1,
    (uint32_t)SyncTable,                // memory: array of CCR1 timings
    (uint32_t)&TIM3->CCR1,              // peripheral: CCR1 register
    325                           // one entry per visible line
  );
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);  // also enable CC1DE for VSync
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <main+0x128>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <main+0x128>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f8c:	60da      	str	r2, [r3, #12]

  // 2) LINE BUFFERS → I2S DMA CMAR at back porch (CC3)
  HAL_DMA_Start(
 8000f8e:	491d      	ldr	r1, [pc, #116]	@ (8001004 <main+0x150>)
    &hdma_tim3_ch3,
    (uint32_t)lineptrs,                 // memory: array of line-buffer addresses
    (uint32_t)&hdma_spi2_tx.Instance->CMAR,
 8000f90:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <main+0x13c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	330c      	adds	r3, #12
  HAL_DMA_Start(
 8000f96:	461a      	mov	r2, r3
 8000f98:	f240 1339 	movw	r3, #313	@ 0x139
 8000f9c:	4813      	ldr	r0, [pc, #76]	@ (8000fec <main+0x138>)
 8000f9e:	f001 f87d 	bl	800209c <HAL_DMA_Start>
	313//VID_VSIZE
  );

  // 3) BLACK-PORCH → I2S DMA CMAR at front porch (CC4)
  HAL_DMA_Start(
 8000fa2:	4919      	ldr	r1, [pc, #100]	@ (8001008 <main+0x154>)
    &hdma_tim3_ch4,
    (uint32_t)borders,                  // memory: single-entry blank-line buffer
    (uint32_t)&hdma_spi2_tx.Instance->CMAR,
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <main+0x13c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	330c      	adds	r3, #12
  HAL_DMA_Start(
 8000faa:	461a      	mov	r2, r3
 8000fac:	f240 1339 	movw	r3, #313	@ 0x139
 8000fb0:	4810      	ldr	r0, [pc, #64]	@ (8000ff4 <main+0x140>)
 8000fb2:	f001 f873 	bl	800209c <HAL_DMA_Start>
    313// one entry per line
  );

  // 4) Kick off the I2S DMA stream once
  HAL_I2S_Transmit_DMA(
 8000fb6:	2220      	movs	r2, #32
 8000fb8:	4914      	ldr	r1, [pc, #80]	@ (800100c <main+0x158>)
 8000fba:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <main+0x120>)
 8000fbc:	f001 fde8 	bl	8002b90 <HAL_I2S_Transmit_DMA>
  //gdiDrawTextEx(140, 90, "IDAN");
//  gdiDrawTextEx(150, 80, "RUBEN");
//  gdiDrawTextEx(160, 100, "a");

  static uint8_t rx_byte;
  vt100_init();
 8000fc0:	f000 fd4e 	bl	8001a60 <vt100_init>
  vt100_feed("\t\t\tHELLO WORLD!");
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <main+0x15c>)
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fd4f 	bl	8001a6c <vt100_feed>
  while (1)
 8000fce:	bf00      	nop
 8000fd0:	e7fd      	b.n	8000fce <main+0x11a>
 8000fd2:	bf00      	nop
 8000fd4:	20003d08 	.word	0x20003d08
 8000fd8:	20003da4 	.word	0x20003da4
 8000fdc:	20003df0 	.word	0x20003df0
 8000fe0:	48000400 	.word	0x48000400
 8000fe4:	48000800 	.word	0x48000800
 8000fe8:	20003e3c 	.word	0x20003e3c
 8000fec:	20003e9c 	.word	0x20003e9c
 8000ff0:	20003d44 	.word	0x20003d44
 8000ff4:	20003efc 	.word	0x20003efc
 8000ff8:	40022000 	.word	0x40022000
 8000ffc:	08007368 	.word	0x08007368
 8001000:	40000434 	.word	0x40000434
 8001004:	200028e8 	.word	0x200028e8
 8001008:	200032ac 	.word	0x200032ac
 800100c:	20003f64 	.word	0x20003f64
 8001010:	08006f54 	.word	0x08006f54

08001014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b094      	sub	sp, #80	@ 0x50
 8001018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101a:	f107 0318 	add.w	r3, r7, #24
 800101e:	2238      	movs	r2, #56	@ 0x38
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f005 fa04 	bl	8006430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001036:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800103a:	f001 fec1 	bl	8002dc0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800103e:	2301      	movs	r3, #1
 8001040:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001042:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001046:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001048:	2302      	movs	r3, #2
 800104a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800104c:	2303      	movs	r3, #3
 800104e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001050:	2301      	movs	r3, #1
 8001052:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001054:	231e      	movs	r3, #30
 8001056:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV10;
 8001058:	230a      	movs	r3, #10
 800105a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 800105c:	2308      	movs	r3, #8
 800105e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001060:	2302      	movs	r3, #2
 8001062:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001064:	f107 0318 	add.w	r3, r7, #24
 8001068:	4618      	mov	r0, r3
 800106a:	f001 ff5d 	bl	8002f28 <HAL_RCC_OscConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001074:	f000 fa1c 	bl	80014b0 <Error_Handler>

  // 8mhz *12 / 2

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001078:	230f      	movs	r3, #15
 800107a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107c:	2303      	movs	r3, #3
 800107e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]



  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2105      	movs	r1, #5
 8001090:	4618      	mov	r0, r3
 8001092:	f002 fa5b 	bl	800354c <HAL_RCC_ClockConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800109c:	f000 fa08 	bl	80014b0 <Error_Handler>
  }
}
 80010a0:	bf00      	nop
 80010a2:	3750      	adds	r7, #80	@ 0x50
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2S2_Init 1 */
	//hi2s2.Init.CPOL = I2S_CPOL_HIGH;

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80010ac:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <MX_I2S2_Init+0x48>)
 80010ae:	4a11      	ldr	r2, [pc, #68]	@ (80010f4 <MX_I2S2_Init+0x4c>)
 80010b0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80010b2:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <MX_I2S2_Init+0x48>)
 80010b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010b8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80010ba:	4b0d      	ldr	r3, [pc, #52]	@ (80010f0 <MX_I2S2_Init+0x48>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <MX_I2S2_Init+0x48>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80010c6:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <MX_I2S2_Init+0x48>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80010cc:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <MX_I2S2_Init+0x48>)
 80010ce:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80010d2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <MX_I2S2_Init+0x48>)
 80010d6:	2208      	movs	r2, #8
 80010d8:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <MX_I2S2_Init+0x48>)
 80010dc:	f001 fc50 	bl	8002980 <HAL_I2S_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 80010e6:	f000 f9e3 	bl	80014b0 <Error_Handler>
//   SPI2->I2SPR = 1;   // I2SDIV = 1, ODD = 0
//   __HAL_I2S_ENABLE(&hi2s2);

  /* USER CODE END I2S2_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20003d08 	.word	0x20003d08
 80010f4:	40003800 	.word	0x40003800

080010f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b094      	sub	sp, #80	@ 0x50
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800110c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]
 8001136:	615a      	str	r2, [r3, #20]
 8001138:	619a      	str	r2, [r3, #24]
  //htim2.Init.Prescaler         = VID_HSIZE/4 - 1; // 32/4 -1 = 7
  //htim2.Init.Period            = 2*VID_VSIZE - 1; // 2*625-1 = 1249
  //sConfigOC.Pulse      = VID_VSIZE - 1;

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800113a:	4b38      	ldr	r3, [pc, #224]	@ (800121c <MX_TIM2_Init+0x124>)
 800113c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001140:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VID_HSIZE/4 - 1; // 32/4 -1 = 7
 8001142:	4b36      	ldr	r3, [pc, #216]	@ (800121c <MX_TIM2_Init+0x124>)
 8001144:	2207      	movs	r2, #7
 8001146:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001148:	4b34      	ldr	r3, [pc, #208]	@ (800121c <MX_TIM2_Init+0x124>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2*VID_VSIZE - 1; // 2*625-1 = 1249
 800114e:	4b33      	ldr	r3, [pc, #204]	@ (800121c <MX_TIM2_Init+0x124>)
 8001150:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8001154:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001156:	4b31      	ldr	r3, [pc, #196]	@ (800121c <MX_TIM2_Init+0x124>)
 8001158:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800115c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115e:	4b2f      	ldr	r3, [pc, #188]	@ (800121c <MX_TIM2_Init+0x124>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001164:	482d      	ldr	r0, [pc, #180]	@ (800121c <MX_TIM2_Init+0x124>)
 8001166:	f003 fb99 	bl	800489c <HAL_TIM_Base_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001170:	f000 f99e 	bl	80014b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE1;
 8001174:	2370      	movs	r3, #112	@ 0x70
 8001176:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001178:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800117c:	4619      	mov	r1, r3
 800117e:	4827      	ldr	r0, [pc, #156]	@ (800121c <MX_TIM2_Init+0x124>)
 8001180:	f004 f930 	bl	80053e4 <HAL_TIM_ConfigClockSource>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800118a:	f000 f991 	bl	80014b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800118e:	4823      	ldr	r0, [pc, #140]	@ (800121c <MX_TIM2_Init+0x124>)
 8001190:	f003 fe26 	bl	8004de0 <HAL_TIM_PWM_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 800119a:	f000 f989 	bl	80014b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;//NEEDS TO BE CHECK WITH EXTERNAL1
 800119e:	2306      	movs	r3, #6
 80011a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80011a2:	2370      	movs	r3, #112	@ 0x70
 80011a4:	633b      	str	r3, [r7, #48]	@ 0x30
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 80011a6:	2300      	movs	r3, #0
 80011a8:	637b      	str	r3, [r7, #52]	@ 0x34
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sSlaveConfig.TriggerFilter = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80011b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011b6:	4619      	mov	r1, r3
 80011b8:	4818      	ldr	r0, [pc, #96]	@ (800121c <MX_TIM2_Init+0x124>)
 80011ba:	f004 fa29 	bl	8005610 <HAL_TIM_SlaveConfigSynchro>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80011c4:	f000 f974 	bl	80014b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF; // OC4Ref → TRGO;
 80011c8:	2370      	movs	r3, #112	@ 0x70
 80011ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80011cc:	2380      	movs	r3, #128	@ 0x80
 80011ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d0:	f107 0320 	add.w	r3, r7, #32
 80011d4:	4619      	mov	r1, r3
 80011d6:	4811      	ldr	r0, [pc, #68]	@ (800121c <MX_TIM2_Init+0x124>)
 80011d8:	f004 ffdc 	bl	8006194 <HAL_TIMEx_MasterConfigSynchronization>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80011e2:	f000 f965 	bl	80014b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e6:	2360      	movs	r3, #96	@ 0x60
 80011e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse =  VID_VSIZE - 1;
 80011ea:	f44f 731c 	mov.w	r3, #624	@ 0x270
 80011ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80011f0:	2302      	movs	r3, #2
 80011f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	220c      	movs	r2, #12
 80011fc:	4619      	mov	r1, r3
 80011fe:	4807      	ldr	r0, [pc, #28]	@ (800121c <MX_TIM2_Init+0x124>)
 8001200:	f003 ffdc 	bl	80051bc <HAL_TIM_PWM_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM2_Init+0x116>
  {
    Error_Handler();
 800120a:	f000 f951 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800120e:	4803      	ldr	r0, [pc, #12]	@ (800121c <MX_TIM2_Init+0x124>)
 8001210:	f000 fb0c 	bl	800182c <HAL_TIM_MspPostInit>

}
 8001214:	bf00      	nop
 8001216:	3750      	adds	r7, #80	@ 0x50
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20003da4 	.word	0x20003da4

08001220 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b094      	sub	sp, #80	@ 0x50
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001226:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001234:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	f107 0320 	add.w	r3, r7, #32
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]
 800125e:	615a      	str	r2, [r3, #20]
 8001260:	619a      	str	r2, [r3, #24]

  //FOR CHANNEL 2:
  //sConfigOC.Pulse = HSYNCCOUNTS;

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001262:	4b58      	ldr	r3, [pc, #352]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 8001264:	4a58      	ldr	r2, [pc, #352]	@ (80013c8 <MX_TIM3_Init+0x1a8>)
 8001266:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001268:	4b56      	ldr	r3, [pc, #344]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 800126a:	2200      	movs	r2, #0
 800126c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b55      	ldr	r3, [pc, #340]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIMERCOUNTS - 1;
 8001274:	4b53      	ldr	r3, [pc, #332]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 8001276:	f641 52ff 	movw	r2, #7679	@ 0x1dff
 800127a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127c:	4b51      	ldr	r3, [pc, #324]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001282:	4b50      	ldr	r3, [pc, #320]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001288:	484e      	ldr	r0, [pc, #312]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 800128a:	f003 fb07 	bl	800489c <HAL_TIM_Base_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001294:	f000 f90c 	bl	80014b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001298:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800129c:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800129e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012a2:	4619      	mov	r1, r3
 80012a4:	4847      	ldr	r0, [pc, #284]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 80012a6:	f004 f89d 	bl	80053e4 <HAL_TIM_ConfigClockSource>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80012b0:	f000 f8fe 	bl	80014b0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80012b4:	4843      	ldr	r0, [pc, #268]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 80012b6:	f003 fbb9 	bl	8004a2c <HAL_TIM_OC_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 80012c0:	f000 f8f6 	bl	80014b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012c4:	483f      	ldr	r0, [pc, #252]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 80012c6:	f003 fd8b 	bl	8004de0 <HAL_TIM_PWM_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80012d0:	f000 f8ee 	bl	80014b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80012d4:	2306      	movs	r3, #6
 80012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80012d8:	2310      	movs	r3, #16
 80012da:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80012dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012e0:	4619      	mov	r1, r3
 80012e2:	4838      	ldr	r0, [pc, #224]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 80012e4:	f004 f994 	bl	8005610 <HAL_TIM_SlaveConfigSynchro>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80012ee:	f000 f8df 	bl	80014b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80012f6:	2380      	movs	r3, #128	@ 0x80
 80012f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	4619      	mov	r1, r3
 8001300:	4830      	ldr	r0, [pc, #192]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 8001302:	f004 ff47 	bl	8006194 <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 800130c:	f000 f8d0 	bl	80014b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001310:	2330      	movs	r3, #48	@ 0x30
 8001312:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = NO_TOG;
 8001314:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001318:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800131a:	2302      	movs	r3, #2
 800131c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	4826      	ldr	r0, [pc, #152]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 800132a:	f003 fecd 	bl	80050c8 <HAL_TIM_OC_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001334:	f000 f8bc 	bl	80014b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001338:	2360      	movs	r3, #96	@ 0x60
 800133a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = HSYNCCOUNTS;//HSYNCCOUNTS;
 800133c:	f44f 730d 	mov.w	r3, #564	@ 0x234
 8001340:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2204      	movs	r2, #4
 8001346:	4619      	mov	r1, r3
 8001348:	481e      	ldr	r0, [pc, #120]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 800134a:	f003 ff37 	bl	80051bc <HAL_TIM_PWM_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM3_Init+0x138>
  {
    Error_Handler();
 8001354:	f000 f8ac 	bl	80014b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;//208;
 800135c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001360:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2208      	movs	r2, #8
 8001366:	4619      	mov	r1, r3
 8001368:	4816      	ldr	r0, [pc, #88]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 800136a:	f003 fead 	bl	80050c8 <HAL_TIM_OC_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM3_Init+0x158>
  {
    Error_Handler();
 8001374:	f000 f89c 	bl	80014b0 <Error_Handler>
  }
  sConfigOC.Pulse = 8000;//(672+208);//(672+208);
 8001378:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800137c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	220c      	movs	r2, #12
 8001382:	4619      	mov	r1, r3
 8001384:	480f      	ldr	r0, [pc, #60]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 8001386:	f003 fe9f 	bl	80050c8 <HAL_TIM_OC_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0x174>
  {
    Error_Handler();
 8001390:	f000 f88e 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  //TIM_DMACmd(TIM3, TIM_DMA_CC1|TIM_DMA_CC3, ENABLE);
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001394:	480b      	ldr	r0, [pc, #44]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 8001396:	f000 fa49 	bl	800182c <HAL_TIM_MspPostInit>
  /* Allow TIM3 Compare-3 (CC3) and Compare-4 (CC4) events to generate DMA requests */
  //__HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC2);
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC3);   // CC3DE bit → DMA request on CC3
 800139a:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013a8:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC4);   // CC4DE bit → DMA request on CC4
 80013aa:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <MX_TIM3_Init+0x1a4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80013b8:	60da      	str	r2, [r3, #12]
  //__HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
  //__HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);


}
 80013ba:	bf00      	nop
 80013bc:	3750      	adds	r7, #80	@ 0x50
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20003df0 	.word	0x20003df0
 80013c8:	40000400 	.word	0x40000400

080013cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013d2:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <MX_DMA_Init+0x80>)
 80013d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d6:	4a1d      	ldr	r2, [pc, #116]	@ (800144c <MX_DMA_Init+0x80>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80013de:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <MX_DMA_Init+0x80>)
 80013e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ea:	4b18      	ldr	r3, [pc, #96]	@ (800144c <MX_DMA_Init+0x80>)
 80013ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ee:	4a17      	ldr	r2, [pc, #92]	@ (800144c <MX_DMA_Init+0x80>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <MX_DMA_Init+0x80>)
 80013f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	200c      	movs	r0, #12
 8001408:	f000 fcd5 	bl	8001db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800140c:	200c      	movs	r0, #12
 800140e:	f000 fcec 	bl	8001dea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	200d      	movs	r0, #13
 8001418:	f000 fccd 	bl	8001db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800141c:	200d      	movs	r0, #13
 800141e:	f000 fce4 	bl	8001dea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	200f      	movs	r0, #15
 8001428:	f000 fcc5 	bl	8001db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800142c:	200f      	movs	r0, #15
 800142e:	f000 fcdc 	bl	8001dea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2010      	movs	r0, #16
 8001438:	f000 fcbd 	bl	8001db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800143c:	2010      	movs	r0, #16
 800143e:	f000 fcd4 	bl	8001dea <HAL_NVIC_EnableIRQ>

}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000

08001450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <MX_GPIO_Init+0x5c>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	4a14      	ldr	r2, [pc, #80]	@ (80014ac <MX_GPIO_Init+0x5c>)
 800145c:	f043 0320 	orr.w	r3, r3, #32
 8001460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001462:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <MX_GPIO_Init+0x5c>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	f003 0320 	and.w	r3, r3, #32
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <MX_GPIO_Init+0x5c>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	4a0e      	ldr	r2, [pc, #56]	@ (80014ac <MX_GPIO_Init+0x5c>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <MX_GPIO_Init+0x5c>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <MX_GPIO_Init+0x5c>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	4a08      	ldr	r2, [pc, #32]	@ (80014ac <MX_GPIO_Init+0x5c>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <MX_GPIO_Init+0x5c>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */


  /* USER CODE END MX_GPIO_Init_2 */
}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000

080014b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b4:	b672      	cpsid	i
}
 80014b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <Error_Handler+0x8>

080014bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <HAL_MspInit+0x44>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001500 <HAL_MspInit+0x44>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <HAL_MspInit+0x44>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <HAL_MspInit+0x44>)
 80014dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014de:	4a08      	ldr	r2, [pc, #32]	@ (8001500 <HAL_MspInit+0x44>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <HAL_MspInit+0x44>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014f2:	f001 fd09 	bl	8002f08 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000

08001504 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b09e      	sub	sp, #120	@ 0x78
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	2254      	movs	r2, #84	@ 0x54
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f004 ff83 	bl	8006430 <memset>
  if(hi2s->Instance==SPI2)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a35      	ldr	r2, [pc, #212]	@ (8001604 <HAL_I2S_MspInit+0x100>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d163      	bne.n	80015fc <HAL_I2S_MspInit+0xf8>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001534:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001538:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 800153a:	2300      	movs	r3, #0
 800153c:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	4618      	mov	r0, r3
 8001544:	f002 fa1e 	bl	8003984 <HAL_RCCEx_PeriphCLKConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 800154e:	f7ff ffaf 	bl	80014b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001552:	4b2d      	ldr	r3, [pc, #180]	@ (8001608 <HAL_I2S_MspInit+0x104>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001556:	4a2c      	ldr	r2, [pc, #176]	@ (8001608 <HAL_I2S_MspInit+0x104>)
 8001558:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800155c:	6593      	str	r3, [r2, #88]	@ 0x58
 800155e:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <HAL_I2S_MspInit+0x104>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	4b27      	ldr	r3, [pc, #156]	@ (8001608 <HAL_I2S_MspInit+0x104>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	4a26      	ldr	r2, [pc, #152]	@ (8001608 <HAL_I2S_MspInit+0x104>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001576:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <HAL_I2S_MspInit+0x104>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001582:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001586:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001594:	2305      	movs	r3, #5
 8001596:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800159c:	4619      	mov	r1, r3
 800159e:	481b      	ldr	r0, [pc, #108]	@ (800160c <HAL_I2S_MspInit+0x108>)
 80015a0:	f000 ff8a 	bl	80024b8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <HAL_I2S_MspInit+0x10c>)
 80015a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001614 <HAL_I2S_MspInit+0x110>)
 80015a8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80015aa:	4b19      	ldr	r3, [pc, #100]	@ (8001610 <HAL_I2S_MspInit+0x10c>)
 80015ac:	220d      	movs	r2, #13
 80015ae:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015b0:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <HAL_I2S_MspInit+0x10c>)
 80015b2:	2210      	movs	r2, #16
 80015b4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b6:	4b16      	ldr	r3, [pc, #88]	@ (8001610 <HAL_I2S_MspInit+0x10c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015bc:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <HAL_I2S_MspInit+0x10c>)
 80015be:	2280      	movs	r2, #128	@ 0x80
 80015c0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015c2:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <HAL_I2S_MspInit+0x10c>)
 80015c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015c8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015ca:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <HAL_I2S_MspInit+0x10c>)
 80015cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015d0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80015d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <HAL_I2S_MspInit+0x10c>)
 80015d4:	2220      	movs	r2, #32
 80015d6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80015d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <HAL_I2S_MspInit+0x10c>)
 80015da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80015e0:	480b      	ldr	r0, [pc, #44]	@ (8001610 <HAL_I2S_MspInit+0x10c>)
 80015e2:	f000 fc1d 	bl	8001e20 <HAL_DMA_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_I2S_MspInit+0xec>
    {
      Error_Handler();
 80015ec:	f7ff ff60 	bl	80014b0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a07      	ldr	r2, [pc, #28]	@ (8001610 <HAL_I2S_MspInit+0x10c>)
 80015f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015f6:	4a06      	ldr	r2, [pc, #24]	@ (8001610 <HAL_I2S_MspInit+0x10c>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80015fc:	bf00      	nop
 80015fe:	3778      	adds	r7, #120	@ 0x78
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40003800 	.word	0x40003800
 8001608:	40021000 	.word	0x40021000
 800160c:	48000400 	.word	0x48000400
 8001610:	20003d44 	.word	0x20003d44
 8001614:	40020058 	.word	0x40020058

08001618 <HAL_I2S_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspDeInit(I2S_HandleTypeDef* hi2s)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance==SPI2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0b      	ldr	r2, [pc, #44]	@ (8001654 <HAL_I2S_MspDeInit+0x3c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d10f      	bne.n	800164a <HAL_I2S_MspDeInit+0x32>
  {
    /* USER CODE BEGIN SPI2_MspDeInit 0 */

    /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <HAL_I2S_MspDeInit+0x40>)
 800162c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162e:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <HAL_I2S_MspDeInit+0x40>)
 8001630:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001634:	6593      	str	r3, [r2, #88]	@ 0x58
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 8001636:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 800163a:	4808      	ldr	r0, [pc, #32]	@ (800165c <HAL_I2S_MspDeInit+0x44>)
 800163c:	f001 f8be 	bl	80027bc <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(hi2s->hdmatx);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001644:	4618      	mov	r0, r3
 8001646:	f000 fc93 	bl	8001f70 <HAL_DMA_DeInit>
    /* USER CODE BEGIN SPI2_MspDeInit 1 */

    /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40003800 	.word	0x40003800
 8001658:	40021000 	.word	0x40021000
 800165c:	48000400 	.word	0x48000400

08001660 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	@ 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001680:	d129      	bne.n	80016d6 <HAL_TIM_Base_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001682:	4b62      	ldr	r3, [pc, #392]	@ (800180c <HAL_TIM_Base_MspInit+0x1ac>)
 8001684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001686:	4a61      	ldr	r2, [pc, #388]	@ (800180c <HAL_TIM_Base_MspInit+0x1ac>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6593      	str	r3, [r2, #88]	@ 0x58
 800168e:	4b5f      	ldr	r3, [pc, #380]	@ (800180c <HAL_TIM_Base_MspInit+0x1ac>)
 8001690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	4b5c      	ldr	r3, [pc, #368]	@ (800180c <HAL_TIM_Base_MspInit+0x1ac>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169e:	4a5b      	ldr	r2, [pc, #364]	@ (800180c <HAL_TIM_Base_MspInit+0x1ac>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a6:	4b59      	ldr	r3, [pc, #356]	@ (800180c <HAL_TIM_Base_MspInit+0x1ac>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016b2:	2301      	movs	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 80016c2:	230e      	movs	r3, #14
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d0:	f000 fef2 	bl	80024b8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016d4:	e095      	b.n	8001802 <HAL_TIM_Base_MspInit+0x1a2>
  else if(htim_base->Instance==TIM3)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a4d      	ldr	r2, [pc, #308]	@ (8001810 <HAL_TIM_Base_MspInit+0x1b0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	f040 8090 	bne.w	8001802 <HAL_TIM_Base_MspInit+0x1a2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016e2:	4b4a      	ldr	r3, [pc, #296]	@ (800180c <HAL_TIM_Base_MspInit+0x1ac>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e6:	4a49      	ldr	r2, [pc, #292]	@ (800180c <HAL_TIM_Base_MspInit+0x1ac>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ee:	4b47      	ldr	r3, [pc, #284]	@ (800180c <HAL_TIM_Base_MspInit+0x1ac>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Channel6;
 80016fa:	4b46      	ldr	r3, [pc, #280]	@ (8001814 <HAL_TIM_Base_MspInit+0x1b4>)
 80016fc:	4a46      	ldr	r2, [pc, #280]	@ (8001818 <HAL_TIM_Base_MspInit+0x1b8>)
 80016fe:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001700:	4b44      	ldr	r3, [pc, #272]	@ (8001814 <HAL_TIM_Base_MspInit+0x1b4>)
 8001702:	223d      	movs	r2, #61	@ 0x3d
 8001704:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001706:	4b43      	ldr	r3, [pc, #268]	@ (8001814 <HAL_TIM_Base_MspInit+0x1b4>)
 8001708:	2210      	movs	r2, #16
 800170a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800170c:	4b41      	ldr	r3, [pc, #260]	@ (8001814 <HAL_TIM_Base_MspInit+0x1b4>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001712:	4b40      	ldr	r3, [pc, #256]	@ (8001814 <HAL_TIM_Base_MspInit+0x1b4>)
 8001714:	2280      	movs	r2, #128	@ 0x80
 8001716:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001718:	4b3e      	ldr	r3, [pc, #248]	@ (8001814 <HAL_TIM_Base_MspInit+0x1b4>)
 800171a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800171e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001720:	4b3c      	ldr	r3, [pc, #240]	@ (8001814 <HAL_TIM_Base_MspInit+0x1b4>)
 8001722:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001726:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_CIRCULAR;
 8001728:	4b3a      	ldr	r3, [pc, #232]	@ (8001814 <HAL_TIM_Base_MspInit+0x1b4>)
 800172a:	2220      	movs	r2, #32
 800172c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800172e:	4b39      	ldr	r3, [pc, #228]	@ (8001814 <HAL_TIM_Base_MspInit+0x1b4>)
 8001730:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001734:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8001736:	4837      	ldr	r0, [pc, #220]	@ (8001814 <HAL_TIM_Base_MspInit+0x1b4>)
 8001738:	f000 fb72 	bl	8001e20 <HAL_DMA_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_TIM_Base_MspInit+0xe6>
      Error_Handler();
 8001742:	f7ff feb5 	bl	80014b0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a32      	ldr	r2, [pc, #200]	@ (8001814 <HAL_TIM_Base_MspInit+0x1b4>)
 800174a:	625a      	str	r2, [r3, #36]	@ 0x24
 800174c:	4a31      	ldr	r2, [pc, #196]	@ (8001814 <HAL_TIM_Base_MspInit+0x1b4>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 8001752:	4b32      	ldr	r3, [pc, #200]	@ (800181c <HAL_TIM_Base_MspInit+0x1bc>)
 8001754:	4a32      	ldr	r2, [pc, #200]	@ (8001820 <HAL_TIM_Base_MspInit+0x1c0>)
 8001756:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 8001758:	4b30      	ldr	r3, [pc, #192]	@ (800181c <HAL_TIM_Base_MspInit+0x1bc>)
 800175a:	223f      	movs	r2, #63	@ 0x3f
 800175c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800175e:	4b2f      	ldr	r3, [pc, #188]	@ (800181c <HAL_TIM_Base_MspInit+0x1bc>)
 8001760:	2210      	movs	r2, #16
 8001762:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001764:	4b2d      	ldr	r3, [pc, #180]	@ (800181c <HAL_TIM_Base_MspInit+0x1bc>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800176a:	4b2c      	ldr	r3, [pc, #176]	@ (800181c <HAL_TIM_Base_MspInit+0x1bc>)
 800176c:	2280      	movs	r2, #128	@ 0x80
 800176e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001770:	4b2a      	ldr	r3, [pc, #168]	@ (800181c <HAL_TIM_Base_MspInit+0x1bc>)
 8001772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001776:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001778:	4b28      	ldr	r3, [pc, #160]	@ (800181c <HAL_TIM_Base_MspInit+0x1bc>)
 800177a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800177e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8001780:	4b26      	ldr	r3, [pc, #152]	@ (800181c <HAL_TIM_Base_MspInit+0x1bc>)
 8001782:	2220      	movs	r2, #32
 8001784:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001786:	4b25      	ldr	r3, [pc, #148]	@ (800181c <HAL_TIM_Base_MspInit+0x1bc>)
 8001788:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800178c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 800178e:	4823      	ldr	r0, [pc, #140]	@ (800181c <HAL_TIM_Base_MspInit+0x1bc>)
 8001790:	f000 fb46 	bl	8001e20 <HAL_DMA_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_TIM_Base_MspInit+0x13e>
      Error_Handler();
 800179a:	f7ff fe89 	bl	80014b0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a1e      	ldr	r2, [pc, #120]	@ (800181c <HAL_TIM_Base_MspInit+0x1bc>)
 80017a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017a4:	4a1d      	ldr	r2, [pc, #116]	@ (800181c <HAL_TIM_Base_MspInit+0x1bc>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim3_ch4.Instance = DMA1_Channel3;
 80017aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001824 <HAL_TIM_Base_MspInit+0x1c4>)
 80017ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001828 <HAL_TIM_Base_MspInit+0x1c8>)
 80017ae:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 80017b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001824 <HAL_TIM_Base_MspInit+0x1c4>)
 80017b2:	2240      	movs	r2, #64	@ 0x40
 80017b4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001824 <HAL_TIM_Base_MspInit+0x1c4>)
 80017b8:	2210      	movs	r2, #16
 80017ba:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80017bc:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <HAL_TIM_Base_MspInit+0x1c4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80017c2:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <HAL_TIM_Base_MspInit+0x1c4>)
 80017c4:	2280      	movs	r2, #128	@ 0x80
 80017c6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017c8:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <HAL_TIM_Base_MspInit+0x1c4>)
 80017ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017ce:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <HAL_TIM_Base_MspInit+0x1c4>)
 80017d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017d6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_CIRCULAR;
 80017d8:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_TIM_Base_MspInit+0x1c4>)
 80017da:	2220      	movs	r2, #32
 80017dc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017de:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_TIM_Base_MspInit+0x1c4>)
 80017e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 80017e6:	480f      	ldr	r0, [pc, #60]	@ (8001824 <HAL_TIM_Base_MspInit+0x1c4>)
 80017e8:	f000 fb1a 	bl	8001e20 <HAL_DMA_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_TIM_Base_MspInit+0x196>
      Error_Handler();
 80017f2:	f7ff fe5d 	bl	80014b0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001824 <HAL_TIM_Base_MspInit+0x1c4>)
 80017fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80017fc:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <HAL_TIM_Base_MspInit+0x1c4>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001802:	bf00      	nop
 8001804:	3728      	adds	r7, #40	@ 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000
 8001810:	40000400 	.word	0x40000400
 8001814:	20003e3c 	.word	0x20003e3c
 8001818:	4002006c 	.word	0x4002006c
 800181c:	20003e9c 	.word	0x20003e9c
 8001820:	4002001c 	.word	0x4002001c
 8001824:	20003efc 	.word	0x20003efc
 8001828:	40020030 	.word	0x40020030

0800182c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	@ 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800184c:	d11d      	bne.n	800188a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <HAL_TIM_MspPostInit+0xac>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	4a21      	ldr	r2, [pc, #132]	@ (80018d8 <HAL_TIM_MspPostInit+0xac>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800185a:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <HAL_TIM_MspPostInit+0xac>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001866:	2308      	movs	r3, #8
 8001868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001876:	2301      	movs	r3, #1
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001884:	f000 fe18 	bl	80024b8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001888:	e021      	b.n	80018ce <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a13      	ldr	r2, [pc, #76]	@ (80018dc <HAL_TIM_MspPostInit+0xb0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d11c      	bne.n	80018ce <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <HAL_TIM_MspPostInit+0xac>)
 8001896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001898:	4a0f      	ldr	r2, [pc, #60]	@ (80018d8 <HAL_TIM_MspPostInit+0xac>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018a0:	4b0d      	ldr	r3, [pc, #52]	@ (80018d8 <HAL_TIM_MspPostInit+0xac>)
 80018a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80018ac:	2350      	movs	r3, #80	@ 0x50
 80018ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b0:	2312      	movs	r3, #18
 80018b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018bc:	2302      	movs	r3, #2
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ca:	f000 fdf5 	bl	80024b8 <HAL_GPIO_Init>
}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	@ 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40000400 	.word	0x40000400

080018e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <NMI_Handler+0x4>

080018e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <HardFault_Handler+0x4>

080018f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <MemManage_Handler+0x4>

080018f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <BusFault_Handler+0x4>

08001900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <UsageFault_Handler+0x4>

08001908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001938:	f000 f922 	bl	8001b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (TimingDelay != 0) {
 800193c:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <SysTick_Handler+0x20>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d004      	beq.n	800194e <SysTick_Handler+0x1a>
    --TimingDelay;
 8001944:	4b03      	ldr	r3, [pc, #12]	@ (8001954 <SysTick_Handler+0x20>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3b01      	subs	r3, #1
 800194a:	4a02      	ldr	r2, [pc, #8]	@ (8001954 <SysTick_Handler+0x20>)
 800194c:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20003f5c 	.word	0x20003f5c

08001958 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <DMA1_Channel2_IRQHandler+0x10>)
 800195e:	f000 fc5b 	bl	8002218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20003e9c 	.word	0x20003e9c

0800196c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 8001970:	4802      	ldr	r0, [pc, #8]	@ (800197c <DMA1_Channel3_IRQHandler+0x10>)
 8001972:	f000 fc51 	bl	8002218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20003efc 	.word	0x20003efc

08001980 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <DMA1_Channel5_IRQHandler+0x10>)
 8001986:	f000 fc47 	bl	8002218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20003d44 	.word	0x20003d44

08001994 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8001998:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <DMA1_Channel6_IRQHandler+0x10>)
 800199a:	f000 fc3d 	bl	8002218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20003e3c 	.word	0x20003e3c

080019a8 <TIM3_IRQHandler>:
//  }
//}


void TIM3_IRQHandler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
//		TIM3->SR = TIM_IT_CC4;// ~TIM_IT_CC1;		// clear all but Update
//	// scope output on high
//	} else
//		TIM3->SR = 0;					// other interrupts not of interest
	  //HAL_TIM_IRQHandler(&htim3);
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c0:	4a14      	ldr	r2, [pc, #80]	@ (8001a14 <_sbrk+0x5c>)
 80019c2:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <_sbrk+0x60>)
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019cc:	4b13      	ldr	r3, [pc, #76]	@ (8001a1c <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d4:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <_sbrk+0x64>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	@ (8001a20 <_sbrk+0x68>)
 80019d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019da:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <_sbrk+0x64>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d207      	bcs.n	80019f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e8:	f004 fd2a 	bl	8006440 <__errno>
 80019ec:	4603      	mov	r3, r0
 80019ee:	220c      	movs	r2, #12
 80019f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019f6:	e009      	b.n	8001a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f8:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fe:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	4a05      	ldr	r2, [pc, #20]	@ (8001a1c <_sbrk+0x64>)
 8001a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20020000 	.word	0x20020000
 8001a18:	00000400 	.word	0x00000400
 8001a1c:	20003f60 	.word	0x20003f60
 8001a20:	200040f0 	.word	0x200040f0

08001a24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <SystemInit+0x20>)
 8001a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a2e:	4a05      	ldr	r2, [pc, #20]	@ (8001a44 <SystemInit+0x20>)
 8001a30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <vidClearScreen>:
/* Private functions ---------------------------------------------------------*/



void vidClearScreen(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	{
		fb[line]				[0] = 0b1111111111111110;
		fb[line]  [XFERS_PERLINE-1] = 0b1111111111111110;
	}
#else
	memset(screen,0xFF,sizeof(screen));
 8001a4c:	f242 7260 	movw	r2, #10080	@ 0x2760
 8001a50:	21ff      	movs	r1, #255	@ 0xff
 8001a52:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <vidClearScreen+0x14>)
 8001a54:	f004 fcec 	bl	8006430 <memset>
#endif

}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000000 	.word	0x20000000

08001a60 <vt100_init>:
 * screen and resets the cursor.  Call this after initialising
 * your peripherals (e.g. UART, LCD) and before feeding any data
 * into the parser.
 */
void vt100_init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
     * function defined in gdi_vt100.c will clear the framebuffer
     * and position the cursor at (0,0).  If you wish to perform
     * additional initialisation (e.g. setting text colours), do it
     * here.
     */
    gdiClearScreen();
 8001a64:	f7fe ff96 	bl	8000994 <gdiClearScreen>
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <vt100_feed>:
 * intended to be called from your UART interrupt or polling
 * routine whenever a new character arrives from the host.  It
 * delegates all parsing to gdiVT100Feed().
 */
void vt100_feed(uint8_t ch)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
    gdiVT100Feed(ch);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff f921 	bl	8000cc0 <gdiVT100Feed>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a88:	480d      	ldr	r0, [pc, #52]	@ (8001ac0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a8a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a8c:	f7ff ffca 	bl	8001a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a90:	480c      	ldr	r0, [pc, #48]	@ (8001ac4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a92:	490d      	ldr	r1, [pc, #52]	@ (8001ac8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a94:	4a0d      	ldr	r2, [pc, #52]	@ (8001acc <LoopForever+0xe>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a98:	e002      	b.n	8001aa0 <LoopCopyDataInit>

08001a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9e:	3304      	adds	r3, #4

08001aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa4:	d3f9      	bcc.n	8001a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aa8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad4 <LoopForever+0x16>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aac:	e001      	b.n	8001ab2 <LoopFillZerobss>

08001aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab0:	3204      	adds	r2, #4

08001ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab4:	d3fb      	bcc.n	8001aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ab6:	f004 fcc9 	bl	800644c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aba:	f7ff f9fb 	bl	8000eb4 <main>

08001abe <LoopForever>:

LoopForever:
    b LoopForever
 8001abe:	e7fe      	b.n	8001abe <LoopForever>
  ldr   r0, =_estack
 8001ac0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ac4:	20002760 	.word	0x20002760
  ldr r1, =_edata
 8001ac8:	20003cc8 	.word	0x20003cc8
  ldr r2, =_sidata
 8001acc:	080079b0 	.word	0x080079b0
  ldr r2, =_sbss
 8001ad0:	20003cc8 	.word	0x20003cc8
  ldr r4, =_ebss
 8001ad4:	200040f0 	.word	0x200040f0

08001ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC1_2_IRQHandler>

08001ada <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f000 f95b 	bl	8001da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aea:	200f      	movs	r0, #15
 8001aec:	f000 f80e 	bl	8001b0c <HAL_InitTick>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	71fb      	strb	r3, [r7, #7]
 8001afa:	e001      	b.n	8001b00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001afc:	f7ff fcde 	bl	80014bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b00:	79fb      	ldrb	r3, [r7, #7]

}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b18:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <HAL_InitTick+0x68>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d022      	beq.n	8001b66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b20:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <HAL_InitTick+0x6c>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b13      	ldr	r3, [pc, #76]	@ (8001b74 <HAL_InitTick+0x68>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 f966 	bl	8001e06 <HAL_SYSTICK_Config>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10f      	bne.n	8001b60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b0f      	cmp	r3, #15
 8001b44:	d809      	bhi.n	8001b5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b46:	2200      	movs	r2, #0
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b4e:	f000 f932 	bl	8001db6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b52:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <HAL_InitTick+0x70>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	e007      	b.n	8001b6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	73fb      	strb	r3, [r7, #15]
 8001b5e:	e004      	b.n	8001b6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
 8001b64:	e001      	b.n	8001b6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20003c74 	.word	0x20003c74
 8001b78:	20002764 	.word	0x20002764
 8001b7c:	20003c70 	.word	0x20003c70

08001b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b84:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <HAL_IncTick+0x1c>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <HAL_IncTick+0x20>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	4a03      	ldr	r2, [pc, #12]	@ (8001b9c <HAL_IncTick+0x1c>)
 8001b90:	6013      	str	r3, [r2, #0]
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	20003fa4 	.word	0x20003fa4
 8001ba0:	20003c74 	.word	0x20003c74

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	@ (8001bb8 <HAL_GetTick+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20003fa4 	.word	0x20003fa4

08001bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff ffee 	bl	8001ba4 <HAL_GetTick>
 8001bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bd4:	d004      	beq.n	8001be0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd6:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <HAL_Delay+0x40>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	4413      	add	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001be0:	bf00      	nop
 8001be2:	f7ff ffdf 	bl	8001ba4 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d8f7      	bhi.n	8001be2 <HAL_Delay+0x26>
  {
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	bf00      	nop
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20003c74 	.word	0x20003c74

08001c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c32:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	60d3      	str	r3, [r2, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c4c:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <__NVIC_GetPriorityGrouping+0x18>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	f003 0307 	and.w	r3, r3, #7
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	db0b      	blt.n	8001c8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f003 021f 	and.w	r2, r3, #31
 8001c7c:	4907      	ldr	r1, [pc, #28]	@ (8001c9c <__NVIC_EnableIRQ+0x38>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	2001      	movs	r0, #1
 8001c86:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000e100 	.word	0xe000e100

08001ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	db0a      	blt.n	8001cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	490c      	ldr	r1, [pc, #48]	@ (8001cec <__NVIC_SetPriority+0x4c>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	0112      	lsls	r2, r2, #4
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc8:	e00a      	b.n	8001ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4908      	ldr	r1, [pc, #32]	@ (8001cf0 <__NVIC_SetPriority+0x50>)
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	3b04      	subs	r3, #4
 8001cd8:	0112      	lsls	r2, r2, #4
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	440b      	add	r3, r1
 8001cde:	761a      	strb	r2, [r3, #24]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000e100 	.word	0xe000e100
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	@ 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f1c3 0307 	rsb	r3, r3, #7
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	bf28      	it	cs
 8001d12:	2304      	movcs	r3, #4
 8001d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	2b06      	cmp	r3, #6
 8001d1c:	d902      	bls.n	8001d24 <NVIC_EncodePriority+0x30>
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3b03      	subs	r3, #3
 8001d22:	e000      	b.n	8001d26 <NVIC_EncodePriority+0x32>
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43da      	mvns	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	401a      	ands	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d3c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	43d9      	mvns	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	4313      	orrs	r3, r2
         );
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3724      	adds	r7, #36	@ 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d6c:	d301      	bcc.n	8001d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00f      	b.n	8001d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d72:	4a0a      	ldr	r2, [pc, #40]	@ (8001d9c <SysTick_Config+0x40>)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7a:	210f      	movs	r1, #15
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d80:	f7ff ff8e 	bl	8001ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d84:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <SysTick_Config+0x40>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8a:	4b04      	ldr	r3, [pc, #16]	@ (8001d9c <SysTick_Config+0x40>)
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	e000e010 	.word	0xe000e010

08001da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ff29 	bl	8001c00 <__NVIC_SetPriorityGrouping>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc4:	f7ff ff40 	bl	8001c48 <__NVIC_GetPriorityGrouping>
 8001dc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	6978      	ldr	r0, [r7, #20]
 8001dd0:	f7ff ff90 	bl	8001cf4 <NVIC_EncodePriority>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff5f 	bl	8001ca0 <__NVIC_SetPriority>
}
 8001de2:	bf00      	nop
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff33 	bl	8001c64 <__NVIC_EnableIRQ>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ffa4 	bl	8001d5c <SysTick_Config>
 8001e14:	4603      	mov	r3, r0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e08d      	b.n	8001f4e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	4b47      	ldr	r3, [pc, #284]	@ (8001f58 <HAL_DMA_Init+0x138>)
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d80f      	bhi.n	8001e5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	4b45      	ldr	r3, [pc, #276]	@ (8001f5c <HAL_DMA_Init+0x13c>)
 8001e46:	4413      	add	r3, r2
 8001e48:	4a45      	ldr	r2, [pc, #276]	@ (8001f60 <HAL_DMA_Init+0x140>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	009a      	lsls	r2, r3, #2
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a42      	ldr	r2, [pc, #264]	@ (8001f64 <HAL_DMA_Init+0x144>)
 8001e5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e5c:	e00e      	b.n	8001e7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b40      	ldr	r3, [pc, #256]	@ (8001f68 <HAL_DMA_Init+0x148>)
 8001e66:	4413      	add	r3, r2
 8001e68:	4a3d      	ldr	r2, [pc, #244]	@ (8001f60 <HAL_DMA_Init+0x140>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	009a      	lsls	r2, r3, #2
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a3c      	ldr	r2, [pc, #240]	@ (8001f6c <HAL_DMA_Init+0x14c>)
 8001e7a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fa90 	bl	80023f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001edc:	d102      	bne.n	8001ee4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ef8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d010      	beq.n	8001f24 <HAL_DMA_Init+0x104>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d80c      	bhi.n	8001f24 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fab0 	bl	8002470 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	e008      	b.n	8001f36 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40020407 	.word	0x40020407
 8001f5c:	bffdfff8 	.word	0xbffdfff8
 8001f60:	cccccccd 	.word	0xcccccccd
 8001f64:	40020000 	.word	0x40020000
 8001f68:	bffdfbf8 	.word	0xbffdfbf8
 8001f6c:	40020400 	.word	0x40020400

08001f70 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e07b      	b.n	800207a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0201 	bic.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b3a      	ldr	r3, [pc, #232]	@ (8002084 <HAL_DMA_DeInit+0x114>)
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d80f      	bhi.n	8001fbe <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b38      	ldr	r3, [pc, #224]	@ (8002088 <HAL_DMA_DeInit+0x118>)
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a38      	ldr	r2, [pc, #224]	@ (800208c <HAL_DMA_DeInit+0x11c>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	009a      	lsls	r2, r3, #2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a35      	ldr	r2, [pc, #212]	@ (8002090 <HAL_DMA_DeInit+0x120>)
 8001fba:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fbc:	e00e      	b.n	8001fdc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b33      	ldr	r3, [pc, #204]	@ (8002094 <HAL_DMA_DeInit+0x124>)
 8001fc6:	4413      	add	r3, r2
 8001fc8:	4a30      	ldr	r2, [pc, #192]	@ (800208c <HAL_DMA_DeInit+0x11c>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	009a      	lsls	r2, r3, #2
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a2f      	ldr	r2, [pc, #188]	@ (8002098 <HAL_DMA_DeInit+0x128>)
 8001fda:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe8:	f003 021f 	and.w	r2, r3, #31
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f9fb 	bl	80023f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800200e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00f      	beq.n	8002038 <HAL_DMA_DeInit+0xc8>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b04      	cmp	r3, #4
 800201e:	d80b      	bhi.n	8002038 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 fa25 	bl	8002470 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002036:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40020407 	.word	0x40020407
 8002088:	bffdfff8 	.word	0xbffdfff8
 800208c:	cccccccd 	.word	0xcccccccd
 8002090:	40020000 	.word	0x40020000
 8002094:	bffdfbf8 	.word	0xbffdfbf8
 8002098:	40020400 	.word	0x40020400

0800209c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_DMA_Start+0x20>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e02e      	b.n	800211a <HAL_DMA_Start+0x7e>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d11d      	bne.n	800210c <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 f93e 	bl	8002376 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0201 	orr.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	e005      	b.n	8002118 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    status = HAL_BUSY;
 8002114:	2302      	movs	r3, #2
 8002116:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002118:	7dfb      	ldrb	r3, [r7, #23]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_DMA_Start_IT+0x20>
 800213e:	2302      	movs	r3, #2
 8002140:	e066      	b.n	8002210 <HAL_DMA_Start_IT+0xee>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b01      	cmp	r3, #1
 8002154:	d155      	bne.n	8002202 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2202      	movs	r2, #2
 800215a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f8fb 	bl	8002376 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 020e 	orr.w	r2, r2, #14
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	e00f      	b.n	80021ba <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0204 	bic.w	r2, r2, #4
 80021a8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 020a 	orr.w	r2, r2, #10
 80021b8:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d007      	beq.n	80021d8 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021d6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021ee:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	e005      	b.n	800220e <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800220a:	2302      	movs	r3, #2
 800220c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800220e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	2204      	movs	r2, #4
 800223a:	409a      	lsls	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4013      	ands	r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d026      	beq.n	8002292 <HAL_DMA_IRQHandler+0x7a>
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b00      	cmp	r3, #0
 800224c:	d021      	beq.n	8002292 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b00      	cmp	r3, #0
 800225a:	d107      	bne.n	800226c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0204 	bic.w	r2, r2, #4
 800226a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	2104      	movs	r1, #4
 800227a:	fa01 f202 	lsl.w	r2, r1, r2
 800227e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002284:	2b00      	cmp	r3, #0
 8002286:	d071      	beq.n	800236c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002290:	e06c      	b.n	800236c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	2202      	movs	r2, #2
 800229c:	409a      	lsls	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d02e      	beq.n	8002304 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d029      	beq.n	8002304 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10b      	bne.n	80022d6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 020a 	bic.w	r2, r2, #10
 80022cc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	f003 021f 	and.w	r2, r3, #31
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	2102      	movs	r1, #2
 80022e4:	fa01 f202 	lsl.w	r2, r1, r2
 80022e8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d038      	beq.n	800236c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002302:	e033      	b.n	800236c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002308:	f003 031f 	and.w	r3, r3, #31
 800230c:	2208      	movs	r2, #8
 800230e:	409a      	lsls	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4013      	ands	r3, r2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d02a      	beq.n	800236e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d025      	beq.n	800236e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 020e 	bic.w	r2, r2, #14
 8002330:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	f003 021f 	and.w	r2, r3, #31
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	2101      	movs	r1, #1
 8002340:	fa01 f202 	lsl.w	r2, r1, r2
 8002344:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002360:	2b00      	cmp	r3, #0
 8002362:	d004      	beq.n	800236e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800236c:	bf00      	nop
 800236e:	bf00      	nop
}
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002376:	b480      	push	{r7}
 8002378:	b085      	sub	sp, #20
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800238c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002392:	2b00      	cmp	r3, #0
 8002394:	d004      	beq.n	80023a0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800239e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a4:	f003 021f 	and.w	r2, r3, #31
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ac:	2101      	movs	r1, #1
 80023ae:	fa01 f202 	lsl.w	r2, r1, r2
 80023b2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b10      	cmp	r3, #16
 80023c2:	d108      	bne.n	80023d6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023d4:	e007      	b.n	80023e6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	60da      	str	r2, [r3, #12]
}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	4b16      	ldr	r3, [pc, #88]	@ (800245c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002404:	429a      	cmp	r2, r3
 8002406:	d802      	bhi.n	800240e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002408:	4b15      	ldr	r3, [pc, #84]	@ (8002460 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	e001      	b.n	8002412 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800240e:	4b15      	ldr	r3, [pc, #84]	@ (8002464 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002410:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	3b08      	subs	r3, #8
 800241e:	4a12      	ldr	r2, [pc, #72]	@ (8002468 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002420:	fba2 2303 	umull	r2, r3, r2, r3
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	009a      	lsls	r2, r3, #2
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4413      	add	r3, r2
 8002434:	461a      	mov	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a0b      	ldr	r2, [pc, #44]	@ (800246c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800243e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	2201      	movs	r2, #1
 8002448:	409a      	lsls	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800244e:	bf00      	nop
 8002450:	371c      	adds	r7, #28
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40020407 	.word	0x40020407
 8002460:	40020800 	.word	0x40020800
 8002464:	40020820 	.word	0x40020820
 8002468:	cccccccd 	.word	0xcccccccd
 800246c:	40020880 	.word	0x40020880

08002470 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4b0b      	ldr	r3, [pc, #44]	@ (80024b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	461a      	mov	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a08      	ldr	r2, [pc, #32]	@ (80024b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002492:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3b01      	subs	r3, #1
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2201      	movs	r2, #1
 800249e:	409a      	lsls	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	1000823f 	.word	0x1000823f
 80024b4:	40020940 	.word	0x40020940

080024b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b087      	sub	sp, #28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024c6:	e15a      	b.n	800277e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	2101      	movs	r1, #1
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	4013      	ands	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 814c 	beq.w	8002778 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d005      	beq.n	80024f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d130      	bne.n	800255a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	2203      	movs	r2, #3
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800252e:	2201      	movs	r2, #1
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	091b      	lsrs	r3, r3, #4
 8002544:	f003 0201 	and.w	r2, r3, #1
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b03      	cmp	r3, #3
 8002564:	d017      	beq.n	8002596 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	2203      	movs	r2, #3
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d123      	bne.n	80025ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	08da      	lsrs	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3208      	adds	r2, #8
 80025aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	220f      	movs	r2, #15
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	08da      	lsrs	r2, r3, #3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3208      	adds	r2, #8
 80025e4:	6939      	ldr	r1, [r7, #16]
 80025e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	2203      	movs	r2, #3
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 0203 	and.w	r2, r3, #3
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80a6 	beq.w	8002778 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262c:	4b5b      	ldr	r3, [pc, #364]	@ (800279c <HAL_GPIO_Init+0x2e4>)
 800262e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002630:	4a5a      	ldr	r2, [pc, #360]	@ (800279c <HAL_GPIO_Init+0x2e4>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6613      	str	r3, [r2, #96]	@ 0x60
 8002638:	4b58      	ldr	r3, [pc, #352]	@ (800279c <HAL_GPIO_Init+0x2e4>)
 800263a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002644:	4a56      	ldr	r2, [pc, #344]	@ (80027a0 <HAL_GPIO_Init+0x2e8>)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	3302      	adds	r3, #2
 800264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	220f      	movs	r2, #15
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4013      	ands	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800266e:	d01f      	beq.n	80026b0 <HAL_GPIO_Init+0x1f8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a4c      	ldr	r2, [pc, #304]	@ (80027a4 <HAL_GPIO_Init+0x2ec>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d019      	beq.n	80026ac <HAL_GPIO_Init+0x1f4>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a4b      	ldr	r2, [pc, #300]	@ (80027a8 <HAL_GPIO_Init+0x2f0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d013      	beq.n	80026a8 <HAL_GPIO_Init+0x1f0>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a4a      	ldr	r2, [pc, #296]	@ (80027ac <HAL_GPIO_Init+0x2f4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d00d      	beq.n	80026a4 <HAL_GPIO_Init+0x1ec>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a49      	ldr	r2, [pc, #292]	@ (80027b0 <HAL_GPIO_Init+0x2f8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d007      	beq.n	80026a0 <HAL_GPIO_Init+0x1e8>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a48      	ldr	r2, [pc, #288]	@ (80027b4 <HAL_GPIO_Init+0x2fc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_GPIO_Init+0x1e4>
 8002698:	2305      	movs	r3, #5
 800269a:	e00a      	b.n	80026b2 <HAL_GPIO_Init+0x1fa>
 800269c:	2306      	movs	r3, #6
 800269e:	e008      	b.n	80026b2 <HAL_GPIO_Init+0x1fa>
 80026a0:	2304      	movs	r3, #4
 80026a2:	e006      	b.n	80026b2 <HAL_GPIO_Init+0x1fa>
 80026a4:	2303      	movs	r3, #3
 80026a6:	e004      	b.n	80026b2 <HAL_GPIO_Init+0x1fa>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e002      	b.n	80026b2 <HAL_GPIO_Init+0x1fa>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <HAL_GPIO_Init+0x1fa>
 80026b0:	2300      	movs	r3, #0
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	f002 0203 	and.w	r2, r2, #3
 80026b8:	0092      	lsls	r2, r2, #2
 80026ba:	4093      	lsls	r3, r2
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c2:	4937      	ldr	r1, [pc, #220]	@ (80027a0 <HAL_GPIO_Init+0x2e8>)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	089b      	lsrs	r3, r3, #2
 80026c8:	3302      	adds	r3, #2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026d0:	4b39      	ldr	r3, [pc, #228]	@ (80027b8 <HAL_GPIO_Init+0x300>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	43db      	mvns	r3, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026f4:	4a30      	ldr	r2, [pc, #192]	@ (80027b8 <HAL_GPIO_Init+0x300>)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026fa:	4b2f      	ldr	r3, [pc, #188]	@ (80027b8 <HAL_GPIO_Init+0x300>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	43db      	mvns	r3, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800271e:	4a26      	ldr	r2, [pc, #152]	@ (80027b8 <HAL_GPIO_Init+0x300>)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002724:	4b24      	ldr	r3, [pc, #144]	@ (80027b8 <HAL_GPIO_Init+0x300>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	43db      	mvns	r3, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4013      	ands	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002748:	4a1b      	ldr	r2, [pc, #108]	@ (80027b8 <HAL_GPIO_Init+0x300>)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800274e:	4b1a      	ldr	r3, [pc, #104]	@ (80027b8 <HAL_GPIO_Init+0x300>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	43db      	mvns	r3, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002772:	4a11      	ldr	r2, [pc, #68]	@ (80027b8 <HAL_GPIO_Init+0x300>)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	3301      	adds	r3, #1
 800277c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	f47f ae9d 	bne.w	80024c8 <HAL_GPIO_Init+0x10>
  }
}
 800278e:	bf00      	nop
 8002790:	bf00      	nop
 8002792:	371c      	adds	r7, #28
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	40021000 	.word	0x40021000
 80027a0:	40010000 	.word	0x40010000
 80027a4:	48000400 	.word	0x48000400
 80027a8:	48000800 	.word	0x48000800
 80027ac:	48000c00 	.word	0x48000c00
 80027b0:	48001000 	.word	0x48001000
 80027b4:	48001400 	.word	0x48001400
 80027b8:	40010400 	.word	0x40010400

080027bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80027ca:	e0bd      	b.n	8002948 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80027cc:	2201      	movs	r2, #1
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80b0 	beq.w	8002942 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80027e2:	4a60      	ldr	r2, [pc, #384]	@ (8002964 <HAL_GPIO_DeInit+0x1a8>)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	089b      	lsrs	r3, r3, #2
 80027e8:	3302      	adds	r3, #2
 80027ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ee:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	220f      	movs	r2, #15
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4013      	ands	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800280a:	d01f      	beq.n	800284c <HAL_GPIO_DeInit+0x90>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a56      	ldr	r2, [pc, #344]	@ (8002968 <HAL_GPIO_DeInit+0x1ac>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d019      	beq.n	8002848 <HAL_GPIO_DeInit+0x8c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a55      	ldr	r2, [pc, #340]	@ (800296c <HAL_GPIO_DeInit+0x1b0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d013      	beq.n	8002844 <HAL_GPIO_DeInit+0x88>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a54      	ldr	r2, [pc, #336]	@ (8002970 <HAL_GPIO_DeInit+0x1b4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d00d      	beq.n	8002840 <HAL_GPIO_DeInit+0x84>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a53      	ldr	r2, [pc, #332]	@ (8002974 <HAL_GPIO_DeInit+0x1b8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d007      	beq.n	800283c <HAL_GPIO_DeInit+0x80>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a52      	ldr	r2, [pc, #328]	@ (8002978 <HAL_GPIO_DeInit+0x1bc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d101      	bne.n	8002838 <HAL_GPIO_DeInit+0x7c>
 8002834:	2305      	movs	r3, #5
 8002836:	e00a      	b.n	800284e <HAL_GPIO_DeInit+0x92>
 8002838:	2306      	movs	r3, #6
 800283a:	e008      	b.n	800284e <HAL_GPIO_DeInit+0x92>
 800283c:	2304      	movs	r3, #4
 800283e:	e006      	b.n	800284e <HAL_GPIO_DeInit+0x92>
 8002840:	2303      	movs	r3, #3
 8002842:	e004      	b.n	800284e <HAL_GPIO_DeInit+0x92>
 8002844:	2302      	movs	r3, #2
 8002846:	e002      	b.n	800284e <HAL_GPIO_DeInit+0x92>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <HAL_GPIO_DeInit+0x92>
 800284c:	2300      	movs	r3, #0
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	f002 0203 	and.w	r2, r2, #3
 8002854:	0092      	lsls	r2, r2, #2
 8002856:	4093      	lsls	r3, r2
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	429a      	cmp	r2, r3
 800285c:	d132      	bne.n	80028c4 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800285e:	4b47      	ldr	r3, [pc, #284]	@ (800297c <HAL_GPIO_DeInit+0x1c0>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	43db      	mvns	r3, r3
 8002866:	4945      	ldr	r1, [pc, #276]	@ (800297c <HAL_GPIO_DeInit+0x1c0>)
 8002868:	4013      	ands	r3, r2
 800286a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800286c:	4b43      	ldr	r3, [pc, #268]	@ (800297c <HAL_GPIO_DeInit+0x1c0>)
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	43db      	mvns	r3, r3
 8002874:	4941      	ldr	r1, [pc, #260]	@ (800297c <HAL_GPIO_DeInit+0x1c0>)
 8002876:	4013      	ands	r3, r2
 8002878:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800287a:	4b40      	ldr	r3, [pc, #256]	@ (800297c <HAL_GPIO_DeInit+0x1c0>)
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	43db      	mvns	r3, r3
 8002882:	493e      	ldr	r1, [pc, #248]	@ (800297c <HAL_GPIO_DeInit+0x1c0>)
 8002884:	4013      	ands	r3, r2
 8002886:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002888:	4b3c      	ldr	r3, [pc, #240]	@ (800297c <HAL_GPIO_DeInit+0x1c0>)
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	43db      	mvns	r3, r3
 8002890:	493a      	ldr	r1, [pc, #232]	@ (800297c <HAL_GPIO_DeInit+0x1c0>)
 8002892:	4013      	ands	r3, r2
 8002894:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	220f      	movs	r2, #15
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80028a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002964 <HAL_GPIO_DeInit+0x1a8>)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	089b      	lsrs	r3, r3, #2
 80028ac:	3302      	adds	r3, #2
 80028ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	43da      	mvns	r2, r3
 80028b6:	482b      	ldr	r0, [pc, #172]	@ (8002964 <HAL_GPIO_DeInit+0x1a8>)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	400a      	ands	r2, r1
 80028be:	3302      	adds	r3, #2
 80028c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	2103      	movs	r1, #3
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	08da      	lsrs	r2, r3, #3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3208      	adds	r2, #8
 80028e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	220f      	movs	r2, #15
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	08d2      	lsrs	r2, r2, #3
 80028f8:	4019      	ands	r1, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3208      	adds	r2, #8
 80028fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	2103      	movs	r1, #3
 800290c:	fa01 f303 	lsl.w	r3, r1, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	401a      	ands	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	2101      	movs	r1, #1
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	fa01 f303 	lsl.w	r3, r1, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	401a      	ands	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	2103      	movs	r1, #3
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	401a      	ands	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	3301      	adds	r3, #1
 8002946:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	f47f af3b 	bne.w	80027cc <HAL_GPIO_DeInit+0x10>
  }
}
 8002956:	bf00      	nop
 8002958:	bf00      	nop
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	40010000 	.word	0x40010000
 8002968:	48000400 	.word	0x48000400
 800296c:	48000800 	.word	0x48000800
 8002970:	48000c00 	.word	0x48000c00
 8002974:	48001000 	.word	0x48001000
 8002978:	48001400 	.word	0x48001400
 800297c:	40010400 	.word	0x40010400

08002980 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e0d0      	b.n	8002b34 <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe fdac 	bl	8001504 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80029c2:	f023 030f 	bic.w	r3, r3, #15
 80029c6:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2202      	movs	r2, #2
 80029ce:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d061      	beq.n	8002a9c <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80029e0:	2310      	movs	r3, #16
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	e001      	b.n	80029ea <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80029e6:	2320      	movs	r3, #32
 80029e8:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	d802      	bhi.n	80029f8 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80029f8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80029fc:	f001 fa10 	bl	8003e20 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a00:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a0a:	d125      	bne.n	8002a58 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d010      	beq.n	8002a36 <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	461a      	mov	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a30:	3305      	adds	r3, #5
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	e01f      	b.n	8002a76 <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	461a      	mov	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	3305      	adds	r3, #5
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	e00e      	b.n	8002a76 <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	461a      	mov	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	3305      	adds	r3, #5
 8002a74:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4a30      	ldr	r2, [pc, #192]	@ (8002b3c <HAL_I2S_Init+0x1bc>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	08db      	lsrs	r3, r3, #3
 8002a80:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	e003      	b.n	8002aa4 <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d902      	bls.n	8002ab0 <HAL_I2S_Init+0x130>
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	2bff      	cmp	r3, #255	@ 0xff
 8002aae:	d907      	bls.n	8002ac0 <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab4:	f043 0210 	orr.w	r2, r3, #16
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e039      	b.n	8002b34 <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	ea42 0103 	orr.w	r1, r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002ade:	f023 030f 	bic.w	r3, r3, #15
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6851      	ldr	r1, [r2, #4]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6892      	ldr	r2, [r2, #8]
 8002aea:	4311      	orrs	r1, r2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	68d2      	ldr	r2, [r2, #12]
 8002af0:	4311      	orrs	r1, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6992      	ldr	r2, [r2, #24]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b02:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b30      	cmp	r3, #48	@ 0x30
 8002b0a:	d003      	beq.n	8002b14 <HAL_I2S_Init+0x194>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2bb0      	cmp	r3, #176	@ 0xb0
 8002b12:	d107      	bne.n	8002b24 <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69da      	ldr	r2, [r3, #28]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b22:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3720      	adds	r7, #32
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	cccccccd 	.word	0xcccccccd

08002b40 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e01a      	b.n	8002b88 <HAL_I2S_DeInit+0x48>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b68:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fe fd54 	bl	8001618 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HAL_I2S_Transmit_DMA+0x1a>
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e08a      	b.n	8002cc4 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e082      	b.n	8002cc4 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_I2S_Transmit_DMA+0x3e>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e07a      	b.n	8002cc4 <HAL_I2S_Transmit_DMA+0x134>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2203      	movs	r2, #3
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d002      	beq.n	8002c02 <HAL_I2S_Transmit_DMA+0x72>
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2b05      	cmp	r3, #5
 8002c00:	d10a      	bne.n	8002c18 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	845a      	strh	r2, [r3, #34]	@ 0x22
 8002c16:	e005      	b.n	8002c24 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	88fa      	ldrh	r2, [r7, #6]
 8002c1c:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	88fa      	ldrh	r2, [r7, #6]
 8002c22:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c28:	4a28      	ldr	r2, [pc, #160]	@ (8002ccc <HAL_I2S_Transmit_DMA+0x13c>)
 8002c2a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c30:	4a27      	ldr	r2, [pc, #156]	@ (8002cd0 <HAL_I2S_Transmit_DMA+0x140>)
 8002c32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c38:	4a26      	ldr	r2, [pc, #152]	@ (8002cd4 <HAL_I2S_Transmit_DMA+0x144>)
 8002c3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002c44:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002c4c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8c1b      	ldrh	r3, [r3, #32]
 8002c52:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002c54:	f7ff fa65 	bl	8002122 <HAL_DMA_Start_IT>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00f      	beq.n	8002c7e <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c62:	f043 0208 	orr.w	r2, r3, #8
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    __HAL_UNLOCK(hi2s);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e022      	b.n	8002cc4 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d107      	bne.n	8002ca4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0202 	orr.w	r2, r2, #2
 8002ca2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d107      	bne.n	8002cc2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69da      	ldr	r2, [r3, #28]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cc0:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	08002d57 	.word	0x08002d57
 8002cd0:	08002d15 	.word	0x08002d15
 8002cd4:	08002d73 	.word	0x08002d73

08002cd8 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d20:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10e      	bne.n	8002d48 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0202 	bic.w	r2, r2, #2
 8002d38:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	845a      	strh	r2, [r3, #34]	@ 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f7ff ffcf 	bl	8002cec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f7ff ffb7 	bl	8002cd8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0203 	bic.w	r2, r2, #3
 8002d8e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da8:	f043 0208 	orr.w	r2, r3, #8
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f7ff ffa5 	bl	8002d00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d141      	bne.n	8002e52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dce:	4b4b      	ldr	r3, [pc, #300]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dda:	d131      	bne.n	8002e40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ddc:	4b47      	ldr	r3, [pc, #284]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002de2:	4a46      	ldr	r2, [pc, #280]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002de8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dec:	4b43      	ldr	r3, [pc, #268]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002df4:	4a41      	ldr	r2, [pc, #260]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dfc:	4b40      	ldr	r3, [pc, #256]	@ (8002f00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2232      	movs	r2, #50	@ 0x32
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	4a3f      	ldr	r2, [pc, #252]	@ (8002f04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	0c9b      	lsrs	r3, r3, #18
 8002e0e:	3301      	adds	r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e12:	e002      	b.n	8002e1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e1a:	4b38      	ldr	r3, [pc, #224]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e26:	d102      	bne.n	8002e2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f2      	bne.n	8002e14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e2e:	4b33      	ldr	r3, [pc, #204]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e3a:	d158      	bne.n	8002eee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e057      	b.n	8002ef0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e40:	4b2e      	ldr	r3, [pc, #184]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e46:	4a2d      	ldr	r2, [pc, #180]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002e50:	e04d      	b.n	8002eee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e58:	d141      	bne.n	8002ede <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e5a:	4b28      	ldr	r3, [pc, #160]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e66:	d131      	bne.n	8002ecc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e68:	4b24      	ldr	r3, [pc, #144]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e6e:	4a23      	ldr	r2, [pc, #140]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e78:	4b20      	ldr	r3, [pc, #128]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e80:	4a1e      	ldr	r2, [pc, #120]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e88:	4b1d      	ldr	r3, [pc, #116]	@ (8002f00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2232      	movs	r2, #50	@ 0x32
 8002e8e:	fb02 f303 	mul.w	r3, r2, r3
 8002e92:	4a1c      	ldr	r2, [pc, #112]	@ (8002f04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	0c9b      	lsrs	r3, r3, #18
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e9e:	e002      	b.n	8002ea6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ea6:	4b15      	ldr	r3, [pc, #84]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eb2:	d102      	bne.n	8002eba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f2      	bne.n	8002ea0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002eba:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ec6:	d112      	bne.n	8002eee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e011      	b.n	8002ef0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002edc:	e007      	b.n	8002eee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ede:	4b07      	ldr	r3, [pc, #28]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ee6:	4a05      	ldr	r2, [pc, #20]	@ (8002efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	40007000 	.word	0x40007000
 8002f00:	20002764 	.word	0x20002764
 8002f04:	431bde83 	.word	0x431bde83

08002f08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002f0c:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4a04      	ldr	r2, [pc, #16]	@ (8002f24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f16:	6093      	str	r3, [r2, #8]
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40007000 	.word	0x40007000

08002f28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e2fe      	b.n	8003538 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d075      	beq.n	8003032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f46:	4b97      	ldr	r3, [pc, #604]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f50:	4b94      	ldr	r3, [pc, #592]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2b0c      	cmp	r3, #12
 8002f5e:	d102      	bne.n	8002f66 <HAL_RCC_OscConfig+0x3e>
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d002      	beq.n	8002f6c <HAL_RCC_OscConfig+0x44>
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d10b      	bne.n	8002f84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6c:	4b8d      	ldr	r3, [pc, #564]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d05b      	beq.n	8003030 <HAL_RCC_OscConfig+0x108>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d157      	bne.n	8003030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e2d9      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f8c:	d106      	bne.n	8002f9c <HAL_RCC_OscConfig+0x74>
 8002f8e:	4b85      	ldr	r3, [pc, #532]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a84      	ldr	r2, [pc, #528]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e01d      	b.n	8002fd8 <HAL_RCC_OscConfig+0xb0>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x98>
 8002fa6:	4b7f      	ldr	r3, [pc, #508]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a7e      	ldr	r2, [pc, #504]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8002fac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	4b7c      	ldr	r3, [pc, #496]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a7b      	ldr	r2, [pc, #492]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	e00b      	b.n	8002fd8 <HAL_RCC_OscConfig+0xb0>
 8002fc0:	4b78      	ldr	r3, [pc, #480]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a77      	ldr	r2, [pc, #476]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8002fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b75      	ldr	r3, [pc, #468]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a74      	ldr	r2, [pc, #464]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8002fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d013      	beq.n	8003008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fde0 	bl	8001ba4 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7fe fddc 	bl	8001ba4 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	@ 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e29e      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ffa:	4b6a      	ldr	r3, [pc, #424]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xc0>
 8003006:	e014      	b.n	8003032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fdcc 	bl	8001ba4 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe fdc8 	bl	8001ba4 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	@ 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e28a      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003022:	4b60      	ldr	r3, [pc, #384]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0xe8>
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d075      	beq.n	800312a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800303e:	4b59      	ldr	r3, [pc, #356]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003048:	4b56      	ldr	r3, [pc, #344]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2b0c      	cmp	r3, #12
 8003056:	d102      	bne.n	800305e <HAL_RCC_OscConfig+0x136>
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d002      	beq.n	8003064 <HAL_RCC_OscConfig+0x13c>
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2b04      	cmp	r3, #4
 8003062:	d11f      	bne.n	80030a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003064:	4b4f      	ldr	r3, [pc, #316]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_RCC_OscConfig+0x154>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e25d      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307c:	4b49      	ldr	r3, [pc, #292]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	061b      	lsls	r3, r3, #24
 800308a:	4946      	ldr	r1, [pc, #280]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003090:	4b45      	ldr	r3, [pc, #276]	@ (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7fe fd39 	bl	8001b0c <HAL_InitTick>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d043      	beq.n	8003128 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e249      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d023      	beq.n	80030f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ac:	4b3d      	ldr	r3, [pc, #244]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a3c      	ldr	r2, [pc, #240]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 80030b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fe fd74 	bl	8001ba4 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c0:	f7fe fd70 	bl	8001ba4 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e232      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030d2:	4b34      	ldr	r3, [pc, #208]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030de:	4b31      	ldr	r3, [pc, #196]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	061b      	lsls	r3, r3, #24
 80030ec:	492d      	ldr	r1, [pc, #180]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
 80030f2:	e01a      	b.n	800312a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f4:	4b2b      	ldr	r3, [pc, #172]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a2a      	ldr	r2, [pc, #168]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 80030fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003100:	f7fe fd50 	bl	8001ba4 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003108:	f7fe fd4c 	bl	8001ba4 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e20e      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800311a:	4b22      	ldr	r3, [pc, #136]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x1e0>
 8003126:	e000      	b.n	800312a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003128:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d041      	beq.n	80031ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01c      	beq.n	8003178 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800313e:	4b19      	ldr	r3, [pc, #100]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8003140:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003144:	4a17      	ldr	r2, [pc, #92]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314e:	f7fe fd29 	bl	8001ba4 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003156:	f7fe fd25 	bl	8001ba4 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e1e7      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003168:	4b0e      	ldr	r3, [pc, #56]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 800316a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0ef      	beq.n	8003156 <HAL_RCC_OscConfig+0x22e>
 8003176:	e020      	b.n	80031ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003178:	4b0a      	ldr	r3, [pc, #40]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 800317a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800317e:	4a09      	ldr	r2, [pc, #36]	@ (80031a4 <HAL_RCC_OscConfig+0x27c>)
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fe fd0c 	bl	8001ba4 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800318e:	e00d      	b.n	80031ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003190:	f7fe fd08 	bl	8001ba4 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d906      	bls.n	80031ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e1ca      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	20003c70 	.word	0x20003c70
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031ac:	4b8c      	ldr	r3, [pc, #560]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 80031ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1ea      	bne.n	8003190 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80a6 	beq.w	8003314 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031c8:	2300      	movs	r3, #0
 80031ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031cc:	4b84      	ldr	r3, [pc, #528]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 80031ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_OscConfig+0x2b4>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x2b6>
 80031dc:	2300      	movs	r3, #0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00d      	beq.n	80031fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e2:	4b7f      	ldr	r3, [pc, #508]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 80031e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e6:	4a7e      	ldr	r2, [pc, #504]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 80031e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ee:	4b7c      	ldr	r3, [pc, #496]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 80031f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031fa:	2301      	movs	r3, #1
 80031fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031fe:	4b79      	ldr	r3, [pc, #484]	@ (80033e4 <HAL_RCC_OscConfig+0x4bc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d118      	bne.n	800323c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800320a:	4b76      	ldr	r3, [pc, #472]	@ (80033e4 <HAL_RCC_OscConfig+0x4bc>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a75      	ldr	r2, [pc, #468]	@ (80033e4 <HAL_RCC_OscConfig+0x4bc>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003216:	f7fe fcc5 	bl	8001ba4 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321e:	f7fe fcc1 	bl	8001ba4 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e183      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003230:	4b6c      	ldr	r3, [pc, #432]	@ (80033e4 <HAL_RCC_OscConfig+0x4bc>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d108      	bne.n	8003256 <HAL_RCC_OscConfig+0x32e>
 8003244:	4b66      	ldr	r3, [pc, #408]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 8003246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800324a:	4a65      	ldr	r2, [pc, #404]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003254:	e024      	b.n	80032a0 <HAL_RCC_OscConfig+0x378>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b05      	cmp	r3, #5
 800325c:	d110      	bne.n	8003280 <HAL_RCC_OscConfig+0x358>
 800325e:	4b60      	ldr	r3, [pc, #384]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003264:	4a5e      	ldr	r2, [pc, #376]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 8003266:	f043 0304 	orr.w	r3, r3, #4
 800326a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800326e:	4b5c      	ldr	r3, [pc, #368]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003274:	4a5a      	ldr	r2, [pc, #360]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800327e:	e00f      	b.n	80032a0 <HAL_RCC_OscConfig+0x378>
 8003280:	4b57      	ldr	r3, [pc, #348]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003286:	4a56      	ldr	r2, [pc, #344]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003290:	4b53      	ldr	r3, [pc, #332]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003296:	4a52      	ldr	r2, [pc, #328]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 8003298:	f023 0304 	bic.w	r3, r3, #4
 800329c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d016      	beq.n	80032d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a8:	f7fe fc7c 	bl	8001ba4 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ae:	e00a      	b.n	80032c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b0:	f7fe fc78 	bl	8001ba4 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032be:	4293      	cmp	r3, r2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e138      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c6:	4b46      	ldr	r3, [pc, #280]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0ed      	beq.n	80032b0 <HAL_RCC_OscConfig+0x388>
 80032d4:	e015      	b.n	8003302 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d6:	f7fe fc65 	bl	8001ba4 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032dc:	e00a      	b.n	80032f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fe fc61 	bl	8001ba4 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e121      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032f4:	4b3a      	ldr	r3, [pc, #232]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1ed      	bne.n	80032de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003302:	7ffb      	ldrb	r3, [r7, #31]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d105      	bne.n	8003314 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003308:	4b35      	ldr	r3, [pc, #212]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 800330a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330c:	4a34      	ldr	r2, [pc, #208]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 800330e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003312:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b00      	cmp	r3, #0
 800331e:	d03c      	beq.n	800339a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01c      	beq.n	8003362 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003328:	4b2d      	ldr	r3, [pc, #180]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 800332a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800332e:	4a2c      	ldr	r2, [pc, #176]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fe fc34 	bl	8001ba4 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003340:	f7fe fc30 	bl	8001ba4 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e0f2      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003352:	4b23      	ldr	r3, [pc, #140]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 8003354:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0ef      	beq.n	8003340 <HAL_RCC_OscConfig+0x418>
 8003360:	e01b      	b.n	800339a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003362:	4b1f      	ldr	r3, [pc, #124]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 8003364:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003368:	4a1d      	ldr	r2, [pc, #116]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003372:	f7fe fc17 	bl	8001ba4 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800337a:	f7fe fc13 	bl	8001ba4 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e0d5      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800338c:	4b14      	ldr	r3, [pc, #80]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 800338e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1ef      	bne.n	800337a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80c9 	beq.w	8003536 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033a4:	4b0e      	ldr	r3, [pc, #56]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b0c      	cmp	r3, #12
 80033ae:	f000 8083 	beq.w	80034b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d15e      	bne.n	8003478 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ba:	4b09      	ldr	r3, [pc, #36]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a08      	ldr	r2, [pc, #32]	@ (80033e0 <HAL_RCC_OscConfig+0x4b8>)
 80033c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fe fbed 	bl	8001ba4 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033cc:	e00c      	b.n	80033e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ce:	f7fe fbe9 	bl	8001ba4 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d905      	bls.n	80033e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e0ab      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e8:	4b55      	ldr	r3, [pc, #340]	@ (8003540 <HAL_RCC_OscConfig+0x618>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1ec      	bne.n	80033ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033f4:	4b52      	ldr	r3, [pc, #328]	@ (8003540 <HAL_RCC_OscConfig+0x618>)
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	4b52      	ldr	r3, [pc, #328]	@ (8003544 <HAL_RCC_OscConfig+0x61c>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6a11      	ldr	r1, [r2, #32]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003404:	3a01      	subs	r2, #1
 8003406:	0112      	lsls	r2, r2, #4
 8003408:	4311      	orrs	r1, r2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800340e:	0212      	lsls	r2, r2, #8
 8003410:	4311      	orrs	r1, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003416:	0852      	lsrs	r2, r2, #1
 8003418:	3a01      	subs	r2, #1
 800341a:	0552      	lsls	r2, r2, #21
 800341c:	4311      	orrs	r1, r2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003422:	0852      	lsrs	r2, r2, #1
 8003424:	3a01      	subs	r2, #1
 8003426:	0652      	lsls	r2, r2, #25
 8003428:	4311      	orrs	r1, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800342e:	06d2      	lsls	r2, r2, #27
 8003430:	430a      	orrs	r2, r1
 8003432:	4943      	ldr	r1, [pc, #268]	@ (8003540 <HAL_RCC_OscConfig+0x618>)
 8003434:	4313      	orrs	r3, r2
 8003436:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003438:	4b41      	ldr	r3, [pc, #260]	@ (8003540 <HAL_RCC_OscConfig+0x618>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a40      	ldr	r2, [pc, #256]	@ (8003540 <HAL_RCC_OscConfig+0x618>)
 800343e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003442:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003444:	4b3e      	ldr	r3, [pc, #248]	@ (8003540 <HAL_RCC_OscConfig+0x618>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4a3d      	ldr	r2, [pc, #244]	@ (8003540 <HAL_RCC_OscConfig+0x618>)
 800344a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800344e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fe fba8 	bl	8001ba4 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003458:	f7fe fba4 	bl	8001ba4 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e066      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800346a:	4b35      	ldr	r3, [pc, #212]	@ (8003540 <HAL_RCC_OscConfig+0x618>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x530>
 8003476:	e05e      	b.n	8003536 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003478:	4b31      	ldr	r3, [pc, #196]	@ (8003540 <HAL_RCC_OscConfig+0x618>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a30      	ldr	r2, [pc, #192]	@ (8003540 <HAL_RCC_OscConfig+0x618>)
 800347e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fe fb8e 	bl	8001ba4 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe fb8a 	bl	8001ba4 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e04c      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349e:	4b28      	ldr	r3, [pc, #160]	@ (8003540 <HAL_RCC_OscConfig+0x618>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80034aa:	4b25      	ldr	r3, [pc, #148]	@ (8003540 <HAL_RCC_OscConfig+0x618>)
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	4924      	ldr	r1, [pc, #144]	@ (8003540 <HAL_RCC_OscConfig+0x618>)
 80034b0:	4b25      	ldr	r3, [pc, #148]	@ (8003548 <HAL_RCC_OscConfig+0x620>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	60cb      	str	r3, [r1, #12]
 80034b6:	e03e      	b.n	8003536 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e039      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80034c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003540 <HAL_RCC_OscConfig+0x618>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f003 0203 	and.w	r2, r3, #3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d12c      	bne.n	8003532 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	3b01      	subs	r3, #1
 80034e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d123      	bne.n	8003532 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d11b      	bne.n	8003532 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003504:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d113      	bne.n	8003532 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	3b01      	subs	r3, #1
 8003518:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800351a:	429a      	cmp	r2, r3
 800351c:	d109      	bne.n	8003532 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003528:	085b      	lsrs	r3, r3, #1
 800352a:	3b01      	subs	r3, #1
 800352c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d001      	beq.n	8003536 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000
 8003544:	019f800c 	.word	0x019f800c
 8003548:	feeefffc 	.word	0xfeeefffc

0800354c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e11e      	b.n	80037a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003564:	4b91      	ldr	r3, [pc, #580]	@ (80037ac <HAL_RCC_ClockConfig+0x260>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d910      	bls.n	8003594 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003572:	4b8e      	ldr	r3, [pc, #568]	@ (80037ac <HAL_RCC_ClockConfig+0x260>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 020f 	bic.w	r2, r3, #15
 800357a:	498c      	ldr	r1, [pc, #560]	@ (80037ac <HAL_RCC_ClockConfig+0x260>)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b8a      	ldr	r3, [pc, #552]	@ (80037ac <HAL_RCC_ClockConfig+0x260>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e106      	b.n	80037a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d073      	beq.n	8003688 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d129      	bne.n	80035fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035a8:	4b81      	ldr	r3, [pc, #516]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0f4      	b.n	80037a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80035b8:	f000 f99e 	bl	80038f8 <RCC_GetSysClockFreqFromPLLSource>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4a7c      	ldr	r2, [pc, #496]	@ (80037b4 <HAL_RCC_ClockConfig+0x268>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d93f      	bls.n	8003646 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035c6:	4b7a      	ldr	r3, [pc, #488]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d009      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d033      	beq.n	8003646 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d12f      	bne.n	8003646 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035e6:	4b72      	ldr	r3, [pc, #456]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035ee:	4a70      	ldr	r2, [pc, #448]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 80035f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035f6:	2380      	movs	r3, #128	@ 0x80
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	e024      	b.n	8003646 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d107      	bne.n	8003614 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003604:	4b6a      	ldr	r3, [pc, #424]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0c6      	b.n	80037a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003614:	4b66      	ldr	r3, [pc, #408]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0be      	b.n	80037a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003624:	f000 f8ce 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8003628:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4a61      	ldr	r2, [pc, #388]	@ (80037b4 <HAL_RCC_ClockConfig+0x268>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d909      	bls.n	8003646 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003632:	4b5f      	ldr	r3, [pc, #380]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800363a:	4a5d      	ldr	r2, [pc, #372]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 800363c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003640:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003642:	2380      	movs	r3, #128	@ 0x80
 8003644:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003646:	4b5a      	ldr	r3, [pc, #360]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f023 0203 	bic.w	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	4957      	ldr	r1, [pc, #348]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 8003654:	4313      	orrs	r3, r2
 8003656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003658:	f7fe faa4 	bl	8001ba4 <HAL_GetTick>
 800365c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365e:	e00a      	b.n	8003676 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003660:	f7fe faa0 	bl	8001ba4 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e095      	b.n	80037a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003676:	4b4e      	ldr	r3, [pc, #312]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 020c 	and.w	r2, r3, #12
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	429a      	cmp	r2, r3
 8003686:	d1eb      	bne.n	8003660 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d023      	beq.n	80036dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036a0:	4b43      	ldr	r3, [pc, #268]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4a42      	ldr	r2, [pc, #264]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 80036a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d007      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80036b8:	4b3d      	ldr	r3, [pc, #244]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80036c0:	4a3b      	ldr	r2, [pc, #236]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 80036c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c8:	4b39      	ldr	r3, [pc, #228]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4936      	ldr	r1, [pc, #216]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	608b      	str	r3, [r1, #8]
 80036da:	e008      	b.n	80036ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b80      	cmp	r3, #128	@ 0x80
 80036e0:	d105      	bne.n	80036ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036e2:	4b33      	ldr	r3, [pc, #204]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	4a32      	ldr	r2, [pc, #200]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 80036e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036ee:	4b2f      	ldr	r3, [pc, #188]	@ (80037ac <HAL_RCC_ClockConfig+0x260>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d21d      	bcs.n	8003738 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fc:	4b2b      	ldr	r3, [pc, #172]	@ (80037ac <HAL_RCC_ClockConfig+0x260>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f023 020f 	bic.w	r2, r3, #15
 8003704:	4929      	ldr	r1, [pc, #164]	@ (80037ac <HAL_RCC_ClockConfig+0x260>)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	4313      	orrs	r3, r2
 800370a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800370c:	f7fe fa4a 	bl	8001ba4 <HAL_GetTick>
 8003710:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	e00a      	b.n	800372a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003714:	f7fe fa46 	bl	8001ba4 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003722:	4293      	cmp	r3, r2
 8003724:	d901      	bls.n	800372a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e03b      	b.n	80037a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b20      	ldr	r3, [pc, #128]	@ (80037ac <HAL_RCC_ClockConfig+0x260>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d1ed      	bne.n	8003714 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003744:	4b1a      	ldr	r3, [pc, #104]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4917      	ldr	r1, [pc, #92]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d009      	beq.n	8003776 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003762:	4b13      	ldr	r3, [pc, #76]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	490f      	ldr	r1, [pc, #60]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003776:	f000 f825 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 800377a:	4602      	mov	r2, r0
 800377c:	4b0c      	ldr	r3, [pc, #48]	@ (80037b0 <HAL_RCC_ClockConfig+0x264>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	490c      	ldr	r1, [pc, #48]	@ (80037b8 <HAL_RCC_ClockConfig+0x26c>)
 8003788:	5ccb      	ldrb	r3, [r1, r3]
 800378a:	f003 031f 	and.w	r3, r3, #31
 800378e:	fa22 f303 	lsr.w	r3, r2, r3
 8003792:	4a0a      	ldr	r2, [pc, #40]	@ (80037bc <HAL_RCC_ClockConfig+0x270>)
 8003794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003796:	4b0a      	ldr	r3, [pc, #40]	@ (80037c0 <HAL_RCC_ClockConfig+0x274>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe f9b6 	bl	8001b0c <HAL_InitTick>
 80037a0:	4603      	mov	r3, r0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40022000 	.word	0x40022000
 80037b0:	40021000 	.word	0x40021000
 80037b4:	04c4b400 	.word	0x04c4b400
 80037b8:	08007350 	.word	0x08007350
 80037bc:	20002764 	.word	0x20002764
 80037c0:	20003c70 	.word	0x20003c70

080037c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80037ca:	4b2c      	ldr	r3, [pc, #176]	@ (800387c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d102      	bne.n	80037dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003880 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	e047      	b.n	800386c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037dc:	4b27      	ldr	r3, [pc, #156]	@ (800387c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 030c 	and.w	r3, r3, #12
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d102      	bne.n	80037ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037e8:	4b26      	ldr	r3, [pc, #152]	@ (8003884 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	e03e      	b.n	800386c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80037ee:	4b23      	ldr	r3, [pc, #140]	@ (800387c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b0c      	cmp	r3, #12
 80037f8:	d136      	bne.n	8003868 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037fa:	4b20      	ldr	r3, [pc, #128]	@ (800387c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003804:	4b1d      	ldr	r3, [pc, #116]	@ (800387c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	3301      	adds	r3, #1
 8003810:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d10c      	bne.n	8003832 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003818:	4a1a      	ldr	r2, [pc, #104]	@ (8003884 <HAL_RCC_GetSysClockFreq+0xc0>)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	4a16      	ldr	r2, [pc, #88]	@ (800387c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003822:	68d2      	ldr	r2, [r2, #12]
 8003824:	0a12      	lsrs	r2, r2, #8
 8003826:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	617b      	str	r3, [r7, #20]
      break;
 8003830:	e00c      	b.n	800384c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003832:	4a13      	ldr	r2, [pc, #76]	@ (8003880 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	fbb2 f3f3 	udiv	r3, r2, r3
 800383a:	4a10      	ldr	r2, [pc, #64]	@ (800387c <HAL_RCC_GetSysClockFreq+0xb8>)
 800383c:	68d2      	ldr	r2, [r2, #12]
 800383e:	0a12      	lsrs	r2, r2, #8
 8003840:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003844:	fb02 f303 	mul.w	r3, r2, r3
 8003848:	617b      	str	r3, [r7, #20]
      break;
 800384a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800384c:	4b0b      	ldr	r3, [pc, #44]	@ (800387c <HAL_RCC_GetSysClockFreq+0xb8>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	0e5b      	lsrs	r3, r3, #25
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	3301      	adds	r3, #1
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	fbb2 f3f3 	udiv	r3, r2, r3
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	e001      	b.n	800386c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800386c:	693b      	ldr	r3, [r7, #16]
}
 800386e:	4618      	mov	r0, r3
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40021000 	.word	0x40021000
 8003880:	00f42400 	.word	0x00f42400
 8003884:	007a1200 	.word	0x007a1200

08003888 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800388c:	4b03      	ldr	r3, [pc, #12]	@ (800389c <HAL_RCC_GetHCLKFreq+0x14>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20002764 	.word	0x20002764

080038a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038a4:	f7ff fff0 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4b06      	ldr	r3, [pc, #24]	@ (80038c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	0a1b      	lsrs	r3, r3, #8
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	4904      	ldr	r1, [pc, #16]	@ (80038c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038b6:	5ccb      	ldrb	r3, [r1, r3]
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40021000 	.word	0x40021000
 80038c8:	08007360 	.word	0x08007360

080038cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038d0:	f7ff ffda 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038d4:	4602      	mov	r2, r0
 80038d6:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	0adb      	lsrs	r3, r3, #11
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	4904      	ldr	r1, [pc, #16]	@ (80038f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038e2:	5ccb      	ldrb	r3, [r1, r3]
 80038e4:	f003 031f 	and.w	r3, r3, #31
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40021000 	.word	0x40021000
 80038f4:	08007360 	.word	0x08007360

080038f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003908:	4b1b      	ldr	r3, [pc, #108]	@ (8003978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	3301      	adds	r3, #1
 8003914:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d10c      	bne.n	8003936 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800391c:	4a17      	ldr	r2, [pc, #92]	@ (800397c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	fbb2 f3f3 	udiv	r3, r2, r3
 8003924:	4a14      	ldr	r2, [pc, #80]	@ (8003978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003926:	68d2      	ldr	r2, [r2, #12]
 8003928:	0a12      	lsrs	r2, r2, #8
 800392a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800392e:	fb02 f303 	mul.w	r3, r2, r3
 8003932:	617b      	str	r3, [r7, #20]
    break;
 8003934:	e00c      	b.n	8003950 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003936:	4a12      	ldr	r2, [pc, #72]	@ (8003980 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	fbb2 f3f3 	udiv	r3, r2, r3
 800393e:	4a0e      	ldr	r2, [pc, #56]	@ (8003978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003940:	68d2      	ldr	r2, [r2, #12]
 8003942:	0a12      	lsrs	r2, r2, #8
 8003944:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003948:	fb02 f303 	mul.w	r3, r2, r3
 800394c:	617b      	str	r3, [r7, #20]
    break;
 800394e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003950:	4b09      	ldr	r3, [pc, #36]	@ (8003978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	0e5b      	lsrs	r3, r3, #25
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	3301      	adds	r3, #1
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	fbb2 f3f3 	udiv	r3, r2, r3
 8003968:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800396a:	687b      	ldr	r3, [r7, #4]
}
 800396c:	4618      	mov	r0, r3
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	40021000 	.word	0x40021000
 800397c:	007a1200 	.word	0x007a1200
 8003980:	00f42400 	.word	0x00f42400

08003984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800398c:	2300      	movs	r3, #0
 800398e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003990:	2300      	movs	r3, #0
 8003992:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 8098 	beq.w	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a2:	2300      	movs	r3, #0
 80039a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a6:	4b43      	ldr	r3, [pc, #268]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10d      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b2:	4b40      	ldr	r3, [pc, #256]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80039be:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ca:	2301      	movs	r3, #1
 80039cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ce:	4b3a      	ldr	r3, [pc, #232]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a39      	ldr	r2, [pc, #228]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039da:	f7fe f8e3 	bl	8001ba4 <HAL_GetTick>
 80039de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039e0:	e009      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e2:	f7fe f8df 	bl	8001ba4 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d902      	bls.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	74fb      	strb	r3, [r7, #19]
        break;
 80039f4:	e005      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039f6:	4b30      	ldr	r3, [pc, #192]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0ef      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a02:	7cfb      	ldrb	r3, [r7, #19]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d159      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a08:	4b2a      	ldr	r3, [pc, #168]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01e      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d019      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a24:	4b23      	ldr	r3, [pc, #140]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a30:	4b20      	ldr	r3, [pc, #128]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a36:	4a1f      	ldr	r2, [pc, #124]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a40:	4b1c      	ldr	r3, [pc, #112]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a46:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a50:	4a18      	ldr	r2, [pc, #96]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d016      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7fe f89f 	bl	8001ba4 <HAL_GetTick>
 8003a66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a68:	e00b      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6a:	f7fe f89b 	bl	8001ba4 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d902      	bls.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	74fb      	strb	r3, [r7, #19]
            break;
 8003a80:	e006      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a82:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ec      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003a90:	7cfb      	ldrb	r3, [r7, #19]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10b      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a96:	4b07      	ldr	r3, [pc, #28]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa4:	4903      	ldr	r1, [pc, #12]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003aac:	e008      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003aae:	7cfb      	ldrb	r3, [r7, #19]
 8003ab0:	74bb      	strb	r3, [r7, #18]
 8003ab2:	e005      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abc:	7cfb      	ldrb	r3, [r7, #19]
 8003abe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ac0:	7c7b      	ldrb	r3, [r7, #17]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d105      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac6:	4ba7      	ldr	r3, [pc, #668]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aca:	4aa6      	ldr	r2, [pc, #664]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003acc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ad0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ade:	4ba1      	ldr	r3, [pc, #644]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae4:	f023 0203 	bic.w	r2, r3, #3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	499d      	ldr	r1, [pc, #628]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b00:	4b98      	ldr	r3, [pc, #608]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b06:	f023 020c 	bic.w	r2, r3, #12
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	4995      	ldr	r1, [pc, #596]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b22:	4b90      	ldr	r3, [pc, #576]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	498c      	ldr	r1, [pc, #560]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b44:	4b87      	ldr	r3, [pc, #540]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	4984      	ldr	r1, [pc, #528]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b66:	4b7f      	ldr	r3, [pc, #508]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	497b      	ldr	r1, [pc, #492]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b88:	4b76      	ldr	r3, [pc, #472]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	4973      	ldr	r1, [pc, #460]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003baa:	4b6e      	ldr	r3, [pc, #440]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	496a      	ldr	r1, [pc, #424]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bcc:	4b65      	ldr	r3, [pc, #404]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	4962      	ldr	r1, [pc, #392]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bee:	4b5d      	ldr	r3, [pc, #372]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfc:	4959      	ldr	r1, [pc, #356]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c10:	4b54      	ldr	r3, [pc, #336]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c16:	f023 0203 	bic.w	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1e:	4951      	ldr	r1, [pc, #324]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c32:	4b4c      	ldr	r3, [pc, #304]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c38:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c40:	4948      	ldr	r1, [pc, #288]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d015      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c54:	4b43      	ldr	r3, [pc, #268]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c62:	4940      	ldr	r1, [pc, #256]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c72:	d105      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c74:	4b3b      	ldr	r3, [pc, #236]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4a3a      	ldr	r2, [pc, #232]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c7e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d015      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c8c:	4b35      	ldr	r3, [pc, #212]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c92:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9a:	4932      	ldr	r1, [pc, #200]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003caa:	d105      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cac:	4b2d      	ldr	r3, [pc, #180]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4a2c      	ldr	r2, [pc, #176]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cb6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d015      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cc4:	4b27      	ldr	r3, [pc, #156]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd2:	4924      	ldr	r1, [pc, #144]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ce2:	d105      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d015      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cfc:	4b19      	ldr	r3, [pc, #100]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0a:	4916      	ldr	r1, [pc, #88]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d1a:	d105      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d1c:	4b11      	ldr	r3, [pc, #68]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4a10      	ldr	r2, [pc, #64]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d26:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d019      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d34:	4b0b      	ldr	r3, [pc, #44]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	4908      	ldr	r1, [pc, #32]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d52:	d109      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d54:	4b03      	ldr	r3, [pc, #12]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	4a02      	ldr	r2, [pc, #8]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d5e:	60d3      	str	r3, [r2, #12]
 8003d60:	e002      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d015      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d74:	4b29      	ldr	r3, [pc, #164]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d82:	4926      	ldr	r1, [pc, #152]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d92:	d105      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d94:	4b21      	ldr	r3, [pc, #132]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	4a20      	ldr	r2, [pc, #128]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d9e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d015      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003dac:	4b1b      	ldr	r3, [pc, #108]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dba:	4918      	ldr	r1, [pc, #96]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dca:	d105      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003dcc:	4b13      	ldr	r3, [pc, #76]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4a12      	ldr	r2, [pc, #72]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d015      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003de4:	4b0d      	ldr	r3, [pc, #52]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003de6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003dea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df2:	490a      	ldr	r1, [pc, #40]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e02:	d105      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e04:	4b05      	ldr	r3, [pc, #20]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4a04      	ldr	r2, [pc, #16]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003e10:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000

08003e20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e32:	d136      	bne.n	8003ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003e34:	4bb1      	ldr	r3, [pc, #708]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e3e:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003e40:	4bae      	ldr	r3, [pc, #696]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d108      	bne.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e54:	d104      	bne.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8003e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e5a:	61fb      	str	r3, [r7, #28]
 8003e5c:	f000 bd12 	b.w	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003e60:	4ba6      	ldr	r3, [pc, #664]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d108      	bne.n	8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e74:	d104      	bne.n	8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 8003e76:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003e7a:	61fb      	str	r3, [r7, #28]
 8003e7c:	f000 bd02 	b.w	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003e80:	4b9e      	ldr	r3, [pc, #632]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e8c:	f040 84fa 	bne.w	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e96:	f040 84f5 	bne.w	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = HSE_VALUE / 32U;
 8003e9a:	4b99      	ldr	r3, [pc, #612]	@ (8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	f000 bcf1 	b.w	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 8003ea2:	4b96      	ldr	r3, [pc, #600]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003eae:	4b93      	ldr	r3, [pc, #588]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eba:	d102      	bne.n	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 8003ebc:	4b91      	ldr	r3, [pc, #580]	@ (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	e017      	b.n	8003ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	e014      	b.n	8003ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 8003ec8:	4b8c      	ldr	r3, [pc, #560]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d10c      	bne.n	8003eee <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003ed4:	4b89      	ldr	r3, [pc, #548]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003edc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ee0:	d102      	bne.n	8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 8003ee2:	4b89      	ldr	r3, [pc, #548]	@ (8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	e004      	b.n	8003ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	e001      	b.n	8003ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003ef2:	4b82      	ldr	r3, [pc, #520]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	091b      	lsrs	r3, r3, #4
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	3301      	adds	r3, #1
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f0c:	f000 8466 	beq.w	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f16:	f200 848e 	bhi.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f20:	f000 8263 	beq.w	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f2a:	f200 8484 	bhi.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f34:	f000 8417 	beq.w	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f3e:	f200 847a 	bhi.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f48:	f000 83d0 	beq.w	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f52:	f200 8470 	bhi.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f5c:	f000 8398 	beq.w	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f66:	f200 8466 	bhi.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f70:	f000 8360 	beq.w	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f7a:	f200 845c 	bhi.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f84:	f000 8318 	beq.w	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f8e:	f200 8452 	bhi.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f98:	f000 82ca 	beq.w	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fa2:	f200 8448 	bhi.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fac:	f000 827c 	beq.w	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb6:	f200 843e 	bhi.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fc0:	f000 8236 	beq.w	8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fca:	f200 8434 	bhi.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fd4:	f000 81e4 	beq.w	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fde:	f200 842a 	bhi.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b80      	cmp	r3, #128	@ 0x80
 8003fe6:	f000 81b1 	beq.w	800434c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b80      	cmp	r3, #128	@ 0x80
 8003fee:	f200 8422 	bhi.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	d84b      	bhi.n	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 841b 	beq.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3b01      	subs	r3, #1
 8004004:	2b1f      	cmp	r3, #31
 8004006:	f200 8416 	bhi.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800400a:	a201      	add	r2, pc, #4	@ (adr r2, 8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	0800409b 	.word	0x0800409b
 8004014:	0800410d 	.word	0x0800410d
 8004018:	08004837 	.word	0x08004837
 800401c:	0800416f 	.word	0x0800416f
 8004020:	08004837 	.word	0x08004837
 8004024:	08004837 	.word	0x08004837
 8004028:	08004837 	.word	0x08004837
 800402c:	080041d1 	.word	0x080041d1
 8004030:	08004837 	.word	0x08004837
 8004034:	08004837 	.word	0x08004837
 8004038:	08004837 	.word	0x08004837
 800403c:	08004837 	.word	0x08004837
 8004040:	08004837 	.word	0x08004837
 8004044:	08004837 	.word	0x08004837
 8004048:	08004837 	.word	0x08004837
 800404c:	08004233 	.word	0x08004233
 8004050:	08004837 	.word	0x08004837
 8004054:	08004837 	.word	0x08004837
 8004058:	08004837 	.word	0x08004837
 800405c:	08004837 	.word	0x08004837
 8004060:	08004837 	.word	0x08004837
 8004064:	08004837 	.word	0x08004837
 8004068:	08004837 	.word	0x08004837
 800406c:	08004837 	.word	0x08004837
 8004070:	08004837 	.word	0x08004837
 8004074:	08004837 	.word	0x08004837
 8004078:	08004837 	.word	0x08004837
 800407c:	08004837 	.word	0x08004837
 8004080:	08004837 	.word	0x08004837
 8004084:	08004837 	.word	0x08004837
 8004088:	08004837 	.word	0x08004837
 800408c:	0800429b 	.word	0x0800429b
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b40      	cmp	r3, #64	@ 0x40
 8004094:	f000 8135 	beq.w	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
      break;

#endif /* QUADSPI */

    default:
      break;
 8004098:	e3cd      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800409a:	4b18      	ldr	r3, [pc, #96]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800409c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d103      	bne.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        frequency = HAL_RCC_GetPCLK2Freq();
 80040ac:	f7ff fc0e 	bl	80038cc <HAL_RCC_GetPCLK2Freq>
 80040b0:	61f8      	str	r0, [r7, #28]
      break;
 80040b2:	e3c2      	b.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d103      	bne.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
        frequency = HAL_RCC_GetSysClockFreq();
 80040ba:	f7ff fb83 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 80040be:	61f8      	str	r0, [r7, #28]
      break;
 80040c0:	e3bb      	b.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 80040c2:	4b0e      	ldr	r3, [pc, #56]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ce:	d105      	bne.n	80040dc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d102      	bne.n	80040dc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HSI_VALUE;
 80040d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80040d8:	61fb      	str	r3, [r7, #28]
      break;
 80040da:	e3ae      	b.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80040dc:	4b07      	ldr	r3, [pc, #28]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	f040 83a7 	bne.w	800483a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	f040 83a3 	bne.w	800483a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
        frequency = LSE_VALUE;
 80040f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040f8:	61fb      	str	r3, [r7, #28]
      break;
 80040fa:	e39e      	b.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80040fc:	40021000 	.word	0x40021000
 8004100:	0003d090 	.word	0x0003d090
 8004104:	00f42400 	.word	0x00f42400
 8004108:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800410c:	4ba2      	ldr	r3, [pc, #648]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d103      	bne.n	8004126 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
        frequency = HAL_RCC_GetPCLK1Freq();
 800411e:	f7ff fbbf 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 8004122:	61f8      	str	r0, [r7, #28]
      break;
 8004124:	e38b      	b.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b04      	cmp	r3, #4
 800412a:	d103      	bne.n	8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
        frequency = HAL_RCC_GetSysClockFreq();
 800412c:	f7ff fb4a 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8004130:	61f8      	str	r0, [r7, #28]
      break;
 8004132:	e384      	b.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004134:	4b98      	ldr	r3, [pc, #608]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800413c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004140:	d105      	bne.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b08      	cmp	r3, #8
 8004146:	d102      	bne.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
        frequency = HSI_VALUE;
 8004148:	4b94      	ldr	r3, [pc, #592]	@ (800439c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800414a:	61fb      	str	r3, [r7, #28]
      break;
 800414c:	e377      	b.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800414e:	4b92      	ldr	r3, [pc, #584]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b02      	cmp	r3, #2
 800415a:	f040 8370 	bne.w	800483e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	2b0c      	cmp	r3, #12
 8004162:	f040 836c 	bne.w	800483e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
        frequency = LSE_VALUE;
 8004166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800416a:	61fb      	str	r3, [r7, #28]
      break;
 800416c:	e367      	b.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800416e:	4b8a      	ldr	r3, [pc, #552]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004174:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004178:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d103      	bne.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004180:	f7ff fb8e 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 8004184:	61f8      	str	r0, [r7, #28]
      break;
 8004186:	e35c      	b.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2b10      	cmp	r3, #16
 800418c:	d103      	bne.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
        frequency = HAL_RCC_GetSysClockFreq();
 800418e:	f7ff fb19 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8004192:	61f8      	str	r0, [r7, #28]
      break;
 8004194:	e355      	b.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004196:	4b80      	ldr	r3, [pc, #512]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800419e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041a2:	d105      	bne.n	80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	d102      	bne.n	80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
        frequency = HSI_VALUE;
 80041aa:	4b7c      	ldr	r3, [pc, #496]	@ (800439c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80041ac:	61fb      	str	r3, [r7, #28]
      break;
 80041ae:	e348      	b.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80041b0:	4b79      	ldr	r3, [pc, #484]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	f040 8341 	bne.w	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	2b30      	cmp	r3, #48	@ 0x30
 80041c4:	f040 833d 	bne.w	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        frequency = LSE_VALUE;
 80041c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041cc:	61fb      	str	r3, [r7, #28]
      break;
 80041ce:	e338      	b.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80041d0:	4b71      	ldr	r3, [pc, #452]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80041da:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d103      	bne.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        frequency = HAL_RCC_GetPCLK1Freq();
 80041e2:	f7ff fb5d 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 80041e6:	61f8      	str	r0, [r7, #28]
      break;
 80041e8:	e32d      	b.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	2b40      	cmp	r3, #64	@ 0x40
 80041ee:	d103      	bne.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        frequency = HAL_RCC_GetSysClockFreq();
 80041f0:	f7ff fae8 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 80041f4:	61f8      	str	r0, [r7, #28]
      break;
 80041f6:	e326      	b.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80041f8:	4b67      	ldr	r3, [pc, #412]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004204:	d105      	bne.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b80      	cmp	r3, #128	@ 0x80
 800420a:	d102      	bne.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
        frequency = HSI_VALUE;
 800420c:	4b63      	ldr	r3, [pc, #396]	@ (800439c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800420e:	61fb      	str	r3, [r7, #28]
      break;
 8004210:	e319      	b.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004212:	4b61      	ldr	r3, [pc, #388]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b02      	cmp	r3, #2
 800421e:	f040 8312 	bne.w	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2bc0      	cmp	r3, #192	@ 0xc0
 8004226:	f040 830e 	bne.w	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
        frequency = LSE_VALUE;
 800422a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800422e:	61fb      	str	r3, [r7, #28]
      break;
 8004230:	e309      	b.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004232:	4b59      	ldr	r3, [pc, #356]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004238:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800423c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d103      	bne.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004244:	f7ff fb2c 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 8004248:	61f8      	str	r0, [r7, #28]
      break;
 800424a:	e2fe      	b.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004252:	d103      	bne.n	800425c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
        frequency = HAL_RCC_GetSysClockFreq();
 8004254:	f7ff fab6 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8004258:	61f8      	str	r0, [r7, #28]
      break;
 800425a:	e2f6      	b.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800425c:	4b4e      	ldr	r3, [pc, #312]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004264:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004268:	d106      	bne.n	8004278 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004270:	d102      	bne.n	8004278 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
        frequency = HSI_VALUE;
 8004272:	4b4a      	ldr	r3, [pc, #296]	@ (800439c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004274:	61fb      	str	r3, [r7, #28]
      break;
 8004276:	e2e8      	b.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004278:	4b47      	ldr	r3, [pc, #284]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b02      	cmp	r3, #2
 8004284:	f040 82e1 	bne.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800428e:	f040 82dc 	bne.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
        frequency = LSE_VALUE;
 8004292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004296:	61fb      	str	r3, [r7, #28]
      break;
 8004298:	e2d7      	b.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800429a:	4b3f      	ldr	r3, [pc, #252]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80042a4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d103      	bne.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
        frequency = HAL_RCC_GetPCLK1Freq();
 80042ac:	f7ff faf8 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 80042b0:	61f8      	str	r0, [r7, #28]
      break;
 80042b2:	e2cc      	b.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ba:	d103      	bne.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
        frequency = HAL_RCC_GetSysClockFreq();
 80042bc:	f7ff fa82 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 80042c0:	61f8      	str	r0, [r7, #28]
      break;
 80042c2:	e2c4      	b.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80042c4:	4b34      	ldr	r3, [pc, #208]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042d0:	d106      	bne.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042d8:	d102      	bne.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
        frequency = HSI_VALUE;
 80042da:	4b30      	ldr	r3, [pc, #192]	@ (800439c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80042dc:	61fb      	str	r3, [r7, #28]
      break;
 80042de:	e2b6      	b.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80042e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	f040 82af 	bne.w	800484e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042f6:	f040 82aa 	bne.w	800484e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
        frequency = LSE_VALUE;
 80042fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042fe:	61fb      	str	r3, [r7, #28]
      break;
 8004300:	e2a5      	b.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004302:	4b25      	ldr	r3, [pc, #148]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004308:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800430c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d103      	bne.n	800431c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004314:	f7ff fac4 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 8004318:	61f8      	str	r0, [r7, #28]
      break;
 800431a:	e29a      	b.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004322:	d103      	bne.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        frequency = HAL_RCC_GetSysClockFreq();
 8004324:	f7ff fa4e 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8004328:	61f8      	str	r0, [r7, #28]
      break;
 800432a:	e292      	b.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800432c:	4b1a      	ldr	r3, [pc, #104]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004338:	f040 828b 	bne.w	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004342:	f040 8286 	bne.w	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
        frequency = HSI_VALUE;
 8004346:	4b15      	ldr	r3, [pc, #84]	@ (800439c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004348:	61fb      	str	r3, [r7, #28]
      break;
 800434a:	e282      	b.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800434c:	4b12      	ldr	r3, [pc, #72]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004352:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004356:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d103      	bne.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
        frequency = HAL_RCC_GetPCLK1Freq();
 800435e:	f7ff fa9f 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 8004362:	61f8      	str	r0, [r7, #28]
      break;
 8004364:	e277      	b.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800436c:	d103      	bne.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
        frequency = HAL_RCC_GetSysClockFreq();
 800436e:	f7ff fa29 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8004372:	61f8      	str	r0, [r7, #28]
      break;
 8004374:	e26f      	b.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004376:	4b08      	ldr	r3, [pc, #32]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800437e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004382:	f040 8268 	bne.w	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800438c:	f040 8263 	bne.w	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
        frequency = HSI_VALUE;
 8004390:	4b02      	ldr	r3, [pc, #8]	@ (800439c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004392:	61fb      	str	r3, [r7, #28]
      break;
 8004394:	e25f      	b.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000
 800439c:	00f42400 	.word	0x00f42400
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80043a0:	4ba0      	ldr	r3, [pc, #640]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043aa:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d103      	bne.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
        frequency = HAL_RCC_GetPCLK1Freq();
 80043b2:	f7ff fa75 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 80043b6:	61f8      	str	r0, [r7, #28]
      break;
 80043b8:	e24f      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c0:	d103      	bne.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
        frequency = HAL_RCC_GetSysClockFreq();
 80043c2:	f7ff f9ff 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 80043c6:	61f8      	str	r0, [r7, #28]
      break;
 80043c8:	e247      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80043ca:	4b96      	ldr	r3, [pc, #600]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043d6:	f040 8240 	bne.w	800485a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043e0:	f040 823b 	bne.w	800485a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        frequency = HSI_VALUE;
 80043e4:	4b90      	ldr	r3, [pc, #576]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80043e6:	61fb      	str	r3, [r7, #28]
      break;
 80043e8:	e237      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80043ea:	4b8e      	ldr	r3, [pc, #568]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80043ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d103      	bne.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
        frequency = HAL_RCC_GetPCLK1Freq();
 80043fc:	f7ff fa50 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 8004400:	61f8      	str	r0, [r7, #28]
      break;
 8004402:	e22c      	b.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if(srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d103      	bne.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        frequency = HAL_RCC_GetSysClockFreq();
 800440a:	f7ff f9db 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 800440e:	61f8      	str	r0, [r7, #28]
      break;
 8004410:	e225      	b.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004412:	4b84      	ldr	r3, [pc, #528]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800441a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800441e:	f040 821e 	bne.w	800485e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b02      	cmp	r3, #2
 8004426:	f040 821a 	bne.w	800485e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
        frequency = HSI_VALUE;
 800442a:	4b7f      	ldr	r3, [pc, #508]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800442c:	61fb      	str	r3, [r7, #28]
      break;
 800442e:	e216      	b.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004430:	4b7c      	ldr	r3, [pc, #496]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004436:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800443a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d103      	bne.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004442:	f7ff fa2d 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 8004446:	61f8      	str	r0, [r7, #28]
      break;
 8004448:	e20b      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800444a:	4b76      	ldr	r3, [pc, #472]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800444c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b02      	cmp	r3, #2
 8004456:	d107      	bne.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800445e:	d103      	bne.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
        frequency = LSI_VALUE;
 8004460:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	e01e      	b.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004468:	4b6e      	ldr	r3, [pc, #440]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004474:	d106      	bne.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800447c:	d102      	bne.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        frequency = HSI_VALUE;
 800447e:	4b6a      	ldr	r3, [pc, #424]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	e010      	b.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004484:	4b67      	ldr	r3, [pc, #412]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b02      	cmp	r3, #2
 8004490:	f040 81e7 	bne.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800449a:	f040 81e2 	bne.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
        frequency = LSE_VALUE;
 800449e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044a2:	61fb      	str	r3, [r7, #28]
      break;
 80044a4:	e1dd      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80044a6:	e1dc      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80044a8:	4b5e      	ldr	r3, [pc, #376]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ae:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80044b2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d103      	bne.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
        frequency = HAL_RCC_GetSysClockFreq();
 80044ba:	f7ff f983 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 80044be:	61f8      	str	r0, [r7, #28]
      break;
 80044c0:	e1d1      	b.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044c8:	d11b      	bne.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80044ca:	4b56      	ldr	r3, [pc, #344]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 81c7 	beq.w	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80044d8:	4b52      	ldr	r3, [pc, #328]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	0a1b      	lsrs	r3, r3, #8
 80044de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044e2:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	fb03 f202 	mul.w	r2, r3, r2
 80044ec:	4b4d      	ldr	r3, [pc, #308]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	0d5b      	lsrs	r3, r3, #21
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	3301      	adds	r3, #1
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fe:	61fb      	str	r3, [r7, #28]
      break;
 8004500:	e1b1      	b.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004508:	d102      	bne.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        frequency = EXTERNAL_CLOCK_VALUE;
 800450a:	4b48      	ldr	r3, [pc, #288]	@ (800462c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800450c:	61fb      	str	r3, [r7, #28]
      break;
 800450e:	e1aa      	b.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 8004510:	4b44      	ldr	r3, [pc, #272]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800451c:	f040 81a3 	bne.w	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004526:	f040 819e 	bne.w	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
        frequency = HSI_VALUE;
 800452a:	4b3f      	ldr	r3, [pc, #252]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800452c:	61fb      	str	r3, [r7, #28]
      break;
 800452e:	e19a      	b.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004530:	4b3c      	ldr	r3, [pc, #240]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004536:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800453a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
        frequency = HAL_RCC_GetSysClockFreq();
 8004542:	f7ff f93f 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8004546:	61f8      	str	r0, [r7, #28]
      break;
 8004548:	e18f      	b.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004550:	d11b      	bne.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8004552:	4b34      	ldr	r3, [pc, #208]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 8185 	beq.w	800486a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004560:	4b30      	ldr	r3, [pc, #192]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	0a1b      	lsrs	r3, r3, #8
 8004566:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800456a:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	fb03 f202 	mul.w	r2, r3, r2
 8004574:	4b2b      	ldr	r3, [pc, #172]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	0d5b      	lsrs	r3, r3, #21
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	3301      	adds	r3, #1
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	fbb2 f3f3 	udiv	r3, r2, r3
 8004586:	61fb      	str	r3, [r7, #28]
      break;
 8004588:	e16f      	b.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004590:	d102      	bne.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004592:	4b26      	ldr	r3, [pc, #152]	@ (800462c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004594:	61fb      	str	r3, [r7, #28]
      break;
 8004596:	e168      	b.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 8004598:	4b22      	ldr	r3, [pc, #136]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045a4:	f040 8161 	bne.w	800486a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80045ae:	f040 815c 	bne.w	800486a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
        frequency = HSI_VALUE;
 80045b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80045b4:	61fb      	str	r3, [r7, #28]
      break;
 80045b6:	e158      	b.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80045b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045be:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80045c2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045ca:	d103      	bne.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
        frequency = HAL_RCC_GetPCLK1Freq();
 80045cc:	f7ff f968 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 80045d0:	61f8      	str	r0, [r7, #28]
      break;
 80045d2:	e14c      	b.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d102      	bne.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
        frequency = HSE_VALUE;
 80045da:	4b15      	ldr	r3, [pc, #84]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80045dc:	61fb      	str	r3, [r7, #28]
      break;
 80045de:	e146      	b.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045e6:	f040 8142 	bne.w	800486e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80045ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 813b 	beq.w	800486e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80045f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	0a1b      	lsrs	r3, r3, #8
 80045fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004602:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	fb03 f202 	mul.w	r2, r3, r2
 800460c:	4b05      	ldr	r3, [pc, #20]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	0d5b      	lsrs	r3, r3, #21
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	3301      	adds	r3, #1
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	fbb2 f3f3 	udiv	r3, r2, r3
 800461e:	61fb      	str	r3, [r7, #28]
      break;
 8004620:	e125      	b.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8004622:	bf00      	nop
 8004624:	40021000 	.word	0x40021000
 8004628:	00f42400 	.word	0x00f42400
 800462c:	00bb8000 	.word	0x00bb8000
 8004630:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004634:	4b96      	ldr	r3, [pc, #600]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800463e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004646:	d114      	bne.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004648:	4b91      	ldr	r3, [pc, #580]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	0a1b      	lsrs	r3, r3, #8
 800464e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004652:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	fb03 f202 	mul.w	r2, r3, r2
 800465c:	4b8c      	ldr	r3, [pc, #560]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	0d5b      	lsrs	r3, r3, #21
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	3301      	adds	r3, #1
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	fbb2 f3f3 	udiv	r3, r2, r3
 800466e:	61fb      	str	r3, [r7, #28]
      break;
 8004670:	e0ff      	b.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 8004672:	4b87      	ldr	r3, [pc, #540]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004674:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b02      	cmp	r3, #2
 800467e:	f040 80f8 	bne.w	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	f040 80f4 	bne.w	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
        frequency = HSI48_VALUE;
 800468a:	4b82      	ldr	r3, [pc, #520]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800468c:	61fb      	str	r3, [r7, #28]
      break;
 800468e:	e0f0      	b.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004690:	4b7f      	ldr	r3, [pc, #508]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004696:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800469a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046a2:	d114      	bne.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80046a4:	4b7a      	ldr	r3, [pc, #488]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046ae:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	fb03 f202 	mul.w	r2, r3, r2
 80046b8:	4b75      	ldr	r3, [pc, #468]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	0d5b      	lsrs	r3, r3, #21
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	3301      	adds	r3, #1
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ca:	61fb      	str	r3, [r7, #28]
      break;
 80046cc:	e0d3      	b.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 80046ce:	4b70      	ldr	r3, [pc, #448]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80046d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b02      	cmp	r3, #2
 80046da:	f040 80cc 	bne.w	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f040 80c8 	bne.w	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
        frequency = HSI48_VALUE;
 80046e6:	4b6b      	ldr	r3, [pc, #428]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80046e8:	61fb      	str	r3, [r7, #28]
      break;
 80046ea:	e0c4      	b.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 80046ec:	4b68      	ldr	r3, [pc, #416]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80046f6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046fe:	d129      	bne.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8004700:	4b63      	ldr	r3, [pc, #396]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 80b6 	beq.w	800487a <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800470e:	4b60      	ldr	r3, [pc, #384]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	0a1b      	lsrs	r3, r3, #8
 8004714:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004718:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800471a:	4b5d      	ldr	r3, [pc, #372]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	0edb      	lsrs	r3, r3, #27
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800472c:	4b58      	ldr	r3, [pc, #352]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
              pllp = 17U;
 8004738:	2311      	movs	r3, #17
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	e001      	b.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
              pllp = 7U;
 800473e:	2307      	movs	r3, #7
 8004740:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	fb03 f202 	mul.w	r2, r3, r2
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004750:	61fb      	str	r3, [r7, #28]
      break;
 8004752:	e092      	b.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800475a:	f040 808e 	bne.w	800487a <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
        frequency = HAL_RCC_GetSysClockFreq();
 800475e:	f7ff f831 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8004762:	61f8      	str	r0, [r7, #28]
      break;
 8004764:	e089      	b.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 8004766:	4b4a      	ldr	r3, [pc, #296]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004770:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004778:	d128      	bne.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 800477a:	4b45      	ldr	r3, [pc, #276]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d07b      	beq.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004786:	4b42      	ldr	r3, [pc, #264]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	0a1b      	lsrs	r3, r3, #8
 800478c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004790:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004792:	4b3f      	ldr	r3, [pc, #252]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	0edb      	lsrs	r3, r3, #27
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10a      	bne.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80047a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
              pllp = 17U;
 80047b0:	2311      	movs	r3, #17
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	e001      	b.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
              pllp = 7U;
 80047b6:	2307      	movs	r3, #7
 80047b8:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	fb03 f202 	mul.w	r2, r3, r2
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	61fb      	str	r3, [r7, #28]
      break;
 80047ca:	e058      	b.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047d2:	d154      	bne.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
        frequency = HAL_RCC_GetSysClockFreq();
 80047d4:	f7fe fff6 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 80047d8:	61f8      	str	r0, [r7, #28]
      break;
 80047da:	e050      	b.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 80047dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80047de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047e2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80047e6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047ee:	d114      	bne.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80047f0:	4b27      	ldr	r3, [pc, #156]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	0a1b      	lsrs	r3, r3, #8
 80047f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047fa:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	fb03 f202 	mul.w	r2, r3, r2
 8004804:	4b22      	ldr	r3, [pc, #136]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	0d5b      	lsrs	r3, r3, #21
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	3301      	adds	r3, #1
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	fbb2 f3f3 	udiv	r3, r2, r3
 8004816:	61fb      	str	r3, [r7, #28]
      break;
 8004818:	e033      	b.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004820:	d102      	bne.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0xa08>
        frequency = HSI_VALUE;
 8004822:	4b1d      	ldr	r3, [pc, #116]	@ (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8004824:	61fb      	str	r3, [r7, #28]
      break;
 8004826:	e02c      	b.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d129      	bne.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
        frequency = HAL_RCC_GetSysClockFreq();
 800482e:	f7fe ffc9 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8004832:	61f8      	str	r0, [r7, #28]
      break;
 8004834:	e025      	b.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      break;
 8004836:	bf00      	nop
 8004838:	e024      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800483a:	bf00      	nop
 800483c:	e022      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800483e:	bf00      	nop
 8004840:	e020      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004842:	bf00      	nop
 8004844:	e01e      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004846:	bf00      	nop
 8004848:	e01c      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800484a:	bf00      	nop
 800484c:	e01a      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800484e:	bf00      	nop
 8004850:	e018      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004852:	bf00      	nop
 8004854:	e016      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004856:	bf00      	nop
 8004858:	e014      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800485a:	bf00      	nop
 800485c:	e012      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800485e:	bf00      	nop
 8004860:	e010      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004862:	bf00      	nop
 8004864:	e00e      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004866:	bf00      	nop
 8004868:	e00c      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800486a:	bf00      	nop
 800486c:	e00a      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800486e:	bf00      	nop
 8004870:	e008      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004872:	bf00      	nop
 8004874:	e006      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004876:	bf00      	nop
 8004878:	e004      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800487a:	bf00      	nop
 800487c:	e002      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800487e:	bf00      	nop
 8004880:	e000      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004882:	bf00      	nop
    }
  }

  return(frequency);
 8004884:	69fb      	ldr	r3, [r7, #28]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000
 8004894:	02dc6c00 	.word	0x02dc6c00
 8004898:	00f42400 	.word	0x00f42400

0800489c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e049      	b.n	8004942 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fc fecc 	bl	8001660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3304      	adds	r3, #4
 80048d8:	4619      	mov	r1, r3
 80048da:	4610      	mov	r0, r2
 80048dc:	f000 feda 	bl	8005694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	d001      	beq.n	8004964 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e04c      	b.n	80049fe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a26      	ldr	r2, [pc, #152]	@ (8004a0c <HAL_TIM_Base_Start+0xc0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d022      	beq.n	80049bc <HAL_TIM_Base_Start+0x70>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800497e:	d01d      	beq.n	80049bc <HAL_TIM_Base_Start+0x70>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a22      	ldr	r2, [pc, #136]	@ (8004a10 <HAL_TIM_Base_Start+0xc4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d018      	beq.n	80049bc <HAL_TIM_Base_Start+0x70>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a21      	ldr	r2, [pc, #132]	@ (8004a14 <HAL_TIM_Base_Start+0xc8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d013      	beq.n	80049bc <HAL_TIM_Base_Start+0x70>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1f      	ldr	r2, [pc, #124]	@ (8004a18 <HAL_TIM_Base_Start+0xcc>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00e      	beq.n	80049bc <HAL_TIM_Base_Start+0x70>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a1c <HAL_TIM_Base_Start+0xd0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_TIM_Base_Start+0x70>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004a20 <HAL_TIM_Base_Start+0xd4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d004      	beq.n	80049bc <HAL_TIM_Base_Start+0x70>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a24 <HAL_TIM_Base_Start+0xd8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d115      	bne.n	80049e8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	4b19      	ldr	r3, [pc, #100]	@ (8004a28 <HAL_TIM_Base_Start+0xdc>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b06      	cmp	r3, #6
 80049cc:	d015      	beq.n	80049fa <HAL_TIM_Base_Start+0xae>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d4:	d011      	beq.n	80049fa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 0201 	orr.w	r2, r2, #1
 80049e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e6:	e008      	b.n	80049fa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	e000      	b.n	80049fc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40012c00 	.word	0x40012c00
 8004a10:	40000400 	.word	0x40000400
 8004a14:	40000800 	.word	0x40000800
 8004a18:	40000c00 	.word	0x40000c00
 8004a1c:	40013400 	.word	0x40013400
 8004a20:	40014000 	.word	0x40014000
 8004a24:	40015000 	.word	0x40015000
 8004a28:	00010007 	.word	0x00010007

08004a2c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e049      	b.n	8004ad2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f89d 	bl	8004b92 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3304      	adds	r3, #4
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	f000 fe12 	bl	8005694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6a1a      	ldr	r2, [r3, #32]
 8004af0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004af4:	4013      	ands	r3, r2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10f      	bne.n	8004b1a <HAL_TIM_OC_DeInit+0x40>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6a1a      	ldr	r2, [r3, #32]
 8004b00:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d107      	bne.n	8004b1a <HAL_TIM_OC_DeInit+0x40>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0201 	bic.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f843 	bl	8004ba6 <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
	...

08004bbc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d109      	bne.n	8004be0 <HAL_TIM_OC_Start+0x24>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	bf14      	ite	ne
 8004bd8:	2301      	movne	r3, #1
 8004bda:	2300      	moveq	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	e03c      	b.n	8004c5a <HAL_TIM_OC_Start+0x9e>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d109      	bne.n	8004bfa <HAL_TIM_OC_Start+0x3e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	bf14      	ite	ne
 8004bf2:	2301      	movne	r3, #1
 8004bf4:	2300      	moveq	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	e02f      	b.n	8004c5a <HAL_TIM_OC_Start+0x9e>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d109      	bne.n	8004c14 <HAL_TIM_OC_Start+0x58>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	bf14      	ite	ne
 8004c0c:	2301      	movne	r3, #1
 8004c0e:	2300      	moveq	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	e022      	b.n	8004c5a <HAL_TIM_OC_Start+0x9e>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b0c      	cmp	r3, #12
 8004c18:	d109      	bne.n	8004c2e <HAL_TIM_OC_Start+0x72>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	bf14      	ite	ne
 8004c26:	2301      	movne	r3, #1
 8004c28:	2300      	moveq	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	e015      	b.n	8004c5a <HAL_TIM_OC_Start+0x9e>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b10      	cmp	r3, #16
 8004c32:	d109      	bne.n	8004c48 <HAL_TIM_OC_Start+0x8c>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	bf14      	ite	ne
 8004c40:	2301      	movne	r3, #1
 8004c42:	2300      	moveq	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	e008      	b.n	8004c5a <HAL_TIM_OC_Start+0x9e>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	bf14      	ite	ne
 8004c54:	2301      	movne	r3, #1
 8004c56:	2300      	moveq	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e0a6      	b.n	8004db0 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d104      	bne.n	8004c72 <HAL_TIM_OC_Start+0xb6>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c70:	e023      	b.n	8004cba <HAL_TIM_OC_Start+0xfe>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d104      	bne.n	8004c82 <HAL_TIM_OC_Start+0xc6>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c80:	e01b      	b.n	8004cba <HAL_TIM_OC_Start+0xfe>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d104      	bne.n	8004c92 <HAL_TIM_OC_Start+0xd6>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c90:	e013      	b.n	8004cba <HAL_TIM_OC_Start+0xfe>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b0c      	cmp	r3, #12
 8004c96:	d104      	bne.n	8004ca2 <HAL_TIM_OC_Start+0xe6>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ca0:	e00b      	b.n	8004cba <HAL_TIM_OC_Start+0xfe>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b10      	cmp	r3, #16
 8004ca6:	d104      	bne.n	8004cb2 <HAL_TIM_OC_Start+0xf6>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cb0:	e003      	b.n	8004cba <HAL_TIM_OC_Start+0xfe>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	6839      	ldr	r1, [r7, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f001 fa40 	bl	8006148 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a3a      	ldr	r2, [pc, #232]	@ (8004db8 <HAL_TIM_OC_Start+0x1fc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d018      	beq.n	8004d04 <HAL_TIM_OC_Start+0x148>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a39      	ldr	r2, [pc, #228]	@ (8004dbc <HAL_TIM_OC_Start+0x200>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d013      	beq.n	8004d04 <HAL_TIM_OC_Start+0x148>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a37      	ldr	r2, [pc, #220]	@ (8004dc0 <HAL_TIM_OC_Start+0x204>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00e      	beq.n	8004d04 <HAL_TIM_OC_Start+0x148>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a36      	ldr	r2, [pc, #216]	@ (8004dc4 <HAL_TIM_OC_Start+0x208>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d009      	beq.n	8004d04 <HAL_TIM_OC_Start+0x148>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a34      	ldr	r2, [pc, #208]	@ (8004dc8 <HAL_TIM_OC_Start+0x20c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d004      	beq.n	8004d04 <HAL_TIM_OC_Start+0x148>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a33      	ldr	r2, [pc, #204]	@ (8004dcc <HAL_TIM_OC_Start+0x210>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d101      	bne.n	8004d08 <HAL_TIM_OC_Start+0x14c>
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <HAL_TIM_OC_Start+0x14e>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d007      	beq.n	8004d1e <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a25      	ldr	r2, [pc, #148]	@ (8004db8 <HAL_TIM_OC_Start+0x1fc>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d022      	beq.n	8004d6e <HAL_TIM_OC_Start+0x1b2>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d30:	d01d      	beq.n	8004d6e <HAL_TIM_OC_Start+0x1b2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a26      	ldr	r2, [pc, #152]	@ (8004dd0 <HAL_TIM_OC_Start+0x214>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d018      	beq.n	8004d6e <HAL_TIM_OC_Start+0x1b2>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a24      	ldr	r2, [pc, #144]	@ (8004dd4 <HAL_TIM_OC_Start+0x218>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d013      	beq.n	8004d6e <HAL_TIM_OC_Start+0x1b2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a23      	ldr	r2, [pc, #140]	@ (8004dd8 <HAL_TIM_OC_Start+0x21c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00e      	beq.n	8004d6e <HAL_TIM_OC_Start+0x1b2>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a19      	ldr	r2, [pc, #100]	@ (8004dbc <HAL_TIM_OC_Start+0x200>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d009      	beq.n	8004d6e <HAL_TIM_OC_Start+0x1b2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a18      	ldr	r2, [pc, #96]	@ (8004dc0 <HAL_TIM_OC_Start+0x204>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d004      	beq.n	8004d6e <HAL_TIM_OC_Start+0x1b2>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a18      	ldr	r2, [pc, #96]	@ (8004dcc <HAL_TIM_OC_Start+0x210>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d115      	bne.n	8004d9a <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	4b19      	ldr	r3, [pc, #100]	@ (8004ddc <HAL_TIM_OC_Start+0x220>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b06      	cmp	r3, #6
 8004d7e:	d015      	beq.n	8004dac <HAL_TIM_OC_Start+0x1f0>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d86:	d011      	beq.n	8004dac <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d98:	e008      	b.n	8004dac <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0201 	orr.w	r2, r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	e000      	b.n	8004dae <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40012c00 	.word	0x40012c00
 8004dbc:	40013400 	.word	0x40013400
 8004dc0:	40014000 	.word	0x40014000
 8004dc4:	40014400 	.word	0x40014400
 8004dc8:	40014800 	.word	0x40014800
 8004dcc:	40015000 	.word	0x40015000
 8004dd0:	40000400 	.word	0x40000400
 8004dd4:	40000800 	.word	0x40000800
 8004dd8:	40000c00 	.word	0x40000c00
 8004ddc:	00010007 	.word	0x00010007

08004de0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e049      	b.n	8004e86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f841 	bl	8004e8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4610      	mov	r0, r2
 8004e20:	f000 fc38 	bl	8005694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d109      	bne.n	8004ec8 <HAL_TIM_PWM_Start+0x24>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	bf14      	ite	ne
 8004ec0:	2301      	movne	r3, #1
 8004ec2:	2300      	moveq	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	e03c      	b.n	8004f42 <HAL_TIM_PWM_Start+0x9e>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d109      	bne.n	8004ee2 <HAL_TIM_PWM_Start+0x3e>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	bf14      	ite	ne
 8004eda:	2301      	movne	r3, #1
 8004edc:	2300      	moveq	r3, #0
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	e02f      	b.n	8004f42 <HAL_TIM_PWM_Start+0x9e>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d109      	bne.n	8004efc <HAL_TIM_PWM_Start+0x58>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	bf14      	ite	ne
 8004ef4:	2301      	movne	r3, #1
 8004ef6:	2300      	moveq	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	e022      	b.n	8004f42 <HAL_TIM_PWM_Start+0x9e>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2b0c      	cmp	r3, #12
 8004f00:	d109      	bne.n	8004f16 <HAL_TIM_PWM_Start+0x72>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	bf14      	ite	ne
 8004f0e:	2301      	movne	r3, #1
 8004f10:	2300      	moveq	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	e015      	b.n	8004f42 <HAL_TIM_PWM_Start+0x9e>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	d109      	bne.n	8004f30 <HAL_TIM_PWM_Start+0x8c>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	bf14      	ite	ne
 8004f28:	2301      	movne	r3, #1
 8004f2a:	2300      	moveq	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	e008      	b.n	8004f42 <HAL_TIM_PWM_Start+0x9e>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	bf14      	ite	ne
 8004f3c:	2301      	movne	r3, #1
 8004f3e:	2300      	moveq	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e0a6      	b.n	8005098 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d104      	bne.n	8004f5a <HAL_TIM_PWM_Start+0xb6>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f58:	e023      	b.n	8004fa2 <HAL_TIM_PWM_Start+0xfe>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d104      	bne.n	8004f6a <HAL_TIM_PWM_Start+0xc6>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f68:	e01b      	b.n	8004fa2 <HAL_TIM_PWM_Start+0xfe>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d104      	bne.n	8004f7a <HAL_TIM_PWM_Start+0xd6>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f78:	e013      	b.n	8004fa2 <HAL_TIM_PWM_Start+0xfe>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b0c      	cmp	r3, #12
 8004f7e:	d104      	bne.n	8004f8a <HAL_TIM_PWM_Start+0xe6>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f88:	e00b      	b.n	8004fa2 <HAL_TIM_PWM_Start+0xfe>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b10      	cmp	r3, #16
 8004f8e:	d104      	bne.n	8004f9a <HAL_TIM_PWM_Start+0xf6>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f98:	e003      	b.n	8004fa2 <HAL_TIM_PWM_Start+0xfe>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	6839      	ldr	r1, [r7, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f001 f8cc 	bl	8006148 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a3a      	ldr	r2, [pc, #232]	@ (80050a0 <HAL_TIM_PWM_Start+0x1fc>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d018      	beq.n	8004fec <HAL_TIM_PWM_Start+0x148>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a39      	ldr	r2, [pc, #228]	@ (80050a4 <HAL_TIM_PWM_Start+0x200>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d013      	beq.n	8004fec <HAL_TIM_PWM_Start+0x148>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a37      	ldr	r2, [pc, #220]	@ (80050a8 <HAL_TIM_PWM_Start+0x204>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00e      	beq.n	8004fec <HAL_TIM_PWM_Start+0x148>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a36      	ldr	r2, [pc, #216]	@ (80050ac <HAL_TIM_PWM_Start+0x208>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d009      	beq.n	8004fec <HAL_TIM_PWM_Start+0x148>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a34      	ldr	r2, [pc, #208]	@ (80050b0 <HAL_TIM_PWM_Start+0x20c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d004      	beq.n	8004fec <HAL_TIM_PWM_Start+0x148>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a33      	ldr	r2, [pc, #204]	@ (80050b4 <HAL_TIM_PWM_Start+0x210>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d101      	bne.n	8004ff0 <HAL_TIM_PWM_Start+0x14c>
 8004fec:	2301      	movs	r3, #1
 8004fee:	e000      	b.n	8004ff2 <HAL_TIM_PWM_Start+0x14e>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d007      	beq.n	8005006 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005004:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a25      	ldr	r2, [pc, #148]	@ (80050a0 <HAL_TIM_PWM_Start+0x1fc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d022      	beq.n	8005056 <HAL_TIM_PWM_Start+0x1b2>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005018:	d01d      	beq.n	8005056 <HAL_TIM_PWM_Start+0x1b2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a26      	ldr	r2, [pc, #152]	@ (80050b8 <HAL_TIM_PWM_Start+0x214>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d018      	beq.n	8005056 <HAL_TIM_PWM_Start+0x1b2>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a24      	ldr	r2, [pc, #144]	@ (80050bc <HAL_TIM_PWM_Start+0x218>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <HAL_TIM_PWM_Start+0x1b2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a23      	ldr	r2, [pc, #140]	@ (80050c0 <HAL_TIM_PWM_Start+0x21c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00e      	beq.n	8005056 <HAL_TIM_PWM_Start+0x1b2>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a19      	ldr	r2, [pc, #100]	@ (80050a4 <HAL_TIM_PWM_Start+0x200>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d009      	beq.n	8005056 <HAL_TIM_PWM_Start+0x1b2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a18      	ldr	r2, [pc, #96]	@ (80050a8 <HAL_TIM_PWM_Start+0x204>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d004      	beq.n	8005056 <HAL_TIM_PWM_Start+0x1b2>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a18      	ldr	r2, [pc, #96]	@ (80050b4 <HAL_TIM_PWM_Start+0x210>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d115      	bne.n	8005082 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	4b19      	ldr	r3, [pc, #100]	@ (80050c4 <HAL_TIM_PWM_Start+0x220>)
 800505e:	4013      	ands	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b06      	cmp	r3, #6
 8005066:	d015      	beq.n	8005094 <HAL_TIM_PWM_Start+0x1f0>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800506e:	d011      	beq.n	8005094 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005080:	e008      	b.n	8005094 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	e000      	b.n	8005096 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005094:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	40013400 	.word	0x40013400
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400
 80050b0:	40014800 	.word	0x40014800
 80050b4:	40015000 	.word	0x40015000
 80050b8:	40000400 	.word	0x40000400
 80050bc:	40000800 	.word	0x40000800
 80050c0:	40000c00 	.word	0x40000c00
 80050c4:	00010007 	.word	0x00010007

080050c8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e066      	b.n	80051b4 <HAL_TIM_OC_ConfigChannel+0xec>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b14      	cmp	r3, #20
 80050f2:	d857      	bhi.n	80051a4 <HAL_TIM_OC_ConfigChannel+0xdc>
 80050f4:	a201      	add	r2, pc, #4	@ (adr r2, 80050fc <HAL_TIM_OC_ConfigChannel+0x34>)
 80050f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fa:	bf00      	nop
 80050fc:	08005151 	.word	0x08005151
 8005100:	080051a5 	.word	0x080051a5
 8005104:	080051a5 	.word	0x080051a5
 8005108:	080051a5 	.word	0x080051a5
 800510c:	0800515f 	.word	0x0800515f
 8005110:	080051a5 	.word	0x080051a5
 8005114:	080051a5 	.word	0x080051a5
 8005118:	080051a5 	.word	0x080051a5
 800511c:	0800516d 	.word	0x0800516d
 8005120:	080051a5 	.word	0x080051a5
 8005124:	080051a5 	.word	0x080051a5
 8005128:	080051a5 	.word	0x080051a5
 800512c:	0800517b 	.word	0x0800517b
 8005130:	080051a5 	.word	0x080051a5
 8005134:	080051a5 	.word	0x080051a5
 8005138:	080051a5 	.word	0x080051a5
 800513c:	08005189 	.word	0x08005189
 8005140:	080051a5 	.word	0x080051a5
 8005144:	080051a5 	.word	0x080051a5
 8005148:	080051a5 	.word	0x080051a5
 800514c:	08005197 	.word	0x08005197
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fb50 	bl	80057fc <TIM_OC1_SetConfig>
      break;
 800515c:	e025      	b.n	80051aa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	4618      	mov	r0, r3
 8005166:	f000 fbe3 	bl	8005930 <TIM_OC2_SetConfig>
      break;
 800516a:	e01e      	b.n	80051aa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68b9      	ldr	r1, [r7, #8]
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fc70 	bl	8005a58 <TIM_OC3_SetConfig>
      break;
 8005178:	e017      	b.n	80051aa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68b9      	ldr	r1, [r7, #8]
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fcfb 	bl	8005b7c <TIM_OC4_SetConfig>
      break;
 8005186:	e010      	b.n	80051aa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fd88 	bl	8005ca4 <TIM_OC5_SetConfig>
      break;
 8005194:	e009      	b.n	80051aa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fdeb 	bl	8005d78 <TIM_OC6_SetConfig>
      break;
 80051a2:	e002      	b.n	80051aa <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	75fb      	strb	r3, [r7, #23]
      break;
 80051a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051d6:	2302      	movs	r3, #2
 80051d8:	e0ff      	b.n	80053da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b14      	cmp	r3, #20
 80051e6:	f200 80f0 	bhi.w	80053ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051ea:	a201      	add	r2, pc, #4	@ (adr r2, 80051f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005245 	.word	0x08005245
 80051f4:	080053cb 	.word	0x080053cb
 80051f8:	080053cb 	.word	0x080053cb
 80051fc:	080053cb 	.word	0x080053cb
 8005200:	08005285 	.word	0x08005285
 8005204:	080053cb 	.word	0x080053cb
 8005208:	080053cb 	.word	0x080053cb
 800520c:	080053cb 	.word	0x080053cb
 8005210:	080052c7 	.word	0x080052c7
 8005214:	080053cb 	.word	0x080053cb
 8005218:	080053cb 	.word	0x080053cb
 800521c:	080053cb 	.word	0x080053cb
 8005220:	08005307 	.word	0x08005307
 8005224:	080053cb 	.word	0x080053cb
 8005228:	080053cb 	.word	0x080053cb
 800522c:	080053cb 	.word	0x080053cb
 8005230:	08005349 	.word	0x08005349
 8005234:	080053cb 	.word	0x080053cb
 8005238:	080053cb 	.word	0x080053cb
 800523c:	080053cb 	.word	0x080053cb
 8005240:	08005389 	.word	0x08005389
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fad6 	bl	80057fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699a      	ldr	r2, [r3, #24]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0208 	orr.w	r2, r2, #8
 800525e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0204 	bic.w	r2, r2, #4
 800526e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6999      	ldr	r1, [r3, #24]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	691a      	ldr	r2, [r3, #16]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	619a      	str	r2, [r3, #24]
      break;
 8005282:	e0a5      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fb50 	bl	8005930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800529e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6999      	ldr	r1, [r3, #24]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	021a      	lsls	r2, r3, #8
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	619a      	str	r2, [r3, #24]
      break;
 80052c4:	e084      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fbc3 	bl	8005a58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0208 	orr.w	r2, r2, #8
 80052e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69da      	ldr	r2, [r3, #28]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0204 	bic.w	r2, r2, #4
 80052f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69d9      	ldr	r1, [r3, #28]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	61da      	str	r2, [r3, #28]
      break;
 8005304:	e064      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	4618      	mov	r0, r3
 800530e:	f000 fc35 	bl	8005b7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69da      	ldr	r2, [r3, #28]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69da      	ldr	r2, [r3, #28]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69d9      	ldr	r1, [r3, #28]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	021a      	lsls	r2, r3, #8
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	61da      	str	r2, [r3, #28]
      break;
 8005346:	e043      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fca8 	bl	8005ca4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0208 	orr.w	r2, r2, #8
 8005362:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0204 	bic.w	r2, r2, #4
 8005372:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	691a      	ldr	r2, [r3, #16]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005386:	e023      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	4618      	mov	r0, r3
 8005390:	f000 fcf2 	bl	8005d78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	021a      	lsls	r2, r3, #8
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80053c8:	e002      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	75fb      	strb	r3, [r7, #23]
      break;
 80053ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop

080053e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_TIM_ConfigClockSource+0x1c>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e0f6      	b.n	80055ee <HAL_TIM_ConfigClockSource+0x20a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800541e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800542a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a6f      	ldr	r2, [pc, #444]	@ (80055f8 <HAL_TIM_ConfigClockSource+0x214>)
 800543a:	4293      	cmp	r3, r2
 800543c:	f000 80c1 	beq.w	80055c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005440:	4a6d      	ldr	r2, [pc, #436]	@ (80055f8 <HAL_TIM_ConfigClockSource+0x214>)
 8005442:	4293      	cmp	r3, r2
 8005444:	f200 80c6 	bhi.w	80055d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005448:	4a6c      	ldr	r2, [pc, #432]	@ (80055fc <HAL_TIM_ConfigClockSource+0x218>)
 800544a:	4293      	cmp	r3, r2
 800544c:	f000 80b9 	beq.w	80055c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005450:	4a6a      	ldr	r2, [pc, #424]	@ (80055fc <HAL_TIM_ConfigClockSource+0x218>)
 8005452:	4293      	cmp	r3, r2
 8005454:	f200 80be 	bhi.w	80055d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005458:	4a69      	ldr	r2, [pc, #420]	@ (8005600 <HAL_TIM_ConfigClockSource+0x21c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	f000 80b1 	beq.w	80055c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005460:	4a67      	ldr	r2, [pc, #412]	@ (8005600 <HAL_TIM_ConfigClockSource+0x21c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	f200 80b6 	bhi.w	80055d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005468:	4a66      	ldr	r2, [pc, #408]	@ (8005604 <HAL_TIM_ConfigClockSource+0x220>)
 800546a:	4293      	cmp	r3, r2
 800546c:	f000 80a9 	beq.w	80055c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005470:	4a64      	ldr	r2, [pc, #400]	@ (8005604 <HAL_TIM_ConfigClockSource+0x220>)
 8005472:	4293      	cmp	r3, r2
 8005474:	f200 80ae 	bhi.w	80055d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005478:	4a63      	ldr	r2, [pc, #396]	@ (8005608 <HAL_TIM_ConfigClockSource+0x224>)
 800547a:	4293      	cmp	r3, r2
 800547c:	f000 80a1 	beq.w	80055c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005480:	4a61      	ldr	r2, [pc, #388]	@ (8005608 <HAL_TIM_ConfigClockSource+0x224>)
 8005482:	4293      	cmp	r3, r2
 8005484:	f200 80a6 	bhi.w	80055d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005488:	4a60      	ldr	r2, [pc, #384]	@ (800560c <HAL_TIM_ConfigClockSource+0x228>)
 800548a:	4293      	cmp	r3, r2
 800548c:	f000 8099 	beq.w	80055c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005490:	4a5e      	ldr	r2, [pc, #376]	@ (800560c <HAL_TIM_ConfigClockSource+0x228>)
 8005492:	4293      	cmp	r3, r2
 8005494:	f200 809e 	bhi.w	80055d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005498:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800549c:	f000 8091 	beq.w	80055c2 <HAL_TIM_ConfigClockSource+0x1de>
 80054a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80054a4:	f200 8096 	bhi.w	80055d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80054a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ac:	f000 8089 	beq.w	80055c2 <HAL_TIM_ConfigClockSource+0x1de>
 80054b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054b4:	f200 808e 	bhi.w	80055d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80054b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054bc:	d03e      	beq.n	800553c <HAL_TIM_ConfigClockSource+0x158>
 80054be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054c2:	f200 8087 	bhi.w	80055d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80054c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054ca:	f000 8086 	beq.w	80055da <HAL_TIM_ConfigClockSource+0x1f6>
 80054ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054d2:	d87f      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80054d4:	2b70      	cmp	r3, #112	@ 0x70
 80054d6:	d01a      	beq.n	800550e <HAL_TIM_ConfigClockSource+0x12a>
 80054d8:	2b70      	cmp	r3, #112	@ 0x70
 80054da:	d87b      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80054dc:	2b60      	cmp	r3, #96	@ 0x60
 80054de:	d050      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x19e>
 80054e0:	2b60      	cmp	r3, #96	@ 0x60
 80054e2:	d877      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80054e4:	2b50      	cmp	r3, #80	@ 0x50
 80054e6:	d03c      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x17e>
 80054e8:	2b50      	cmp	r3, #80	@ 0x50
 80054ea:	d873      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80054ec:	2b40      	cmp	r3, #64	@ 0x40
 80054ee:	d058      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x1be>
 80054f0:	2b40      	cmp	r3, #64	@ 0x40
 80054f2:	d86f      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80054f4:	2b30      	cmp	r3, #48	@ 0x30
 80054f6:	d064      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x1de>
 80054f8:	2b30      	cmp	r3, #48	@ 0x30
 80054fa:	d86b      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d060      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005500:	2b20      	cmp	r3, #32
 8005502:	d867      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d05c      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005508:	2b10      	cmp	r3, #16
 800550a:	d05a      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x1de>
 800550c:	e062      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800551e:	f000 fdf3 	bl	8006108 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	609a      	str	r2, [r3, #8]
      break;
 800553a:	e04f      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800554c:	f000 fddc 	bl	8006108 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800555e:	609a      	str	r2, [r3, #8]
      break;
 8005560:	e03c      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800556e:	461a      	mov	r2, r3
 8005570:	f000 fd4e 	bl	8006010 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2150      	movs	r1, #80	@ 0x50
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fda7 	bl	80060ce <TIM_ITRx_SetConfig>
      break;
 8005580:	e02c      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800558e:	461a      	mov	r2, r3
 8005590:	f000 fd6d 	bl	800606e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2160      	movs	r1, #96	@ 0x60
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fd97 	bl	80060ce <TIM_ITRx_SetConfig>
      break;
 80055a0:	e01c      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ae:	461a      	mov	r2, r3
 80055b0:	f000 fd2e 	bl	8006010 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2140      	movs	r1, #64	@ 0x40
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fd87 	bl	80060ce <TIM_ITRx_SetConfig>
      break;
 80055c0:	e00c      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4619      	mov	r1, r3
 80055cc:	4610      	mov	r0, r2
 80055ce:	f000 fd7e 	bl	80060ce <TIM_ITRx_SetConfig>
      break;
 80055d2:	e003      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	73fb      	strb	r3, [r7, #15]
      break;
 80055d8:	e000      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80055da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	00100070 	.word	0x00100070
 80055fc:	00100060 	.word	0x00100060
 8005600:	00100050 	.word	0x00100050
 8005604:	00100040 	.word	0x00100040
 8005608:	00100030 	.word	0x00100030
 800560c:	00100020 	.word	0x00100020

08005610 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005624:	2302      	movs	r3, #2
 8005626:	e031      	b.n	800568c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005638:	6839      	ldr	r1, [r7, #0]
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fc08 	bl	8005e50 <TIM_SlaveTimer_SetConfig>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d009      	beq.n	800565a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e018      	b.n	800568c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005668:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005678:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a4c      	ldr	r2, [pc, #304]	@ (80057d8 <TIM_Base_SetConfig+0x144>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d017      	beq.n	80056dc <TIM_Base_SetConfig+0x48>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b2:	d013      	beq.n	80056dc <TIM_Base_SetConfig+0x48>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a49      	ldr	r2, [pc, #292]	@ (80057dc <TIM_Base_SetConfig+0x148>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00f      	beq.n	80056dc <TIM_Base_SetConfig+0x48>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a48      	ldr	r2, [pc, #288]	@ (80057e0 <TIM_Base_SetConfig+0x14c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00b      	beq.n	80056dc <TIM_Base_SetConfig+0x48>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a47      	ldr	r2, [pc, #284]	@ (80057e4 <TIM_Base_SetConfig+0x150>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d007      	beq.n	80056dc <TIM_Base_SetConfig+0x48>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a46      	ldr	r2, [pc, #280]	@ (80057e8 <TIM_Base_SetConfig+0x154>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d003      	beq.n	80056dc <TIM_Base_SetConfig+0x48>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a45      	ldr	r2, [pc, #276]	@ (80057ec <TIM_Base_SetConfig+0x158>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d108      	bne.n	80056ee <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a39      	ldr	r2, [pc, #228]	@ (80057d8 <TIM_Base_SetConfig+0x144>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d023      	beq.n	800573e <TIM_Base_SetConfig+0xaa>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056fc:	d01f      	beq.n	800573e <TIM_Base_SetConfig+0xaa>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a36      	ldr	r2, [pc, #216]	@ (80057dc <TIM_Base_SetConfig+0x148>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d01b      	beq.n	800573e <TIM_Base_SetConfig+0xaa>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a35      	ldr	r2, [pc, #212]	@ (80057e0 <TIM_Base_SetConfig+0x14c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d017      	beq.n	800573e <TIM_Base_SetConfig+0xaa>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a34      	ldr	r2, [pc, #208]	@ (80057e4 <TIM_Base_SetConfig+0x150>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d013      	beq.n	800573e <TIM_Base_SetConfig+0xaa>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a33      	ldr	r2, [pc, #204]	@ (80057e8 <TIM_Base_SetConfig+0x154>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00f      	beq.n	800573e <TIM_Base_SetConfig+0xaa>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a33      	ldr	r2, [pc, #204]	@ (80057f0 <TIM_Base_SetConfig+0x15c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00b      	beq.n	800573e <TIM_Base_SetConfig+0xaa>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a32      	ldr	r2, [pc, #200]	@ (80057f4 <TIM_Base_SetConfig+0x160>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d007      	beq.n	800573e <TIM_Base_SetConfig+0xaa>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a31      	ldr	r2, [pc, #196]	@ (80057f8 <TIM_Base_SetConfig+0x164>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d003      	beq.n	800573e <TIM_Base_SetConfig+0xaa>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2c      	ldr	r2, [pc, #176]	@ (80057ec <TIM_Base_SetConfig+0x158>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d108      	bne.n	8005750 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a18      	ldr	r2, [pc, #96]	@ (80057d8 <TIM_Base_SetConfig+0x144>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d013      	beq.n	80057a4 <TIM_Base_SetConfig+0x110>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a1a      	ldr	r2, [pc, #104]	@ (80057e8 <TIM_Base_SetConfig+0x154>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00f      	beq.n	80057a4 <TIM_Base_SetConfig+0x110>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a1a      	ldr	r2, [pc, #104]	@ (80057f0 <TIM_Base_SetConfig+0x15c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00b      	beq.n	80057a4 <TIM_Base_SetConfig+0x110>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a19      	ldr	r2, [pc, #100]	@ (80057f4 <TIM_Base_SetConfig+0x160>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d007      	beq.n	80057a4 <TIM_Base_SetConfig+0x110>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a18      	ldr	r2, [pc, #96]	@ (80057f8 <TIM_Base_SetConfig+0x164>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_Base_SetConfig+0x110>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a13      	ldr	r2, [pc, #76]	@ (80057ec <TIM_Base_SetConfig+0x158>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d103      	bne.n	80057ac <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	691a      	ldr	r2, [r3, #16]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d105      	bne.n	80057ca <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f023 0201 	bic.w	r2, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	611a      	str	r2, [r3, #16]
  }
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800
 80057e4:	40000c00 	.word	0x40000c00
 80057e8:	40013400 	.word	0x40013400
 80057ec:	40015000 	.word	0x40015000
 80057f0:	40014000 	.word	0x40014000
 80057f4:	40014400 	.word	0x40014400
 80057f8:	40014800 	.word	0x40014800

080057fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	f023 0201 	bic.w	r2, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800582a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800582e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0303 	bic.w	r3, r3, #3
 8005836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f023 0302 	bic.w	r3, r3, #2
 8005848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a30      	ldr	r2, [pc, #192]	@ (8005918 <TIM_OC1_SetConfig+0x11c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d013      	beq.n	8005884 <TIM_OC1_SetConfig+0x88>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a2f      	ldr	r2, [pc, #188]	@ (800591c <TIM_OC1_SetConfig+0x120>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d00f      	beq.n	8005884 <TIM_OC1_SetConfig+0x88>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a2e      	ldr	r2, [pc, #184]	@ (8005920 <TIM_OC1_SetConfig+0x124>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00b      	beq.n	8005884 <TIM_OC1_SetConfig+0x88>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a2d      	ldr	r2, [pc, #180]	@ (8005924 <TIM_OC1_SetConfig+0x128>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d007      	beq.n	8005884 <TIM_OC1_SetConfig+0x88>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a2c      	ldr	r2, [pc, #176]	@ (8005928 <TIM_OC1_SetConfig+0x12c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d003      	beq.n	8005884 <TIM_OC1_SetConfig+0x88>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a2b      	ldr	r2, [pc, #172]	@ (800592c <TIM_OC1_SetConfig+0x130>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d10c      	bne.n	800589e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f023 0308 	bic.w	r3, r3, #8
 800588a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f023 0304 	bic.w	r3, r3, #4
 800589c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005918 <TIM_OC1_SetConfig+0x11c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d013      	beq.n	80058ce <TIM_OC1_SetConfig+0xd2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a1c      	ldr	r2, [pc, #112]	@ (800591c <TIM_OC1_SetConfig+0x120>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00f      	beq.n	80058ce <TIM_OC1_SetConfig+0xd2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005920 <TIM_OC1_SetConfig+0x124>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00b      	beq.n	80058ce <TIM_OC1_SetConfig+0xd2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005924 <TIM_OC1_SetConfig+0x128>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d007      	beq.n	80058ce <TIM_OC1_SetConfig+0xd2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a19      	ldr	r2, [pc, #100]	@ (8005928 <TIM_OC1_SetConfig+0x12c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d003      	beq.n	80058ce <TIM_OC1_SetConfig+0xd2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a18      	ldr	r2, [pc, #96]	@ (800592c <TIM_OC1_SetConfig+0x130>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d111      	bne.n	80058f2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	621a      	str	r2, [r3, #32]
}
 800590c:	bf00      	nop
 800590e:	371c      	adds	r7, #28
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	40012c00 	.word	0x40012c00
 800591c:	40013400 	.word	0x40013400
 8005920:	40014000 	.word	0x40014000
 8005924:	40014400 	.word	0x40014400
 8005928:	40014800 	.word	0x40014800
 800592c:	40015000 	.word	0x40015000

08005930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	f023 0210 	bic.w	r2, r3, #16
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800595e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800596a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	021b      	lsls	r3, r3, #8
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4313      	orrs	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f023 0320 	bic.w	r3, r3, #32
 800597e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a2c      	ldr	r2, [pc, #176]	@ (8005a40 <TIM_OC2_SetConfig+0x110>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d007      	beq.n	80059a4 <TIM_OC2_SetConfig+0x74>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a2b      	ldr	r2, [pc, #172]	@ (8005a44 <TIM_OC2_SetConfig+0x114>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_OC2_SetConfig+0x74>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a2a      	ldr	r2, [pc, #168]	@ (8005a48 <TIM_OC2_SetConfig+0x118>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d10d      	bne.n	80059c0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005a40 <TIM_OC2_SetConfig+0x110>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <TIM_OC2_SetConfig+0xc0>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005a44 <TIM_OC2_SetConfig+0x114>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00f      	beq.n	80059f0 <TIM_OC2_SetConfig+0xc0>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a1e      	ldr	r2, [pc, #120]	@ (8005a4c <TIM_OC2_SetConfig+0x11c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00b      	beq.n	80059f0 <TIM_OC2_SetConfig+0xc0>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a1d      	ldr	r2, [pc, #116]	@ (8005a50 <TIM_OC2_SetConfig+0x120>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d007      	beq.n	80059f0 <TIM_OC2_SetConfig+0xc0>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a54 <TIM_OC2_SetConfig+0x124>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d003      	beq.n	80059f0 <TIM_OC2_SetConfig+0xc0>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a17      	ldr	r2, [pc, #92]	@ (8005a48 <TIM_OC2_SetConfig+0x118>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d113      	bne.n	8005a18 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	621a      	str	r2, [r3, #32]
}
 8005a32:	bf00      	nop
 8005a34:	371c      	adds	r7, #28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40012c00 	.word	0x40012c00
 8005a44:	40013400 	.word	0x40013400
 8005a48:	40015000 	.word	0x40015000
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40014400 	.word	0x40014400
 8005a54:	40014800 	.word	0x40014800

08005a58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0303 	bic.w	r3, r3, #3
 8005a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a2b      	ldr	r2, [pc, #172]	@ (8005b64 <TIM_OC3_SetConfig+0x10c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d007      	beq.n	8005aca <TIM_OC3_SetConfig+0x72>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a2a      	ldr	r2, [pc, #168]	@ (8005b68 <TIM_OC3_SetConfig+0x110>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d003      	beq.n	8005aca <TIM_OC3_SetConfig+0x72>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a29      	ldr	r2, [pc, #164]	@ (8005b6c <TIM_OC3_SetConfig+0x114>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d10d      	bne.n	8005ae6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	021b      	lsls	r3, r3, #8
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8005b64 <TIM_OC3_SetConfig+0x10c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d013      	beq.n	8005b16 <TIM_OC3_SetConfig+0xbe>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b68 <TIM_OC3_SetConfig+0x110>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d00f      	beq.n	8005b16 <TIM_OC3_SetConfig+0xbe>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b70 <TIM_OC3_SetConfig+0x118>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00b      	beq.n	8005b16 <TIM_OC3_SetConfig+0xbe>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a1c      	ldr	r2, [pc, #112]	@ (8005b74 <TIM_OC3_SetConfig+0x11c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d007      	beq.n	8005b16 <TIM_OC3_SetConfig+0xbe>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a1b      	ldr	r2, [pc, #108]	@ (8005b78 <TIM_OC3_SetConfig+0x120>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d003      	beq.n	8005b16 <TIM_OC3_SetConfig+0xbe>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a16      	ldr	r2, [pc, #88]	@ (8005b6c <TIM_OC3_SetConfig+0x114>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d113      	bne.n	8005b3e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	621a      	str	r2, [r3, #32]
}
 8005b58:	bf00      	nop
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	40012c00 	.word	0x40012c00
 8005b68:	40013400 	.word	0x40013400
 8005b6c:	40015000 	.word	0x40015000
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40014400 	.word	0x40014400
 8005b78:	40014800 	.word	0x40014800

08005b7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005baa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	021b      	lsls	r3, r3, #8
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	031b      	lsls	r3, r3, #12
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a2c      	ldr	r2, [pc, #176]	@ (8005c8c <TIM_OC4_SetConfig+0x110>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d007      	beq.n	8005bf0 <TIM_OC4_SetConfig+0x74>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a2b      	ldr	r2, [pc, #172]	@ (8005c90 <TIM_OC4_SetConfig+0x114>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_OC4_SetConfig+0x74>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a2a      	ldr	r2, [pc, #168]	@ (8005c94 <TIM_OC4_SetConfig+0x118>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d10d      	bne.n	8005c0c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	031b      	lsls	r3, r3, #12
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8005c8c <TIM_OC4_SetConfig+0x110>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d013      	beq.n	8005c3c <TIM_OC4_SetConfig+0xc0>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a1e      	ldr	r2, [pc, #120]	@ (8005c90 <TIM_OC4_SetConfig+0x114>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00f      	beq.n	8005c3c <TIM_OC4_SetConfig+0xc0>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8005c98 <TIM_OC4_SetConfig+0x11c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00b      	beq.n	8005c3c <TIM_OC4_SetConfig+0xc0>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a1d      	ldr	r2, [pc, #116]	@ (8005c9c <TIM_OC4_SetConfig+0x120>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d007      	beq.n	8005c3c <TIM_OC4_SetConfig+0xc0>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca0 <TIM_OC4_SetConfig+0x124>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_OC4_SetConfig+0xc0>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a17      	ldr	r2, [pc, #92]	@ (8005c94 <TIM_OC4_SetConfig+0x118>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d113      	bne.n	8005c64 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c42:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c4a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	019b      	lsls	r3, r3, #6
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	019b      	lsls	r3, r3, #6
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40012c00 	.word	0x40012c00
 8005c90:	40013400 	.word	0x40013400
 8005c94:	40015000 	.word	0x40015000
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40014400 	.word	0x40014400
 8005ca0:	40014800 	.word	0x40014800

08005ca4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005ce8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	041b      	lsls	r3, r3, #16
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a19      	ldr	r2, [pc, #100]	@ (8005d60 <TIM_OC5_SetConfig+0xbc>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d013      	beq.n	8005d26 <TIM_OC5_SetConfig+0x82>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a18      	ldr	r2, [pc, #96]	@ (8005d64 <TIM_OC5_SetConfig+0xc0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d00f      	beq.n	8005d26 <TIM_OC5_SetConfig+0x82>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a17      	ldr	r2, [pc, #92]	@ (8005d68 <TIM_OC5_SetConfig+0xc4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00b      	beq.n	8005d26 <TIM_OC5_SetConfig+0x82>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a16      	ldr	r2, [pc, #88]	@ (8005d6c <TIM_OC5_SetConfig+0xc8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d007      	beq.n	8005d26 <TIM_OC5_SetConfig+0x82>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a15      	ldr	r2, [pc, #84]	@ (8005d70 <TIM_OC5_SetConfig+0xcc>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d003      	beq.n	8005d26 <TIM_OC5_SetConfig+0x82>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a14      	ldr	r2, [pc, #80]	@ (8005d74 <TIM_OC5_SetConfig+0xd0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d109      	bne.n	8005d3a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	021b      	lsls	r3, r3, #8
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	621a      	str	r2, [r3, #32]
}
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	40012c00 	.word	0x40012c00
 8005d64:	40013400 	.word	0x40013400
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	40014400 	.word	0x40014400
 8005d70:	40014800 	.word	0x40014800
 8005d74:	40015000 	.word	0x40015000

08005d78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	021b      	lsls	r3, r3, #8
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	051b      	lsls	r3, r3, #20
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a1a      	ldr	r2, [pc, #104]	@ (8005e38 <TIM_OC6_SetConfig+0xc0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d013      	beq.n	8005dfc <TIM_OC6_SetConfig+0x84>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a19      	ldr	r2, [pc, #100]	@ (8005e3c <TIM_OC6_SetConfig+0xc4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00f      	beq.n	8005dfc <TIM_OC6_SetConfig+0x84>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a18      	ldr	r2, [pc, #96]	@ (8005e40 <TIM_OC6_SetConfig+0xc8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00b      	beq.n	8005dfc <TIM_OC6_SetConfig+0x84>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a17      	ldr	r2, [pc, #92]	@ (8005e44 <TIM_OC6_SetConfig+0xcc>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d007      	beq.n	8005dfc <TIM_OC6_SetConfig+0x84>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a16      	ldr	r2, [pc, #88]	@ (8005e48 <TIM_OC6_SetConfig+0xd0>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d003      	beq.n	8005dfc <TIM_OC6_SetConfig+0x84>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a15      	ldr	r2, [pc, #84]	@ (8005e4c <TIM_OC6_SetConfig+0xd4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d109      	bne.n	8005e10 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	029b      	lsls	r3, r3, #10
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	621a      	str	r2, [r3, #32]
}
 8005e2a:	bf00      	nop
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	40012c00 	.word	0x40012c00
 8005e3c:	40013400 	.word	0x40013400
 8005e40:	40014000 	.word	0x40014000
 8005e44:	40014400 	.word	0x40014400
 8005e48:	40014800 	.word	0x40014800
 8005e4c:	40015000 	.word	0x40015000

08005e50 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e70:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e82:	f023 0307 	bic.w	r3, r3, #7
 8005e86:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	4a56      	ldr	r2, [pc, #344]	@ (8005ff8 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	f000 80a2 	beq.w	8005fea <TIM_SlaveTimer_SetConfig+0x19a>
 8005ea6:	4a54      	ldr	r2, [pc, #336]	@ (8005ff8 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	f200 809b 	bhi.w	8005fe4 <TIM_SlaveTimer_SetConfig+0x194>
 8005eae:	4a53      	ldr	r2, [pc, #332]	@ (8005ffc <TIM_SlaveTimer_SetConfig+0x1ac>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	f000 809a 	beq.w	8005fea <TIM_SlaveTimer_SetConfig+0x19a>
 8005eb6:	4a51      	ldr	r2, [pc, #324]	@ (8005ffc <TIM_SlaveTimer_SetConfig+0x1ac>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	f200 8093 	bhi.w	8005fe4 <TIM_SlaveTimer_SetConfig+0x194>
 8005ebe:	4a50      	ldr	r2, [pc, #320]	@ (8006000 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	f000 8092 	beq.w	8005fea <TIM_SlaveTimer_SetConfig+0x19a>
 8005ec6:	4a4e      	ldr	r2, [pc, #312]	@ (8006000 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	f200 808b 	bhi.w	8005fe4 <TIM_SlaveTimer_SetConfig+0x194>
 8005ece:	4a4d      	ldr	r2, [pc, #308]	@ (8006004 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	f000 808a 	beq.w	8005fea <TIM_SlaveTimer_SetConfig+0x19a>
 8005ed6:	4a4b      	ldr	r2, [pc, #300]	@ (8006004 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	f200 8083 	bhi.w	8005fe4 <TIM_SlaveTimer_SetConfig+0x194>
 8005ede:	4a4a      	ldr	r2, [pc, #296]	@ (8006008 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	f000 8082 	beq.w	8005fea <TIM_SlaveTimer_SetConfig+0x19a>
 8005ee6:	4a48      	ldr	r2, [pc, #288]	@ (8006008 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d87b      	bhi.n	8005fe4 <TIM_SlaveTimer_SetConfig+0x194>
 8005eec:	4a47      	ldr	r2, [pc, #284]	@ (800600c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d07b      	beq.n	8005fea <TIM_SlaveTimer_SetConfig+0x19a>
 8005ef2:	4a46      	ldr	r2, [pc, #280]	@ (800600c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d875      	bhi.n	8005fe4 <TIM_SlaveTimer_SetConfig+0x194>
 8005ef8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005efc:	d075      	beq.n	8005fea <TIM_SlaveTimer_SetConfig+0x19a>
 8005efe:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f02:	d86f      	bhi.n	8005fe4 <TIM_SlaveTimer_SetConfig+0x194>
 8005f04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f08:	d06f      	beq.n	8005fea <TIM_SlaveTimer_SetConfig+0x19a>
 8005f0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f0e:	d869      	bhi.n	8005fe4 <TIM_SlaveTimer_SetConfig+0x194>
 8005f10:	2b70      	cmp	r3, #112	@ 0x70
 8005f12:	d01a      	beq.n	8005f4a <TIM_SlaveTimer_SetConfig+0xfa>
 8005f14:	2b70      	cmp	r3, #112	@ 0x70
 8005f16:	d865      	bhi.n	8005fe4 <TIM_SlaveTimer_SetConfig+0x194>
 8005f18:	2b60      	cmp	r3, #96	@ 0x60
 8005f1a:	d059      	beq.n	8005fd0 <TIM_SlaveTimer_SetConfig+0x180>
 8005f1c:	2b60      	cmp	r3, #96	@ 0x60
 8005f1e:	d861      	bhi.n	8005fe4 <TIM_SlaveTimer_SetConfig+0x194>
 8005f20:	2b50      	cmp	r3, #80	@ 0x50
 8005f22:	d04b      	beq.n	8005fbc <TIM_SlaveTimer_SetConfig+0x16c>
 8005f24:	2b50      	cmp	r3, #80	@ 0x50
 8005f26:	d85d      	bhi.n	8005fe4 <TIM_SlaveTimer_SetConfig+0x194>
 8005f28:	2b40      	cmp	r3, #64	@ 0x40
 8005f2a:	d019      	beq.n	8005f60 <TIM_SlaveTimer_SetConfig+0x110>
 8005f2c:	2b40      	cmp	r3, #64	@ 0x40
 8005f2e:	d859      	bhi.n	8005fe4 <TIM_SlaveTimer_SetConfig+0x194>
 8005f30:	2b30      	cmp	r3, #48	@ 0x30
 8005f32:	d05a      	beq.n	8005fea <TIM_SlaveTimer_SetConfig+0x19a>
 8005f34:	2b30      	cmp	r3, #48	@ 0x30
 8005f36:	d855      	bhi.n	8005fe4 <TIM_SlaveTimer_SetConfig+0x194>
 8005f38:	2b20      	cmp	r3, #32
 8005f3a:	d056      	beq.n	8005fea <TIM_SlaveTimer_SetConfig+0x19a>
 8005f3c:	2b20      	cmp	r3, #32
 8005f3e:	d851      	bhi.n	8005fe4 <TIM_SlaveTimer_SetConfig+0x194>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d052      	beq.n	8005fea <TIM_SlaveTimer_SetConfig+0x19a>
 8005f44:	2b10      	cmp	r3, #16
 8005f46:	d050      	beq.n	8005fea <TIM_SlaveTimer_SetConfig+0x19a>
 8005f48:	e04c      	b.n	8005fe4 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005f5a:	f000 f8d5 	bl	8006108 <TIM_ETR_SetConfig>
      break;
 8005f5e:	e045      	b.n	8005fec <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b05      	cmp	r3, #5
 8005f66:	d004      	beq.n	8005f72 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005f6c:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8005f70:	d101      	bne.n	8005f76 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e03b      	b.n	8005fee <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6a1a      	ldr	r2, [r3, #32]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0201 	bic.w	r2, r2, #1
 8005f8c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f9c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	621a      	str	r2, [r3, #32]
      break;
 8005fba:	e017      	b.n	8005fec <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fc8:	461a      	mov	r2, r3
 8005fca:	f000 f821 	bl	8006010 <TIM_TI1_ConfigInputStage>
      break;
 8005fce:	e00d      	b.n	8005fec <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f000 f846 	bl	800606e <TIM_TI2_ConfigInputStage>
      break;
 8005fe2:	e003      	b.n	8005fec <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe8:	e000      	b.n	8005fec <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8005fea:	bf00      	nop
  }

  return status;
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	00100070 	.word	0x00100070
 8005ffc:	00100060 	.word	0x00100060
 8006000:	00100050 	.word	0x00100050
 8006004:	00100040 	.word	0x00100040
 8006008:	00100030 	.word	0x00100030
 800600c:	00100020 	.word	0x00100020

08006010 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	f023 0201 	bic.w	r2, r3, #1
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800603a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	4313      	orrs	r3, r2
 8006044:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f023 030a 	bic.w	r3, r3, #10
 800604c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4313      	orrs	r3, r2
 8006054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	621a      	str	r2, [r3, #32]
}
 8006062:	bf00      	nop
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800606e:	b480      	push	{r7}
 8006070:	b087      	sub	sp, #28
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	f023 0210 	bic.w	r2, r3, #16
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006098:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	031b      	lsls	r3, r3, #12
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80060aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	011b      	lsls	r3, r3, #4
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	621a      	str	r2, [r3, #32]
}
 80060c2:	bf00      	nop
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b085      	sub	sp, #20
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80060e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f043 0307 	orr.w	r3, r3, #7
 80060f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	609a      	str	r2, [r3, #8]
}
 80060fc:	bf00      	nop
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006122:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	021a      	lsls	r2, r3, #8
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	431a      	orrs	r2, r3
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4313      	orrs	r3, r2
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	609a      	str	r2, [r3, #8]
}
 800613c:	bf00      	nop
 800613e:	371c      	adds	r7, #28
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006148:	b480      	push	{r7}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f003 031f 	and.w	r3, r3, #31
 800615a:	2201      	movs	r2, #1
 800615c:	fa02 f303 	lsl.w	r3, r2, r3
 8006160:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a1a      	ldr	r2, [r3, #32]
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	43db      	mvns	r3, r3
 800616a:	401a      	ands	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a1a      	ldr	r2, [r3, #32]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f003 031f 	and.w	r3, r3, #31
 800617a:	6879      	ldr	r1, [r7, #4]
 800617c:	fa01 f303 	lsl.w	r3, r1, r3
 8006180:	431a      	orrs	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	621a      	str	r2, [r3, #32]
}
 8006186:	bf00      	nop
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
	...

08006194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e074      	b.n	8006296 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a34      	ldr	r2, [pc, #208]	@ (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d009      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a33      	ldr	r2, [pc, #204]	@ (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d004      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a31      	ldr	r2, [pc, #196]	@ (80062ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d108      	bne.n	80061fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80061f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006206:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a21      	ldr	r2, [pc, #132]	@ (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d022      	beq.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800622c:	d01d      	beq.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a1f      	ldr	r2, [pc, #124]	@ (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d018      	beq.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1d      	ldr	r2, [pc, #116]	@ (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d013      	beq.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a1c      	ldr	r2, [pc, #112]	@ (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00e      	beq.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a15      	ldr	r2, [pc, #84]	@ (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d009      	beq.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a18      	ldr	r2, [pc, #96]	@ (80062bc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d004      	beq.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a11      	ldr	r2, [pc, #68]	@ (80062ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d10c      	bne.n	8006284 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	4313      	orrs	r3, r2
 800627a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40012c00 	.word	0x40012c00
 80062a8:	40013400 	.word	0x40013400
 80062ac:	40015000 	.word	0x40015000
 80062b0:	40000400 	.word	0x40000400
 80062b4:	40000800 	.word	0x40000800
 80062b8:	40000c00 	.word	0x40000c00
 80062bc:	40014000 	.word	0x40014000

080062c0 <atoi>:
 80062c0:	220a      	movs	r2, #10
 80062c2:	2100      	movs	r1, #0
 80062c4:	f000 b87c 	b.w	80063c0 <strtol>

080062c8 <_strtol_l.isra.0>:
 80062c8:	2b24      	cmp	r3, #36	@ 0x24
 80062ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ce:	4686      	mov	lr, r0
 80062d0:	4690      	mov	r8, r2
 80062d2:	d801      	bhi.n	80062d8 <_strtol_l.isra.0+0x10>
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d106      	bne.n	80062e6 <_strtol_l.isra.0+0x1e>
 80062d8:	f000 f8b2 	bl	8006440 <__errno>
 80062dc:	2316      	movs	r3, #22
 80062de:	6003      	str	r3, [r0, #0]
 80062e0:	2000      	movs	r0, #0
 80062e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e6:	4834      	ldr	r0, [pc, #208]	@ (80063b8 <_strtol_l.isra.0+0xf0>)
 80062e8:	460d      	mov	r5, r1
 80062ea:	462a      	mov	r2, r5
 80062ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062f0:	5d06      	ldrb	r6, [r0, r4]
 80062f2:	f016 0608 	ands.w	r6, r6, #8
 80062f6:	d1f8      	bne.n	80062ea <_strtol_l.isra.0+0x22>
 80062f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80062fa:	d110      	bne.n	800631e <_strtol_l.isra.0+0x56>
 80062fc:	782c      	ldrb	r4, [r5, #0]
 80062fe:	2601      	movs	r6, #1
 8006300:	1c95      	adds	r5, r2, #2
 8006302:	f033 0210 	bics.w	r2, r3, #16
 8006306:	d115      	bne.n	8006334 <_strtol_l.isra.0+0x6c>
 8006308:	2c30      	cmp	r4, #48	@ 0x30
 800630a:	d10d      	bne.n	8006328 <_strtol_l.isra.0+0x60>
 800630c:	782a      	ldrb	r2, [r5, #0]
 800630e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006312:	2a58      	cmp	r2, #88	@ 0x58
 8006314:	d108      	bne.n	8006328 <_strtol_l.isra.0+0x60>
 8006316:	786c      	ldrb	r4, [r5, #1]
 8006318:	3502      	adds	r5, #2
 800631a:	2310      	movs	r3, #16
 800631c:	e00a      	b.n	8006334 <_strtol_l.isra.0+0x6c>
 800631e:	2c2b      	cmp	r4, #43	@ 0x2b
 8006320:	bf04      	itt	eq
 8006322:	782c      	ldrbeq	r4, [r5, #0]
 8006324:	1c95      	addeq	r5, r2, #2
 8006326:	e7ec      	b.n	8006302 <_strtol_l.isra.0+0x3a>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1f6      	bne.n	800631a <_strtol_l.isra.0+0x52>
 800632c:	2c30      	cmp	r4, #48	@ 0x30
 800632e:	bf14      	ite	ne
 8006330:	230a      	movne	r3, #10
 8006332:	2308      	moveq	r3, #8
 8006334:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006338:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800633c:	2200      	movs	r2, #0
 800633e:	fbbc f9f3 	udiv	r9, ip, r3
 8006342:	4610      	mov	r0, r2
 8006344:	fb03 ca19 	mls	sl, r3, r9, ip
 8006348:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800634c:	2f09      	cmp	r7, #9
 800634e:	d80f      	bhi.n	8006370 <_strtol_l.isra.0+0xa8>
 8006350:	463c      	mov	r4, r7
 8006352:	42a3      	cmp	r3, r4
 8006354:	dd1b      	ble.n	800638e <_strtol_l.isra.0+0xc6>
 8006356:	1c57      	adds	r7, r2, #1
 8006358:	d007      	beq.n	800636a <_strtol_l.isra.0+0xa2>
 800635a:	4581      	cmp	r9, r0
 800635c:	d314      	bcc.n	8006388 <_strtol_l.isra.0+0xc0>
 800635e:	d101      	bne.n	8006364 <_strtol_l.isra.0+0x9c>
 8006360:	45a2      	cmp	sl, r4
 8006362:	db11      	blt.n	8006388 <_strtol_l.isra.0+0xc0>
 8006364:	fb00 4003 	mla	r0, r0, r3, r4
 8006368:	2201      	movs	r2, #1
 800636a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800636e:	e7eb      	b.n	8006348 <_strtol_l.isra.0+0x80>
 8006370:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006374:	2f19      	cmp	r7, #25
 8006376:	d801      	bhi.n	800637c <_strtol_l.isra.0+0xb4>
 8006378:	3c37      	subs	r4, #55	@ 0x37
 800637a:	e7ea      	b.n	8006352 <_strtol_l.isra.0+0x8a>
 800637c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006380:	2f19      	cmp	r7, #25
 8006382:	d804      	bhi.n	800638e <_strtol_l.isra.0+0xc6>
 8006384:	3c57      	subs	r4, #87	@ 0x57
 8006386:	e7e4      	b.n	8006352 <_strtol_l.isra.0+0x8a>
 8006388:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800638c:	e7ed      	b.n	800636a <_strtol_l.isra.0+0xa2>
 800638e:	1c53      	adds	r3, r2, #1
 8006390:	d108      	bne.n	80063a4 <_strtol_l.isra.0+0xdc>
 8006392:	2322      	movs	r3, #34	@ 0x22
 8006394:	f8ce 3000 	str.w	r3, [lr]
 8006398:	4660      	mov	r0, ip
 800639a:	f1b8 0f00 	cmp.w	r8, #0
 800639e:	d0a0      	beq.n	80062e2 <_strtol_l.isra.0+0x1a>
 80063a0:	1e69      	subs	r1, r5, #1
 80063a2:	e006      	b.n	80063b2 <_strtol_l.isra.0+0xea>
 80063a4:	b106      	cbz	r6, 80063a8 <_strtol_l.isra.0+0xe0>
 80063a6:	4240      	negs	r0, r0
 80063a8:	f1b8 0f00 	cmp.w	r8, #0
 80063ac:	d099      	beq.n	80062e2 <_strtol_l.isra.0+0x1a>
 80063ae:	2a00      	cmp	r2, #0
 80063b0:	d1f6      	bne.n	80063a0 <_strtol_l.isra.0+0xd8>
 80063b2:	f8c8 1000 	str.w	r1, [r8]
 80063b6:	e794      	b.n	80062e2 <_strtol_l.isra.0+0x1a>
 80063b8:	08007881 	.word	0x08007881

080063bc <_strtol_r>:
 80063bc:	f7ff bf84 	b.w	80062c8 <_strtol_l.isra.0>

080063c0 <strtol>:
 80063c0:	4613      	mov	r3, r2
 80063c2:	460a      	mov	r2, r1
 80063c4:	4601      	mov	r1, r0
 80063c6:	4802      	ldr	r0, [pc, #8]	@ (80063d0 <strtol+0x10>)
 80063c8:	6800      	ldr	r0, [r0, #0]
 80063ca:	f7ff bf7d 	b.w	80062c8 <_strtol_l.isra.0>
 80063ce:	bf00      	nop
 80063d0:	20003c78 	.word	0x20003c78

080063d4 <siscanf>:
 80063d4:	b40e      	push	{r1, r2, r3}
 80063d6:	b570      	push	{r4, r5, r6, lr}
 80063d8:	b09d      	sub	sp, #116	@ 0x74
 80063da:	ac21      	add	r4, sp, #132	@ 0x84
 80063dc:	2500      	movs	r5, #0
 80063de:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80063e2:	f854 6b04 	ldr.w	r6, [r4], #4
 80063e6:	f8ad 2014 	strh.w	r2, [sp, #20]
 80063ea:	951b      	str	r5, [sp, #108]	@ 0x6c
 80063ec:	9002      	str	r0, [sp, #8]
 80063ee:	9006      	str	r0, [sp, #24]
 80063f0:	f7f9 ff16 	bl	8000220 <strlen>
 80063f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006424 <siscanf+0x50>)
 80063f6:	9003      	str	r0, [sp, #12]
 80063f8:	9007      	str	r0, [sp, #28]
 80063fa:	480b      	ldr	r0, [pc, #44]	@ (8006428 <siscanf+0x54>)
 80063fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006402:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006406:	4632      	mov	r2, r6
 8006408:	4623      	mov	r3, r4
 800640a:	a902      	add	r1, sp, #8
 800640c:	6800      	ldr	r0, [r0, #0]
 800640e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006410:	9514      	str	r5, [sp, #80]	@ 0x50
 8006412:	9401      	str	r4, [sp, #4]
 8006414:	f000 f9a0 	bl	8006758 <__ssvfiscanf_r>
 8006418:	b01d      	add	sp, #116	@ 0x74
 800641a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800641e:	b003      	add	sp, #12
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	0800642d 	.word	0x0800642d
 8006428:	20003c78 	.word	0x20003c78

0800642c <__seofread>:
 800642c:	2000      	movs	r0, #0
 800642e:	4770      	bx	lr

08006430 <memset>:
 8006430:	4402      	add	r2, r0
 8006432:	4603      	mov	r3, r0
 8006434:	4293      	cmp	r3, r2
 8006436:	d100      	bne.n	800643a <memset+0xa>
 8006438:	4770      	bx	lr
 800643a:	f803 1b01 	strb.w	r1, [r3], #1
 800643e:	e7f9      	b.n	8006434 <memset+0x4>

08006440 <__errno>:
 8006440:	4b01      	ldr	r3, [pc, #4]	@ (8006448 <__errno+0x8>)
 8006442:	6818      	ldr	r0, [r3, #0]
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	20003c78 	.word	0x20003c78

0800644c <__libc_init_array>:
 800644c:	b570      	push	{r4, r5, r6, lr}
 800644e:	4d0d      	ldr	r5, [pc, #52]	@ (8006484 <__libc_init_array+0x38>)
 8006450:	4c0d      	ldr	r4, [pc, #52]	@ (8006488 <__libc_init_array+0x3c>)
 8006452:	1b64      	subs	r4, r4, r5
 8006454:	10a4      	asrs	r4, r4, #2
 8006456:	2600      	movs	r6, #0
 8006458:	42a6      	cmp	r6, r4
 800645a:	d109      	bne.n	8006470 <__libc_init_array+0x24>
 800645c:	4d0b      	ldr	r5, [pc, #44]	@ (800648c <__libc_init_array+0x40>)
 800645e:	4c0c      	ldr	r4, [pc, #48]	@ (8006490 <__libc_init_array+0x44>)
 8006460:	f000 fd68 	bl	8006f34 <_init>
 8006464:	1b64      	subs	r4, r4, r5
 8006466:	10a4      	asrs	r4, r4, #2
 8006468:	2600      	movs	r6, #0
 800646a:	42a6      	cmp	r6, r4
 800646c:	d105      	bne.n	800647a <__libc_init_array+0x2e>
 800646e:	bd70      	pop	{r4, r5, r6, pc}
 8006470:	f855 3b04 	ldr.w	r3, [r5], #4
 8006474:	4798      	blx	r3
 8006476:	3601      	adds	r6, #1
 8006478:	e7ee      	b.n	8006458 <__libc_init_array+0xc>
 800647a:	f855 3b04 	ldr.w	r3, [r5], #4
 800647e:	4798      	blx	r3
 8006480:	3601      	adds	r6, #1
 8006482:	e7f2      	b.n	800646a <__libc_init_array+0x1e>
 8006484:	080079a8 	.word	0x080079a8
 8006488:	080079a8 	.word	0x080079a8
 800648c:	080079a8 	.word	0x080079a8
 8006490:	080079ac 	.word	0x080079ac

08006494 <__retarget_lock_acquire_recursive>:
 8006494:	4770      	bx	lr

08006496 <__retarget_lock_release_recursive>:
 8006496:	4770      	bx	lr

08006498 <memcpy>:
 8006498:	440a      	add	r2, r1
 800649a:	4291      	cmp	r1, r2
 800649c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80064a0:	d100      	bne.n	80064a4 <memcpy+0xc>
 80064a2:	4770      	bx	lr
 80064a4:	b510      	push	{r4, lr}
 80064a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064ae:	4291      	cmp	r1, r2
 80064b0:	d1f9      	bne.n	80064a6 <memcpy+0xe>
 80064b2:	bd10      	pop	{r4, pc}

080064b4 <_free_r>:
 80064b4:	b538      	push	{r3, r4, r5, lr}
 80064b6:	4605      	mov	r5, r0
 80064b8:	2900      	cmp	r1, #0
 80064ba:	d041      	beq.n	8006540 <_free_r+0x8c>
 80064bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064c0:	1f0c      	subs	r4, r1, #4
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	bfb8      	it	lt
 80064c6:	18e4      	addlt	r4, r4, r3
 80064c8:	f000 f8e0 	bl	800668c <__malloc_lock>
 80064cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006544 <_free_r+0x90>)
 80064ce:	6813      	ldr	r3, [r2, #0]
 80064d0:	b933      	cbnz	r3, 80064e0 <_free_r+0x2c>
 80064d2:	6063      	str	r3, [r4, #4]
 80064d4:	6014      	str	r4, [r2, #0]
 80064d6:	4628      	mov	r0, r5
 80064d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064dc:	f000 b8dc 	b.w	8006698 <__malloc_unlock>
 80064e0:	42a3      	cmp	r3, r4
 80064e2:	d908      	bls.n	80064f6 <_free_r+0x42>
 80064e4:	6820      	ldr	r0, [r4, #0]
 80064e6:	1821      	adds	r1, r4, r0
 80064e8:	428b      	cmp	r3, r1
 80064ea:	bf01      	itttt	eq
 80064ec:	6819      	ldreq	r1, [r3, #0]
 80064ee:	685b      	ldreq	r3, [r3, #4]
 80064f0:	1809      	addeq	r1, r1, r0
 80064f2:	6021      	streq	r1, [r4, #0]
 80064f4:	e7ed      	b.n	80064d2 <_free_r+0x1e>
 80064f6:	461a      	mov	r2, r3
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	b10b      	cbz	r3, 8006500 <_free_r+0x4c>
 80064fc:	42a3      	cmp	r3, r4
 80064fe:	d9fa      	bls.n	80064f6 <_free_r+0x42>
 8006500:	6811      	ldr	r1, [r2, #0]
 8006502:	1850      	adds	r0, r2, r1
 8006504:	42a0      	cmp	r0, r4
 8006506:	d10b      	bne.n	8006520 <_free_r+0x6c>
 8006508:	6820      	ldr	r0, [r4, #0]
 800650a:	4401      	add	r1, r0
 800650c:	1850      	adds	r0, r2, r1
 800650e:	4283      	cmp	r3, r0
 8006510:	6011      	str	r1, [r2, #0]
 8006512:	d1e0      	bne.n	80064d6 <_free_r+0x22>
 8006514:	6818      	ldr	r0, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	6053      	str	r3, [r2, #4]
 800651a:	4408      	add	r0, r1
 800651c:	6010      	str	r0, [r2, #0]
 800651e:	e7da      	b.n	80064d6 <_free_r+0x22>
 8006520:	d902      	bls.n	8006528 <_free_r+0x74>
 8006522:	230c      	movs	r3, #12
 8006524:	602b      	str	r3, [r5, #0]
 8006526:	e7d6      	b.n	80064d6 <_free_r+0x22>
 8006528:	6820      	ldr	r0, [r4, #0]
 800652a:	1821      	adds	r1, r4, r0
 800652c:	428b      	cmp	r3, r1
 800652e:	bf04      	itt	eq
 8006530:	6819      	ldreq	r1, [r3, #0]
 8006532:	685b      	ldreq	r3, [r3, #4]
 8006534:	6063      	str	r3, [r4, #4]
 8006536:	bf04      	itt	eq
 8006538:	1809      	addeq	r1, r1, r0
 800653a:	6021      	streq	r1, [r4, #0]
 800653c:	6054      	str	r4, [r2, #4]
 800653e:	e7ca      	b.n	80064d6 <_free_r+0x22>
 8006540:	bd38      	pop	{r3, r4, r5, pc}
 8006542:	bf00      	nop
 8006544:	200040ec 	.word	0x200040ec

08006548 <sbrk_aligned>:
 8006548:	b570      	push	{r4, r5, r6, lr}
 800654a:	4e0f      	ldr	r6, [pc, #60]	@ (8006588 <sbrk_aligned+0x40>)
 800654c:	460c      	mov	r4, r1
 800654e:	6831      	ldr	r1, [r6, #0]
 8006550:	4605      	mov	r5, r0
 8006552:	b911      	cbnz	r1, 800655a <sbrk_aligned+0x12>
 8006554:	f000 fc38 	bl	8006dc8 <_sbrk_r>
 8006558:	6030      	str	r0, [r6, #0]
 800655a:	4621      	mov	r1, r4
 800655c:	4628      	mov	r0, r5
 800655e:	f000 fc33 	bl	8006dc8 <_sbrk_r>
 8006562:	1c43      	adds	r3, r0, #1
 8006564:	d103      	bne.n	800656e <sbrk_aligned+0x26>
 8006566:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800656a:	4620      	mov	r0, r4
 800656c:	bd70      	pop	{r4, r5, r6, pc}
 800656e:	1cc4      	adds	r4, r0, #3
 8006570:	f024 0403 	bic.w	r4, r4, #3
 8006574:	42a0      	cmp	r0, r4
 8006576:	d0f8      	beq.n	800656a <sbrk_aligned+0x22>
 8006578:	1a21      	subs	r1, r4, r0
 800657a:	4628      	mov	r0, r5
 800657c:	f000 fc24 	bl	8006dc8 <_sbrk_r>
 8006580:	3001      	adds	r0, #1
 8006582:	d1f2      	bne.n	800656a <sbrk_aligned+0x22>
 8006584:	e7ef      	b.n	8006566 <sbrk_aligned+0x1e>
 8006586:	bf00      	nop
 8006588:	200040e8 	.word	0x200040e8

0800658c <_malloc_r>:
 800658c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006590:	1ccd      	adds	r5, r1, #3
 8006592:	f025 0503 	bic.w	r5, r5, #3
 8006596:	3508      	adds	r5, #8
 8006598:	2d0c      	cmp	r5, #12
 800659a:	bf38      	it	cc
 800659c:	250c      	movcc	r5, #12
 800659e:	2d00      	cmp	r5, #0
 80065a0:	4606      	mov	r6, r0
 80065a2:	db01      	blt.n	80065a8 <_malloc_r+0x1c>
 80065a4:	42a9      	cmp	r1, r5
 80065a6:	d904      	bls.n	80065b2 <_malloc_r+0x26>
 80065a8:	230c      	movs	r3, #12
 80065aa:	6033      	str	r3, [r6, #0]
 80065ac:	2000      	movs	r0, #0
 80065ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006688 <_malloc_r+0xfc>
 80065b6:	f000 f869 	bl	800668c <__malloc_lock>
 80065ba:	f8d8 3000 	ldr.w	r3, [r8]
 80065be:	461c      	mov	r4, r3
 80065c0:	bb44      	cbnz	r4, 8006614 <_malloc_r+0x88>
 80065c2:	4629      	mov	r1, r5
 80065c4:	4630      	mov	r0, r6
 80065c6:	f7ff ffbf 	bl	8006548 <sbrk_aligned>
 80065ca:	1c43      	adds	r3, r0, #1
 80065cc:	4604      	mov	r4, r0
 80065ce:	d158      	bne.n	8006682 <_malloc_r+0xf6>
 80065d0:	f8d8 4000 	ldr.w	r4, [r8]
 80065d4:	4627      	mov	r7, r4
 80065d6:	2f00      	cmp	r7, #0
 80065d8:	d143      	bne.n	8006662 <_malloc_r+0xd6>
 80065da:	2c00      	cmp	r4, #0
 80065dc:	d04b      	beq.n	8006676 <_malloc_r+0xea>
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	4639      	mov	r1, r7
 80065e2:	4630      	mov	r0, r6
 80065e4:	eb04 0903 	add.w	r9, r4, r3
 80065e8:	f000 fbee 	bl	8006dc8 <_sbrk_r>
 80065ec:	4581      	cmp	r9, r0
 80065ee:	d142      	bne.n	8006676 <_malloc_r+0xea>
 80065f0:	6821      	ldr	r1, [r4, #0]
 80065f2:	1a6d      	subs	r5, r5, r1
 80065f4:	4629      	mov	r1, r5
 80065f6:	4630      	mov	r0, r6
 80065f8:	f7ff ffa6 	bl	8006548 <sbrk_aligned>
 80065fc:	3001      	adds	r0, #1
 80065fe:	d03a      	beq.n	8006676 <_malloc_r+0xea>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	442b      	add	r3, r5
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	f8d8 3000 	ldr.w	r3, [r8]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	bb62      	cbnz	r2, 8006668 <_malloc_r+0xdc>
 800660e:	f8c8 7000 	str.w	r7, [r8]
 8006612:	e00f      	b.n	8006634 <_malloc_r+0xa8>
 8006614:	6822      	ldr	r2, [r4, #0]
 8006616:	1b52      	subs	r2, r2, r5
 8006618:	d420      	bmi.n	800665c <_malloc_r+0xd0>
 800661a:	2a0b      	cmp	r2, #11
 800661c:	d917      	bls.n	800664e <_malloc_r+0xc2>
 800661e:	1961      	adds	r1, r4, r5
 8006620:	42a3      	cmp	r3, r4
 8006622:	6025      	str	r5, [r4, #0]
 8006624:	bf18      	it	ne
 8006626:	6059      	strne	r1, [r3, #4]
 8006628:	6863      	ldr	r3, [r4, #4]
 800662a:	bf08      	it	eq
 800662c:	f8c8 1000 	streq.w	r1, [r8]
 8006630:	5162      	str	r2, [r4, r5]
 8006632:	604b      	str	r3, [r1, #4]
 8006634:	4630      	mov	r0, r6
 8006636:	f000 f82f 	bl	8006698 <__malloc_unlock>
 800663a:	f104 000b 	add.w	r0, r4, #11
 800663e:	1d23      	adds	r3, r4, #4
 8006640:	f020 0007 	bic.w	r0, r0, #7
 8006644:	1ac2      	subs	r2, r0, r3
 8006646:	bf1c      	itt	ne
 8006648:	1a1b      	subne	r3, r3, r0
 800664a:	50a3      	strne	r3, [r4, r2]
 800664c:	e7af      	b.n	80065ae <_malloc_r+0x22>
 800664e:	6862      	ldr	r2, [r4, #4]
 8006650:	42a3      	cmp	r3, r4
 8006652:	bf0c      	ite	eq
 8006654:	f8c8 2000 	streq.w	r2, [r8]
 8006658:	605a      	strne	r2, [r3, #4]
 800665a:	e7eb      	b.n	8006634 <_malloc_r+0xa8>
 800665c:	4623      	mov	r3, r4
 800665e:	6864      	ldr	r4, [r4, #4]
 8006660:	e7ae      	b.n	80065c0 <_malloc_r+0x34>
 8006662:	463c      	mov	r4, r7
 8006664:	687f      	ldr	r7, [r7, #4]
 8006666:	e7b6      	b.n	80065d6 <_malloc_r+0x4a>
 8006668:	461a      	mov	r2, r3
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	42a3      	cmp	r3, r4
 800666e:	d1fb      	bne.n	8006668 <_malloc_r+0xdc>
 8006670:	2300      	movs	r3, #0
 8006672:	6053      	str	r3, [r2, #4]
 8006674:	e7de      	b.n	8006634 <_malloc_r+0xa8>
 8006676:	230c      	movs	r3, #12
 8006678:	6033      	str	r3, [r6, #0]
 800667a:	4630      	mov	r0, r6
 800667c:	f000 f80c 	bl	8006698 <__malloc_unlock>
 8006680:	e794      	b.n	80065ac <_malloc_r+0x20>
 8006682:	6005      	str	r5, [r0, #0]
 8006684:	e7d6      	b.n	8006634 <_malloc_r+0xa8>
 8006686:	bf00      	nop
 8006688:	200040ec 	.word	0x200040ec

0800668c <__malloc_lock>:
 800668c:	4801      	ldr	r0, [pc, #4]	@ (8006694 <__malloc_lock+0x8>)
 800668e:	f7ff bf01 	b.w	8006494 <__retarget_lock_acquire_recursive>
 8006692:	bf00      	nop
 8006694:	200040e4 	.word	0x200040e4

08006698 <__malloc_unlock>:
 8006698:	4801      	ldr	r0, [pc, #4]	@ (80066a0 <__malloc_unlock+0x8>)
 800669a:	f7ff befc 	b.w	8006496 <__retarget_lock_release_recursive>
 800669e:	bf00      	nop
 80066a0:	200040e4 	.word	0x200040e4

080066a4 <_sungetc_r>:
 80066a4:	b538      	push	{r3, r4, r5, lr}
 80066a6:	1c4b      	adds	r3, r1, #1
 80066a8:	4614      	mov	r4, r2
 80066aa:	d103      	bne.n	80066b4 <_sungetc_r+0x10>
 80066ac:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80066b0:	4628      	mov	r0, r5
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	8993      	ldrh	r3, [r2, #12]
 80066b6:	f023 0320 	bic.w	r3, r3, #32
 80066ba:	8193      	strh	r3, [r2, #12]
 80066bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80066be:	6852      	ldr	r2, [r2, #4]
 80066c0:	b2cd      	uxtb	r5, r1
 80066c2:	b18b      	cbz	r3, 80066e8 <_sungetc_r+0x44>
 80066c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80066c6:	4293      	cmp	r3, r2
 80066c8:	dd08      	ble.n	80066dc <_sungetc_r+0x38>
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	1e5a      	subs	r2, r3, #1
 80066ce:	6022      	str	r2, [r4, #0]
 80066d0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80066d4:	6863      	ldr	r3, [r4, #4]
 80066d6:	3301      	adds	r3, #1
 80066d8:	6063      	str	r3, [r4, #4]
 80066da:	e7e9      	b.n	80066b0 <_sungetc_r+0xc>
 80066dc:	4621      	mov	r1, r4
 80066de:	f000 fb38 	bl	8006d52 <__submore>
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d0f1      	beq.n	80066ca <_sungetc_r+0x26>
 80066e6:	e7e1      	b.n	80066ac <_sungetc_r+0x8>
 80066e8:	6921      	ldr	r1, [r4, #16]
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	b151      	cbz	r1, 8006704 <_sungetc_r+0x60>
 80066ee:	4299      	cmp	r1, r3
 80066f0:	d208      	bcs.n	8006704 <_sungetc_r+0x60>
 80066f2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80066f6:	42a9      	cmp	r1, r5
 80066f8:	d104      	bne.n	8006704 <_sungetc_r+0x60>
 80066fa:	3b01      	subs	r3, #1
 80066fc:	3201      	adds	r2, #1
 80066fe:	6023      	str	r3, [r4, #0]
 8006700:	6062      	str	r2, [r4, #4]
 8006702:	e7d5      	b.n	80066b0 <_sungetc_r+0xc>
 8006704:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8006708:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800670c:	6363      	str	r3, [r4, #52]	@ 0x34
 800670e:	2303      	movs	r3, #3
 8006710:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006712:	4623      	mov	r3, r4
 8006714:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	2301      	movs	r3, #1
 800671c:	e7dc      	b.n	80066d8 <_sungetc_r+0x34>

0800671e <__ssrefill_r>:
 800671e:	b510      	push	{r4, lr}
 8006720:	460c      	mov	r4, r1
 8006722:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006724:	b169      	cbz	r1, 8006742 <__ssrefill_r+0x24>
 8006726:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800672a:	4299      	cmp	r1, r3
 800672c:	d001      	beq.n	8006732 <__ssrefill_r+0x14>
 800672e:	f7ff fec1 	bl	80064b4 <_free_r>
 8006732:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006734:	6063      	str	r3, [r4, #4]
 8006736:	2000      	movs	r0, #0
 8006738:	6360      	str	r0, [r4, #52]	@ 0x34
 800673a:	b113      	cbz	r3, 8006742 <__ssrefill_r+0x24>
 800673c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800673e:	6023      	str	r3, [r4, #0]
 8006740:	bd10      	pop	{r4, pc}
 8006742:	6923      	ldr	r3, [r4, #16]
 8006744:	6023      	str	r3, [r4, #0]
 8006746:	2300      	movs	r3, #0
 8006748:	6063      	str	r3, [r4, #4]
 800674a:	89a3      	ldrh	r3, [r4, #12]
 800674c:	f043 0320 	orr.w	r3, r3, #32
 8006750:	81a3      	strh	r3, [r4, #12]
 8006752:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006756:	e7f3      	b.n	8006740 <__ssrefill_r+0x22>

08006758 <__ssvfiscanf_r>:
 8006758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675c:	460c      	mov	r4, r1
 800675e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8006762:	2100      	movs	r1, #0
 8006764:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006768:	49a6      	ldr	r1, [pc, #664]	@ (8006a04 <__ssvfiscanf_r+0x2ac>)
 800676a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800676c:	f10d 0804 	add.w	r8, sp, #4
 8006770:	49a5      	ldr	r1, [pc, #660]	@ (8006a08 <__ssvfiscanf_r+0x2b0>)
 8006772:	4fa6      	ldr	r7, [pc, #664]	@ (8006a0c <__ssvfiscanf_r+0x2b4>)
 8006774:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006778:	4606      	mov	r6, r0
 800677a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	f892 9000 	ldrb.w	r9, [r2]
 8006782:	f1b9 0f00 	cmp.w	r9, #0
 8006786:	f000 8158 	beq.w	8006a3a <__ssvfiscanf_r+0x2e2>
 800678a:	f817 3009 	ldrb.w	r3, [r7, r9]
 800678e:	f013 0308 	ands.w	r3, r3, #8
 8006792:	f102 0501 	add.w	r5, r2, #1
 8006796:	d019      	beq.n	80067cc <__ssvfiscanf_r+0x74>
 8006798:	6863      	ldr	r3, [r4, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	dd0f      	ble.n	80067be <__ssvfiscanf_r+0x66>
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	781a      	ldrb	r2, [r3, #0]
 80067a2:	5cba      	ldrb	r2, [r7, r2]
 80067a4:	0712      	lsls	r2, r2, #28
 80067a6:	d401      	bmi.n	80067ac <__ssvfiscanf_r+0x54>
 80067a8:	462a      	mov	r2, r5
 80067aa:	e7e8      	b.n	800677e <__ssvfiscanf_r+0x26>
 80067ac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80067ae:	3201      	adds	r2, #1
 80067b0:	9245      	str	r2, [sp, #276]	@ 0x114
 80067b2:	6862      	ldr	r2, [r4, #4]
 80067b4:	3301      	adds	r3, #1
 80067b6:	3a01      	subs	r2, #1
 80067b8:	6062      	str	r2, [r4, #4]
 80067ba:	6023      	str	r3, [r4, #0]
 80067bc:	e7ec      	b.n	8006798 <__ssvfiscanf_r+0x40>
 80067be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80067c0:	4621      	mov	r1, r4
 80067c2:	4630      	mov	r0, r6
 80067c4:	4798      	blx	r3
 80067c6:	2800      	cmp	r0, #0
 80067c8:	d0e9      	beq.n	800679e <__ssvfiscanf_r+0x46>
 80067ca:	e7ed      	b.n	80067a8 <__ssvfiscanf_r+0x50>
 80067cc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80067d0:	f040 8085 	bne.w	80068de <__ssvfiscanf_r+0x186>
 80067d4:	9341      	str	r3, [sp, #260]	@ 0x104
 80067d6:	9343      	str	r3, [sp, #268]	@ 0x10c
 80067d8:	7853      	ldrb	r3, [r2, #1]
 80067da:	2b2a      	cmp	r3, #42	@ 0x2a
 80067dc:	bf02      	ittt	eq
 80067de:	2310      	moveq	r3, #16
 80067e0:	1c95      	addeq	r5, r2, #2
 80067e2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80067e4:	220a      	movs	r2, #10
 80067e6:	46aa      	mov	sl, r5
 80067e8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80067ec:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80067f0:	2b09      	cmp	r3, #9
 80067f2:	d91e      	bls.n	8006832 <__ssvfiscanf_r+0xda>
 80067f4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8006a10 <__ssvfiscanf_r+0x2b8>
 80067f8:	2203      	movs	r2, #3
 80067fa:	4658      	mov	r0, fp
 80067fc:	f7f9 fd18 	bl	8000230 <memchr>
 8006800:	b138      	cbz	r0, 8006812 <__ssvfiscanf_r+0xba>
 8006802:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006804:	eba0 000b 	sub.w	r0, r0, fp
 8006808:	2301      	movs	r3, #1
 800680a:	4083      	lsls	r3, r0
 800680c:	4313      	orrs	r3, r2
 800680e:	9341      	str	r3, [sp, #260]	@ 0x104
 8006810:	4655      	mov	r5, sl
 8006812:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006816:	2b78      	cmp	r3, #120	@ 0x78
 8006818:	d806      	bhi.n	8006828 <__ssvfiscanf_r+0xd0>
 800681a:	2b57      	cmp	r3, #87	@ 0x57
 800681c:	d810      	bhi.n	8006840 <__ssvfiscanf_r+0xe8>
 800681e:	2b25      	cmp	r3, #37	@ 0x25
 8006820:	d05d      	beq.n	80068de <__ssvfiscanf_r+0x186>
 8006822:	d857      	bhi.n	80068d4 <__ssvfiscanf_r+0x17c>
 8006824:	2b00      	cmp	r3, #0
 8006826:	d075      	beq.n	8006914 <__ssvfiscanf_r+0x1bc>
 8006828:	2303      	movs	r3, #3
 800682a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800682c:	230a      	movs	r3, #10
 800682e:	9342      	str	r3, [sp, #264]	@ 0x108
 8006830:	e088      	b.n	8006944 <__ssvfiscanf_r+0x1ec>
 8006832:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006834:	fb02 1103 	mla	r1, r2, r3, r1
 8006838:	3930      	subs	r1, #48	@ 0x30
 800683a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800683c:	4655      	mov	r5, sl
 800683e:	e7d2      	b.n	80067e6 <__ssvfiscanf_r+0x8e>
 8006840:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006844:	2a20      	cmp	r2, #32
 8006846:	d8ef      	bhi.n	8006828 <__ssvfiscanf_r+0xd0>
 8006848:	a101      	add	r1, pc, #4	@ (adr r1, 8006850 <__ssvfiscanf_r+0xf8>)
 800684a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800684e:	bf00      	nop
 8006850:	08006923 	.word	0x08006923
 8006854:	08006829 	.word	0x08006829
 8006858:	08006829 	.word	0x08006829
 800685c:	0800697d 	.word	0x0800697d
 8006860:	08006829 	.word	0x08006829
 8006864:	08006829 	.word	0x08006829
 8006868:	08006829 	.word	0x08006829
 800686c:	08006829 	.word	0x08006829
 8006870:	08006829 	.word	0x08006829
 8006874:	08006829 	.word	0x08006829
 8006878:	08006829 	.word	0x08006829
 800687c:	08006993 	.word	0x08006993
 8006880:	08006979 	.word	0x08006979
 8006884:	080068db 	.word	0x080068db
 8006888:	080068db 	.word	0x080068db
 800688c:	080068db 	.word	0x080068db
 8006890:	08006829 	.word	0x08006829
 8006894:	08006935 	.word	0x08006935
 8006898:	08006829 	.word	0x08006829
 800689c:	08006829 	.word	0x08006829
 80068a0:	08006829 	.word	0x08006829
 80068a4:	08006829 	.word	0x08006829
 80068a8:	080069a3 	.word	0x080069a3
 80068ac:	0800693d 	.word	0x0800693d
 80068b0:	0800691b 	.word	0x0800691b
 80068b4:	08006829 	.word	0x08006829
 80068b8:	08006829 	.word	0x08006829
 80068bc:	0800699f 	.word	0x0800699f
 80068c0:	08006829 	.word	0x08006829
 80068c4:	08006979 	.word	0x08006979
 80068c8:	08006829 	.word	0x08006829
 80068cc:	08006829 	.word	0x08006829
 80068d0:	08006923 	.word	0x08006923
 80068d4:	3b45      	subs	r3, #69	@ 0x45
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d8a6      	bhi.n	8006828 <__ssvfiscanf_r+0xd0>
 80068da:	2305      	movs	r3, #5
 80068dc:	e031      	b.n	8006942 <__ssvfiscanf_r+0x1ea>
 80068de:	6863      	ldr	r3, [r4, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	dd0d      	ble.n	8006900 <__ssvfiscanf_r+0x1a8>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	781a      	ldrb	r2, [r3, #0]
 80068e8:	454a      	cmp	r2, r9
 80068ea:	f040 80a6 	bne.w	8006a3a <__ssvfiscanf_r+0x2e2>
 80068ee:	3301      	adds	r3, #1
 80068f0:	6862      	ldr	r2, [r4, #4]
 80068f2:	6023      	str	r3, [r4, #0]
 80068f4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80068f6:	3a01      	subs	r2, #1
 80068f8:	3301      	adds	r3, #1
 80068fa:	6062      	str	r2, [r4, #4]
 80068fc:	9345      	str	r3, [sp, #276]	@ 0x114
 80068fe:	e753      	b.n	80067a8 <__ssvfiscanf_r+0x50>
 8006900:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006902:	4621      	mov	r1, r4
 8006904:	4630      	mov	r0, r6
 8006906:	4798      	blx	r3
 8006908:	2800      	cmp	r0, #0
 800690a:	d0eb      	beq.n	80068e4 <__ssvfiscanf_r+0x18c>
 800690c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800690e:	2800      	cmp	r0, #0
 8006910:	f040 808b 	bne.w	8006a2a <__ssvfiscanf_r+0x2d2>
 8006914:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006918:	e08b      	b.n	8006a32 <__ssvfiscanf_r+0x2da>
 800691a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800691c:	f042 0220 	orr.w	r2, r2, #32
 8006920:	9241      	str	r2, [sp, #260]	@ 0x104
 8006922:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006924:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006928:	9241      	str	r2, [sp, #260]	@ 0x104
 800692a:	2210      	movs	r2, #16
 800692c:	2b6e      	cmp	r3, #110	@ 0x6e
 800692e:	9242      	str	r2, [sp, #264]	@ 0x108
 8006930:	d902      	bls.n	8006938 <__ssvfiscanf_r+0x1e0>
 8006932:	e005      	b.n	8006940 <__ssvfiscanf_r+0x1e8>
 8006934:	2300      	movs	r3, #0
 8006936:	9342      	str	r3, [sp, #264]	@ 0x108
 8006938:	2303      	movs	r3, #3
 800693a:	e002      	b.n	8006942 <__ssvfiscanf_r+0x1ea>
 800693c:	2308      	movs	r3, #8
 800693e:	9342      	str	r3, [sp, #264]	@ 0x108
 8006940:	2304      	movs	r3, #4
 8006942:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006944:	6863      	ldr	r3, [r4, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	dd39      	ble.n	80069be <__ssvfiscanf_r+0x266>
 800694a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800694c:	0659      	lsls	r1, r3, #25
 800694e:	d404      	bmi.n	800695a <__ssvfiscanf_r+0x202>
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	781a      	ldrb	r2, [r3, #0]
 8006954:	5cba      	ldrb	r2, [r7, r2]
 8006956:	0712      	lsls	r2, r2, #28
 8006958:	d438      	bmi.n	80069cc <__ssvfiscanf_r+0x274>
 800695a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800695c:	2b02      	cmp	r3, #2
 800695e:	dc47      	bgt.n	80069f0 <__ssvfiscanf_r+0x298>
 8006960:	466b      	mov	r3, sp
 8006962:	4622      	mov	r2, r4
 8006964:	a941      	add	r1, sp, #260	@ 0x104
 8006966:	4630      	mov	r0, r6
 8006968:	f000 f86c 	bl	8006a44 <_scanf_chars>
 800696c:	2801      	cmp	r0, #1
 800696e:	d064      	beq.n	8006a3a <__ssvfiscanf_r+0x2e2>
 8006970:	2802      	cmp	r0, #2
 8006972:	f47f af19 	bne.w	80067a8 <__ssvfiscanf_r+0x50>
 8006976:	e7c9      	b.n	800690c <__ssvfiscanf_r+0x1b4>
 8006978:	220a      	movs	r2, #10
 800697a:	e7d7      	b.n	800692c <__ssvfiscanf_r+0x1d4>
 800697c:	4629      	mov	r1, r5
 800697e:	4640      	mov	r0, r8
 8006980:	f000 f9ae 	bl	8006ce0 <__sccl>
 8006984:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800698a:	9341      	str	r3, [sp, #260]	@ 0x104
 800698c:	4605      	mov	r5, r0
 800698e:	2301      	movs	r3, #1
 8006990:	e7d7      	b.n	8006942 <__ssvfiscanf_r+0x1ea>
 8006992:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006998:	9341      	str	r3, [sp, #260]	@ 0x104
 800699a:	2300      	movs	r3, #0
 800699c:	e7d1      	b.n	8006942 <__ssvfiscanf_r+0x1ea>
 800699e:	2302      	movs	r3, #2
 80069a0:	e7cf      	b.n	8006942 <__ssvfiscanf_r+0x1ea>
 80069a2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80069a4:	06c3      	lsls	r3, r0, #27
 80069a6:	f53f aeff 	bmi.w	80067a8 <__ssvfiscanf_r+0x50>
 80069aa:	9b00      	ldr	r3, [sp, #0]
 80069ac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80069ae:	1d19      	adds	r1, r3, #4
 80069b0:	9100      	str	r1, [sp, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	07c0      	lsls	r0, r0, #31
 80069b6:	bf4c      	ite	mi
 80069b8:	801a      	strhmi	r2, [r3, #0]
 80069ba:	601a      	strpl	r2, [r3, #0]
 80069bc:	e6f4      	b.n	80067a8 <__ssvfiscanf_r+0x50>
 80069be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80069c0:	4621      	mov	r1, r4
 80069c2:	4630      	mov	r0, r6
 80069c4:	4798      	blx	r3
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d0bf      	beq.n	800694a <__ssvfiscanf_r+0x1f2>
 80069ca:	e79f      	b.n	800690c <__ssvfiscanf_r+0x1b4>
 80069cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80069ce:	3201      	adds	r2, #1
 80069d0:	9245      	str	r2, [sp, #276]	@ 0x114
 80069d2:	6862      	ldr	r2, [r4, #4]
 80069d4:	3a01      	subs	r2, #1
 80069d6:	2a00      	cmp	r2, #0
 80069d8:	6062      	str	r2, [r4, #4]
 80069da:	dd02      	ble.n	80069e2 <__ssvfiscanf_r+0x28a>
 80069dc:	3301      	adds	r3, #1
 80069de:	6023      	str	r3, [r4, #0]
 80069e0:	e7b6      	b.n	8006950 <__ssvfiscanf_r+0x1f8>
 80069e2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80069e4:	4621      	mov	r1, r4
 80069e6:	4630      	mov	r0, r6
 80069e8:	4798      	blx	r3
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d0b0      	beq.n	8006950 <__ssvfiscanf_r+0x1f8>
 80069ee:	e78d      	b.n	800690c <__ssvfiscanf_r+0x1b4>
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	dc0f      	bgt.n	8006a14 <__ssvfiscanf_r+0x2bc>
 80069f4:	466b      	mov	r3, sp
 80069f6:	4622      	mov	r2, r4
 80069f8:	a941      	add	r1, sp, #260	@ 0x104
 80069fa:	4630      	mov	r0, r6
 80069fc:	f000 f87c 	bl	8006af8 <_scanf_i>
 8006a00:	e7b4      	b.n	800696c <__ssvfiscanf_r+0x214>
 8006a02:	bf00      	nop
 8006a04:	080066a5 	.word	0x080066a5
 8006a08:	0800671f 	.word	0x0800671f
 8006a0c:	08007881 	.word	0x08007881
 8006a10:	08007981 	.word	0x08007981
 8006a14:	4b0a      	ldr	r3, [pc, #40]	@ (8006a40 <__ssvfiscanf_r+0x2e8>)
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f43f aec6 	beq.w	80067a8 <__ssvfiscanf_r+0x50>
 8006a1c:	466b      	mov	r3, sp
 8006a1e:	4622      	mov	r2, r4
 8006a20:	a941      	add	r1, sp, #260	@ 0x104
 8006a22:	4630      	mov	r0, r6
 8006a24:	f3af 8000 	nop.w
 8006a28:	e7a0      	b.n	800696c <__ssvfiscanf_r+0x214>
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	065b      	lsls	r3, r3, #25
 8006a2e:	f53f af71 	bmi.w	8006914 <__ssvfiscanf_r+0x1bc>
 8006a32:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8006a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006a3c:	e7f9      	b.n	8006a32 <__ssvfiscanf_r+0x2da>
 8006a3e:	bf00      	nop
 8006a40:	00000000 	.word	0x00000000

08006a44 <_scanf_chars>:
 8006a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a48:	4615      	mov	r5, r2
 8006a4a:	688a      	ldr	r2, [r1, #8]
 8006a4c:	4680      	mov	r8, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	b932      	cbnz	r2, 8006a60 <_scanf_chars+0x1c>
 8006a52:	698a      	ldr	r2, [r1, #24]
 8006a54:	2a00      	cmp	r2, #0
 8006a56:	bf14      	ite	ne
 8006a58:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8006a5c:	2201      	moveq	r2, #1
 8006a5e:	608a      	str	r2, [r1, #8]
 8006a60:	6822      	ldr	r2, [r4, #0]
 8006a62:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006af4 <_scanf_chars+0xb0>
 8006a66:	06d1      	lsls	r1, r2, #27
 8006a68:	bf5f      	itttt	pl
 8006a6a:	681a      	ldrpl	r2, [r3, #0]
 8006a6c:	1d11      	addpl	r1, r2, #4
 8006a6e:	6019      	strpl	r1, [r3, #0]
 8006a70:	6816      	ldrpl	r6, [r2, #0]
 8006a72:	2700      	movs	r7, #0
 8006a74:	69a0      	ldr	r0, [r4, #24]
 8006a76:	b188      	cbz	r0, 8006a9c <_scanf_chars+0x58>
 8006a78:	2801      	cmp	r0, #1
 8006a7a:	d107      	bne.n	8006a8c <_scanf_chars+0x48>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	781a      	ldrb	r2, [r3, #0]
 8006a80:	6963      	ldr	r3, [r4, #20]
 8006a82:	5c9b      	ldrb	r3, [r3, r2]
 8006a84:	b953      	cbnz	r3, 8006a9c <_scanf_chars+0x58>
 8006a86:	2f00      	cmp	r7, #0
 8006a88:	d031      	beq.n	8006aee <_scanf_chars+0xaa>
 8006a8a:	e022      	b.n	8006ad2 <_scanf_chars+0x8e>
 8006a8c:	2802      	cmp	r0, #2
 8006a8e:	d120      	bne.n	8006ad2 <_scanf_chars+0x8e>
 8006a90:	682b      	ldr	r3, [r5, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006a98:	071b      	lsls	r3, r3, #28
 8006a9a:	d41a      	bmi.n	8006ad2 <_scanf_chars+0x8e>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	06da      	lsls	r2, r3, #27
 8006aa0:	bf5e      	ittt	pl
 8006aa2:	682b      	ldrpl	r3, [r5, #0]
 8006aa4:	781b      	ldrbpl	r3, [r3, #0]
 8006aa6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006aaa:	682a      	ldr	r2, [r5, #0]
 8006aac:	686b      	ldr	r3, [r5, #4]
 8006aae:	3201      	adds	r2, #1
 8006ab0:	602a      	str	r2, [r5, #0]
 8006ab2:	68a2      	ldr	r2, [r4, #8]
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	3a01      	subs	r2, #1
 8006ab8:	606b      	str	r3, [r5, #4]
 8006aba:	3701      	adds	r7, #1
 8006abc:	60a2      	str	r2, [r4, #8]
 8006abe:	b142      	cbz	r2, 8006ad2 <_scanf_chars+0x8e>
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	dcd7      	bgt.n	8006a74 <_scanf_chars+0x30>
 8006ac4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006ac8:	4629      	mov	r1, r5
 8006aca:	4640      	mov	r0, r8
 8006acc:	4798      	blx	r3
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d0d0      	beq.n	8006a74 <_scanf_chars+0x30>
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	f013 0310 	ands.w	r3, r3, #16
 8006ad8:	d105      	bne.n	8006ae6 <_scanf_chars+0xa2>
 8006ada:	68e2      	ldr	r2, [r4, #12]
 8006adc:	3201      	adds	r2, #1
 8006ade:	60e2      	str	r2, [r4, #12]
 8006ae0:	69a2      	ldr	r2, [r4, #24]
 8006ae2:	b102      	cbz	r2, 8006ae6 <_scanf_chars+0xa2>
 8006ae4:	7033      	strb	r3, [r6, #0]
 8006ae6:	6923      	ldr	r3, [r4, #16]
 8006ae8:	443b      	add	r3, r7
 8006aea:	6123      	str	r3, [r4, #16]
 8006aec:	2000      	movs	r0, #0
 8006aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006af2:	bf00      	nop
 8006af4:	08007881 	.word	0x08007881

08006af8 <_scanf_i>:
 8006af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afc:	4698      	mov	r8, r3
 8006afe:	4b74      	ldr	r3, [pc, #464]	@ (8006cd0 <_scanf_i+0x1d8>)
 8006b00:	460c      	mov	r4, r1
 8006b02:	4682      	mov	sl, r0
 8006b04:	4616      	mov	r6, r2
 8006b06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	ab03      	add	r3, sp, #12
 8006b0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006b12:	4b70      	ldr	r3, [pc, #448]	@ (8006cd4 <_scanf_i+0x1dc>)
 8006b14:	69a1      	ldr	r1, [r4, #24]
 8006b16:	4a70      	ldr	r2, [pc, #448]	@ (8006cd8 <_scanf_i+0x1e0>)
 8006b18:	2903      	cmp	r1, #3
 8006b1a:	bf08      	it	eq
 8006b1c:	461a      	moveq	r2, r3
 8006b1e:	68a3      	ldr	r3, [r4, #8]
 8006b20:	9201      	str	r2, [sp, #4]
 8006b22:	1e5a      	subs	r2, r3, #1
 8006b24:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006b28:	bf88      	it	hi
 8006b2a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006b2e:	4627      	mov	r7, r4
 8006b30:	bf82      	ittt	hi
 8006b32:	eb03 0905 	addhi.w	r9, r3, r5
 8006b36:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006b3a:	60a3      	strhi	r3, [r4, #8]
 8006b3c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006b40:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8006b44:	bf98      	it	ls
 8006b46:	f04f 0900 	movls.w	r9, #0
 8006b4a:	6023      	str	r3, [r4, #0]
 8006b4c:	463d      	mov	r5, r7
 8006b4e:	f04f 0b00 	mov.w	fp, #0
 8006b52:	6831      	ldr	r1, [r6, #0]
 8006b54:	ab03      	add	r3, sp, #12
 8006b56:	7809      	ldrb	r1, [r1, #0]
 8006b58:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	f7f9 fb67 	bl	8000230 <memchr>
 8006b62:	b328      	cbz	r0, 8006bb0 <_scanf_i+0xb8>
 8006b64:	f1bb 0f01 	cmp.w	fp, #1
 8006b68:	d159      	bne.n	8006c1e <_scanf_i+0x126>
 8006b6a:	6862      	ldr	r2, [r4, #4]
 8006b6c:	b92a      	cbnz	r2, 8006b7a <_scanf_i+0x82>
 8006b6e:	6822      	ldr	r2, [r4, #0]
 8006b70:	2108      	movs	r1, #8
 8006b72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b76:	6061      	str	r1, [r4, #4]
 8006b78:	6022      	str	r2, [r4, #0]
 8006b7a:	6822      	ldr	r2, [r4, #0]
 8006b7c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8006b80:	6022      	str	r2, [r4, #0]
 8006b82:	68a2      	ldr	r2, [r4, #8]
 8006b84:	1e51      	subs	r1, r2, #1
 8006b86:	60a1      	str	r1, [r4, #8]
 8006b88:	b192      	cbz	r2, 8006bb0 <_scanf_i+0xb8>
 8006b8a:	6832      	ldr	r2, [r6, #0]
 8006b8c:	1c51      	adds	r1, r2, #1
 8006b8e:	6031      	str	r1, [r6, #0]
 8006b90:	7812      	ldrb	r2, [r2, #0]
 8006b92:	f805 2b01 	strb.w	r2, [r5], #1
 8006b96:	6872      	ldr	r2, [r6, #4]
 8006b98:	3a01      	subs	r2, #1
 8006b9a:	2a00      	cmp	r2, #0
 8006b9c:	6072      	str	r2, [r6, #4]
 8006b9e:	dc07      	bgt.n	8006bb0 <_scanf_i+0xb8>
 8006ba0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006ba4:	4631      	mov	r1, r6
 8006ba6:	4650      	mov	r0, sl
 8006ba8:	4790      	blx	r2
 8006baa:	2800      	cmp	r0, #0
 8006bac:	f040 8085 	bne.w	8006cba <_scanf_i+0x1c2>
 8006bb0:	f10b 0b01 	add.w	fp, fp, #1
 8006bb4:	f1bb 0f03 	cmp.w	fp, #3
 8006bb8:	d1cb      	bne.n	8006b52 <_scanf_i+0x5a>
 8006bba:	6863      	ldr	r3, [r4, #4]
 8006bbc:	b90b      	cbnz	r3, 8006bc2 <_scanf_i+0xca>
 8006bbe:	230a      	movs	r3, #10
 8006bc0:	6063      	str	r3, [r4, #4]
 8006bc2:	6863      	ldr	r3, [r4, #4]
 8006bc4:	4945      	ldr	r1, [pc, #276]	@ (8006cdc <_scanf_i+0x1e4>)
 8006bc6:	6960      	ldr	r0, [r4, #20]
 8006bc8:	1ac9      	subs	r1, r1, r3
 8006bca:	f000 f889 	bl	8006ce0 <__sccl>
 8006bce:	f04f 0b00 	mov.w	fp, #0
 8006bd2:	68a3      	ldr	r3, [r4, #8]
 8006bd4:	6822      	ldr	r2, [r4, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d03d      	beq.n	8006c56 <_scanf_i+0x15e>
 8006bda:	6831      	ldr	r1, [r6, #0]
 8006bdc:	6960      	ldr	r0, [r4, #20]
 8006bde:	f891 c000 	ldrb.w	ip, [r1]
 8006be2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d035      	beq.n	8006c56 <_scanf_i+0x15e>
 8006bea:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8006bee:	d124      	bne.n	8006c3a <_scanf_i+0x142>
 8006bf0:	0510      	lsls	r0, r2, #20
 8006bf2:	d522      	bpl.n	8006c3a <_scanf_i+0x142>
 8006bf4:	f10b 0b01 	add.w	fp, fp, #1
 8006bf8:	f1b9 0f00 	cmp.w	r9, #0
 8006bfc:	d003      	beq.n	8006c06 <_scanf_i+0x10e>
 8006bfe:	3301      	adds	r3, #1
 8006c00:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8006c04:	60a3      	str	r3, [r4, #8]
 8006c06:	6873      	ldr	r3, [r6, #4]
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	6073      	str	r3, [r6, #4]
 8006c0e:	dd1b      	ble.n	8006c48 <_scanf_i+0x150>
 8006c10:	6833      	ldr	r3, [r6, #0]
 8006c12:	3301      	adds	r3, #1
 8006c14:	6033      	str	r3, [r6, #0]
 8006c16:	68a3      	ldr	r3, [r4, #8]
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	60a3      	str	r3, [r4, #8]
 8006c1c:	e7d9      	b.n	8006bd2 <_scanf_i+0xda>
 8006c1e:	f1bb 0f02 	cmp.w	fp, #2
 8006c22:	d1ae      	bne.n	8006b82 <_scanf_i+0x8a>
 8006c24:	6822      	ldr	r2, [r4, #0]
 8006c26:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8006c2a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006c2e:	d1c4      	bne.n	8006bba <_scanf_i+0xc2>
 8006c30:	2110      	movs	r1, #16
 8006c32:	6061      	str	r1, [r4, #4]
 8006c34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c38:	e7a2      	b.n	8006b80 <_scanf_i+0x88>
 8006c3a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8006c3e:	6022      	str	r2, [r4, #0]
 8006c40:	780b      	ldrb	r3, [r1, #0]
 8006c42:	f805 3b01 	strb.w	r3, [r5], #1
 8006c46:	e7de      	b.n	8006c06 <_scanf_i+0x10e>
 8006c48:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006c4c:	4631      	mov	r1, r6
 8006c4e:	4650      	mov	r0, sl
 8006c50:	4798      	blx	r3
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d0df      	beq.n	8006c16 <_scanf_i+0x11e>
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	05d9      	lsls	r1, r3, #23
 8006c5a:	d50d      	bpl.n	8006c78 <_scanf_i+0x180>
 8006c5c:	42bd      	cmp	r5, r7
 8006c5e:	d909      	bls.n	8006c74 <_scanf_i+0x17c>
 8006c60:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006c64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c68:	4632      	mov	r2, r6
 8006c6a:	4650      	mov	r0, sl
 8006c6c:	4798      	blx	r3
 8006c6e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8006c72:	464d      	mov	r5, r9
 8006c74:	42bd      	cmp	r5, r7
 8006c76:	d028      	beq.n	8006cca <_scanf_i+0x1d2>
 8006c78:	6822      	ldr	r2, [r4, #0]
 8006c7a:	f012 0210 	ands.w	r2, r2, #16
 8006c7e:	d113      	bne.n	8006ca8 <_scanf_i+0x1b0>
 8006c80:	702a      	strb	r2, [r5, #0]
 8006c82:	6863      	ldr	r3, [r4, #4]
 8006c84:	9e01      	ldr	r6, [sp, #4]
 8006c86:	4639      	mov	r1, r7
 8006c88:	4650      	mov	r0, sl
 8006c8a:	47b0      	blx	r6
 8006c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c90:	6821      	ldr	r1, [r4, #0]
 8006c92:	1d1a      	adds	r2, r3, #4
 8006c94:	f8c8 2000 	str.w	r2, [r8]
 8006c98:	f011 0f20 	tst.w	r1, #32
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	d00f      	beq.n	8006cc0 <_scanf_i+0x1c8>
 8006ca0:	6018      	str	r0, [r3, #0]
 8006ca2:	68e3      	ldr	r3, [r4, #12]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	60e3      	str	r3, [r4, #12]
 8006ca8:	6923      	ldr	r3, [r4, #16]
 8006caa:	1bed      	subs	r5, r5, r7
 8006cac:	445d      	add	r5, fp
 8006cae:	442b      	add	r3, r5
 8006cb0:	6123      	str	r3, [r4, #16]
 8006cb2:	2000      	movs	r0, #0
 8006cb4:	b007      	add	sp, #28
 8006cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cba:	f04f 0b00 	mov.w	fp, #0
 8006cbe:	e7ca      	b.n	8006c56 <_scanf_i+0x15e>
 8006cc0:	07ca      	lsls	r2, r1, #31
 8006cc2:	bf4c      	ite	mi
 8006cc4:	8018      	strhmi	r0, [r3, #0]
 8006cc6:	6018      	strpl	r0, [r3, #0]
 8006cc8:	e7eb      	b.n	8006ca2 <_scanf_i+0x1aa>
 8006cca:	2001      	movs	r0, #1
 8006ccc:	e7f2      	b.n	8006cb4 <_scanf_i+0x1bc>
 8006cce:	bf00      	nop
 8006cd0:	08006f64 	.word	0x08006f64
 8006cd4:	080063bd 	.word	0x080063bd
 8006cd8:	08006f21 	.word	0x08006f21
 8006cdc:	08007995 	.word	0x08007995

08006ce0 <__sccl>:
 8006ce0:	b570      	push	{r4, r5, r6, lr}
 8006ce2:	780b      	ldrb	r3, [r1, #0]
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	2b5e      	cmp	r3, #94	@ 0x5e
 8006ce8:	bf0b      	itete	eq
 8006cea:	784b      	ldrbeq	r3, [r1, #1]
 8006cec:	1c4a      	addne	r2, r1, #1
 8006cee:	1c8a      	addeq	r2, r1, #2
 8006cf0:	2100      	movne	r1, #0
 8006cf2:	bf08      	it	eq
 8006cf4:	2101      	moveq	r1, #1
 8006cf6:	3801      	subs	r0, #1
 8006cf8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8006cfc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006d00:	42a8      	cmp	r0, r5
 8006d02:	d1fb      	bne.n	8006cfc <__sccl+0x1c>
 8006d04:	b90b      	cbnz	r3, 8006d0a <__sccl+0x2a>
 8006d06:	1e50      	subs	r0, r2, #1
 8006d08:	bd70      	pop	{r4, r5, r6, pc}
 8006d0a:	f081 0101 	eor.w	r1, r1, #1
 8006d0e:	54e1      	strb	r1, [r4, r3]
 8006d10:	4610      	mov	r0, r2
 8006d12:	4602      	mov	r2, r0
 8006d14:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006d18:	2d2d      	cmp	r5, #45	@ 0x2d
 8006d1a:	d005      	beq.n	8006d28 <__sccl+0x48>
 8006d1c:	2d5d      	cmp	r5, #93	@ 0x5d
 8006d1e:	d016      	beq.n	8006d4e <__sccl+0x6e>
 8006d20:	2d00      	cmp	r5, #0
 8006d22:	d0f1      	beq.n	8006d08 <__sccl+0x28>
 8006d24:	462b      	mov	r3, r5
 8006d26:	e7f2      	b.n	8006d0e <__sccl+0x2e>
 8006d28:	7846      	ldrb	r6, [r0, #1]
 8006d2a:	2e5d      	cmp	r6, #93	@ 0x5d
 8006d2c:	d0fa      	beq.n	8006d24 <__sccl+0x44>
 8006d2e:	42b3      	cmp	r3, r6
 8006d30:	dcf8      	bgt.n	8006d24 <__sccl+0x44>
 8006d32:	3002      	adds	r0, #2
 8006d34:	461a      	mov	r2, r3
 8006d36:	3201      	adds	r2, #1
 8006d38:	4296      	cmp	r6, r2
 8006d3a:	54a1      	strb	r1, [r4, r2]
 8006d3c:	dcfb      	bgt.n	8006d36 <__sccl+0x56>
 8006d3e:	1af2      	subs	r2, r6, r3
 8006d40:	3a01      	subs	r2, #1
 8006d42:	1c5d      	adds	r5, r3, #1
 8006d44:	42b3      	cmp	r3, r6
 8006d46:	bfa8      	it	ge
 8006d48:	2200      	movge	r2, #0
 8006d4a:	18ab      	adds	r3, r5, r2
 8006d4c:	e7e1      	b.n	8006d12 <__sccl+0x32>
 8006d4e:	4610      	mov	r0, r2
 8006d50:	e7da      	b.n	8006d08 <__sccl+0x28>

08006d52 <__submore>:
 8006d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d56:	460c      	mov	r4, r1
 8006d58:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006d5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d5e:	4299      	cmp	r1, r3
 8006d60:	d11d      	bne.n	8006d9e <__submore+0x4c>
 8006d62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d66:	f7ff fc11 	bl	800658c <_malloc_r>
 8006d6a:	b918      	cbnz	r0, 8006d74 <__submore+0x22>
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d78:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006d7a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8006d7e:	6360      	str	r0, [r4, #52]	@ 0x34
 8006d80:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8006d84:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006d88:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8006d8c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006d90:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8006d94:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006d98:	6020      	str	r0, [r4, #0]
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	e7e8      	b.n	8006d70 <__submore+0x1e>
 8006d9e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8006da0:	0077      	lsls	r7, r6, #1
 8006da2:	463a      	mov	r2, r7
 8006da4:	f000 f820 	bl	8006de8 <_realloc_r>
 8006da8:	4605      	mov	r5, r0
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d0de      	beq.n	8006d6c <__submore+0x1a>
 8006dae:	eb00 0806 	add.w	r8, r0, r6
 8006db2:	4601      	mov	r1, r0
 8006db4:	4632      	mov	r2, r6
 8006db6:	4640      	mov	r0, r8
 8006db8:	f7ff fb6e 	bl	8006498 <memcpy>
 8006dbc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8006dc0:	f8c4 8000 	str.w	r8, [r4]
 8006dc4:	e7e9      	b.n	8006d9a <__submore+0x48>
	...

08006dc8 <_sbrk_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4d06      	ldr	r5, [pc, #24]	@ (8006de4 <_sbrk_r+0x1c>)
 8006dcc:	2300      	movs	r3, #0
 8006dce:	4604      	mov	r4, r0
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	602b      	str	r3, [r5, #0]
 8006dd4:	f7fa fdf0 	bl	80019b8 <_sbrk>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d102      	bne.n	8006de2 <_sbrk_r+0x1a>
 8006ddc:	682b      	ldr	r3, [r5, #0]
 8006dde:	b103      	cbz	r3, 8006de2 <_sbrk_r+0x1a>
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	200040e0 	.word	0x200040e0

08006de8 <_realloc_r>:
 8006de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dec:	4607      	mov	r7, r0
 8006dee:	4614      	mov	r4, r2
 8006df0:	460d      	mov	r5, r1
 8006df2:	b921      	cbnz	r1, 8006dfe <_realloc_r+0x16>
 8006df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006df8:	4611      	mov	r1, r2
 8006dfa:	f7ff bbc7 	b.w	800658c <_malloc_r>
 8006dfe:	b92a      	cbnz	r2, 8006e0c <_realloc_r+0x24>
 8006e00:	f7ff fb58 	bl	80064b4 <_free_r>
 8006e04:	4625      	mov	r5, r4
 8006e06:	4628      	mov	r0, r5
 8006e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e0c:	f000 f88a 	bl	8006f24 <_malloc_usable_size_r>
 8006e10:	4284      	cmp	r4, r0
 8006e12:	4606      	mov	r6, r0
 8006e14:	d802      	bhi.n	8006e1c <_realloc_r+0x34>
 8006e16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e1a:	d8f4      	bhi.n	8006e06 <_realloc_r+0x1e>
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	4638      	mov	r0, r7
 8006e20:	f7ff fbb4 	bl	800658c <_malloc_r>
 8006e24:	4680      	mov	r8, r0
 8006e26:	b908      	cbnz	r0, 8006e2c <_realloc_r+0x44>
 8006e28:	4645      	mov	r5, r8
 8006e2a:	e7ec      	b.n	8006e06 <_realloc_r+0x1e>
 8006e2c:	42b4      	cmp	r4, r6
 8006e2e:	4622      	mov	r2, r4
 8006e30:	4629      	mov	r1, r5
 8006e32:	bf28      	it	cs
 8006e34:	4632      	movcs	r2, r6
 8006e36:	f7ff fb2f 	bl	8006498 <memcpy>
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	f7ff fb39 	bl	80064b4 <_free_r>
 8006e42:	e7f1      	b.n	8006e28 <_realloc_r+0x40>

08006e44 <_strtoul_l.isra.0>:
 8006e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e48:	4e34      	ldr	r6, [pc, #208]	@ (8006f1c <_strtoul_l.isra.0+0xd8>)
 8006e4a:	4686      	mov	lr, r0
 8006e4c:	460d      	mov	r5, r1
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e54:	5d37      	ldrb	r7, [r6, r4]
 8006e56:	f017 0708 	ands.w	r7, r7, #8
 8006e5a:	d1f8      	bne.n	8006e4e <_strtoul_l.isra.0+0xa>
 8006e5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8006e5e:	d110      	bne.n	8006e82 <_strtoul_l.isra.0+0x3e>
 8006e60:	782c      	ldrb	r4, [r5, #0]
 8006e62:	2701      	movs	r7, #1
 8006e64:	1c85      	adds	r5, r0, #2
 8006e66:	f033 0010 	bics.w	r0, r3, #16
 8006e6a:	d115      	bne.n	8006e98 <_strtoul_l.isra.0+0x54>
 8006e6c:	2c30      	cmp	r4, #48	@ 0x30
 8006e6e:	d10d      	bne.n	8006e8c <_strtoul_l.isra.0+0x48>
 8006e70:	7828      	ldrb	r0, [r5, #0]
 8006e72:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006e76:	2858      	cmp	r0, #88	@ 0x58
 8006e78:	d108      	bne.n	8006e8c <_strtoul_l.isra.0+0x48>
 8006e7a:	786c      	ldrb	r4, [r5, #1]
 8006e7c:	3502      	adds	r5, #2
 8006e7e:	2310      	movs	r3, #16
 8006e80:	e00a      	b.n	8006e98 <_strtoul_l.isra.0+0x54>
 8006e82:	2c2b      	cmp	r4, #43	@ 0x2b
 8006e84:	bf04      	itt	eq
 8006e86:	782c      	ldrbeq	r4, [r5, #0]
 8006e88:	1c85      	addeq	r5, r0, #2
 8006e8a:	e7ec      	b.n	8006e66 <_strtoul_l.isra.0+0x22>
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1f6      	bne.n	8006e7e <_strtoul_l.isra.0+0x3a>
 8006e90:	2c30      	cmp	r4, #48	@ 0x30
 8006e92:	bf14      	ite	ne
 8006e94:	230a      	movne	r3, #10
 8006e96:	2308      	moveq	r3, #8
 8006e98:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8006e9c:	2600      	movs	r6, #0
 8006e9e:	fbb8 f8f3 	udiv	r8, r8, r3
 8006ea2:	fb03 f908 	mul.w	r9, r3, r8
 8006ea6:	ea6f 0909 	mvn.w	r9, r9
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8006eb0:	f1bc 0f09 	cmp.w	ip, #9
 8006eb4:	d810      	bhi.n	8006ed8 <_strtoul_l.isra.0+0x94>
 8006eb6:	4664      	mov	r4, ip
 8006eb8:	42a3      	cmp	r3, r4
 8006eba:	dd1e      	ble.n	8006efa <_strtoul_l.isra.0+0xb6>
 8006ebc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8006ec0:	d007      	beq.n	8006ed2 <_strtoul_l.isra.0+0x8e>
 8006ec2:	4580      	cmp	r8, r0
 8006ec4:	d316      	bcc.n	8006ef4 <_strtoul_l.isra.0+0xb0>
 8006ec6:	d101      	bne.n	8006ecc <_strtoul_l.isra.0+0x88>
 8006ec8:	45a1      	cmp	r9, r4
 8006eca:	db13      	blt.n	8006ef4 <_strtoul_l.isra.0+0xb0>
 8006ecc:	fb00 4003 	mla	r0, r0, r3, r4
 8006ed0:	2601      	movs	r6, #1
 8006ed2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ed6:	e7e9      	b.n	8006eac <_strtoul_l.isra.0+0x68>
 8006ed8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8006edc:	f1bc 0f19 	cmp.w	ip, #25
 8006ee0:	d801      	bhi.n	8006ee6 <_strtoul_l.isra.0+0xa2>
 8006ee2:	3c37      	subs	r4, #55	@ 0x37
 8006ee4:	e7e8      	b.n	8006eb8 <_strtoul_l.isra.0+0x74>
 8006ee6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8006eea:	f1bc 0f19 	cmp.w	ip, #25
 8006eee:	d804      	bhi.n	8006efa <_strtoul_l.isra.0+0xb6>
 8006ef0:	3c57      	subs	r4, #87	@ 0x57
 8006ef2:	e7e1      	b.n	8006eb8 <_strtoul_l.isra.0+0x74>
 8006ef4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8006ef8:	e7eb      	b.n	8006ed2 <_strtoul_l.isra.0+0x8e>
 8006efa:	1c73      	adds	r3, r6, #1
 8006efc:	d106      	bne.n	8006f0c <_strtoul_l.isra.0+0xc8>
 8006efe:	2322      	movs	r3, #34	@ 0x22
 8006f00:	f8ce 3000 	str.w	r3, [lr]
 8006f04:	4630      	mov	r0, r6
 8006f06:	b932      	cbnz	r2, 8006f16 <_strtoul_l.isra.0+0xd2>
 8006f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f0c:	b107      	cbz	r7, 8006f10 <_strtoul_l.isra.0+0xcc>
 8006f0e:	4240      	negs	r0, r0
 8006f10:	2a00      	cmp	r2, #0
 8006f12:	d0f9      	beq.n	8006f08 <_strtoul_l.isra.0+0xc4>
 8006f14:	b106      	cbz	r6, 8006f18 <_strtoul_l.isra.0+0xd4>
 8006f16:	1e69      	subs	r1, r5, #1
 8006f18:	6011      	str	r1, [r2, #0]
 8006f1a:	e7f5      	b.n	8006f08 <_strtoul_l.isra.0+0xc4>
 8006f1c:	08007881 	.word	0x08007881

08006f20 <_strtoul_r>:
 8006f20:	f7ff bf90 	b.w	8006e44 <_strtoul_l.isra.0>

08006f24 <_malloc_usable_size_r>:
 8006f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f28:	1f18      	subs	r0, r3, #4
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	bfbc      	itt	lt
 8006f2e:	580b      	ldrlt	r3, [r1, r0]
 8006f30:	18c0      	addlt	r0, r0, r3
 8006f32:	4770      	bx	lr

08006f34 <_init>:
 8006f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f36:	bf00      	nop
 8006f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f3a:	bc08      	pop	{r3}
 8006f3c:	469e      	mov	lr, r3
 8006f3e:	4770      	bx	lr

08006f40 <_fini>:
 8006f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f42:	bf00      	nop
 8006f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f46:	bc08      	pop	{r3}
 8006f48:	469e      	mov	lr, r3
 8006f4a:	4770      	bx	lr
