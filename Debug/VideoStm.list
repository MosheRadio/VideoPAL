
VideoStm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .screen       00002760  20000000  20000000  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000737c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b24  0800755c  0800755c  0000855c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08008080  08008080  0005cc00  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  08008080  08008080  00009080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08008088  08008088  0005cc00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08008088  08008088  00009088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0800808c  0800808c  0000908c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000bb0  20002760  08008090  00009760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000414  20003310  08008c40  0000a310  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003724  08008c40  0000a724  2**0
                  ALLOC
 12 .screenBB     0004ec00  22000000  22000000  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 00000030  00000000  00000000  0005cc00  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000efd5  00000000  00000000  0005cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002871  00000000  00000000  0006bc05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001008  00000000  00000000  0006e478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b04  00000000  00000000  0006f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000117a3  00000000  00000000  00096f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9daa  00000000  00000000  000a8727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a24d1  2**0
                  CONTENTS, READONLY
 21 .debug_rnglists 00000c31  00000000  00000000  001a2514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004ae4  00000000  00000000  001a3148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000061  00000000  00000000  001a7c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20003310 	.word	0x20003310
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007544 	.word	0x08007544

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20003314 	.word	0x20003314
 800021c:	08007544 	.word	0x08007544

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <gdiBitBlt>:
		h			Bitmap height, in pixels
		bm			Pointer to the bitmap start position

	return			none
*/
void gdiBitBlt(PGDI_RECT prc, int16_t x, int16_t y, int16_t w, int16_t h, pBMP bm) {
 80002c0:	b490      	push	{r4, r7}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	4608      	mov	r0, r1
 80002ca:	4611      	mov	r1, r2
 80002cc:	461a      	mov	r2, r3
 80002ce:	4603      	mov	r3, r0
 80002d0:	817b      	strh	r3, [r7, #10]
 80002d2:	460b      	mov	r3, r1
 80002d4:	813b      	strh	r3, [r7, #8]
 80002d6:	4613      	mov	r3, r2
 80002d8:	80fb      	strh	r3, [r7, #6]
int16_t todo;
uint16_t alignment;

//	Calculate clipping region

	if (prc != NULL) {
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d00f      	beq.n	8000300 <gdiBitBlt+0x40>
		x += prc->x;
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	897b      	ldrh	r3, [r7, #10]
 80002ea:	4413      	add	r3, r2
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	817b      	strh	r3, [r7, #10]
		y += prc->y;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80002f6:	b29a      	uxth	r2, r3
 80002f8:	893b      	ldrh	r3, [r7, #8]
 80002fa:	4413      	add	r3, r2
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	813b      	strh	r3, [r7, #8]
//??		w = min(prc->w, VID_PIXELS_X-x);	// clip X
//??		h = min(prc->w, VID_PIXELS_Y-y);	// clip Y
	}
	alignment = x & 0b0000000000001111;
 8000300:	897b      	ldrh	r3, [r7, #10]
 8000302:	f003 030f 	and.w	r3, r3, #15
 8000306:	82bb      	strh	r3, [r7, #20]
	for(;--h >= 0; y++) {
 8000308:	e2cc      	b.n	80008a4 <gdiBitBlt+0x5e4>
		for (todo = w; todo>0;) {
 800030a:	88fb      	ldrh	r3, [r7, #6]
 800030c:	82fb      	strh	r3, [r7, #22]
 800030e:	e2be      	b.n	800088e <gdiBitBlt+0x5ce>
			if (todo >= 9) {
 8000310:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000314:	2b08      	cmp	r3, #8
 8000316:	dd2d      	ble.n	8000374 <gdiBitBlt+0xb4>
				bitmask.word = (todo >= 16) ?
									0xFFFF		<< (16-alignment):
 8000318:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800031c:	2b0f      	cmp	r3, #15
 800031e:	dd08      	ble.n	8000332 <gdiBitBlt+0x72>
 8000320:	8abb      	ldrh	r3, [r7, #20]
 8000322:	f1c3 0310 	rsb	r3, r3, #16
 8000326:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800032a:	fa02 f303 	lsl.w	r3, r2, r3
 800032e:	461a      	mov	r2, r3
 8000330:	e00c      	b.n	800034c <gdiBitBlt+0x8c>
						masktable[todo-1]		<< (16-alignment);
 8000332:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000336:	3b01      	subs	r3, #1
 8000338:	4a79      	ldr	r2, [pc, #484]	@ (8000520 <gdiBitBlt+0x260>)
 800033a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800033e:	461a      	mov	r2, r3
 8000340:	8abb      	ldrh	r3, [r7, #20]
 8000342:	f1c3 0310 	rsb	r3, r3, #16
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
									0xFFFF		<< (16-alignment):
 800034a:	461a      	mov	r2, r3
				bitmask.word = (todo >= 16) ?
 800034c:	4b75      	ldr	r3, [pc, #468]	@ (8000524 <gdiBitBlt+0x264>)
 800034e:	601a      	str	r2, [r3, #0]
				pattern.word = *bm.halfwords++	<< (16-alignment);
 8000350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000352:	1c9a      	adds	r2, r3, #2
 8000354:	627a      	str	r2, [r7, #36]	@ 0x24
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	461a      	mov	r2, r3
 800035a:	8abb      	ldrh	r3, [r7, #20]
 800035c:	f1c3 0310 	rsb	r3, r3, #16
 8000360:	fa02 f303 	lsl.w	r3, r2, r3
 8000364:	461a      	mov	r2, r3
 8000366:	4b70      	ldr	r3, [pc, #448]	@ (8000528 <gdiBitBlt+0x268>)
 8000368:	601a      	str	r2, [r3, #0]
				todo -= 16;
 800036a:	8afb      	ldrh	r3, [r7, #22]
 800036c:	3b10      	subs	r3, #16
 800036e:	b29b      	uxth	r3, r3
 8000370:	82fb      	strh	r3, [r7, #22]
 8000372:	e01f      	b.n	80003b4 <gdiBitBlt+0xf4>
			} else {
				bitmask.word = masktable[todo-1] << (16-alignment);
 8000374:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000378:	3b01      	subs	r3, #1
 800037a:	4a69      	ldr	r2, [pc, #420]	@ (8000520 <gdiBitBlt+0x260>)
 800037c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000380:	461a      	mov	r2, r3
 8000382:	8abb      	ldrh	r3, [r7, #20]
 8000384:	f1c3 0310 	rsb	r3, r3, #16
 8000388:	fa02 f303 	lsl.w	r3, r2, r3
 800038c:	461a      	mov	r2, r3
 800038e:	4b65      	ldr	r3, [pc, #404]	@ (8000524 <gdiBitBlt+0x264>)
 8000390:	601a      	str	r2, [r3, #0]
				pattern.word = *bm.bytesinROM++  << (24-alignment);
 8000392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000394:	1c5a      	adds	r2, r3, #1
 8000396:	627a      	str	r2, [r7, #36]	@ 0x24
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	461a      	mov	r2, r3
 800039c:	8abb      	ldrh	r3, [r7, #20]
 800039e:	f1c3 0318 	rsb	r3, r3, #24
 80003a2:	fa02 f303 	lsl.w	r3, r2, r3
 80003a6:	461a      	mov	r2, r3
 80003a8:	4b5f      	ldr	r3, [pc, #380]	@ (8000528 <gdiBitBlt+0x268>)
 80003aa:	601a      	str	r2, [r3, #0]
				todo -= 8;
 80003ac:	8afb      	ldrh	r3, [r7, #22]
 80003ae:	3b08      	subs	r3, #8
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	82fb      	strh	r3, [r7, #22]
			}
			switch(rop) {
 80003b4:	4b5d      	ldr	r3, [pc, #372]	@ (800052c <gdiBitBlt+0x26c>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b04      	cmp	r3, #4
 80003ba:	f200 8268 	bhi.w	800088e <gdiBitBlt+0x5ce>
 80003be:	a201      	add	r2, pc, #4	@ (adr r2, 80003c4 <gdiBitBlt+0x104>)
 80003c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c4:	080003d9 	.word	0x080003d9
 80003c8:	08000535 	.word	0x08000535
 80003cc:	080007bd 	.word	0x080007bd
 80003d0:	0800067d 	.word	0x0800067d
 80003d4:	0800071d 	.word	0x0800071d
				case GDI_ROP_COPY:
					screen[y][x>>4] &= ~bitmask.halfword[1];
 80003d8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80003dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80003e0:	111b      	asrs	r3, r3, #4
 80003e2:	b21b      	sxth	r3, r3
 80003e4:	4618      	mov	r0, r3
 80003e6:	4952      	ldr	r1, [pc, #328]	@ (8000530 <gdiBitBlt+0x270>)
 80003e8:	4613      	mov	r3, r2
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	4413      	add	r3, r2
 80003ee:	00da      	lsls	r2, r3, #3
 80003f0:	1ad2      	subs	r2, r2, r3
 80003f2:	1813      	adds	r3, r2, r0
 80003f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80003f8:	b21a      	sxth	r2, r3
 80003fa:	4b4a      	ldr	r3, [pc, #296]	@ (8000524 <gdiBitBlt+0x264>)
 80003fc:	885b      	ldrh	r3, [r3, #2]
 80003fe:	b21b      	sxth	r3, r3
 8000400:	43db      	mvns	r3, r3
 8000402:	b21b      	sxth	r3, r3
 8000404:	4013      	ands	r3, r2
 8000406:	b219      	sxth	r1, r3
 8000408:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800040c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000410:	111b      	asrs	r3, r3, #4
 8000412:	b21b      	sxth	r3, r3
 8000414:	461c      	mov	r4, r3
 8000416:	b288      	uxth	r0, r1
 8000418:	4945      	ldr	r1, [pc, #276]	@ (8000530 <gdiBitBlt+0x270>)
 800041a:	4613      	mov	r3, r2
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	4413      	add	r3, r2
 8000420:	00da      	lsls	r2, r3, #3
 8000422:	1ad2      	subs	r2, r2, r3
 8000424:	1913      	adds	r3, r2, r4
 8000426:	4602      	mov	r2, r0
 8000428:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					screen[y][x>>4] |=  pattern.halfword[1];
 800042c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000430:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000434:	111b      	asrs	r3, r3, #4
 8000436:	b21b      	sxth	r3, r3
 8000438:	4618      	mov	r0, r3
 800043a:	493d      	ldr	r1, [pc, #244]	@ (8000530 <gdiBitBlt+0x270>)
 800043c:	4613      	mov	r3, r2
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	4413      	add	r3, r2
 8000442:	00da      	lsls	r2, r3, #3
 8000444:	1ad2      	subs	r2, r2, r3
 8000446:	1813      	adds	r3, r2, r0
 8000448:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800044c:	4b36      	ldr	r3, [pc, #216]	@ (8000528 <gdiBitBlt+0x268>)
 800044e:	885b      	ldrh	r3, [r3, #2]
 8000450:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000454:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000458:	1100      	asrs	r0, r0, #4
 800045a:	b200      	sxth	r0, r0
 800045c:	4604      	mov	r4, r0
 800045e:	430b      	orrs	r3, r1
 8000460:	b298      	uxth	r0, r3
 8000462:	4933      	ldr	r1, [pc, #204]	@ (8000530 <gdiBitBlt+0x270>)
 8000464:	4613      	mov	r3, r2
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	4413      	add	r3, r2
 800046a:	00da      	lsls	r2, r3, #3
 800046c:	1ad2      	subs	r2, r2, r3
 800046e:	1913      	adds	r3, r2, r4
 8000470:	4602      	mov	r2, r0
 8000472:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (bitmask.halfword[0] != 0) {
 8000476:	4b2b      	ldr	r3, [pc, #172]	@ (8000524 <gdiBitBlt+0x264>)
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	f000 81fe 	beq.w	800087c <gdiBitBlt+0x5bc>
						screen[y][(x>>4)+1] &= ~bitmask.halfword[0];
 8000480:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000484:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000488:	111b      	asrs	r3, r3, #4
 800048a:	b21b      	sxth	r3, r3
 800048c:	1c59      	adds	r1, r3, #1
 800048e:	4828      	ldr	r0, [pc, #160]	@ (8000530 <gdiBitBlt+0x270>)
 8000490:	4613      	mov	r3, r2
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	4413      	add	r3, r2
 8000496:	00da      	lsls	r2, r3, #3
 8000498:	1ad2      	subs	r2, r2, r3
 800049a:	1853      	adds	r3, r2, r1
 800049c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80004a0:	b21a      	sxth	r2, r3
 80004a2:	4b20      	ldr	r3, [pc, #128]	@ (8000524 <gdiBitBlt+0x264>)
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	b21b      	sxth	r3, r3
 80004a8:	43db      	mvns	r3, r3
 80004aa:	b21b      	sxth	r3, r3
 80004ac:	4013      	ands	r3, r2
 80004ae:	b218      	sxth	r0, r3
 80004b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004b8:	111b      	asrs	r3, r3, #4
 80004ba:	b21b      	sxth	r3, r3
 80004bc:	1c59      	adds	r1, r3, #1
 80004be:	b284      	uxth	r4, r0
 80004c0:	481b      	ldr	r0, [pc, #108]	@ (8000530 <gdiBitBlt+0x270>)
 80004c2:	4613      	mov	r3, r2
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	4413      	add	r3, r2
 80004c8:	00da      	lsls	r2, r3, #3
 80004ca:	1ad2      	subs	r2, r2, r3
 80004cc:	1853      	adds	r3, r2, r1
 80004ce:	4622      	mov	r2, r4
 80004d0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						screen[y][(x>>4)+1] |=  pattern.halfword[0];
 80004d4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004dc:	111b      	asrs	r3, r3, #4
 80004de:	b21b      	sxth	r3, r3
 80004e0:	1c59      	adds	r1, r3, #1
 80004e2:	4813      	ldr	r0, [pc, #76]	@ (8000530 <gdiBitBlt+0x270>)
 80004e4:	4613      	mov	r3, r2
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	4413      	add	r3, r2
 80004ea:	00da      	lsls	r2, r3, #3
 80004ec:	1ad2      	subs	r2, r2, r3
 80004ee:	1853      	adds	r3, r2, r1
 80004f0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80004f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <gdiBitBlt+0x268>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004fc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000500:	1109      	asrs	r1, r1, #4
 8000502:	b209      	sxth	r1, r1
 8000504:	3101      	adds	r1, #1
 8000506:	4303      	orrs	r3, r0
 8000508:	b29c      	uxth	r4, r3
 800050a:	4809      	ldr	r0, [pc, #36]	@ (8000530 <gdiBitBlt+0x270>)
 800050c:	4613      	mov	r3, r2
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	4413      	add	r3, r2
 8000512:	00da      	lsls	r2, r3, #3
 8000514:	1ad2      	subs	r2, r2, r3
 8000516:	1853      	adds	r3, r2, r1
 8000518:	4622      	mov	r2, r4
 800051a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					}
					break;
 800051e:	e1ad      	b.n	800087c <gdiBitBlt+0x5bc>
 8000520:	08007a08 	.word	0x08007a08
 8000524:	20003330 	.word	0x20003330
 8000528:	2000332c 	.word	0x2000332c
 800052c:	20002760 	.word	0x20002760
 8000530:	20000000 	.word	0x20000000
				case GDI_ROP_BONW:	// inverse video
					screen[y][x>>4] |=  bitmask.halfword[1];
 8000534:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000538:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800053c:	111b      	asrs	r3, r3, #4
 800053e:	b21b      	sxth	r3, r3
 8000540:	4618      	mov	r0, r3
 8000542:	49cb      	ldr	r1, [pc, #812]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000544:	4613      	mov	r3, r2
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	4413      	add	r3, r2
 800054a:	00da      	lsls	r2, r3, #3
 800054c:	1ad2      	subs	r2, r2, r3
 800054e:	1813      	adds	r3, r2, r0
 8000550:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000554:	4bc7      	ldr	r3, [pc, #796]	@ (8000874 <gdiBitBlt+0x5b4>)
 8000556:	885b      	ldrh	r3, [r3, #2]
 8000558:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800055c:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000560:	1100      	asrs	r0, r0, #4
 8000562:	b200      	sxth	r0, r0
 8000564:	4604      	mov	r4, r0
 8000566:	430b      	orrs	r3, r1
 8000568:	b298      	uxth	r0, r3
 800056a:	49c1      	ldr	r1, [pc, #772]	@ (8000870 <gdiBitBlt+0x5b0>)
 800056c:	4613      	mov	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	4413      	add	r3, r2
 8000572:	00da      	lsls	r2, r3, #3
 8000574:	1ad2      	subs	r2, r2, r3
 8000576:	1913      	adds	r3, r2, r4
 8000578:	4602      	mov	r2, r0
 800057a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					screen[y][x>>4] &= ~pattern.halfword[1];
 800057e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000582:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000586:	111b      	asrs	r3, r3, #4
 8000588:	b21b      	sxth	r3, r3
 800058a:	4618      	mov	r0, r3
 800058c:	49b8      	ldr	r1, [pc, #736]	@ (8000870 <gdiBitBlt+0x5b0>)
 800058e:	4613      	mov	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	4413      	add	r3, r2
 8000594:	00da      	lsls	r2, r3, #3
 8000596:	1ad2      	subs	r2, r2, r3
 8000598:	1813      	adds	r3, r2, r0
 800059a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800059e:	b21a      	sxth	r2, r3
 80005a0:	4bb5      	ldr	r3, [pc, #724]	@ (8000878 <gdiBitBlt+0x5b8>)
 80005a2:	885b      	ldrh	r3, [r3, #2]
 80005a4:	b21b      	sxth	r3, r3
 80005a6:	43db      	mvns	r3, r3
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	4013      	ands	r3, r2
 80005ac:	b219      	sxth	r1, r3
 80005ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005b6:	111b      	asrs	r3, r3, #4
 80005b8:	b21b      	sxth	r3, r3
 80005ba:	461c      	mov	r4, r3
 80005bc:	b288      	uxth	r0, r1
 80005be:	49ac      	ldr	r1, [pc, #688]	@ (8000870 <gdiBitBlt+0x5b0>)
 80005c0:	4613      	mov	r3, r2
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	4413      	add	r3, r2
 80005c6:	00da      	lsls	r2, r3, #3
 80005c8:	1ad2      	subs	r2, r2, r3
 80005ca:	1913      	adds	r3, r2, r4
 80005cc:	4602      	mov	r2, r0
 80005ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (bitmask.halfword[0] != 0) {
 80005d2:	4ba8      	ldr	r3, [pc, #672]	@ (8000874 <gdiBitBlt+0x5b4>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	f000 8152 	beq.w	8000880 <gdiBitBlt+0x5c0>
						screen[y][(x>>4)+1] |=  bitmask.halfword[0];
 80005dc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005e4:	111b      	asrs	r3, r3, #4
 80005e6:	b21b      	sxth	r3, r3
 80005e8:	1c59      	adds	r1, r3, #1
 80005ea:	48a1      	ldr	r0, [pc, #644]	@ (8000870 <gdiBitBlt+0x5b0>)
 80005ec:	4613      	mov	r3, r2
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	4413      	add	r3, r2
 80005f2:	00da      	lsls	r2, r3, #3
 80005f4:	1ad2      	subs	r2, r2, r3
 80005f6:	1853      	adds	r3, r2, r1
 80005f8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80005fc:	4b9d      	ldr	r3, [pc, #628]	@ (8000874 <gdiBitBlt+0x5b4>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000604:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000608:	1109      	asrs	r1, r1, #4
 800060a:	b209      	sxth	r1, r1
 800060c:	3101      	adds	r1, #1
 800060e:	4303      	orrs	r3, r0
 8000610:	b29c      	uxth	r4, r3
 8000612:	4897      	ldr	r0, [pc, #604]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000614:	4613      	mov	r3, r2
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	4413      	add	r3, r2
 800061a:	00da      	lsls	r2, r3, #3
 800061c:	1ad2      	subs	r2, r2, r3
 800061e:	1853      	adds	r3, r2, r1
 8000620:	4622      	mov	r2, r4
 8000622:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						screen[y][(x>>4)+1] &= ~pattern.halfword[0];
 8000626:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800062a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800062e:	111b      	asrs	r3, r3, #4
 8000630:	b21b      	sxth	r3, r3
 8000632:	1c59      	adds	r1, r3, #1
 8000634:	488e      	ldr	r0, [pc, #568]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000636:	4613      	mov	r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	4413      	add	r3, r2
 800063c:	00da      	lsls	r2, r3, #3
 800063e:	1ad2      	subs	r2, r2, r3
 8000640:	1853      	adds	r3, r2, r1
 8000642:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000646:	b21a      	sxth	r2, r3
 8000648:	4b8b      	ldr	r3, [pc, #556]	@ (8000878 <gdiBitBlt+0x5b8>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	b21b      	sxth	r3, r3
 800064e:	43db      	mvns	r3, r3
 8000650:	b21b      	sxth	r3, r3
 8000652:	4013      	ands	r3, r2
 8000654:	b218      	sxth	r0, r3
 8000656:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800065a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800065e:	111b      	asrs	r3, r3, #4
 8000660:	b21b      	sxth	r3, r3
 8000662:	1c59      	adds	r1, r3, #1
 8000664:	b284      	uxth	r4, r0
 8000666:	4882      	ldr	r0, [pc, #520]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	00da      	lsls	r2, r3, #3
 8000670:	1ad2      	subs	r2, r2, r3
 8000672:	1853      	adds	r3, r2, r1
 8000674:	4622      	mov	r2, r4
 8000676:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					}
					break;
 800067a:	e101      	b.n	8000880 <gdiBitBlt+0x5c0>
				case GDI_ROP_XOR:
					screen[y][x>>4] ^= pattern.halfword[1];
 800067c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000680:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000684:	111b      	asrs	r3, r3, #4
 8000686:	b21b      	sxth	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	4979      	ldr	r1, [pc, #484]	@ (8000870 <gdiBitBlt+0x5b0>)
 800068c:	4613      	mov	r3, r2
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	4413      	add	r3, r2
 8000692:	00da      	lsls	r2, r3, #3
 8000694:	1ad2      	subs	r2, r2, r3
 8000696:	1813      	adds	r3, r2, r0
 8000698:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800069c:	4b76      	ldr	r3, [pc, #472]	@ (8000878 <gdiBitBlt+0x5b8>)
 800069e:	885b      	ldrh	r3, [r3, #2]
 80006a0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006a4:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80006a8:	1100      	asrs	r0, r0, #4
 80006aa:	b200      	sxth	r0, r0
 80006ac:	4604      	mov	r4, r0
 80006ae:	404b      	eors	r3, r1
 80006b0:	b298      	uxth	r0, r3
 80006b2:	496f      	ldr	r1, [pc, #444]	@ (8000870 <gdiBitBlt+0x5b0>)
 80006b4:	4613      	mov	r3, r2
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	4413      	add	r3, r2
 80006ba:	00da      	lsls	r2, r3, #3
 80006bc:	1ad2      	subs	r2, r2, r3
 80006be:	1913      	adds	r3, r2, r4
 80006c0:	4602      	mov	r2, r0
 80006c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 80006c6:	4b6c      	ldr	r3, [pc, #432]	@ (8000878 <gdiBitBlt+0x5b8>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	f000 80da 	beq.w	8000884 <gdiBitBlt+0x5c4>
						screen[y][(x>>4)+1] ^= pattern.halfword[0];
 80006d0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80006d8:	111b      	asrs	r3, r3, #4
 80006da:	b21b      	sxth	r3, r3
 80006dc:	1c59      	adds	r1, r3, #1
 80006de:	4864      	ldr	r0, [pc, #400]	@ (8000870 <gdiBitBlt+0x5b0>)
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	00da      	lsls	r2, r3, #3
 80006e8:	1ad2      	subs	r2, r2, r3
 80006ea:	1853      	adds	r3, r2, r1
 80006ec:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80006f0:	4b61      	ldr	r3, [pc, #388]	@ (8000878 <gdiBitBlt+0x5b8>)
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006f8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80006fc:	1109      	asrs	r1, r1, #4
 80006fe:	b209      	sxth	r1, r1
 8000700:	3101      	adds	r1, #1
 8000702:	4043      	eors	r3, r0
 8000704:	b29c      	uxth	r4, r3
 8000706:	485a      	ldr	r0, [pc, #360]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000708:	4613      	mov	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	4413      	add	r3, r2
 800070e:	00da      	lsls	r2, r3, #3
 8000710:	1ad2      	subs	r2, r2, r3
 8000712:	1853      	adds	r3, r2, r1
 8000714:	4622      	mov	r2, r4
 8000716:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 800071a:	e0b3      	b.n	8000884 <gdiBitBlt+0x5c4>
				case GDI_ROP_OR:
					screen[y][x>>4] |= pattern.halfword[1];
 800071c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000720:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000724:	111b      	asrs	r3, r3, #4
 8000726:	b21b      	sxth	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	4951      	ldr	r1, [pc, #324]	@ (8000870 <gdiBitBlt+0x5b0>)
 800072c:	4613      	mov	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4413      	add	r3, r2
 8000732:	00da      	lsls	r2, r3, #3
 8000734:	1ad2      	subs	r2, r2, r3
 8000736:	1813      	adds	r3, r2, r0
 8000738:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800073c:	4b4e      	ldr	r3, [pc, #312]	@ (8000878 <gdiBitBlt+0x5b8>)
 800073e:	885b      	ldrh	r3, [r3, #2]
 8000740:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000744:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000748:	1100      	asrs	r0, r0, #4
 800074a:	b200      	sxth	r0, r0
 800074c:	4604      	mov	r4, r0
 800074e:	430b      	orrs	r3, r1
 8000750:	b298      	uxth	r0, r3
 8000752:	4947      	ldr	r1, [pc, #284]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	00da      	lsls	r2, r3, #3
 800075c:	1ad2      	subs	r2, r2, r3
 800075e:	1913      	adds	r3, r2, r4
 8000760:	4602      	mov	r2, r0
 8000762:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 8000766:	4b44      	ldr	r3, [pc, #272]	@ (8000878 <gdiBitBlt+0x5b8>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	f000 808c 	beq.w	8000888 <gdiBitBlt+0x5c8>
						screen[y][(x>>4)+1] |= pattern.halfword[0];
 8000770:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000774:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000778:	111b      	asrs	r3, r3, #4
 800077a:	b21b      	sxth	r3, r3
 800077c:	1c59      	adds	r1, r3, #1
 800077e:	483c      	ldr	r0, [pc, #240]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	00da      	lsls	r2, r3, #3
 8000788:	1ad2      	subs	r2, r2, r3
 800078a:	1853      	adds	r3, r2, r1
 800078c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000790:	4b39      	ldr	r3, [pc, #228]	@ (8000878 <gdiBitBlt+0x5b8>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000798:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800079c:	1109      	asrs	r1, r1, #4
 800079e:	b209      	sxth	r1, r1
 80007a0:	3101      	adds	r1, #1
 80007a2:	4303      	orrs	r3, r0
 80007a4:	b29c      	uxth	r4, r3
 80007a6:	4832      	ldr	r0, [pc, #200]	@ (8000870 <gdiBitBlt+0x5b0>)
 80007a8:	4613      	mov	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	00da      	lsls	r2, r3, #3
 80007b0:	1ad2      	subs	r2, r2, r3
 80007b2:	1853      	adds	r3, r2, r1
 80007b4:	4622      	mov	r2, r4
 80007b6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 80007ba:	e065      	b.n	8000888 <gdiBitBlt+0x5c8>
				case GDI_ROP_NAND:
					screen[y][x>>4] &= ~pattern.halfword[1];
 80007bc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80007c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007c4:	111b      	asrs	r3, r3, #4
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	4929      	ldr	r1, [pc, #164]	@ (8000870 <gdiBitBlt+0x5b0>)
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	00da      	lsls	r2, r3, #3
 80007d4:	1ad2      	subs	r2, r2, r3
 80007d6:	1813      	adds	r3, r2, r0
 80007d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007dc:	b21a      	sxth	r2, r3
 80007de:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <gdiBitBlt+0x5b8>)
 80007e0:	885b      	ldrh	r3, [r3, #2]
 80007e2:	b21b      	sxth	r3, r3
 80007e4:	43db      	mvns	r3, r3
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	4013      	ands	r3, r2
 80007ea:	b219      	sxth	r1, r3
 80007ec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80007f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007f4:	111b      	asrs	r3, r3, #4
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	461c      	mov	r4, r3
 80007fa:	b288      	uxth	r0, r1
 80007fc:	491c      	ldr	r1, [pc, #112]	@ (8000870 <gdiBitBlt+0x5b0>)
 80007fe:	4613      	mov	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	4413      	add	r3, r2
 8000804:	00da      	lsls	r2, r3, #3
 8000806:	1ad2      	subs	r2, r2, r3
 8000808:	1913      	adds	r3, r2, r4
 800080a:	4602      	mov	r2, r0
 800080c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <gdiBitBlt+0x5b8>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d039      	beq.n	800088c <gdiBitBlt+0x5cc>
						screen[y][(x>>4)+1] &= ~pattern.halfword[0];
 8000818:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800081c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000820:	111b      	asrs	r3, r3, #4
 8000822:	b21b      	sxth	r3, r3
 8000824:	1c59      	adds	r1, r3, #1
 8000826:	4812      	ldr	r0, [pc, #72]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000828:	4613      	mov	r3, r2
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	4413      	add	r3, r2
 800082e:	00da      	lsls	r2, r3, #3
 8000830:	1ad2      	subs	r2, r2, r3
 8000832:	1853      	adds	r3, r2, r1
 8000834:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000838:	b21a      	sxth	r2, r3
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <gdiBitBlt+0x5b8>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	b21b      	sxth	r3, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	b21b      	sxth	r3, r3
 8000844:	4013      	ands	r3, r2
 8000846:	b218      	sxth	r0, r3
 8000848:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800084c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000850:	111b      	asrs	r3, r3, #4
 8000852:	b21b      	sxth	r3, r3
 8000854:	1c59      	adds	r1, r3, #1
 8000856:	b284      	uxth	r4, r0
 8000858:	4805      	ldr	r0, [pc, #20]	@ (8000870 <gdiBitBlt+0x5b0>)
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00da      	lsls	r2, r3, #3
 8000862:	1ad2      	subs	r2, r2, r3
 8000864:	1853      	adds	r3, r2, r1
 8000866:	4622      	mov	r2, r4
 8000868:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 800086c:	e00e      	b.n	800088c <gdiBitBlt+0x5cc>
 800086e:	bf00      	nop
 8000870:	20000000 	.word	0x20000000
 8000874:	20003330 	.word	0x20003330
 8000878:	2000332c 	.word	0x2000332c
					break;
 800087c:	bf00      	nop
 800087e:	e006      	b.n	800088e <gdiBitBlt+0x5ce>
					break;
 8000880:	bf00      	nop
 8000882:	e004      	b.n	800088e <gdiBitBlt+0x5ce>
					break;
 8000884:	bf00      	nop
 8000886:	e002      	b.n	800088e <gdiBitBlt+0x5ce>
					break;
 8000888:	bf00      	nop
 800088a:	e000      	b.n	800088e <gdiBitBlt+0x5ce>
					break;
 800088c:	bf00      	nop
		for (todo = w; todo>0;) {
 800088e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000892:	2b00      	cmp	r3, #0
 8000894:	f73f ad3c 	bgt.w	8000310 <gdiBitBlt+0x50>
	for(;--h >= 0; y++) {
 8000898:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800089c:	b29b      	uxth	r3, r3
 800089e:	3301      	adds	r3, #1
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	813b      	strh	r3, [r7, #8]
 80008a4:	8c3b      	ldrh	r3, [r7, #32]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	843b      	strh	r3, [r7, #32]
 80008ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	f6bf ad2a 	bge.w	800030a <gdiBitBlt+0x4a>
			}
		}
	}
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc90      	pop	{r4, r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop

080008c4 <gdiPoint>:
		x			X position
		y			Y position

	return:			none
*/
void gdiPoint(PGDI_RECT rc, uint16_t x, uint16_t y) {
 80008c4:	b490      	push	{r4, r7}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	807b      	strh	r3, [r7, #2]
 80008d0:	4613      	mov	r3, r2
 80008d2:	803b      	strh	r3, [r7, #0]
	/* The bit addressing of pixels is MSB first (I2S property).
	 * so invert the lower nibble, indexing 16 pixels
	 */
	uint16_t nibble = x & 0b1111;
 80008d4:	887b      	ldrh	r3, [r7, #2]
 80008d6:	f003 030f 	and.w	r3, r3, #15
 80008da:	81fb      	strh	r3, [r7, #14]
	x = (x & ~0b1111) + 0b1111 - nibble;
 80008dc:	887b      	ldrh	r3, [r7, #2]
 80008de:	f023 030f 	bic.w	r3, r3, #15
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	89fb      	ldrh	r3, [r7, #14]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	330f      	adds	r3, #15
 80008ec:	807b      	strh	r3, [r7, #2]
	if (x < VID_PIXELS_X && y < VID_PIXELS_Y)	// Check display area bounds
 80008ee:	887b      	ldrh	r3, [r7, #2]
 80008f0:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 80008f4:	d243      	bcs.n	800097e <gdiPoint+0xba>
 80008f6:	883b      	ldrh	r3, [r7, #0]
 80008f8:	2bef      	cmp	r3, #239	@ 0xef
 80008fa:	d840      	bhi.n	800097e <gdiPoint+0xba>
	{
		switch(rop) {
 80008fc:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <gdiPoint+0xc4>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b04      	cmp	r3, #4
 8000902:	d83c      	bhi.n	800097e <gdiPoint+0xba>
 8000904:	a201      	add	r2, pc, #4	@ (adr r2, 800090c <gdiPoint+0x48>)
 8000906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090a:	bf00      	nop
 800090c:	08000921 	.word	0x08000921
 8000910:	08000939 	.word	0x08000939
 8000914:	08000939 	.word	0x08000939
 8000918:	08000951 	.word	0x08000951
 800091c:	08000921 	.word	0x08000921
			case GDI_ROP_COPY:
			case GDI_ROP_OR:	screenBB[y][x] = 1;
 8000920:	883a      	ldrh	r2, [r7, #0]
 8000922:	887b      	ldrh	r3, [r7, #2]
 8000924:	4919      	ldr	r1, [pc, #100]	@ (800098c <gdiPoint+0xc8>)
 8000926:	f44f 70a8 	mov.w	r0, #336	@ 0x150
 800092a:	fb00 f202 	mul.w	r2, r0, r2
 800092e:	4413      	add	r3, r2
 8000930:	2201      	movs	r2, #1
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
								break;
 8000936:	e022      	b.n	800097e <gdiPoint+0xba>
			case GDI_ROP_BONW:
			case GDI_ROP_NAND:	screenBB[y][x] = 0;
 8000938:	883a      	ldrh	r2, [r7, #0]
 800093a:	887b      	ldrh	r3, [r7, #2]
 800093c:	4913      	ldr	r1, [pc, #76]	@ (800098c <gdiPoint+0xc8>)
 800093e:	f44f 70a8 	mov.w	r0, #336	@ 0x150
 8000942:	fb00 f202 	mul.w	r2, r0, r2
 8000946:	4413      	add	r3, r2
 8000948:	2200      	movs	r2, #0
 800094a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
								break;
 800094e:	e016      	b.n	800097e <gdiPoint+0xba>
			case GDI_ROP_XOR:	screenBB[y][x] ^= 1;
 8000950:	883a      	ldrh	r2, [r7, #0]
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	490d      	ldr	r1, [pc, #52]	@ (800098c <gdiPoint+0xc8>)
 8000956:	f44f 70a8 	mov.w	r0, #336	@ 0x150
 800095a:	fb00 f202 	mul.w	r2, r0, r2
 800095e:	4413      	add	r3, r2
 8000960:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000964:	8839      	ldrh	r1, [r7, #0]
 8000966:	887b      	ldrh	r3, [r7, #2]
 8000968:	f082 0201 	eor.w	r2, r2, #1
 800096c:	4807      	ldr	r0, [pc, #28]	@ (800098c <gdiPoint+0xc8>)
 800096e:	f44f 74a8 	mov.w	r4, #336	@ 0x150
 8000972:	fb04 f101 	mul.w	r1, r4, r1
 8000976:	440b      	add	r3, r1
 8000978:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		}
	}
}
 800097c:	e7ff      	b.n	800097e <gdiPoint+0xba>
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bc90      	pop	{r4, r7}
 8000986:	4770      	bx	lr
 8000988:	20002760 	.word	0x20002760
 800098c:	22000000 	.word	0x22000000

08000990 <gdiLine>:
		x2			X end position
		y2			Y end position

	return			none
*/
void gdiLine(PGDI_RECT prc, int16_t x1, int16_t y1, int16_t x2, int16_t y2) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	4608      	mov	r0, r1
 800099a:	4611      	mov	r1, r2
 800099c:	461a      	mov	r2, r3
 800099e:	4603      	mov	r3, r0
 80009a0:	817b      	strh	r3, [r7, #10]
 80009a2:	460b      	mov	r3, r1
 80009a4:	813b      	strh	r3, [r7, #8]
 80009a6:	4613      	mov	r3, r2
 80009a8:	80fb      	strh	r3, [r7, #6]

int16_t		dx, dy, i, e;
int16_t		incx, incy, inc1, inc2;
int16_t		x, y;

	dx = x2 - x1;
 80009aa:	88fa      	ldrh	r2, [r7, #6]
 80009ac:	897b      	ldrh	r3, [r7, #10]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	dy = y2 - y1;
 80009b4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80009b6:	893b      	ldrh	r3, [r7, #8]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	84bb      	strh	r3, [r7, #36]	@ 0x24

	if(dx < 0) dx = -dx;
 80009be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	da03      	bge.n	80009ce <gdiLine+0x3e>
 80009c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80009c8:	425b      	negs	r3, r3
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	if(dy < 0) dy = -dy;
 80009ce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	da03      	bge.n	80009de <gdiLine+0x4e>
 80009d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80009d8:	425b      	negs	r3, r3
 80009da:	b29b      	uxth	r3, r3
 80009dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
	incx = 1;
 80009de:	2301      	movs	r3, #1
 80009e0:	83fb      	strh	r3, [r7, #30]
	if(x2 < x1) incx = -1;
 80009e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80009e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	da02      	bge.n	80009f4 <gdiLine+0x64>
 80009ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009f2:	83fb      	strh	r3, [r7, #30]
	incy = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	83bb      	strh	r3, [r7, #28]
	if(y2 < y1) incy = -1;
 80009f8:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 80009fc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	da02      	bge.n	8000a0a <gdiLine+0x7a>
 8000a04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a08:	83bb      	strh	r3, [r7, #28]
	x = x1;
 8000a0a:	897b      	ldrh	r3, [r7, #10]
 8000a0c:	837b      	strh	r3, [r7, #26]
	y = y1;
 8000a0e:	893b      	ldrh	r3, [r7, #8]
 8000a10:	833b      	strh	r3, [r7, #24]

	if (dx > dy) {
 8000a12:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8000a16:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	dd48      	ble.n	8000ab0 <gdiLine+0x120>
		gdiPoint(prc, x, y);
 8000a1e:	8b7b      	ldrh	r3, [r7, #26]
 8000a20:	8b3a      	ldrh	r2, [r7, #24]
 8000a22:	4619      	mov	r1, r3
 8000a24:	68f8      	ldr	r0, [r7, #12]
 8000a26:	f7ff ff4d 	bl	80008c4 <gdiPoint>
		e = 2*dy - dx;
 8000a2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	843b      	strh	r3, [r7, #32]
		inc1 = 2 * (dy - dx);
 8000a38:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8000a3c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	82fb      	strh	r3, [r7, #22]
		inc2 = 2 * dy;
 8000a4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	82bb      	strh	r3, [r7, #20]
		for (i = 0; i < dx; i++) {
 8000a52:	2300      	movs	r3, #0
 8000a54:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000a56:	e024      	b.n	8000aa2 <gdiLine+0x112>
			if (e >= 0) {
 8000a58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <gdiLine+0xe6>
				y += incy;
 8000a60:	8b3a      	ldrh	r2, [r7, #24]
 8000a62:	8bbb      	ldrh	r3, [r7, #28]
 8000a64:	4413      	add	r3, r2
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	833b      	strh	r3, [r7, #24]
				e += inc1;
 8000a6a:	8c3a      	ldrh	r2, [r7, #32]
 8000a6c:	8afb      	ldrh	r3, [r7, #22]
 8000a6e:	4413      	add	r3, r2
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	843b      	strh	r3, [r7, #32]
 8000a74:	e004      	b.n	8000a80 <gdiLine+0xf0>
			}
			else {
				e += inc2;
 8000a76:	8c3a      	ldrh	r2, [r7, #32]
 8000a78:	8abb      	ldrh	r3, [r7, #20]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	843b      	strh	r3, [r7, #32]
			}
			x += incx;
 8000a80:	8b7a      	ldrh	r2, [r7, #26]
 8000a82:	8bfb      	ldrh	r3, [r7, #30]
 8000a84:	4413      	add	r3, r2
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	837b      	strh	r3, [r7, #26]
			gdiPoint(prc, x, y);
 8000a8a:	8b7b      	ldrh	r3, [r7, #26]
 8000a8c:	8b3a      	ldrh	r2, [r7, #24]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f7ff ff17 	bl	80008c4 <gdiPoint>
		for (i = 0; i < dx; i++) {
 8000a96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000aa2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8000aa6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	dbd4      	blt.n	8000a58 <gdiLine+0xc8>
			}
			y += incy;
			gdiPoint(prc, x, y);
		}
	}
}
 8000aae:	e047      	b.n	8000b40 <gdiLine+0x1b0>
		gdiPoint(prc, x, y);
 8000ab0:	8b7b      	ldrh	r3, [r7, #26]
 8000ab2:	8b3a      	ldrh	r2, [r7, #24]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff ff04 	bl	80008c4 <gdiPoint>
		e = 2 * dx - dy;
 8000abc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	843b      	strh	r3, [r7, #32]
		inc1 = 2 * (dx - dy);
 8000aca:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8000ace:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	82fb      	strh	r3, [r7, #22]
		inc2 = 2 * dx;
 8000adc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	82bb      	strh	r3, [r7, #20]
		for(i = 0; i < dy; i++) {
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000ae8:	e024      	b.n	8000b34 <gdiLine+0x1a4>
			if (e >= 0) {
 8000aea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db0a      	blt.n	8000b08 <gdiLine+0x178>
				x += incx;
 8000af2:	8b7a      	ldrh	r2, [r7, #26]
 8000af4:	8bfb      	ldrh	r3, [r7, #30]
 8000af6:	4413      	add	r3, r2
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	837b      	strh	r3, [r7, #26]
				e += inc1;
 8000afc:	8c3a      	ldrh	r2, [r7, #32]
 8000afe:	8afb      	ldrh	r3, [r7, #22]
 8000b00:	4413      	add	r3, r2
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	843b      	strh	r3, [r7, #32]
 8000b06:	e004      	b.n	8000b12 <gdiLine+0x182>
				e += inc2;
 8000b08:	8c3a      	ldrh	r2, [r7, #32]
 8000b0a:	8abb      	ldrh	r3, [r7, #20]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	843b      	strh	r3, [r7, #32]
			y += incy;
 8000b12:	8b3a      	ldrh	r2, [r7, #24]
 8000b14:	8bbb      	ldrh	r3, [r7, #28]
 8000b16:	4413      	add	r3, r2
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	833b      	strh	r3, [r7, #24]
			gdiPoint(prc, x, y);
 8000b1c:	8b7b      	ldrh	r3, [r7, #26]
 8000b1e:	8b3a      	ldrh	r2, [r7, #24]
 8000b20:	4619      	mov	r1, r3
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f7ff fece 	bl	80008c4 <gdiPoint>
		for(i = 0; i < dy; i++) {
 8000b28:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	3301      	adds	r3, #1
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000b34:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8000b38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dbd4      	blt.n	8000aea <gdiLine+0x15a>
}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	@ 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <gdiRectangle>:
		y2			Y end position

	return			none
*/
void	gdiRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	4604      	mov	r4, r0
 8000b50:	4608      	mov	r0, r1
 8000b52:	4611      	mov	r1, r2
 8000b54:	461a      	mov	r2, r3
 8000b56:	4623      	mov	r3, r4
 8000b58:	80fb      	strh	r3, [r7, #6]
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80bb      	strh	r3, [r7, #4]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	807b      	strh	r3, [r7, #2]
 8000b62:	4613      	mov	r3, r2
 8000b64:	803b      	strh	r3, [r7, #0]
	gdiLine(NULL,x0,y0,x1,y0);
 8000b66:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000b6a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b6e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff ff08 	bl	8000990 <gdiLine>
	gdiLine(NULL,x0,y1,x1,y1);
 8000b80:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000b84:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b88:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	4603      	mov	r3, r0
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff fefb 	bl	8000990 <gdiLine>
	gdiLine(NULL,x0,y0,x0,y1);
 8000b9a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b9e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ba2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ba6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	4603      	mov	r3, r0
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff feee 	bl	8000990 <gdiLine>
	gdiLine(NULL,x1,y0,x1,y1);
 8000bb4:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000bb8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000bbc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000bc0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff fee1 	bl	8000990 <gdiLine>
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd90      	pop	{r4, r7, pc}
	...

08000bd8 <gdiDrawTextEx>:
		ptext		Pointer to text

	return			none
*/
void gdiDrawTextEx(int16_t x, int16_t y, char *ptext)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	4603      	mov	r3, r0
 8000be0:	603a      	str	r2, [r7, #0]
 8000be2:	80fb      	strh	r3, [r7, #6]
 8000be4:	460b      	mov	r3, r1
 8000be6:	80bb      	strh	r3, [r7, #4]
	char		c;

	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH)
 8000be8:	e01a      	b.n	8000c20 <gdiDrawTextEx+0x48>
		if (c >= GDI_SYSFONT_OFFSET)
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	2b1f      	cmp	r3, #31
 8000bee:	d913      	bls.n	8000c18 <gdiDrawTextEx+0x40>
			gdiBitBlt(NULL, x, y, GDI_SYSFONT_WIDTH, GDI_SYSFONT_HEIGHT, (pBMP) gdiSystemFont[c-GDI_SYSFONT_OFFSET]);
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	f1a3 0220 	sub.w	r2, r3, #32
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	4413      	add	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8000c3c <gdiDrawTextEx+0x64>)
 8000c00:	4413      	add	r3, r2
 8000c02:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c06:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	230a      	movs	r3, #10
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2306      	movs	r3, #6
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff fb54 	bl	80002c0 <gdiBitBlt>
	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH)
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	3306      	adds	r3, #6
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	80fb      	strh	r3, [r7, #6]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	603a      	str	r2, [r7, #0]
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d1dc      	bne.n	8000bea <gdiDrawTextEx+0x12>
//	clip here if		if (x >= VID_PIXELS_X - GDI_SYSFONT_WIDTH)
		// else control character handling ...
}
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08007648 	.word	0x08007648

08000c40 <DelayMs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DelayMs(uint32_t nTime) // delay function
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 8000c48:	4a09      	ldr	r2, [pc, #36]	@ (8000c70 <DelayMs+0x30>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  while((TimingDelay != 0));
 8000c4e:	bf00      	nop
 8000c50:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <DelayMs+0x30>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1fb      	bne.n	8000c50 <DelayMs+0x10>
  while(Paused);
 8000c58:	bf00      	nop
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <DelayMs+0x34>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1fb      	bne.n	8000c5a <DelayMs+0x1a>
}
 8000c62:	bf00      	nop
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	2000358c 	.word	0x2000358c
 8000c74:	20003588 	.word	0x20003588

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7c:	f001 f81d 	bl	8001cba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c80:	f000 f85e 	bl	8000d40 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c84:	f000 fa94 	bl	80011b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c88:	f000 fa50 	bl	800112c <MX_DMA_Init>
  MX_TIM2_Init();
 8000c8c:	f000 f8f4 	bl	8000e78 <MX_TIM2_Init>
  MX_I2S2_Init();
 8000c90:	f000 f8b8 	bl	8000e04 <MX_I2S2_Init>
  MX_TIM3_Init();
 8000c94:	f000 f986 	bl	8000fa4 <MX_TIM3_Init>
//    lineptrs[L] = screen[src];
//  }



  HAL_TIM_MspPostInit(&htim3);
 8000c98:	4821      	ldr	r0, [pc, #132]	@ (8000d20 <main+0xa8>)
 8000c9a:	f000 fddb 	bl	8001854 <HAL_TIM_MspPostInit>
  // add:
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	201d      	movs	r0, #29
 8000ca4:	f001 f955 	bl	8001f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ca8:	201d      	movs	r0, #29
 8000caa:	f001 f96c 	bl	8001f86 <HAL_NVIC_EnableIRQ>

  //do know if it is necessary
  HAL_TIM_Base_Start(&htim2); // start the timer for the video sync
 8000cae:	481d      	ldr	r0, [pc, #116]	@ (8000d24 <main+0xac>)
 8000cb0:	f003 fcd6 	bl	8004660 <HAL_TIM_Base_Start>
  //HAL_TIM_Base_Start(&htim3); // start the timer for the video sync
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);  // OC4Ref → TRGO
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	481b      	ldr	r0, [pc, #108]	@ (8000d24 <main+0xac>)
 8000cb8:	f003 fda4 	bl	8004804 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4818      	ldr	r0, [pc, #96]	@ (8000d20 <main+0xa8>)
 8000cc0:	f003 feb2 	bl	8004a28 <HAL_TIM_OC_Start_IT>
  //__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);



  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4816      	ldr	r0, [pc, #88]	@ (8000d20 <main+0xa8>)
 8000cc8:	f003 fd9c 	bl	8004804 <HAL_TIM_OC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // this the same
 8000ccc:	2104      	movs	r1, #4
 8000cce:	4814      	ldr	r0, [pc, #80]	@ (8000d20 <main+0xa8>)
 8000cd0:	f004 f86c 	bl	8004dac <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3);
 8000cd4:	2108      	movs	r1, #8
 8000cd6:	4812      	ldr	r0, [pc, #72]	@ (8000d20 <main+0xa8>)
 8000cd8:	f003 fd94 	bl	8004804 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_4);
 8000cdc:	210c      	movs	r1, #12
 8000cde:	4810      	ldr	r0, [pc, #64]	@ (8000d20 <main+0xa8>)
 8000ce0:	f003 fd90 	bl	8004804 <HAL_TIM_OC_Start>
//    (uint32_t)&TIM3->CCR1,           // peripheral dest
//    VID_VSIZE                // number of half-words to transfer
//  );


  HAL_DMA_Start(
 8000ce4:	4910      	ldr	r1, [pc, #64]	@ (8000d28 <main+0xb0>)
 8000ce6:	f240 2371 	movw	r3, #625	@ 0x271
 8000cea:	4a10      	ldr	r2, [pc, #64]	@ (8000d2c <main+0xb4>)
 8000cec:	4810      	ldr	r0, [pc, #64]	@ (8000d30 <main+0xb8>)
 8000cee:	f001 fa0d 	bl	800210c <HAL_DMA_Start>
    625                  // one CCR1 write per line
  );



  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <main+0xa8>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <main+0xa8>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d00:	60da      	str	r2, [r3, #12]
  //__HAL_DMA_ENABLE(&hdma_tim3_ch1);


  HAL_I2S_Transmit_DMA(&hi2s2,
 8000d02:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <main+0xbc>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2220      	movs	r2, #32
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <main+0xc0>)
 8000d0c:	f001 fe6e 	bl	80029ec <HAL_I2S_Transmit_DMA>
  //HAL_I2S_Transmit_DMA(&hi2s2, Vwhite, VID_HSIZE);



  // also i added a function for handleing
  srand(SysTick->VAL);
 8000d10:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <main+0xc4>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f005 fc0b 	bl	8006530 <srand>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  show();
 8000d1a:	f000 fa99 	bl	8001250 <show>
 8000d1e:	e7fc      	b.n	8000d1a <main+0xa2>
 8000d20:	2000341c 	.word	0x2000341c
 8000d24:	200033d0 	.word	0x200033d0
 8000d28:	08007a88 	.word	0x08007a88
 8000d2c:	40000434 	.word	0x40000434
 8000d30:	20003468 	.word	0x20003468
 8000d34:	200028e8 	.word	0x200028e8
 8000d38:	20003334 	.word	0x20003334
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <SystemClock_Config>:
//    Error_Handler();
//  }
//}

void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b096      	sub	sp, #88	@ 0x58
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef  RCC_OscInitStruct = {0};
 8000d46:	f107 0320 	add.w	r3, r7, #32
 8000d4a:	2238      	movs	r2, #56	@ 0x38
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f005 fd5f 	bl	8006812 <memset>
  RCC_ClkInitTypeDef  RCC_ClkInitStruct = {0};
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]

  /* 1) Power & voltage scaling */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d64:	4b25      	ldr	r3, [pc, #148]	@ (8000dfc <SystemClock_Config+0xbc>)
 8000d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d68:	4a24      	ldr	r2, [pc, #144]	@ (8000dfc <SystemClock_Config+0xbc>)
 8000d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d70:	4b22      	ldr	r3, [pc, #136]	@ (8000dfc <SystemClock_Config+0xbc>)
 8000d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d7c:	4b20      	ldr	r3, [pc, #128]	@ (8000e00 <SystemClock_Config+0xc0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d84:	4a1e      	ldr	r2, [pc, #120]	@ (8000e00 <SystemClock_Config+0xc0>)
 8000d86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <SystemClock_Config+0xc0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]

  /* 2) HSE bypass on PH0 with PLL = (24 MHz/3)*8/4 = 16 MHz */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSE;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState            = RCC_HSE_ON;
 8000d9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8000da2:	2302      	movs	r3, #2
 8000da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSE;
 8000da6:	2303      	movs	r3, #3
 8000da8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM            = 3;                   // 24 MHz / 3 = 8 MHz
 8000daa:	2303      	movs	r3, #3
 8000dac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN            = 8;                   // 8 MHz * 8 = 64 MHz VCO
 8000dae:	2308      	movs	r3, #8
 8000db0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR            = RCC_PLLR_DIV4;       // 64 MHz / 4 = 16 MHz SYSCLK
 8000db2:	2304      	movs	r3, #4
 8000db4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 ff3e 	bl	8002c3c <HAL_RCC_OscConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x8a>
    Error_Handler();
 8000dc6:	f000 fa17 	bl	80011f8 <Error_Handler>


  /* 3) Route PLL→SYSCLK, all prescalers = 1 → HCLK/PCLK1/PCLK2 = 16 MHz */
  RCC_ClkInitStruct.ClockType           = RCC_CLOCKTYPE_SYSCLK
 8000dca:	230f      	movs	r3, #15
 8000dcc:	60fb      	str	r3, [r7, #12]
                                         | RCC_CLOCKTYPE_HCLK
                                         | RCC_CLOCKTYPE_PCLK1
                                         | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource        = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider       = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider      = RCC_HCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider      = RCC_HCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 fa3b 	bl	8003260 <HAL_RCC_ClockConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0xb4>
    Error_Handler();
 8000df0:	f000 fa02 	bl	80011f8 <Error_Handler>
}
 8000df4:	bf00      	nop
 8000df6:	3758      	adds	r7, #88	@ 0x58
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40007000 	.word	0x40007000

08000e04 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2S2_Init 1 */
	//hi2s2.Init.CPOL = I2S_CPOL_HIGH;

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000e08:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <MX_I2S2_Init+0x6c>)
 8000e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8000e74 <MX_I2S2_Init+0x70>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <MX_I2S2_Init+0x6c>)
 8000e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e14:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e16:	4b16      	ldr	r3, [pc, #88]	@ (8000e70 <MX_I2S2_Init+0x6c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <MX_I2S2_Init+0x6c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000e22:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <MX_I2S2_Init+0x6c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000e28:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <MX_I2S2_Init+0x6c>)
 8000e2a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000e2e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <MX_I2S2_Init+0x6c>)
 8000e32:	2208      	movs	r2, #8
 8000e34:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000e36:	480e      	ldr	r0, [pc, #56]	@ (8000e70 <MX_I2S2_Init+0x6c>)
 8000e38:	f001 fcf8 	bl	800282c <HAL_I2S_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8000e42:	f000 f9d9 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */
  __HAL_I2S_DISABLE(&hi2s2);
 8000e46:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <MX_I2S2_Init+0x6c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	69da      	ldr	r2, [r3, #28]
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <MX_I2S2_Init+0x6c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e54:	61da      	str	r2, [r3, #28]
   SPI2->I2SPR = 1;   // I2SDIV = 1, ODD = 0
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <MX_I2S2_Init+0x70>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	621a      	str	r2, [r3, #32]
   __HAL_I2S_ENABLE(&hi2s2);
 8000e5c:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <MX_I2S2_Init+0x6c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	69da      	ldr	r2, [r3, #28]
 8000e62:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <MX_I2S2_Init+0x6c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e6a:	61da      	str	r2, [r3, #28]
  /* USER CODE END I2S2_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20003334 	.word	0x20003334
 8000e74:	40003800 	.word	0x40003800

08000e78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b094      	sub	sp, #80	@ 0x50
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9c:	f107 0320 	add.w	r3, r7, #32
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]
 8000eb6:	615a      	str	r2, [r3, #20]
 8000eb8:	619a      	str	r2, [r3, #24]
  //htim2.Init.Prescaler         = VID_HSIZE/4 - 1;
  //htim2.Init.Period            = 2*VID_VSIZE - 1;
  //sConfigOC.Pulse      = VID_VSIZE - 1;

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eba:	4b39      	ldr	r3, [pc, #228]	@ (8000fa0 <MX_TIM2_Init+0x128>)
 8000ebc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ec0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VID_HSIZE/4 - 1;
 8000ec2:	4b37      	ldr	r3, [pc, #220]	@ (8000fa0 <MX_TIM2_Init+0x128>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec8:	4b35      	ldr	r3, [pc, #212]	@ (8000fa0 <MX_TIM2_Init+0x128>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2*VID_VSIZE - 1 ;
 8000ece:	4b34      	ldr	r3, [pc, #208]	@ (8000fa0 <MX_TIM2_Init+0x128>)
 8000ed0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8000ed4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000ed6:	4b32      	ldr	r3, [pc, #200]	@ (8000fa0 <MX_TIM2_Init+0x128>)
 8000ed8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000edc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ede:	4b30      	ldr	r3, [pc, #192]	@ (8000fa0 <MX_TIM2_Init+0x128>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ee4:	482e      	ldr	r0, [pc, #184]	@ (8000fa0 <MX_TIM2_Init+0x128>)
 8000ee6:	f003 fb63 	bl	80045b0 <HAL_TIM_Base_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000ef0:	f000 f982 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef8:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000efa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000efe:	4619      	mov	r1, r3
 8000f00:	4827      	ldr	r0, [pc, #156]	@ (8000fa0 <MX_TIM2_Init+0x128>)
 8000f02:	f004 fb43 	bl	800558c <HAL_TIM_ConfigClockSource>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000f0c:	f000 f974 	bl	80011f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f10:	4823      	ldr	r0, [pc, #140]	@ (8000fa0 <MX_TIM2_Init+0x128>)
 8000f12:	f003 fee9 	bl	8004ce8 <HAL_TIM_PWM_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000f1c:	f000 f96c 	bl	80011f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000f20:	2306      	movs	r3, #6
 8000f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000f24:	2370      	movs	r3, #112	@ 0x70
 8000f26:	633b      	str	r3, [r7, #48]	@ 0x30
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	637b      	str	r3, [r7, #52]	@ 0x34
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sSlaveConfig.TriggerFilter = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000f34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4819      	ldr	r0, [pc, #100]	@ (8000fa0 <MX_TIM2_Init+0x128>)
 8000f3c:	f004 fc3c 	bl	80057b8 <HAL_TIM_SlaveConfigSynchro>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000f46:	f000 f957 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000f4a:	2370      	movs	r3, #112	@ 0x70
 8000f4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000f4e:	2380      	movs	r3, #128	@ 0x80
 8000f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f52:	f107 0320 	add.w	r3, r7, #32
 8000f56:	4619      	mov	r1, r3
 8000f58:	4811      	ldr	r0, [pc, #68]	@ (8000fa0 <MX_TIM2_Init+0x128>)
 8000f5a:	f005 fa0d 	bl	8006378 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000f64:	f000 f948 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f68:	2360      	movs	r3, #96	@ 0x60
 8000f6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VID_VSIZE - 1;
 8000f6c:	f44f 731c 	mov.w	r3, #624	@ 0x270
 8000f70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000f72:	2302      	movs	r3, #2
 8000f74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	220c      	movs	r2, #12
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4807      	ldr	r0, [pc, #28]	@ (8000fa0 <MX_TIM2_Init+0x128>)
 8000f82:	f004 f9ef 	bl	8005364 <HAL_TIM_PWM_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8000f8c:	f000 f934 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f90:	4803      	ldr	r0, [pc, #12]	@ (8000fa0 <MX_TIM2_Init+0x128>)
 8000f92:	f000 fc5f 	bl	8001854 <HAL_TIM_MspPostInit>

}
 8000f96:	bf00      	nop
 8000f98:	3750      	adds	r7, #80	@ 0x50
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200033d0 	.word	0x200033d0

08000fa4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b094      	sub	sp, #80	@ 0x50
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000faa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc8:	f107 0320 	add.w	r3, r7, #32
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]
 8000fe2:	615a      	str	r2, [r3, #20]
 8000fe4:	619a      	str	r2, [r3, #24]

  //FOR CHANNEL 2:
  //sConfigOC.Pulse = HSYNCCOUNTS;

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fe6:	4b4f      	ldr	r3, [pc, #316]	@ (8001124 <MX_TIM3_Init+0x180>)
 8000fe8:	4a4f      	ldr	r2, [pc, #316]	@ (8001128 <MX_TIM3_Init+0x184>)
 8000fea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fec:	4b4d      	ldr	r3, [pc, #308]	@ (8001124 <MX_TIM3_Init+0x180>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff2:	4b4c      	ldr	r3, [pc, #304]	@ (8001124 <MX_TIM3_Init+0x180>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIMERCOUNTS - 1; // 0xFFFF;
 8000ff8:	4b4a      	ldr	r3, [pc, #296]	@ (8001124 <MX_TIM3_Init+0x180>)
 8000ffa:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000ffe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001000:	4b48      	ldr	r3, [pc, #288]	@ (8001124 <MX_TIM3_Init+0x180>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001006:	4b47      	ldr	r3, [pc, #284]	@ (8001124 <MX_TIM3_Init+0x180>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800100c:	4845      	ldr	r0, [pc, #276]	@ (8001124 <MX_TIM3_Init+0x180>)
 800100e:	f003 facf 	bl	80045b0 <HAL_TIM_Base_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001018:	f000 f8ee 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001020:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001022:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001026:	4619      	mov	r1, r3
 8001028:	483e      	ldr	r0, [pc, #248]	@ (8001124 <MX_TIM3_Init+0x180>)
 800102a:	f004 faaf 	bl	800558c <HAL_TIM_ConfigClockSource>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001034:	f000 f8e0 	bl	80011f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001038:	483a      	ldr	r0, [pc, #232]	@ (8001124 <MX_TIM3_Init+0x180>)
 800103a:	f003 fb81 	bl	8004740 <HAL_TIM_OC_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8001044:	f000 f8d8 	bl	80011f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001048:	4836      	ldr	r0, [pc, #216]	@ (8001124 <MX_TIM3_Init+0x180>)
 800104a:	f003 fe4d 	bl	8004ce8 <HAL_TIM_PWM_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001054:	f000 f8d0 	bl	80011f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001058:	2306      	movs	r3, #6
 800105a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800105c:	2310      	movs	r3, #16
 800105e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001060:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001064:	4619      	mov	r1, r3
 8001066:	482f      	ldr	r0, [pc, #188]	@ (8001124 <MX_TIM3_Init+0x180>)
 8001068:	f004 fba6 	bl	80057b8 <HAL_TIM_SlaveConfigSynchro>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8001072:	f000 f8c1 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	4619      	mov	r1, r3
 8001084:	4827      	ldr	r0, [pc, #156]	@ (8001124 <MX_TIM3_Init+0x180>)
 8001086:	f005 f977 	bl	8006378 <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001090:	f000 f8b2 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001094:	2330      	movs	r3, #48	@ 0x30
 8001096:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = NO_TOG; // 0;
 8001098:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800109c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800109e:	2302      	movs	r3, #2
 80010a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	2200      	movs	r2, #0
 80010aa:	4619      	mov	r1, r3
 80010ac:	481d      	ldr	r0, [pc, #116]	@ (8001124 <MX_TIM3_Init+0x180>)
 80010ae:	f004 f8df 	bl	8005270 <HAL_TIM_OC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80010b8:	f000 f89e 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010bc:	2360      	movs	r3, #96	@ 0x60
 80010be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = HSYNCCOUNTS; // 208;
 80010c0:	234b      	movs	r3, #75	@ 0x4b
 80010c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2204      	movs	r2, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4816      	ldr	r0, [pc, #88]	@ (8001124 <MX_TIM3_Init+0x180>)
 80010cc:	f004 f94a 	bl	8005364 <HAL_TIM_PWM_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM3_Init+0x136>
  {
    Error_Handler();
 80010d6:	f000 f88f 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 208;
 80010de:	23d0      	movs	r3, #208	@ 0xd0
 80010e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2208      	movs	r2, #8
 80010e6:	4619      	mov	r1, r3
 80010e8:	480e      	ldr	r0, [pc, #56]	@ (8001124 <MX_TIM3_Init+0x180>)
 80010ea:	f004 f8c1 	bl	8005270 <HAL_TIM_OC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM3_Init+0x154>
  {
    Error_Handler();
 80010f4:	f000 f880 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.Pulse = 880;
 80010f8:	f44f 735c 	mov.w	r3, #880	@ 0x370
 80010fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	220c      	movs	r2, #12
 8001102:	4619      	mov	r1, r3
 8001104:	4807      	ldr	r0, [pc, #28]	@ (8001124 <MX_TIM3_Init+0x180>)
 8001106:	f004 f8b3 	bl	8005270 <HAL_TIM_OC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM3_Init+0x170>
  {
    Error_Handler();
 8001110:	f000 f872 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  //TIM_DMACmd(TIM3, TIM_DMA_CC1|TIM_DMA_CC3, ENABLE);
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001114:	4803      	ldr	r0, [pc, #12]	@ (8001124 <MX_TIM3_Init+0x180>)
 8001116:	f000 fb9d 	bl	8001854 <HAL_TIM_MspPostInit>

}
 800111a:	bf00      	nop
 800111c:	3750      	adds	r7, #80	@ 0x50
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000341c 	.word	0x2000341c
 8001128:	40000400 	.word	0x40000400

0800112c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001132:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <MX_DMA_Init+0x80>)
 8001134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001136:	4a1d      	ldr	r2, [pc, #116]	@ (80011ac <MX_DMA_Init+0x80>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6493      	str	r3, [r2, #72]	@ 0x48
 800113e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <MX_DMA_Init+0x80>)
 8001140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800114a:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <MX_DMA_Init+0x80>)
 800114c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800114e:	4a17      	ldr	r2, [pc, #92]	@ (80011ac <MX_DMA_Init+0x80>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6493      	str	r3, [r2, #72]	@ 0x48
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <MX_DMA_Init+0x80>)
 8001158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	200c      	movs	r0, #12
 8001168:	f000 fef3 	bl	8001f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800116c:	200c      	movs	r0, #12
 800116e:	f000 ff0a 	bl	8001f86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	200d      	movs	r0, #13
 8001178:	f000 feeb 	bl	8001f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800117c:	200d      	movs	r0, #13
 800117e:	f000 ff02 	bl	8001f86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	200f      	movs	r0, #15
 8001188:	f000 fee3 	bl	8001f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800118c:	200f      	movs	r0, #15
 800118e:	f000 fefa 	bl	8001f86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2010      	movs	r0, #16
 8001198:	f000 fedb 	bl	8001f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800119c:	2010      	movs	r0, #16
 800119e:	f000 fef2 	bl	8001f86 <HAL_NVIC_EnableIRQ>

}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000

080011b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <MX_GPIO_Init+0x44>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	4a0e      	ldr	r2, [pc, #56]	@ (80011f4 <MX_GPIO_Init+0x44>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_GPIO_Init+0x44>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_GPIO_Init+0x44>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	4a08      	ldr	r2, [pc, #32]	@ (80011f4 <MX_GPIO_Init+0x44>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <MX_GPIO_Init+0x44>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */


  /* USER CODE END MX_GPIO_Init_2 */
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <Error_Handler+0x8>

08001204 <introScreen>:
	}
	Paused = !Paused;
}

void introScreen(char *subtitle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	vidClearScreen();
 800120c:	f000 fd20 	bl	8001c50 <vidClearScreen>
	gdiDrawTextEx(120, 40, KOPTEKST);
 8001210:	4a0d      	ldr	r2, [pc, #52]	@ (8001248 <introScreen+0x44>)
 8001212:	2128      	movs	r1, #40	@ 0x28
 8001214:	2078      	movs	r0, #120	@ 0x78
 8001216:	f7ff fcdf 	bl	8000bd8 <gdiDrawTextEx>
	gdiDrawTextEx(100, 50, SUBTITEL);
 800121a:	4a0c      	ldr	r2, [pc, #48]	@ (800124c <introScreen+0x48>)
 800121c:	2132      	movs	r1, #50	@ 0x32
 800121e:	2064      	movs	r0, #100	@ 0x64
 8001220:	f7ff fcda 	bl	8000bd8 <gdiDrawTextEx>
	DelayMs(2000); gdiDrawTextEx(110, 60, subtitle);
 8001224:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001228:	f7ff fd0a 	bl	8000c40 <DelayMs>
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	213c      	movs	r1, #60	@ 0x3c
 8001230:	206e      	movs	r0, #110	@ 0x6e
 8001232:	f7ff fcd1 	bl	8000bd8 <gdiDrawTextEx>
	DelayMs(3000);
 8001236:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800123a:	f7ff fd01 	bl	8000c40 <DelayMs>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	08007570 	.word	0x08007570
 800124c:	0800757c 	.word	0x0800757c

08001250 <show>:

void show(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af02      	add	r7, sp, #8
	int16_t		x1, y1, x2, y2, i;

//	Demo Point
	introScreen("point demonstration");
 8001256:	48a7      	ldr	r0, [pc, #668]	@ (80014f4 <show+0x2a4>)
 8001258:	f7ff ffd4 	bl	8001204 <introScreen>
	for (i = 0; i < 500; i++) {
 800125c:	2300      	movs	r3, #0
 800125e:	81bb      	strh	r3, [r7, #12]
 8001260:	e02e      	b.n	80012c0 <show+0x70>
		DelayMs(10);
 8001262:	200a      	movs	r0, #10
 8001264:	f7ff fcec 	bl	8000c40 <DelayMs>
		x1 = rand() % VID_PIXELS_X;
 8001268:	f005 f990 	bl	800658c <rand>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	0913      	lsrs	r3, r2, #4
 8001272:	49a1      	ldr	r1, [pc, #644]	@ (80014f8 <show+0x2a8>)
 8001274:	fba1 1303 	umull	r1, r3, r1, r3
 8001278:	085b      	lsrs	r3, r3, #1
 800127a:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 800127e:	fb01 f303 	mul.w	r3, r1, r3
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	81fb      	strh	r3, [r7, #14]
		y1 = rand() % VID_PIXELS_Y;
 8001286:	f005 f981 	bl	800658c <rand>
 800128a:	4602      	mov	r2, r0
 800128c:	4b9b      	ldr	r3, [pc, #620]	@ (80014fc <show+0x2ac>)
 800128e:	fb83 1302 	smull	r1, r3, r3, r2
 8001292:	4413      	add	r3, r2
 8001294:	11d9      	asrs	r1, r3, #7
 8001296:	17d3      	asrs	r3, r2, #31
 8001298:	1ac9      	subs	r1, r1, r3
 800129a:	460b      	mov	r3, r1
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	1a5b      	subs	r3, r3, r1
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	1ad1      	subs	r1, r2, r3
 80012a4:	460b      	mov	r3, r1
 80012a6:	817b      	strh	r3, [r7, #10]
		gdiPoint(NULL,x1,y1);
 80012a8:	89fb      	ldrh	r3, [r7, #14]
 80012aa:	897a      	ldrh	r2, [r7, #10]
 80012ac:	4619      	mov	r1, r3
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff fb08 	bl	80008c4 <gdiPoint>
	for (i = 0; i < 500; i++) {
 80012b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	3301      	adds	r3, #1
 80012bc:	b29b      	uxth	r3, r3
 80012be:	81bb      	strh	r3, [r7, #12]
 80012c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012c4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012c8:	dbcb      	blt.n	8001262 <show+0x12>
	}
	DelayMs(3000);
 80012ca:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80012ce:	f7ff fcb7 	bl	8000c40 <DelayMs>

//	Demo Line
	introScreen("line demonstration");
 80012d2:	488b      	ldr	r0, [pc, #556]	@ (8001500 <show+0x2b0>)
 80012d4:	f7ff ff96 	bl	8001204 <introScreen>
	for (i = 0; i < 50; i++) {
 80012d8:	2300      	movs	r3, #0
 80012da:	81bb      	strh	r3, [r7, #12]
 80012dc:	e055      	b.n	800138a <show+0x13a>
		DelayMs(150);
 80012de:	2096      	movs	r0, #150	@ 0x96
 80012e0:	f7ff fcae 	bl	8000c40 <DelayMs>
		x1 = rand() % VID_PIXELS_X;
 80012e4:	f005 f952 	bl	800658c <rand>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	0913      	lsrs	r3, r2, #4
 80012ee:	4982      	ldr	r1, [pc, #520]	@ (80014f8 <show+0x2a8>)
 80012f0:	fba1 1303 	umull	r1, r3, r1, r3
 80012f4:	085b      	lsrs	r3, r3, #1
 80012f6:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80012fa:	fb01 f303 	mul.w	r3, r1, r3
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	81fb      	strh	r3, [r7, #14]
		y1 = rand() % VID_PIXELS_Y;
 8001302:	f005 f943 	bl	800658c <rand>
 8001306:	4602      	mov	r2, r0
 8001308:	4b7c      	ldr	r3, [pc, #496]	@ (80014fc <show+0x2ac>)
 800130a:	fb83 1302 	smull	r1, r3, r3, r2
 800130e:	4413      	add	r3, r2
 8001310:	11d9      	asrs	r1, r3, #7
 8001312:	17d3      	asrs	r3, r2, #31
 8001314:	1ac9      	subs	r1, r1, r3
 8001316:	460b      	mov	r3, r1
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	1a5b      	subs	r3, r3, r1
 800131c:	011b      	lsls	r3, r3, #4
 800131e:	1ad1      	subs	r1, r2, r3
 8001320:	460b      	mov	r3, r1
 8001322:	817b      	strh	r3, [r7, #10]
		x2 = rand() % VID_PIXELS_X;
 8001324:	f005 f932 	bl	800658c <rand>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	0913      	lsrs	r3, r2, #4
 800132e:	4972      	ldr	r1, [pc, #456]	@ (80014f8 <show+0x2a8>)
 8001330:	fba1 1303 	umull	r1, r3, r1, r3
 8001334:	085b      	lsrs	r3, r3, #1
 8001336:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 800133a:	fb01 f303 	mul.w	r3, r1, r3
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	813b      	strh	r3, [r7, #8]
		y2 = rand() % VID_PIXELS_Y;
 8001342:	f005 f923 	bl	800658c <rand>
 8001346:	4602      	mov	r2, r0
 8001348:	4b6c      	ldr	r3, [pc, #432]	@ (80014fc <show+0x2ac>)
 800134a:	fb83 1302 	smull	r1, r3, r3, r2
 800134e:	4413      	add	r3, r2
 8001350:	11d9      	asrs	r1, r3, #7
 8001352:	17d3      	asrs	r3, r2, #31
 8001354:	1ac9      	subs	r1, r1, r3
 8001356:	460b      	mov	r3, r1
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	1a5b      	subs	r3, r3, r1
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	1ad1      	subs	r1, r2, r3
 8001360:	460b      	mov	r3, r1
 8001362:	80fb      	strh	r3, [r7, #6]
		gdiLine(NULL,x1,y1,x2,y2);
 8001364:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8001368:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800136c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	4603      	mov	r3, r0
 8001378:	2000      	movs	r0, #0
 800137a:	f7ff fb09 	bl	8000990 <gdiLine>
	for (i = 0; i < 50; i++) {
 800137e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001382:	b29b      	uxth	r3, r3
 8001384:	3301      	adds	r3, #1
 8001386:	b29b      	uxth	r3, r3
 8001388:	81bb      	strh	r3, [r7, #12]
 800138a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800138e:	2b31      	cmp	r3, #49	@ 0x31
 8001390:	dda5      	ble.n	80012de <show+0x8e>
	}
	DelayMs(3000);
 8001392:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001396:	f7ff fc53 	bl	8000c40 <DelayMs>

//	Demo Rectangle
	introScreen("rectangle demonstration");
 800139a:	485a      	ldr	r0, [pc, #360]	@ (8001504 <show+0x2b4>)
 800139c:	f7ff ff32 	bl	8001204 <introScreen>
	for (i = 0; i < 15; i++) {
 80013a0:	2300      	movs	r3, #0
 80013a2:	81bb      	strh	r3, [r7, #12]
 80013a4:	e051      	b.n	800144a <show+0x1fa>
		DelayMs(600);
 80013a6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80013aa:	f7ff fc49 	bl	8000c40 <DelayMs>
		x1 = rand() % VID_PIXELS_X;
 80013ae:	f005 f8ed 	bl	800658c <rand>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	0913      	lsrs	r3, r2, #4
 80013b8:	494f      	ldr	r1, [pc, #316]	@ (80014f8 <show+0x2a8>)
 80013ba:	fba1 1303 	umull	r1, r3, r1, r3
 80013be:	085b      	lsrs	r3, r3, #1
 80013c0:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80013c4:	fb01 f303 	mul.w	r3, r1, r3
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	81fb      	strh	r3, [r7, #14]
		y1 = rand() % VID_PIXELS_Y;
 80013cc:	f005 f8de 	bl	800658c <rand>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b4a      	ldr	r3, [pc, #296]	@ (80014fc <show+0x2ac>)
 80013d4:	fb83 1302 	smull	r1, r3, r3, r2
 80013d8:	4413      	add	r3, r2
 80013da:	11d9      	asrs	r1, r3, #7
 80013dc:	17d3      	asrs	r3, r2, #31
 80013de:	1ac9      	subs	r1, r1, r3
 80013e0:	460b      	mov	r3, r1
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	1a5b      	subs	r3, r3, r1
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	1ad1      	subs	r1, r2, r3
 80013ea:	460b      	mov	r3, r1
 80013ec:	817b      	strh	r3, [r7, #10]
		x2 = rand() % 100;
 80013ee:	f005 f8cd 	bl	800658c <rand>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4a44      	ldr	r2, [pc, #272]	@ (8001508 <show+0x2b8>)
 80013f6:	fb82 1203 	smull	r1, r2, r2, r3
 80013fa:	1151      	asrs	r1, r2, #5
 80013fc:	17da      	asrs	r2, r3, #31
 80013fe:	1a8a      	subs	r2, r1, r2
 8001400:	2164      	movs	r1, #100	@ 0x64
 8001402:	fb01 f202 	mul.w	r2, r1, r2
 8001406:	1a9a      	subs	r2, r3, r2
 8001408:	4613      	mov	r3, r2
 800140a:	813b      	strh	r3, [r7, #8]
		y2 = rand() % 100;
 800140c:	f005 f8be 	bl	800658c <rand>
 8001410:	4603      	mov	r3, r0
 8001412:	4a3d      	ldr	r2, [pc, #244]	@ (8001508 <show+0x2b8>)
 8001414:	fb82 1203 	smull	r1, r2, r2, r3
 8001418:	1151      	asrs	r1, r2, #5
 800141a:	17da      	asrs	r2, r3, #31
 800141c:	1a8a      	subs	r2, r1, r2
 800141e:	2164      	movs	r1, #100	@ 0x64
 8001420:	fb01 f202 	mul.w	r2, r1, r2
 8001424:	1a9a      	subs	r2, r3, r2
 8001426:	4613      	mov	r3, r2
 8001428:	80fb      	strh	r3, [r7, #6]
		gdiRectangle(x1,y1,x2,y2);
 800142a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001432:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001436:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800143a:	f7ff fb85 	bl	8000b48 <gdiRectangle>
	for (i = 0; i < 15; i++) {
 800143e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001442:	b29b      	uxth	r3, r3
 8001444:	3301      	adds	r3, #1
 8001446:	b29b      	uxth	r3, r3
 8001448:	81bb      	strh	r3, [r7, #12]
 800144a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800144e:	2b0e      	cmp	r3, #14
 8001450:	dda9      	ble.n	80013a6 <show+0x156>
	}
	DelayMs(3000);
 8001452:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001456:	f7ff fbf3 	bl	8000c40 <DelayMs>
		gdiCircle(x,y,x1,GDI_ROP_COPY);
	}
	DelayMs(3000);
#endif
//	Demo Bitmap
	introScreen("bitmap demonstration");
 800145a:	482c      	ldr	r0, [pc, #176]	@ (800150c <show+0x2bc>)
 800145c:	f7ff fed2 	bl	8001204 <introScreen>
	x1 = VID_PIXELS_X / 8;
 8001460:	232a      	movs	r3, #42	@ 0x2a
 8001462:	81fb      	strh	r3, [r7, #14]
	y1 = 220;
 8001464:	23dc      	movs	r3, #220	@ 0xdc
 8001466:	817b      	strh	r3, [r7, #10]
	do {
		gdiBitBlt(NULL,x1,y1,15,12,(pBMP)((x1&1)?deBadBoys1:
 8001468:	89fb      	ldrh	r3, [r7, #14]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d108      	bne.n	8001484 <show+0x234>
				((x1&3)?deBadBoys2:deBadBoys0)));
 8001472:	89fb      	ldrh	r3, [r7, #14]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <show+0x230>
 800147c:	4b24      	ldr	r3, [pc, #144]	@ (8001510 <show+0x2c0>)
 800147e:	e002      	b.n	8001486 <show+0x236>
 8001480:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <show+0x2c4>)
 8001482:	e000      	b.n	8001486 <show+0x236>
		gdiBitBlt(NULL,x1,y1,15,12,(pBMP)((x1&1)?deBadBoys1:
 8001484:	4b24      	ldr	r3, [pc, #144]	@ (8001518 <show+0x2c8>)
 8001486:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800148a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	230c      	movs	r3, #12
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	230f      	movs	r3, #15
 8001496:	2000      	movs	r0, #0
 8001498:	f7fe ff12 	bl	80002c0 <gdiBitBlt>
		DelayMs(100);
 800149c:	2064      	movs	r0, #100	@ 0x64
 800149e:	f7ff fbcf 	bl	8000c40 <DelayMs>
	} while (x1++ < (VID_PIXELS_X * 7 / 8));
 80014a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014a6:	b293      	uxth	r3, r2
 80014a8:	3301      	adds	r3, #1
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	81fb      	strh	r3, [r7, #14]
 80014ae:	b293      	uxth	r3, r2
 80014b0:	f5b3 7f93 	cmp.w	r3, #294	@ 0x126
 80014b4:	d3d8      	bcc.n	8001468 <show+0x218>
	DelayMs(3000);
 80014b6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014ba:	f7ff fbc1 	bl	8000c40 <DelayMs>

// Goodbye
	introScreen("font size 6x10, 42 * 24 text");
 80014be:	4817      	ldr	r0, [pc, #92]	@ (800151c <show+0x2cc>)
 80014c0:	f7ff fea0 	bl	8001204 <introScreen>

	gdiDrawTextEx(80, 90, "ARM MCU development");
 80014c4:	4a16      	ldr	r2, [pc, #88]	@ (8001520 <show+0x2d0>)
 80014c6:	215a      	movs	r1, #90	@ 0x5a
 80014c8:	2050      	movs	r0, #80	@ 0x50
 80014ca:	f7ff fb85 	bl	8000bd8 <gdiDrawTextEx>
	gdiDrawTextEx(95, 120, "by E.J.W. VRIEZE");
 80014ce:	4a15      	ldr	r2, [pc, #84]	@ (8001524 <show+0x2d4>)
 80014d0:	2178      	movs	r1, #120	@ 0x78
 80014d2:	205f      	movs	r0, #95	@ 0x5f
 80014d4:	f7ff fb80 	bl	8000bd8 <gdiDrawTextEx>
	gdiDrawTextEx(95, 130, "~~~~~ 2016 ~~~~~");
 80014d8:	4a13      	ldr	r2, [pc, #76]	@ (8001528 <show+0x2d8>)
 80014da:	2182      	movs	r1, #130	@ 0x82
 80014dc:	205f      	movs	r0, #95	@ 0x5f
 80014de:	f7ff fb7b 	bl	8000bd8 <gdiDrawTextEx>
	DelayMs(9000);
 80014e2:	f242 3028 	movw	r0, #9000	@ 0x2328
 80014e6:	f7ff fbab 	bl	8000c40 <DelayMs>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	08007594 	.word	0x08007594
 80014f8:	18618619 	.word	0x18618619
 80014fc:	88888889 	.word	0x88888889
 8001500:	080075a8 	.word	0x080075a8
 8001504:	080075bc 	.word	0x080075bc
 8001508:	51eb851f 	.word	0x51eb851f
 800150c:	080075d4 	.word	0x080075d4
 8001510:	08007a58 	.word	0x08007a58
 8001514:	08007a28 	.word	0x08007a28
 8001518:	08007a40 	.word	0x08007a40
 800151c:	080075ec 	.word	0x080075ec
 8001520:	0800760c 	.word	0x0800760c
 8001524:	08007620 	.word	0x08007620
 8001528:	08007634 	.word	0x08007634

0800152c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <HAL_MspInit+0x44>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001536:	4a0e      	ldr	r2, [pc, #56]	@ (8001570 <HAL_MspInit+0x44>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6613      	str	r3, [r2, #96]	@ 0x60
 800153e:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <HAL_MspInit+0x44>)
 8001540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <HAL_MspInit+0x44>)
 800154c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154e:	4a08      	ldr	r2, [pc, #32]	@ (8001570 <HAL_MspInit+0x44>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001554:	6593      	str	r3, [r2, #88]	@ 0x58
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_MspInit+0x44>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001562:	f001 fb5b 	bl	8002c1c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000

08001574 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b09e      	sub	sp, #120	@ 0x78
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	2254      	movs	r2, #84	@ 0x54
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f005 f93c 	bl	8006812 <memset>
  if(hi2s->Instance==SPI2)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a35      	ldr	r2, [pc, #212]	@ (8001674 <HAL_I2S_MspInit+0x100>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d163      	bne.n	800166c <HAL_I2S_MspInit+0xf8>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80015a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ae:	f107 0310 	add.w	r3, r7, #16
 80015b2:	4618      	mov	r0, r3
 80015b4:	f002 f870 	bl	8003698 <HAL_RCCEx_PeriphCLKConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 80015be:	f7ff fe1b 	bl	80011f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001678 <HAL_I2S_MspInit+0x104>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001678 <HAL_I2S_MspInit+0x104>)
 80015c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001678 <HAL_I2S_MspInit+0x104>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <HAL_I2S_MspInit+0x104>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	4a26      	ldr	r2, [pc, #152]	@ (8001678 <HAL_I2S_MspInit+0x104>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e6:	4b24      	ldr	r3, [pc, #144]	@ (8001678 <HAL_I2S_MspInit+0x104>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80015f2:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80015f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001604:	2305      	movs	r3, #5
 8001606:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800160c:	4619      	mov	r1, r3
 800160e:	481b      	ldr	r0, [pc, #108]	@ (800167c <HAL_I2S_MspInit+0x108>)
 8001610:	f000 ff8a 	bl	8002528 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <HAL_I2S_MspInit+0x10c>)
 8001616:	4a1b      	ldr	r2, [pc, #108]	@ (8001684 <HAL_I2S_MspInit+0x110>)
 8001618:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800161a:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <HAL_I2S_MspInit+0x10c>)
 800161c:	220d      	movs	r2, #13
 800161e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001620:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <HAL_I2S_MspInit+0x10c>)
 8001622:	2210      	movs	r2, #16
 8001624:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001626:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <HAL_I2S_MspInit+0x10c>)
 8001628:	2200      	movs	r2, #0
 800162a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <HAL_I2S_MspInit+0x10c>)
 800162e:	2280      	movs	r2, #128	@ 0x80
 8001630:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001632:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <HAL_I2S_MspInit+0x10c>)
 8001634:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001638:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800163a:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <HAL_I2S_MspInit+0x10c>)
 800163c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001640:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001642:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <HAL_I2S_MspInit+0x10c>)
 8001644:	2220      	movs	r2, #32
 8001646:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001648:	4b0d      	ldr	r3, [pc, #52]	@ (8001680 <HAL_I2S_MspInit+0x10c>)
 800164a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800164e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001650:	480b      	ldr	r0, [pc, #44]	@ (8001680 <HAL_I2S_MspInit+0x10c>)
 8001652:	f000 fcb3 	bl	8001fbc <HAL_DMA_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_I2S_MspInit+0xec>
    {
      Error_Handler();
 800165c:	f7ff fdcc 	bl	80011f8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a07      	ldr	r2, [pc, #28]	@ (8001680 <HAL_I2S_MspInit+0x10c>)
 8001664:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001666:	4a06      	ldr	r2, [pc, #24]	@ (8001680 <HAL_I2S_MspInit+0x10c>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800166c:	bf00      	nop
 800166e:	3778      	adds	r7, #120	@ 0x78
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40003800 	.word	0x40003800
 8001678:	40021000 	.word	0x40021000
 800167c:	48000400 	.word	0x48000400
 8001680:	20003370 	.word	0x20003370
 8001684:	40020058 	.word	0x40020058

08001688 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	@ 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016a8:	d129      	bne.n	80016fe <HAL_TIM_Base_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016aa:	4b62      	ldr	r3, [pc, #392]	@ (8001834 <HAL_TIM_Base_MspInit+0x1ac>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ae:	4a61      	ldr	r2, [pc, #388]	@ (8001834 <HAL_TIM_Base_MspInit+0x1ac>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001834 <HAL_TIM_Base_MspInit+0x1ac>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001834 <HAL_TIM_Base_MspInit+0x1ac>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001834 <HAL_TIM_Base_MspInit+0x1ac>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ce:	4b59      	ldr	r3, [pc, #356]	@ (8001834 <HAL_TIM_Base_MspInit+0x1ac>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016da:	2301      	movs	r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 80016ea:	230e      	movs	r3, #14
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f8:	f000 ff16 	bl	8002528 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016fc:	e095      	b.n	800182a <HAL_TIM_Base_MspInit+0x1a2>
  else if(htim_base->Instance==TIM3)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a4d      	ldr	r2, [pc, #308]	@ (8001838 <HAL_TIM_Base_MspInit+0x1b0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	f040 8090 	bne.w	800182a <HAL_TIM_Base_MspInit+0x1a2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800170a:	4b4a      	ldr	r3, [pc, #296]	@ (8001834 <HAL_TIM_Base_MspInit+0x1ac>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170e:	4a49      	ldr	r2, [pc, #292]	@ (8001834 <HAL_TIM_Base_MspInit+0x1ac>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6593      	str	r3, [r2, #88]	@ 0x58
 8001716:	4b47      	ldr	r3, [pc, #284]	@ (8001834 <HAL_TIM_Base_MspInit+0x1ac>)
 8001718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Channel6;
 8001722:	4b46      	ldr	r3, [pc, #280]	@ (800183c <HAL_TIM_Base_MspInit+0x1b4>)
 8001724:	4a46      	ldr	r2, [pc, #280]	@ (8001840 <HAL_TIM_Base_MspInit+0x1b8>)
 8001726:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001728:	4b44      	ldr	r3, [pc, #272]	@ (800183c <HAL_TIM_Base_MspInit+0x1b4>)
 800172a:	223d      	movs	r2, #61	@ 0x3d
 800172c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800172e:	4b43      	ldr	r3, [pc, #268]	@ (800183c <HAL_TIM_Base_MspInit+0x1b4>)
 8001730:	2210      	movs	r2, #16
 8001732:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001734:	4b41      	ldr	r3, [pc, #260]	@ (800183c <HAL_TIM_Base_MspInit+0x1b4>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800173a:	4b40      	ldr	r3, [pc, #256]	@ (800183c <HAL_TIM_Base_MspInit+0x1b4>)
 800173c:	2280      	movs	r2, #128	@ 0x80
 800173e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001740:	4b3e      	ldr	r3, [pc, #248]	@ (800183c <HAL_TIM_Base_MspInit+0x1b4>)
 8001742:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001746:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001748:	4b3c      	ldr	r3, [pc, #240]	@ (800183c <HAL_TIM_Base_MspInit+0x1b4>)
 800174a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800174e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_CIRCULAR;
 8001750:	4b3a      	ldr	r3, [pc, #232]	@ (800183c <HAL_TIM_Base_MspInit+0x1b4>)
 8001752:	2220      	movs	r2, #32
 8001754:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001756:	4b39      	ldr	r3, [pc, #228]	@ (800183c <HAL_TIM_Base_MspInit+0x1b4>)
 8001758:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800175c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800175e:	4837      	ldr	r0, [pc, #220]	@ (800183c <HAL_TIM_Base_MspInit+0x1b4>)
 8001760:	f000 fc2c 	bl	8001fbc <HAL_DMA_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_TIM_Base_MspInit+0xe6>
      Error_Handler();
 800176a:	f7ff fd45 	bl	80011f8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a32      	ldr	r2, [pc, #200]	@ (800183c <HAL_TIM_Base_MspInit+0x1b4>)
 8001772:	625a      	str	r2, [r3, #36]	@ 0x24
 8001774:	4a31      	ldr	r2, [pc, #196]	@ (800183c <HAL_TIM_Base_MspInit+0x1b4>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 800177a:	4b32      	ldr	r3, [pc, #200]	@ (8001844 <HAL_TIM_Base_MspInit+0x1bc>)
 800177c:	4a32      	ldr	r2, [pc, #200]	@ (8001848 <HAL_TIM_Base_MspInit+0x1c0>)
 800177e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 8001780:	4b30      	ldr	r3, [pc, #192]	@ (8001844 <HAL_TIM_Base_MspInit+0x1bc>)
 8001782:	223f      	movs	r2, #63	@ 0x3f
 8001784:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001786:	4b2f      	ldr	r3, [pc, #188]	@ (8001844 <HAL_TIM_Base_MspInit+0x1bc>)
 8001788:	2210      	movs	r2, #16
 800178a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800178c:	4b2d      	ldr	r3, [pc, #180]	@ (8001844 <HAL_TIM_Base_MspInit+0x1bc>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001792:	4b2c      	ldr	r3, [pc, #176]	@ (8001844 <HAL_TIM_Base_MspInit+0x1bc>)
 8001794:	2280      	movs	r2, #128	@ 0x80
 8001796:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001798:	4b2a      	ldr	r3, [pc, #168]	@ (8001844 <HAL_TIM_Base_MspInit+0x1bc>)
 800179a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800179e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017a0:	4b28      	ldr	r3, [pc, #160]	@ (8001844 <HAL_TIM_Base_MspInit+0x1bc>)
 80017a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017a6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 80017a8:	4b26      	ldr	r3, [pc, #152]	@ (8001844 <HAL_TIM_Base_MspInit+0x1bc>)
 80017aa:	2220      	movs	r2, #32
 80017ac:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017ae:	4b25      	ldr	r3, [pc, #148]	@ (8001844 <HAL_TIM_Base_MspInit+0x1bc>)
 80017b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 80017b6:	4823      	ldr	r0, [pc, #140]	@ (8001844 <HAL_TIM_Base_MspInit+0x1bc>)
 80017b8:	f000 fc00 	bl	8001fbc <HAL_DMA_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_TIM_Base_MspInit+0x13e>
      Error_Handler();
 80017c2:	f7ff fd19 	bl	80011f8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001844 <HAL_TIM_Base_MspInit+0x1bc>)
 80017ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001844 <HAL_TIM_Base_MspInit+0x1bc>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim3_ch4.Instance = DMA1_Channel3;
 80017d2:	4b1e      	ldr	r3, [pc, #120]	@ (800184c <HAL_TIM_Base_MspInit+0x1c4>)
 80017d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001850 <HAL_TIM_Base_MspInit+0x1c8>)
 80017d6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 80017d8:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <HAL_TIM_Base_MspInit+0x1c4>)
 80017da:	2240      	movs	r2, #64	@ 0x40
 80017dc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017de:	4b1b      	ldr	r3, [pc, #108]	@ (800184c <HAL_TIM_Base_MspInit+0x1c4>)
 80017e0:	2210      	movs	r2, #16
 80017e2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e4:	4b19      	ldr	r3, [pc, #100]	@ (800184c <HAL_TIM_Base_MspInit+0x1c4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80017ea:	4b18      	ldr	r3, [pc, #96]	@ (800184c <HAL_TIM_Base_MspInit+0x1c4>)
 80017ec:	2280      	movs	r2, #128	@ 0x80
 80017ee:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017f0:	4b16      	ldr	r3, [pc, #88]	@ (800184c <HAL_TIM_Base_MspInit+0x1c4>)
 80017f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017f6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017f8:	4b14      	ldr	r3, [pc, #80]	@ (800184c <HAL_TIM_Base_MspInit+0x1c4>)
 80017fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017fe:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_CIRCULAR;
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_TIM_Base_MspInit+0x1c4>)
 8001802:	2220      	movs	r2, #32
 8001804:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001806:	4b11      	ldr	r3, [pc, #68]	@ (800184c <HAL_TIM_Base_MspInit+0x1c4>)
 8001808:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800180c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 800180e:	480f      	ldr	r0, [pc, #60]	@ (800184c <HAL_TIM_Base_MspInit+0x1c4>)
 8001810:	f000 fbd4 	bl	8001fbc <HAL_DMA_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_TIM_Base_MspInit+0x196>
      Error_Handler();
 800181a:	f7ff fced 	bl	80011f8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a0a      	ldr	r2, [pc, #40]	@ (800184c <HAL_TIM_Base_MspInit+0x1c4>)
 8001822:	631a      	str	r2, [r3, #48]	@ 0x30
 8001824:	4a09      	ldr	r2, [pc, #36]	@ (800184c <HAL_TIM_Base_MspInit+0x1c4>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	@ 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	40000400 	.word	0x40000400
 800183c:	20003468 	.word	0x20003468
 8001840:	4002006c 	.word	0x4002006c
 8001844:	200034c8 	.word	0x200034c8
 8001848:	4002001c 	.word	0x4002001c
 800184c:	20003528 	.word	0x20003528
 8001850:	40020030 	.word	0x40020030

08001854 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	@ 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001874:	d11d      	bne.n	80018b2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b22      	ldr	r3, [pc, #136]	@ (8001900 <HAL_TIM_MspPostInit+0xac>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187a:	4a21      	ldr	r2, [pc, #132]	@ (8001900 <HAL_TIM_MspPostInit+0xac>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001882:	4b1f      	ldr	r3, [pc, #124]	@ (8001900 <HAL_TIM_MspPostInit+0xac>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800188e:	2308      	movs	r3, #8
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800189e:	2301      	movs	r3, #1
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ac:	f000 fe3c 	bl	8002528 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018b0:	e021      	b.n	80018f6 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a13      	ldr	r2, [pc, #76]	@ (8001904 <HAL_TIM_MspPostInit+0xb0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d11c      	bne.n	80018f6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <HAL_TIM_MspPostInit+0xac>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001900 <HAL_TIM_MspPostInit+0xac>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <HAL_TIM_MspPostInit+0xac>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80018d4:	2350      	movs	r3, #80	@ 0x50
 80018d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d8:	2312      	movs	r3, #18
 80018da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018e4:	2302      	movs	r3, #2
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4619      	mov	r1, r3
 80018ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f2:	f000 fe19 	bl	8002528 <HAL_GPIO_Init>
}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	@ 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	40000400 	.word	0x40000400

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <NMI_Handler+0x4>

08001910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <HardFault_Handler+0x4>

08001918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <MemManage_Handler+0x4>

08001920 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <BusFault_Handler+0x4>

08001928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <UsageFault_Handler+0x4>

08001930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001960:	f000 f9fe 	bl	8001d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (TimingDelay) {
 8001964:	4b05      	ldr	r3, [pc, #20]	@ (800197c <SysTick_Handler+0x20>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d004      	beq.n	8001976 <SysTick_Handler+0x1a>
    TimingDelay--;
 800196c:	4b03      	ldr	r3, [pc, #12]	@ (800197c <SysTick_Handler+0x20>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	3b01      	subs	r3, #1
 8001972:	4a02      	ldr	r2, [pc, #8]	@ (800197c <SysTick_Handler+0x20>)
 8001974:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2000358c 	.word	0x2000358c

08001980 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <DMA1_Channel2_IRQHandler+0x10>)
 8001986:	f000 fc7f 	bl	8002288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200034c8 	.word	0x200034c8

08001994 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 8001998:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <DMA1_Channel3_IRQHandler+0x10>)
 800199a:	f000 fc75 	bl	8002288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20003528 	.word	0x20003528

080019a8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80019ac:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <DMA1_Channel5_IRQHandler+0x10>)
 80019ae:	f000 fc6b 	bl	8002288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20003370 	.word	0x20003370

080019bc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80019c0:	4802      	ldr	r0, [pc, #8]	@ (80019cc <DMA1_Channel6_IRQHandler+0x10>)
 80019c2:	f000 fc61 	bl	8002288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20003468 	.word	0x20003468

080019d0 <HAL_TIM_PeriodElapsedCallback>:
//    __HAL_DMA_ENABLE(&hdma_spi2_tx);
//  }
//}
// called on every 64 µs rollover
// called on every timer *overflow* (64 µs)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a05      	ldr	r2, [pc, #20]	@ (80019f4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d102      	bne.n	80019e8 <HAL_TIM_PeriodElapsedCallback+0x18>
    lineIndex = FIRST_VISIBLE_LINE;
 80019e2:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80019e4:	2208      	movs	r2, #8
 80019e6:	801a      	strh	r2, [r3, #0]
  }
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	40000400 	.word	0x40000400
 80019f8:	20002762 	.word	0x20002762

080019fc <HAL_TIM_OC_DelayElapsedCallback>:

// called each time CC1 fires (the sync-end)
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3 &&
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1c      	ldr	r2, [pc, #112]	@ (8001a7c <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d12f      	bne.n	8001a6e <HAL_TIM_OC_DelayElapsedCallback+0x72>
      htim->Channel  == HAL_TIM_ACTIVE_CHANNEL_1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7f1b      	ldrb	r3, [r3, #28]
  if (htim->Instance == TIM3 &&
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d12b      	bne.n	8001a6e <HAL_TIM_OC_DelayElapsedCallback+0x72>
  {
    // stop the old I2S DMA
    __HAL_DMA_DISABLE(&hdma_spi2_tx);
 8001a16:	4b1a      	ldr	r3, [pc, #104]	@ (8001a80 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b18      	ldr	r3, [pc, #96]	@ (8001a80 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

    // advance & wrap *within* visible lines
    if (++lineIndex >= VID_VSIZE) {
 8001a26:	4b17      	ldr	r3, [pc, #92]	@ (8001a84 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	4a14      	ldr	r2, [pc, #80]	@ (8001a84 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8001a32:	4619      	mov	r1, r3
 8001a34:	8011      	strh	r1, [r2, #0]
 8001a36:	f5b3 7f1c 	cmp.w	r3, #624	@ 0x270
 8001a3a:	d902      	bls.n	8001a42 <HAL_TIM_OC_DelayElapsedCallback+0x46>
      lineIndex = FIRST_VISIBLE_LINE;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8001a3e:	2208      	movs	r2, #8
 8001a40:	801a      	strh	r2, [r3, #0]
    }

    // re-point and reload the I2S DMA
    hdma_spi2_tx.Instance->CMAR  = (uint32_t)lineptrs[lineIndex];
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a88 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8001a4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a50:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Instance->CNDTR = VID_HSIZE;
 8001a56:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_spi2_tx);
 8001a5e:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0201 	orr.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40000400 	.word	0x40000400
 8001a80:	20003370 	.word	0x20003370
 8001a84:	20002762 	.word	0x20002762
 8001a88:	200028e8 	.word	0x200028e8

08001a8c <TIM3_IRQHandler>:


void TIM3_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim3);
 8001a90:	4802      	ldr	r0, [pc, #8]	@ (8001a9c <TIM3_IRQHandler+0x10>)
 8001a92:	f003 fa9d 	bl	8004fd0 <HAL_TIM_IRQHandler>

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000341c 	.word	0x2000341c

08001aa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return 1;
 8001aa4:	2301      	movs	r3, #1
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_kill>:

int _kill(int pid, int sig)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aba:	f004 fef9 	bl	80068b0 <__errno>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2216      	movs	r2, #22
 8001ac2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_exit>:

void _exit (int status)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ad8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ffe7 	bl	8001ab0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ae2:	bf00      	nop
 8001ae4:	e7fd      	b.n	8001ae2 <_exit+0x12>

08001ae6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e00a      	b.n	8001b0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001af8:	f3af 8000 	nop.w
 8001afc:	4601      	mov	r1, r0
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	60ba      	str	r2, [r7, #8]
 8001b04:	b2ca      	uxtb	r2, r1
 8001b06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	dbf0      	blt.n	8001af8 <_read+0x12>
  }

  return len;
 8001b16:	687b      	ldr	r3, [r7, #4]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	e009      	b.n	8001b46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	60ba      	str	r2, [r7, #8]
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3301      	adds	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	dbf1      	blt.n	8001b32 <_write+0x12>
  }
  return len;
 8001b4e:	687b      	ldr	r3, [r7, #4]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <_close>:

int _close(int file)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b80:	605a      	str	r2, [r3, #4]
  return 0;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <_isatty>:

int _isatty(int file)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b98:	2301      	movs	r3, #1
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b085      	sub	sp, #20
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc8:	4a14      	ldr	r2, [pc, #80]	@ (8001c1c <_sbrk+0x5c>)
 8001bca:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <_sbrk+0x60>)
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd4:	4b13      	ldr	r3, [pc, #76]	@ (8001c24 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	@ (8001c24 <_sbrk+0x64>)
 8001bde:	4a12      	ldr	r2, [pc, #72]	@ (8001c28 <_sbrk+0x68>)
 8001be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be2:	4b10      	ldr	r3, [pc, #64]	@ (8001c24 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d207      	bcs.n	8001c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf0:	f004 fe5e 	bl	80068b0 <__errno>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bfe:	e009      	b.n	8001c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c00:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c06:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a05      	ldr	r2, [pc, #20]	@ (8001c24 <_sbrk+0x64>)
 8001c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20020000 	.word	0x20020000
 8001c20:	00000400 	.word	0x00000400
 8001c24:	20003590 	.word	0x20003590
 8001c28:	20003728 	.word	0x20003728

08001c2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c30:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <SystemInit+0x20>)
 8001c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c36:	4a05      	ldr	r2, [pc, #20]	@ (8001c4c <SystemInit+0x20>)
 8001c38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <vidClearScreen>:

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
const size_t LINES_PER_FIELD = sizeof(SyncTable)/sizeof(SyncTable[0]);
void vidClearScreen(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	{
		fb[line]				[0] = 0b1111111111111110;
		fb[line]  [XFERS_PERLINE-1] = 0b1111111111111110;
	}
#else
	memset(screen,0xFF,sizeof(screen));
 8001c54:	f242 7260 	movw	r2, #10080	@ 0x2760
 8001c58:	21ff      	movs	r1, #255	@ 0xff
 8001c5a:	4802      	ldr	r0, [pc, #8]	@ (8001c64 <vidClearScreen+0x14>)
 8001c5c:	f004 fdd9 	bl	8006812 <memset>
#endif

}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000000 	.word	0x20000000

08001c68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c68:	480d      	ldr	r0, [pc, #52]	@ (8001ca0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c6c:	f7ff ffde 	bl	8001c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c70:	480c      	ldr	r0, [pc, #48]	@ (8001ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c72:	490d      	ldr	r1, [pc, #52]	@ (8001ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c74:	4a0d      	ldr	r2, [pc, #52]	@ (8001cac <LoopForever+0xe>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c78:	e002      	b.n	8001c80 <LoopCopyDataInit>

08001c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7e:	3304      	adds	r3, #4

08001c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c84:	d3f9      	bcc.n	8001c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c88:	4c0a      	ldr	r4, [pc, #40]	@ (8001cb4 <LoopForever+0x16>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c8c:	e001      	b.n	8001c92 <LoopFillZerobss>

08001c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c90:	3204      	adds	r2, #4

08001c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c94:	d3fb      	bcc.n	8001c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c96:	f004 fe11 	bl	80068bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c9a:	f7fe ffed 	bl	8000c78 <main>

08001c9e <LoopForever>:

LoopForever:
    b LoopForever
 8001c9e:	e7fe      	b.n	8001c9e <LoopForever>
  ldr   r0, =_estack
 8001ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ca4:	20002760 	.word	0x20002760
  ldr r1, =_edata
 8001ca8:	20003310 	.word	0x20003310
  ldr r2, =_sidata
 8001cac:	08008090 	.word	0x08008090
  ldr r2, =_sbss
 8001cb0:	20003310 	.word	0x20003310
  ldr r4, =_ebss
 8001cb4:	20003724 	.word	0x20003724

08001cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC1_2_IRQHandler>

08001cba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	f000 f939 	bl	8001f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cca:	200f      	movs	r0, #15
 8001ccc:	f000 f80e 	bl	8001cec <HAL_InitTick>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	71fb      	strb	r3, [r7, #7]
 8001cda:	e001      	b.n	8001ce0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cdc:	f7ff fc26 	bl	800152c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ce0:	79fb      	ldrb	r3, [r7, #7]

}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001cf8:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <HAL_InitTick+0x68>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d022      	beq.n	8001d46 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d00:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <HAL_InitTick+0x6c>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <HAL_InitTick+0x68>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 f944 	bl	8001fa2 <HAL_SYSTICK_Config>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10f      	bne.n	8001d40 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b0f      	cmp	r3, #15
 8001d24:	d809      	bhi.n	8001d3a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d26:	2200      	movs	r2, #0
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d2e:	f000 f910 	bl	8001f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d32:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <HAL_InitTick+0x70>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	e007      	b.n	8001d4a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
 8001d3e:	e004      	b.n	8001d4a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	e001      	b.n	8001d4a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200032b0 	.word	0x200032b0
 8001d58:	20002764 	.word	0x20002764
 8001d5c:	200032ac 	.word	0x200032ac

08001d60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d64:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <HAL_IncTick+0x1c>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <HAL_IncTick+0x20>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4a03      	ldr	r2, [pc, #12]	@ (8001d7c <HAL_IncTick+0x1c>)
 8001d70:	6013      	str	r3, [r2, #0]
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	200035d4 	.word	0x200035d4
 8001d80:	200032b0 	.word	0x200032b0

08001d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return uwTick;
 8001d88:	4b03      	ldr	r3, [pc, #12]	@ (8001d98 <HAL_GetTick+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200035d4 	.word	0x200035d4

08001d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001db8:	4013      	ands	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de8:	4b04      	ldr	r3, [pc, #16]	@ (8001dfc <__NVIC_GetPriorityGrouping+0x18>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	f003 0307 	and.w	r3, r3, #7
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db0b      	blt.n	8001e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	4907      	ldr	r1, [pc, #28]	@ (8001e38 <__NVIC_EnableIRQ+0x38>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f202 	lsl.w	r2, r0, r2
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	@ (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	@ (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	@ 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	@ 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f08:	d301      	bcc.n	8001f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00f      	b.n	8001f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <SysTick_Config+0x40>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f16:	210f      	movs	r1, #15
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f1c:	f7ff ff8e 	bl	8001e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f20:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <SysTick_Config+0x40>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f26:	4b04      	ldr	r3, [pc, #16]	@ (8001f38 <SysTick_Config+0x40>)
 8001f28:	2207      	movs	r2, #7
 8001f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff29 	bl	8001d9c <__NVIC_SetPriorityGrouping>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f60:	f7ff ff40 	bl	8001de4 <__NVIC_GetPriorityGrouping>
 8001f64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	f7ff ff90 	bl	8001e90 <NVIC_EncodePriority>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff5f 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f7e:	bf00      	nop
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff33 	bl	8001e00 <__NVIC_EnableIRQ>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffa4 	bl	8001ef8 <SysTick_Config>
 8001fb0:	4603      	mov	r3, r0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e08d      	b.n	80020ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b47      	ldr	r3, [pc, #284]	@ (80020f4 <HAL_DMA_Init+0x138>)
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d80f      	bhi.n	8001ffa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4b45      	ldr	r3, [pc, #276]	@ (80020f8 <HAL_DMA_Init+0x13c>)
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4a45      	ldr	r2, [pc, #276]	@ (80020fc <HAL_DMA_Init+0x140>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	091b      	lsrs	r3, r3, #4
 8001fec:	009a      	lsls	r2, r3, #2
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a42      	ldr	r2, [pc, #264]	@ (8002100 <HAL_DMA_Init+0x144>)
 8001ff6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ff8:	e00e      	b.n	8002018 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b40      	ldr	r3, [pc, #256]	@ (8002104 <HAL_DMA_Init+0x148>)
 8002002:	4413      	add	r3, r2
 8002004:	4a3d      	ldr	r2, [pc, #244]	@ (80020fc <HAL_DMA_Init+0x140>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	009a      	lsls	r2, r3, #2
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a3c      	ldr	r2, [pc, #240]	@ (8002108 <HAL_DMA_Init+0x14c>)
 8002016:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800202e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002032:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800203c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002048:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002054:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f9fa 	bl	8002464 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002078:	d102      	bne.n	8002080 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002094:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d010      	beq.n	80020c0 <HAL_DMA_Init+0x104>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d80c      	bhi.n	80020c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 fa1a 	bl	80024e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	e008      	b.n	80020d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40020407 	.word	0x40020407
 80020f8:	bffdfff8 	.word	0xbffdfff8
 80020fc:	cccccccd 	.word	0xcccccccd
 8002100:	40020000 	.word	0x40020000
 8002104:	bffdfbf8 	.word	0xbffdfbf8
 8002108:	40020400 	.word	0x40020400

0800210c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_DMA_Start+0x20>
 8002128:	2302      	movs	r3, #2
 800212a:	e02e      	b.n	800218a <HAL_DMA_Start+0x7e>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d11d      	bne.n	800217c <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0201 	bic.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 f93e 	bl	80023e6 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0201 	orr.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	e005      	b.n	8002188 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    status = HAL_BUSY;
 8002184:	2302      	movs	r3, #2
 8002186:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002188:	7dfb      	ldrb	r3, [r7, #23]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_DMA_Start_IT+0x20>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e066      	b.n	8002280 <HAL_DMA_Start_IT+0xee>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d155      	bne.n	8002272 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2202      	movs	r2, #2
 80021ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f8fb 	bl	80023e6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 020e 	orr.w	r2, r2, #14
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e00f      	b.n	800222a <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0204 	bic.w	r2, r2, #4
 8002218:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 020a 	orr.w	r2, r2, #10
 8002228:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d007      	beq.n	8002248 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002242:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002246:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224c:	2b00      	cmp	r3, #0
 800224e:	d007      	beq.n	8002260 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800225e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	e005      	b.n	800227e <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800227a:	2302      	movs	r3, #2
 800227c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800227e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	2204      	movs	r2, #4
 80022aa:	409a      	lsls	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d026      	beq.n	8002302 <HAL_DMA_IRQHandler+0x7a>
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d021      	beq.n	8002302 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0320 	and.w	r3, r3, #32
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d107      	bne.n	80022dc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0204 	bic.w	r2, r2, #4
 80022da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	2104      	movs	r1, #4
 80022ea:	fa01 f202 	lsl.w	r2, r1, r2
 80022ee:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d071      	beq.n	80023dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002300:	e06c      	b.n	80023dc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2202      	movs	r2, #2
 800230c:	409a      	lsls	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d02e      	beq.n	8002374 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d029      	beq.n	8002374 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10b      	bne.n	8002346 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 020a 	bic.w	r2, r2, #10
 800233c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234a:	f003 021f 	and.w	r2, r3, #31
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	2102      	movs	r1, #2
 8002354:	fa01 f202 	lsl.w	r2, r1, r2
 8002358:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002366:	2b00      	cmp	r3, #0
 8002368:	d038      	beq.n	80023dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002372:	e033      	b.n	80023dc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	2208      	movs	r2, #8
 800237e:	409a      	lsls	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d02a      	beq.n	80023de <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d025      	beq.n	80023de <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 020e 	bic.w	r2, r2, #14
 80023a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	f003 021f 	and.w	r2, r3, #31
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	2101      	movs	r1, #1
 80023b0:	fa01 f202 	lsl.w	r2, r1, r2
 80023b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d004      	beq.n	80023de <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
}
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023fc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002402:	2b00      	cmp	r3, #0
 8002404:	d004      	beq.n	8002410 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800240e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002414:	f003 021f 	and.w	r2, r3, #31
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	2101      	movs	r1, #1
 800241e:	fa01 f202 	lsl.w	r2, r1, r2
 8002422:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b10      	cmp	r3, #16
 8002432:	d108      	bne.n	8002446 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002444:	e007      	b.n	8002456 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	60da      	str	r2, [r3, #12]
}
 8002456:	bf00      	nop
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	4b16      	ldr	r3, [pc, #88]	@ (80024cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002474:	429a      	cmp	r2, r3
 8002476:	d802      	bhi.n	800247e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002478:	4b15      	ldr	r3, [pc, #84]	@ (80024d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	e001      	b.n	8002482 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800247e:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002480:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	3b08      	subs	r3, #8
 800248e:	4a12      	ldr	r2, [pc, #72]	@ (80024d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249c:	089b      	lsrs	r3, r3, #2
 800249e:	009a      	lsls	r2, r3, #2
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4413      	add	r3, r2
 80024a4:	461a      	mov	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a0b      	ldr	r2, [pc, #44]	@ (80024dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80024ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	2201      	movs	r2, #1
 80024b8:	409a      	lsls	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80024be:	bf00      	nop
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40020407 	.word	0x40020407
 80024d0:	40020800 	.word	0x40020800
 80024d4:	40020820 	.word	0x40020820
 80024d8:	cccccccd 	.word	0xcccccccd
 80024dc:	40020880 	.word	0x40020880

080024e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	461a      	mov	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a08      	ldr	r2, [pc, #32]	@ (8002524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002502:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	3b01      	subs	r3, #1
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	2201      	movs	r2, #1
 800250e:	409a      	lsls	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	1000823f 	.word	0x1000823f
 8002524:	40020940 	.word	0x40020940

08002528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002528:	b480      	push	{r7}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002536:	e15a      	b.n	80027ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	2101      	movs	r1, #1
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	fa01 f303 	lsl.w	r3, r1, r3
 8002544:	4013      	ands	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 814c 	beq.w	80027e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d005      	beq.n	8002568 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002564:	2b02      	cmp	r3, #2
 8002566:	d130      	bne.n	80025ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	2203      	movs	r2, #3
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800259e:	2201      	movs	r2, #1
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	091b      	lsrs	r3, r3, #4
 80025b4:	f003 0201 	and.w	r2, r3, #1
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d017      	beq.n	8002606 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	2203      	movs	r2, #3
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d123      	bne.n	800265a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	08da      	lsrs	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3208      	adds	r2, #8
 800261a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	220f      	movs	r2, #15
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	691a      	ldr	r2, [r3, #16]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	08da      	lsrs	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3208      	adds	r2, #8
 8002654:	6939      	ldr	r1, [r7, #16]
 8002656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	2203      	movs	r2, #3
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0203 	and.w	r2, r3, #3
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80a6 	beq.w	80027e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269c:	4b5b      	ldr	r3, [pc, #364]	@ (800280c <HAL_GPIO_Init+0x2e4>)
 800269e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a0:	4a5a      	ldr	r2, [pc, #360]	@ (800280c <HAL_GPIO_Init+0x2e4>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80026a8:	4b58      	ldr	r3, [pc, #352]	@ (800280c <HAL_GPIO_Init+0x2e4>)
 80026aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b4:	4a56      	ldr	r2, [pc, #344]	@ (8002810 <HAL_GPIO_Init+0x2e8>)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	3302      	adds	r3, #2
 80026bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	220f      	movs	r2, #15
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80026de:	d01f      	beq.n	8002720 <HAL_GPIO_Init+0x1f8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a4c      	ldr	r2, [pc, #304]	@ (8002814 <HAL_GPIO_Init+0x2ec>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d019      	beq.n	800271c <HAL_GPIO_Init+0x1f4>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a4b      	ldr	r2, [pc, #300]	@ (8002818 <HAL_GPIO_Init+0x2f0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d013      	beq.n	8002718 <HAL_GPIO_Init+0x1f0>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a4a      	ldr	r2, [pc, #296]	@ (800281c <HAL_GPIO_Init+0x2f4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00d      	beq.n	8002714 <HAL_GPIO_Init+0x1ec>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a49      	ldr	r2, [pc, #292]	@ (8002820 <HAL_GPIO_Init+0x2f8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d007      	beq.n	8002710 <HAL_GPIO_Init+0x1e8>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a48      	ldr	r2, [pc, #288]	@ (8002824 <HAL_GPIO_Init+0x2fc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d101      	bne.n	800270c <HAL_GPIO_Init+0x1e4>
 8002708:	2305      	movs	r3, #5
 800270a:	e00a      	b.n	8002722 <HAL_GPIO_Init+0x1fa>
 800270c:	2306      	movs	r3, #6
 800270e:	e008      	b.n	8002722 <HAL_GPIO_Init+0x1fa>
 8002710:	2304      	movs	r3, #4
 8002712:	e006      	b.n	8002722 <HAL_GPIO_Init+0x1fa>
 8002714:	2303      	movs	r3, #3
 8002716:	e004      	b.n	8002722 <HAL_GPIO_Init+0x1fa>
 8002718:	2302      	movs	r3, #2
 800271a:	e002      	b.n	8002722 <HAL_GPIO_Init+0x1fa>
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <HAL_GPIO_Init+0x1fa>
 8002720:	2300      	movs	r3, #0
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	f002 0203 	and.w	r2, r2, #3
 8002728:	0092      	lsls	r2, r2, #2
 800272a:	4093      	lsls	r3, r2
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002732:	4937      	ldr	r1, [pc, #220]	@ (8002810 <HAL_GPIO_Init+0x2e8>)
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	089b      	lsrs	r3, r3, #2
 8002738:	3302      	adds	r3, #2
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002740:	4b39      	ldr	r3, [pc, #228]	@ (8002828 <HAL_GPIO_Init+0x300>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002764:	4a30      	ldr	r2, [pc, #192]	@ (8002828 <HAL_GPIO_Init+0x300>)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800276a:	4b2f      	ldr	r3, [pc, #188]	@ (8002828 <HAL_GPIO_Init+0x300>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800278e:	4a26      	ldr	r2, [pc, #152]	@ (8002828 <HAL_GPIO_Init+0x300>)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002794:	4b24      	ldr	r3, [pc, #144]	@ (8002828 <HAL_GPIO_Init+0x300>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	43db      	mvns	r3, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002828 <HAL_GPIO_Init+0x300>)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80027be:	4b1a      	ldr	r3, [pc, #104]	@ (8002828 <HAL_GPIO_Init+0x300>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027e2:	4a11      	ldr	r2, [pc, #68]	@ (8002828 <HAL_GPIO_Init+0x300>)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3301      	adds	r3, #1
 80027ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	fa22 f303 	lsr.w	r3, r2, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f47f ae9d 	bne.w	8002538 <HAL_GPIO_Init+0x10>
  }
}
 80027fe:	bf00      	nop
 8002800:	bf00      	nop
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	40021000 	.word	0x40021000
 8002810:	40010000 	.word	0x40010000
 8002814:	48000400 	.word	0x48000400
 8002818:	48000800 	.word	0x48000800
 800281c:	48000c00 	.word	0x48000c00
 8002820:	48001000 	.word	0x48001000
 8002824:	48001400 	.word	0x48001400
 8002828:	40010400 	.word	0x40010400

0800282c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e0d0      	b.n	80029e0 <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7fe fe8e 	bl	8001574 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800286e:	f023 030f 	bic.w	r3, r3, #15
 8002872:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2202      	movs	r2, #2
 800287a:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	2b02      	cmp	r3, #2
 8002882:	d061      	beq.n	8002948 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800288c:	2310      	movs	r3, #16
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	e001      	b.n	8002896 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002892:	2320      	movs	r3, #32
 8002894:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b20      	cmp	r3, #32
 800289c:	d802      	bhi.n	80028a4 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80028a4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80028a8:	f001 f944 	bl	8003b34 <HAL_RCCEx_GetPeriphCLKFreq>
 80028ac:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028b6:	d125      	bne.n	8002904 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d010      	beq.n	80028e2 <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	461a      	mov	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028dc:	3305      	adds	r3, #5
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	e01f      	b.n	8002922 <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	461a      	mov	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fe:	3305      	adds	r3, #5
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	e00e      	b.n	8002922 <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	fbb2 f2f3 	udiv	r2, r2, r3
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	461a      	mov	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	3305      	adds	r3, #5
 8002920:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4a30      	ldr	r2, [pc, #192]	@ (80029e8 <HAL_I2S_Init+0x1bc>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	08db      	lsrs	r3, r3, #3
 800292c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	085b      	lsrs	r3, r3, #1
 800293e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	e003      	b.n	8002950 <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002948:	2302      	movs	r3, #2
 800294a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d902      	bls.n	800295c <HAL_I2S_Init+0x130>
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	2bff      	cmp	r3, #255	@ 0xff
 800295a:	d907      	bls.n	800296c <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002960:	f043 0210 	orr.w	r2, r3, #16
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e039      	b.n	80029e0 <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	ea42 0103 	orr.w	r1, r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	430a      	orrs	r2, r1
 800297e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800298a:	f023 030f 	bic.w	r3, r3, #15
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6851      	ldr	r1, [r2, #4]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6892      	ldr	r2, [r2, #8]
 8002996:	4311      	orrs	r1, r2
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	68d2      	ldr	r2, [r2, #12]
 800299c:	4311      	orrs	r1, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6992      	ldr	r2, [r2, #24]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029ae:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b30      	cmp	r3, #48	@ 0x30
 80029b6:	d003      	beq.n	80029c0 <HAL_I2S_Init+0x194>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2bb0      	cmp	r3, #176	@ 0xb0
 80029be:	d107      	bne.n	80029d0 <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69da      	ldr	r2, [r3, #28]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80029ce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3720      	adds	r7, #32
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	cccccccd 	.word	0xcccccccd

080029ec <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <HAL_I2S_Transmit_DMA+0x1a>
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e08a      	b.n	8002b20 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d001      	beq.n	8002a1a <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8002a16:	2302      	movs	r3, #2
 8002a18:	e082      	b.n	8002b20 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_I2S_Transmit_DMA+0x3e>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e07a      	b.n	8002b20 <HAL_I2S_Transmit_DMA+0x134>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2203      	movs	r2, #3
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d002      	beq.n	8002a5e <HAL_I2S_Transmit_DMA+0x72>
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d10a      	bne.n	8002a74 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	845a      	strh	r2, [r3, #34]	@ 0x22
 8002a72:	e005      	b.n	8002a80 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	88fa      	ldrh	r2, [r7, #6]
 8002a78:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	88fa      	ldrh	r2, [r7, #6]
 8002a7e:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a84:	4a28      	ldr	r2, [pc, #160]	@ (8002b28 <HAL_I2S_Transmit_DMA+0x13c>)
 8002a86:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8c:	4a27      	ldr	r2, [pc, #156]	@ (8002b2c <HAL_I2S_Transmit_DMA+0x140>)
 8002a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	4a26      	ldr	r2, [pc, #152]	@ (8002b30 <HAL_I2S_Transmit_DMA+0x144>)
 8002a96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002aa0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002aa8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8c1b      	ldrh	r3, [r3, #32]
 8002aae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002ab0:	f7ff fb6f 	bl	8002192 <HAL_DMA_Start_IT>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00f      	beq.n	8002ada <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002abe:	f043 0208 	orr.w	r2, r3, #8
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    __HAL_UNLOCK(hi2s);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e022      	b.n	8002b20 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d107      	bne.n	8002b00 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0202 	orr.w	r2, r2, #2
 8002afe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d107      	bne.n	8002b1e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69da      	ldr	r2, [r3, #28]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b1c:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	08002bb3 	.word	0x08002bb3
 8002b2c:	08002b71 	.word	0x08002b71
 8002b30:	08002bcf 	.word	0x08002bcf

08002b34 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10e      	bne.n	8002ba4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0202 	bic.w	r2, r2, #2
 8002b94:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	845a      	strh	r2, [r3, #34]	@ 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f7ff ffcf 	bl	8002b48 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f7ff ffb7 	bl	8002b34 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0203 	bic.w	r2, r2, #3
 8002bea:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c04:	f043 0208 	orr.w	r2, r3, #8
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f7ff ffa5 	bl	8002b5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002c12:	bf00      	nop
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002c20:	4b05      	ldr	r3, [pc, #20]	@ (8002c38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4a04      	ldr	r2, [pc, #16]	@ (8002c38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c2a:	6093      	str	r3, [r2, #8]
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40007000 	.word	0x40007000

08002c3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e2fe      	b.n	800324c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d075      	beq.n	8002d46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5a:	4b97      	ldr	r3, [pc, #604]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c64:	4b94      	ldr	r3, [pc, #592]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2b0c      	cmp	r3, #12
 8002c72:	d102      	bne.n	8002c7a <HAL_RCC_OscConfig+0x3e>
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d002      	beq.n	8002c80 <HAL_RCC_OscConfig+0x44>
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d10b      	bne.n	8002c98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	4b8d      	ldr	r3, [pc, #564]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d05b      	beq.n	8002d44 <HAL_RCC_OscConfig+0x108>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d157      	bne.n	8002d44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e2d9      	b.n	800324c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca0:	d106      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x74>
 8002ca2:	4b85      	ldr	r3, [pc, #532]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a84      	ldr	r2, [pc, #528]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e01d      	b.n	8002cec <HAL_RCC_OscConfig+0xb0>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x98>
 8002cba:	4b7f      	ldr	r3, [pc, #508]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a7e      	ldr	r2, [pc, #504]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	4b7c      	ldr	r3, [pc, #496]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a7b      	ldr	r2, [pc, #492]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0xb0>
 8002cd4:	4b78      	ldr	r3, [pc, #480]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a77      	ldr	r2, [pc, #476]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b75      	ldr	r3, [pc, #468]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a74      	ldr	r2, [pc, #464]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002ce6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d013      	beq.n	8002d1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7ff f846 	bl	8001d84 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7ff f842 	bl	8001d84 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	@ 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e29e      	b.n	800324c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d0e:	4b6a      	ldr	r3, [pc, #424]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0xc0>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7ff f832 	bl	8001d84 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d24:	f7ff f82e 	bl	8001d84 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	@ 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e28a      	b.n	800324c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d36:	4b60      	ldr	r3, [pc, #384]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0xe8>
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d075      	beq.n	8002e3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d52:	4b59      	ldr	r3, [pc, #356]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d5c:	4b56      	ldr	r3, [pc, #344]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	2b0c      	cmp	r3, #12
 8002d6a:	d102      	bne.n	8002d72 <HAL_RCC_OscConfig+0x136>
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d002      	beq.n	8002d78 <HAL_RCC_OscConfig+0x13c>
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d11f      	bne.n	8002db8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d78:	4b4f      	ldr	r3, [pc, #316]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_OscConfig+0x154>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e25d      	b.n	800324c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d90:	4b49      	ldr	r3, [pc, #292]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	061b      	lsls	r3, r3, #24
 8002d9e:	4946      	ldr	r1, [pc, #280]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002da4:	4b45      	ldr	r3, [pc, #276]	@ (8002ebc <HAL_RCC_OscConfig+0x280>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe ff9f 	bl	8001cec <HAL_InitTick>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d043      	beq.n	8002e3c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e249      	b.n	800324c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d023      	beq.n	8002e08 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc0:	4b3d      	ldr	r3, [pc, #244]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a3c      	ldr	r2, [pc, #240]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002dc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fe ffda 	bl	8001d84 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd4:	f7fe ffd6 	bl	8001d84 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e232      	b.n	800324c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de6:	4b34      	ldr	r3, [pc, #208]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df2:	4b31      	ldr	r3, [pc, #196]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	061b      	lsls	r3, r3, #24
 8002e00:	492d      	ldr	r1, [pc, #180]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	604b      	str	r3, [r1, #4]
 8002e06:	e01a      	b.n	8002e3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e08:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002e0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe ffb6 	bl	8001d84 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1c:	f7fe ffb2 	bl	8001d84 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e20e      	b.n	800324c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e2e:	4b22      	ldr	r3, [pc, #136]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x1e0>
 8002e3a:	e000      	b.n	8002e3e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d041      	beq.n	8002ece <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d01c      	beq.n	8002e8c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e52:	4b19      	ldr	r3, [pc, #100]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e58:	4a17      	ldr	r2, [pc, #92]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e62:	f7fe ff8f 	bl	8001d84 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e6a:	f7fe ff8b 	bl	8001d84 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e1e7      	b.n	800324c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0ef      	beq.n	8002e6a <HAL_RCC_OscConfig+0x22e>
 8002e8a:	e020      	b.n	8002ece <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e92:	4a09      	ldr	r2, [pc, #36]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9c:	f7fe ff72 	bl	8001d84 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ea2:	e00d      	b.n	8002ec0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea4:	f7fe ff6e 	bl	8001d84 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d906      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e1ca      	b.n	800324c <HAL_RCC_OscConfig+0x610>
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	200032ac 	.word	0x200032ac
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ec0:	4b8c      	ldr	r3, [pc, #560]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8002ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1ea      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80a6 	beq.w	8003028 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002edc:	2300      	movs	r3, #0
 8002ede:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ee0:	4b84      	ldr	r3, [pc, #528]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x2b4>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <HAL_RCC_OscConfig+0x2b6>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00d      	beq.n	8002f12 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efa:	4a7e      	ldr	r2, [pc, #504]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8002efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f00:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f02:	4b7c      	ldr	r3, [pc, #496]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8002f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f12:	4b79      	ldr	r3, [pc, #484]	@ (80030f8 <HAL_RCC_OscConfig+0x4bc>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d118      	bne.n	8002f50 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f1e:	4b76      	ldr	r3, [pc, #472]	@ (80030f8 <HAL_RCC_OscConfig+0x4bc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a75      	ldr	r2, [pc, #468]	@ (80030f8 <HAL_RCC_OscConfig+0x4bc>)
 8002f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe ff2b 	bl	8001d84 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f32:	f7fe ff27 	bl	8001d84 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e183      	b.n	800324c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f44:	4b6c      	ldr	r3, [pc, #432]	@ (80030f8 <HAL_RCC_OscConfig+0x4bc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0f0      	beq.n	8002f32 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d108      	bne.n	8002f6a <HAL_RCC_OscConfig+0x32e>
 8002f58:	4b66      	ldr	r3, [pc, #408]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5e:	4a65      	ldr	r2, [pc, #404]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f68:	e024      	b.n	8002fb4 <HAL_RCC_OscConfig+0x378>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b05      	cmp	r3, #5
 8002f70:	d110      	bne.n	8002f94 <HAL_RCC_OscConfig+0x358>
 8002f72:	4b60      	ldr	r3, [pc, #384]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f78:	4a5e      	ldr	r2, [pc, #376]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8002f7a:	f043 0304 	orr.w	r3, r3, #4
 8002f7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f82:	4b5c      	ldr	r3, [pc, #368]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f88:	4a5a      	ldr	r2, [pc, #360]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f92:	e00f      	b.n	8002fb4 <HAL_RCC_OscConfig+0x378>
 8002f94:	4b57      	ldr	r3, [pc, #348]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8002f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9a:	4a56      	ldr	r2, [pc, #344]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fa4:	4b53      	ldr	r3, [pc, #332]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002faa:	4a52      	ldr	r2, [pc, #328]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8002fac:	f023 0304 	bic.w	r3, r3, #4
 8002fb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d016      	beq.n	8002fea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbc:	f7fe fee2 	bl	8001d84 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc4:	f7fe fede 	bl	8001d84 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e138      	b.n	800324c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fda:	4b46      	ldr	r3, [pc, #280]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ed      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x388>
 8002fe8:	e015      	b.n	8003016 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fea:	f7fe fecb 	bl	8001d84 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fe fec7 	bl	8001d84 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e121      	b.n	800324c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003008:	4b3a      	ldr	r3, [pc, #232]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1ed      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003016:	7ffb      	ldrb	r3, [r7, #31]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d105      	bne.n	8003028 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301c:	4b35      	ldr	r3, [pc, #212]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 800301e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003020:	4a34      	ldr	r2, [pc, #208]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8003022:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003026:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b00      	cmp	r3, #0
 8003032:	d03c      	beq.n	80030ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01c      	beq.n	8003076 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800303c:	4b2d      	ldr	r3, [pc, #180]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 800303e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003042:	4a2c      	ldr	r2, [pc, #176]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7fe fe9a 	bl	8001d84 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003054:	f7fe fe96 	bl	8001d84 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0f2      	b.n	800324c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003066:	4b23      	ldr	r3, [pc, #140]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8003068:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0ef      	beq.n	8003054 <HAL_RCC_OscConfig+0x418>
 8003074:	e01b      	b.n	80030ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003076:	4b1f      	ldr	r3, [pc, #124]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 8003078:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800307c:	4a1d      	ldr	r2, [pc, #116]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003086:	f7fe fe7d 	bl	8001d84 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800308e:	f7fe fe79 	bl	8001d84 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e0d5      	b.n	800324c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030a0:	4b14      	ldr	r3, [pc, #80]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 80030a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ef      	bne.n	800308e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 80c9 	beq.w	800324a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030b8:	4b0e      	ldr	r3, [pc, #56]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 030c 	and.w	r3, r3, #12
 80030c0:	2b0c      	cmp	r3, #12
 80030c2:	f000 8083 	beq.w	80031cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d15e      	bne.n	800318c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ce:	4b09      	ldr	r3, [pc, #36]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a08      	ldr	r2, [pc, #32]	@ (80030f4 <HAL_RCC_OscConfig+0x4b8>)
 80030d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030da:	f7fe fe53 	bl	8001d84 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e0:	e00c      	b.n	80030fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e2:	f7fe fe4f 	bl	8001d84 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d905      	bls.n	80030fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e0ab      	b.n	800324c <HAL_RCC_OscConfig+0x610>
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030fc:	4b55      	ldr	r3, [pc, #340]	@ (8003254 <HAL_RCC_OscConfig+0x618>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1ec      	bne.n	80030e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003108:	4b52      	ldr	r3, [pc, #328]	@ (8003254 <HAL_RCC_OscConfig+0x618>)
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	4b52      	ldr	r3, [pc, #328]	@ (8003258 <HAL_RCC_OscConfig+0x61c>)
 800310e:	4013      	ands	r3, r2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6a11      	ldr	r1, [r2, #32]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003118:	3a01      	subs	r2, #1
 800311a:	0112      	lsls	r2, r2, #4
 800311c:	4311      	orrs	r1, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003122:	0212      	lsls	r2, r2, #8
 8003124:	4311      	orrs	r1, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800312a:	0852      	lsrs	r2, r2, #1
 800312c:	3a01      	subs	r2, #1
 800312e:	0552      	lsls	r2, r2, #21
 8003130:	4311      	orrs	r1, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003136:	0852      	lsrs	r2, r2, #1
 8003138:	3a01      	subs	r2, #1
 800313a:	0652      	lsls	r2, r2, #25
 800313c:	4311      	orrs	r1, r2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003142:	06d2      	lsls	r2, r2, #27
 8003144:	430a      	orrs	r2, r1
 8003146:	4943      	ldr	r1, [pc, #268]	@ (8003254 <HAL_RCC_OscConfig+0x618>)
 8003148:	4313      	orrs	r3, r2
 800314a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800314c:	4b41      	ldr	r3, [pc, #260]	@ (8003254 <HAL_RCC_OscConfig+0x618>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a40      	ldr	r2, [pc, #256]	@ (8003254 <HAL_RCC_OscConfig+0x618>)
 8003152:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003156:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003158:	4b3e      	ldr	r3, [pc, #248]	@ (8003254 <HAL_RCC_OscConfig+0x618>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4a3d      	ldr	r2, [pc, #244]	@ (8003254 <HAL_RCC_OscConfig+0x618>)
 800315e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003162:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe fe0e 	bl	8001d84 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe fe0a 	bl	8001d84 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e066      	b.n	800324c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317e:	4b35      	ldr	r3, [pc, #212]	@ (8003254 <HAL_RCC_OscConfig+0x618>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0x530>
 800318a:	e05e      	b.n	800324a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318c:	4b31      	ldr	r3, [pc, #196]	@ (8003254 <HAL_RCC_OscConfig+0x618>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a30      	ldr	r2, [pc, #192]	@ (8003254 <HAL_RCC_OscConfig+0x618>)
 8003192:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003198:	f7fe fdf4 	bl	8001d84 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fe fdf0 	bl	8001d84 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e04c      	b.n	800324c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b2:	4b28      	ldr	r3, [pc, #160]	@ (8003254 <HAL_RCC_OscConfig+0x618>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80031be:	4b25      	ldr	r3, [pc, #148]	@ (8003254 <HAL_RCC_OscConfig+0x618>)
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	4924      	ldr	r1, [pc, #144]	@ (8003254 <HAL_RCC_OscConfig+0x618>)
 80031c4:	4b25      	ldr	r3, [pc, #148]	@ (800325c <HAL_RCC_OscConfig+0x620>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	60cb      	str	r3, [r1, #12]
 80031ca:	e03e      	b.n	800324a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e039      	b.n	800324c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80031d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003254 <HAL_RCC_OscConfig+0x618>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f003 0203 	and.w	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d12c      	bne.n	8003246 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	3b01      	subs	r3, #1
 80031f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d123      	bne.n	8003246 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003208:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d11b      	bne.n	8003246 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003218:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800321a:	429a      	cmp	r2, r3
 800321c:	d113      	bne.n	8003246 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	3b01      	subs	r3, #1
 800322c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d109      	bne.n	8003246 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800323c:	085b      	lsrs	r3, r3, #1
 800323e:	3b01      	subs	r3, #1
 8003240:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d001      	beq.n	800324a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3720      	adds	r7, #32
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40021000 	.word	0x40021000
 8003258:	019f800c 	.word	0x019f800c
 800325c:	feeefffc 	.word	0xfeeefffc

08003260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e11e      	b.n	80034b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003278:	4b91      	ldr	r3, [pc, #580]	@ (80034c0 <HAL_RCC_ClockConfig+0x260>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d910      	bls.n	80032a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b8e      	ldr	r3, [pc, #568]	@ (80034c0 <HAL_RCC_ClockConfig+0x260>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 020f 	bic.w	r2, r3, #15
 800328e:	498c      	ldr	r1, [pc, #560]	@ (80034c0 <HAL_RCC_ClockConfig+0x260>)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003296:	4b8a      	ldr	r3, [pc, #552]	@ (80034c0 <HAL_RCC_ClockConfig+0x260>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e106      	b.n	80034b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d073      	beq.n	800339c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d129      	bne.n	8003310 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032bc:	4b81      	ldr	r3, [pc, #516]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0f4      	b.n	80034b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80032cc:	f000 f99e 	bl	800360c <RCC_GetSysClockFreqFromPLLSource>
 80032d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4a7c      	ldr	r2, [pc, #496]	@ (80034c8 <HAL_RCC_ClockConfig+0x268>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d93f      	bls.n	800335a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032da:	4b7a      	ldr	r3, [pc, #488]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d033      	beq.n	800335a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d12f      	bne.n	800335a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032fa:	4b72      	ldr	r3, [pc, #456]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003302:	4a70      	ldr	r2, [pc, #448]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 8003304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003308:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800330a:	2380      	movs	r3, #128	@ 0x80
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	e024      	b.n	800335a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d107      	bne.n	8003328 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003318:	4b6a      	ldr	r3, [pc, #424]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d109      	bne.n	8003338 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0c6      	b.n	80034b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003328:	4b66      	ldr	r3, [pc, #408]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0be      	b.n	80034b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003338:	f000 f8ce 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 800333c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4a61      	ldr	r2, [pc, #388]	@ (80034c8 <HAL_RCC_ClockConfig+0x268>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d909      	bls.n	800335a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003346:	4b5f      	ldr	r3, [pc, #380]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800334e:	4a5d      	ldr	r2, [pc, #372]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 8003350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003354:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003356:	2380      	movs	r3, #128	@ 0x80
 8003358:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800335a:	4b5a      	ldr	r3, [pc, #360]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f023 0203 	bic.w	r2, r3, #3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4957      	ldr	r1, [pc, #348]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 8003368:	4313      	orrs	r3, r2
 800336a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800336c:	f7fe fd0a 	bl	8001d84 <HAL_GetTick>
 8003370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003372:	e00a      	b.n	800338a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003374:	f7fe fd06 	bl	8001d84 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e095      	b.n	80034b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338a:	4b4e      	ldr	r3, [pc, #312]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 020c 	and.w	r2, r3, #12
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	429a      	cmp	r2, r3
 800339a:	d1eb      	bne.n	8003374 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d023      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b4:	4b43      	ldr	r3, [pc, #268]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4a42      	ldr	r2, [pc, #264]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 80033ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d007      	beq.n	80033dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80033cc:	4b3d      	ldr	r3, [pc, #244]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033d4:	4a3b      	ldr	r2, [pc, #236]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 80033d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033dc:	4b39      	ldr	r3, [pc, #228]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4936      	ldr	r1, [pc, #216]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
 80033ee:	e008      	b.n	8003402 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2b80      	cmp	r3, #128	@ 0x80
 80033f4:	d105      	bne.n	8003402 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80033f6:	4b33      	ldr	r3, [pc, #204]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	4a32      	ldr	r2, [pc, #200]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 80033fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003400:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003402:	4b2f      	ldr	r3, [pc, #188]	@ (80034c0 <HAL_RCC_ClockConfig+0x260>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d21d      	bcs.n	800344c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003410:	4b2b      	ldr	r3, [pc, #172]	@ (80034c0 <HAL_RCC_ClockConfig+0x260>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f023 020f 	bic.w	r2, r3, #15
 8003418:	4929      	ldr	r1, [pc, #164]	@ (80034c0 <HAL_RCC_ClockConfig+0x260>)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	4313      	orrs	r3, r2
 800341e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003420:	f7fe fcb0 	bl	8001d84 <HAL_GetTick>
 8003424:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003426:	e00a      	b.n	800343e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003428:	f7fe fcac 	bl	8001d84 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e03b      	b.n	80034b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343e:	4b20      	ldr	r3, [pc, #128]	@ (80034c0 <HAL_RCC_ClockConfig+0x260>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d1ed      	bne.n	8003428 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003458:	4b1a      	ldr	r3, [pc, #104]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4917      	ldr	r1, [pc, #92]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 8003466:	4313      	orrs	r3, r2
 8003468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d009      	beq.n	800348a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003476:	4b13      	ldr	r3, [pc, #76]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	490f      	ldr	r1, [pc, #60]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800348a:	f000 f825 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 800348e:	4602      	mov	r2, r0
 8003490:	4b0c      	ldr	r3, [pc, #48]	@ (80034c4 <HAL_RCC_ClockConfig+0x264>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	490c      	ldr	r1, [pc, #48]	@ (80034cc <HAL_RCC_ClockConfig+0x26c>)
 800349c:	5ccb      	ldrb	r3, [r1, r3]
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	fa22 f303 	lsr.w	r3, r2, r3
 80034a6:	4a0a      	ldr	r2, [pc, #40]	@ (80034d0 <HAL_RCC_ClockConfig+0x270>)
 80034a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80034aa:	4b0a      	ldr	r3, [pc, #40]	@ (80034d4 <HAL_RCC_ClockConfig+0x274>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe fc1c 	bl	8001cec <HAL_InitTick>
 80034b4:	4603      	mov	r3, r0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40022000 	.word	0x40022000
 80034c4:	40021000 	.word	0x40021000
 80034c8:	04c4b400 	.word	0x04c4b400
 80034cc:	08007a70 	.word	0x08007a70
 80034d0:	20002764 	.word	0x20002764
 80034d4:	200032ac 	.word	0x200032ac

080034d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034de:	4b2c      	ldr	r3, [pc, #176]	@ (8003590 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d102      	bne.n	80034f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003594 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	e047      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034f0:	4b27      	ldr	r3, [pc, #156]	@ (8003590 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 030c 	and.w	r3, r3, #12
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d102      	bne.n	8003502 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034fc:	4b26      	ldr	r3, [pc, #152]	@ (8003598 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	e03e      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003502:	4b23      	ldr	r3, [pc, #140]	@ (8003590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b0c      	cmp	r3, #12
 800350c:	d136      	bne.n	800357c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800350e:	4b20      	ldr	r3, [pc, #128]	@ (8003590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003518:	4b1d      	ldr	r3, [pc, #116]	@ (8003590 <HAL_RCC_GetSysClockFreq+0xb8>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	3301      	adds	r3, #1
 8003524:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d10c      	bne.n	8003546 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800352c:	4a1a      	ldr	r2, [pc, #104]	@ (8003598 <HAL_RCC_GetSysClockFreq+0xc0>)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	fbb2 f3f3 	udiv	r3, r2, r3
 8003534:	4a16      	ldr	r2, [pc, #88]	@ (8003590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003536:	68d2      	ldr	r2, [r2, #12]
 8003538:	0a12      	lsrs	r2, r2, #8
 800353a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800353e:	fb02 f303 	mul.w	r3, r2, r3
 8003542:	617b      	str	r3, [r7, #20]
      break;
 8003544:	e00c      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003546:	4a13      	ldr	r2, [pc, #76]	@ (8003594 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	fbb2 f3f3 	udiv	r3, r2, r3
 800354e:	4a10      	ldr	r2, [pc, #64]	@ (8003590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003550:	68d2      	ldr	r2, [r2, #12]
 8003552:	0a12      	lsrs	r2, r2, #8
 8003554:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003558:	fb02 f303 	mul.w	r3, r2, r3
 800355c:	617b      	str	r3, [r7, #20]
      break;
 800355e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	0e5b      	lsrs	r3, r3, #25
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	3301      	adds	r3, #1
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	e001      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003580:	693b      	ldr	r3, [r7, #16]
}
 8003582:	4618      	mov	r0, r3
 8003584:	371c      	adds	r7, #28
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000
 8003594:	00f42400 	.word	0x00f42400
 8003598:	007a1200 	.word	0x007a1200

0800359c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a0:	4b03      	ldr	r3, [pc, #12]	@ (80035b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035a2:	681b      	ldr	r3, [r3, #0]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20002764 	.word	0x20002764

080035b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035b8:	f7ff fff0 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	0a1b      	lsrs	r3, r3, #8
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	4904      	ldr	r1, [pc, #16]	@ (80035dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	08007a80 	.word	0x08007a80

080035e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035e4:	f7ff ffda 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035e8:	4602      	mov	r2, r0
 80035ea:	4b06      	ldr	r3, [pc, #24]	@ (8003604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	0adb      	lsrs	r3, r3, #11
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	4904      	ldr	r1, [pc, #16]	@ (8003608 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035f6:	5ccb      	ldrb	r3, [r1, r3]
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	08007a80 	.word	0x08007a80

0800360c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003612:	4b1e      	ldr	r3, [pc, #120]	@ (800368c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800361c:	4b1b      	ldr	r3, [pc, #108]	@ (800368c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	3301      	adds	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b03      	cmp	r3, #3
 800362e:	d10c      	bne.n	800364a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003630:	4a17      	ldr	r2, [pc, #92]	@ (8003690 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	fbb2 f3f3 	udiv	r3, r2, r3
 8003638:	4a14      	ldr	r2, [pc, #80]	@ (800368c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800363a:	68d2      	ldr	r2, [r2, #12]
 800363c:	0a12      	lsrs	r2, r2, #8
 800363e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	617b      	str	r3, [r7, #20]
    break;
 8003648:	e00c      	b.n	8003664 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800364a:	4a12      	ldr	r2, [pc, #72]	@ (8003694 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003652:	4a0e      	ldr	r2, [pc, #56]	@ (800368c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003654:	68d2      	ldr	r2, [r2, #12]
 8003656:	0a12      	lsrs	r2, r2, #8
 8003658:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800365c:	fb02 f303 	mul.w	r3, r2, r3
 8003660:	617b      	str	r3, [r7, #20]
    break;
 8003662:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003664:	4b09      	ldr	r3, [pc, #36]	@ (800368c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	0e5b      	lsrs	r3, r3, #25
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	3301      	adds	r3, #1
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	fbb2 f3f3 	udiv	r3, r2, r3
 800367c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800367e:	687b      	ldr	r3, [r7, #4]
}
 8003680:	4618      	mov	r0, r3
 8003682:	371c      	adds	r7, #28
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	40021000 	.word	0x40021000
 8003690:	007a1200 	.word	0x007a1200
 8003694:	00f42400 	.word	0x00f42400

08003698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036a0:	2300      	movs	r3, #0
 80036a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036a4:	2300      	movs	r3, #0
 80036a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 8098 	beq.w	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b6:	2300      	movs	r3, #0
 80036b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ba:	4b43      	ldr	r3, [pc, #268]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10d      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c6:	4b40      	ldr	r3, [pc, #256]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ca:	4a3f      	ldr	r2, [pc, #252]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80036d2:	4b3d      	ldr	r3, [pc, #244]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036de:	2301      	movs	r3, #1
 80036e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036e2:	4b3a      	ldr	r3, [pc, #232]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a39      	ldr	r2, [pc, #228]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036ee:	f7fe fb49 	bl	8001d84 <HAL_GetTick>
 80036f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036f4:	e009      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f6:	f7fe fb45 	bl	8001d84 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d902      	bls.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	74fb      	strb	r3, [r7, #19]
        break;
 8003708:	e005      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800370a:	4b30      	ldr	r3, [pc, #192]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0ef      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003716:	7cfb      	ldrb	r3, [r7, #19]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d159      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800371c:	4b2a      	ldr	r3, [pc, #168]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003726:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d01e      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	429a      	cmp	r2, r3
 8003736:	d019      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003738:	4b23      	ldr	r3, [pc, #140]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003742:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003744:	4b20      	ldr	r3, [pc, #128]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374a:	4a1f      	ldr	r2, [pc, #124]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800374c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003754:	4b1c      	ldr	r3, [pc, #112]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375a:	4a1b      	ldr	r2, [pc, #108]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800375c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003764:	4a18      	ldr	r2, [pc, #96]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d016      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003776:	f7fe fb05 	bl	8001d84 <HAL_GetTick>
 800377a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800377c:	e00b      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377e:	f7fe fb01 	bl	8001d84 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800378c:	4293      	cmp	r3, r2
 800378e:	d902      	bls.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	74fb      	strb	r3, [r7, #19]
            break;
 8003794:	e006      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003796:	4b0c      	ldr	r3, [pc, #48]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0ec      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80037a4:	7cfb      	ldrb	r3, [r7, #19]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10b      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037aa:	4b07      	ldr	r3, [pc, #28]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b8:	4903      	ldr	r1, [pc, #12]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80037c0:	e008      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037c2:	7cfb      	ldrb	r3, [r7, #19]
 80037c4:	74bb      	strb	r3, [r7, #18]
 80037c6:	e005      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d0:	7cfb      	ldrb	r3, [r7, #19]
 80037d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037d4:	7c7b      	ldrb	r3, [r7, #17]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d105      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037da:	4ba7      	ldr	r3, [pc, #668]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037de:	4aa6      	ldr	r2, [pc, #664]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037f2:	4ba1      	ldr	r3, [pc, #644]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f8:	f023 0203 	bic.w	r2, r3, #3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	499d      	ldr	r1, [pc, #628]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003814:	4b98      	ldr	r3, [pc, #608]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381a:	f023 020c 	bic.w	r2, r3, #12
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	4995      	ldr	r1, [pc, #596]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003836:	4b90      	ldr	r3, [pc, #576]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	498c      	ldr	r1, [pc, #560]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003858:	4b87      	ldr	r3, [pc, #540]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	4984      	ldr	r1, [pc, #528]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800387a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800387c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003880:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	497b      	ldr	r1, [pc, #492]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0320 	and.w	r3, r3, #32
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800389c:	4b76      	ldr	r3, [pc, #472]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	4973      	ldr	r1, [pc, #460]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038be:	4b6e      	ldr	r3, [pc, #440]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	496a      	ldr	r1, [pc, #424]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038e0:	4b65      	ldr	r3, [pc, #404]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	4962      	ldr	r1, [pc, #392]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003902:	4b5d      	ldr	r3, [pc, #372]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003908:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	4959      	ldr	r1, [pc, #356]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003924:	4b54      	ldr	r3, [pc, #336]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003926:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800392a:	f023 0203 	bic.w	r2, r3, #3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003932:	4951      	ldr	r1, [pc, #324]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003946:	4b4c      	ldr	r3, [pc, #304]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003954:	4948      	ldr	r1, [pc, #288]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003964:	2b00      	cmp	r3, #0
 8003966:	d015      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003968:	4b43      	ldr	r3, [pc, #268]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	4940      	ldr	r1, [pc, #256]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003986:	d105      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003988:	4b3b      	ldr	r3, [pc, #236]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4a3a      	ldr	r2, [pc, #232]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003992:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800399c:	2b00      	cmp	r3, #0
 800399e:	d015      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039a0:	4b35      	ldr	r3, [pc, #212]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ae:	4932      	ldr	r1, [pc, #200]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039be:	d105      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ca:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d015      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039d8:	4b27      	ldr	r3, [pc, #156]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e6:	4924      	ldr	r1, [pc, #144]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039f6:	d105      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d015      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a10:	4b19      	ldr	r3, [pc, #100]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1e:	4916      	ldr	r1, [pc, #88]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a2e:	d105      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a30:	4b11      	ldr	r3, [pc, #68]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4a10      	ldr	r2, [pc, #64]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d019      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a48:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	4908      	ldr	r1, [pc, #32]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a66:	d109      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a68:	4b03      	ldr	r3, [pc, #12]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4a02      	ldr	r2, [pc, #8]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a72:	60d3      	str	r3, [r2, #12]
 8003a74:	e002      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d015      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a88:	4b29      	ldr	r3, [pc, #164]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a96:	4926      	ldr	r1, [pc, #152]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003aa6:	d105      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003aa8:	4b21      	ldr	r3, [pc, #132]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a20      	ldr	r2, [pc, #128]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d015      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ace:	4918      	ldr	r1, [pc, #96]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ade:	d105      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ae0:	4b13      	ldr	r3, [pc, #76]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4a12      	ldr	r2, [pc, #72]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d015      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003af8:	4b0d      	ldr	r3, [pc, #52]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003afa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003afe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b06:	490a      	ldr	r1, [pc, #40]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b16:	d105      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b18:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4a04      	ldr	r2, [pc, #16]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b24:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000

08003b34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b46:	d136      	bne.n	8003bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003b48:	4bb1      	ldr	r3, [pc, #708]	@ (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b52:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003b54:	4bae      	ldr	r3, [pc, #696]	@ (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d108      	bne.n	8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b68:	d104      	bne.n	8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8003b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b6e:	61fb      	str	r3, [r7, #28]
 8003b70:	f000 bd12 	b.w	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003b74:	4ba6      	ldr	r3, [pc, #664]	@ (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d108      	bne.n	8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b88:	d104      	bne.n	8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 8003b8a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003b8e:	61fb      	str	r3, [r7, #28]
 8003b90:	f000 bd02 	b.w	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003b94:	4b9e      	ldr	r3, [pc, #632]	@ (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ba0:	f040 84fa 	bne.w	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003baa:	f040 84f5 	bne.w	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = HSE_VALUE / 32U;
 8003bae:	4b99      	ldr	r3, [pc, #612]	@ (8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003bb0:	61fb      	str	r3, [r7, #28]
 8003bb2:	f000 bcf1 	b.w	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 8003bb6:	4b96      	ldr	r3, [pc, #600]	@ (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d10c      	bne.n	8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003bc2:	4b93      	ldr	r3, [pc, #588]	@ (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bce:	d102      	bne.n	8003bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 8003bd0:	4b91      	ldr	r3, [pc, #580]	@ (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	e017      	b.n	8003c06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	e014      	b.n	8003c06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 8003bdc:	4b8c      	ldr	r3, [pc, #560]	@ (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	2b03      	cmp	r3, #3
 8003be6:	d10c      	bne.n	8003c02 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003be8:	4b89      	ldr	r3, [pc, #548]	@ (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bf4:	d102      	bne.n	8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 8003bf6:	4b89      	ldr	r3, [pc, #548]	@ (8003e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	e004      	b.n	8003c06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	e001      	b.n	8003c06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003c06:	4b82      	ldr	r3, [pc, #520]	@ (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	091b      	lsrs	r3, r3, #4
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	3301      	adds	r3, #1
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c20:	f000 8466 	beq.w	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c2a:	f200 848e 	bhi.w	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c34:	f000 8263 	beq.w	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c3e:	f200 8484 	bhi.w	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c48:	f000 8417 	beq.w	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c52:	f200 847a 	bhi.w	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c5c:	f000 83d0 	beq.w	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c66:	f200 8470 	bhi.w	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c70:	f000 8398 	beq.w	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c7a:	f200 8466 	bhi.w	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c84:	f000 8360 	beq.w	8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c8e:	f200 845c 	bhi.w	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c98:	f000 8318 	beq.w	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca2:	f200 8452 	bhi.w	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cac:	f000 82ca 	beq.w	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cb6:	f200 8448 	bhi.w	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc0:	f000 827c 	beq.w	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cca:	f200 843e 	bhi.w	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cd4:	f000 8236 	beq.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cde:	f200 8434 	bhi.w	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ce8:	f000 81e4 	beq.w	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cf2:	f200 842a 	bhi.w	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b80      	cmp	r3, #128	@ 0x80
 8003cfa:	f000 81b1 	beq.w	8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b80      	cmp	r3, #128	@ 0x80
 8003d02:	f200 8422 	bhi.w	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d84b      	bhi.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 841b 	beq.w	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	2b1f      	cmp	r3, #31
 8003d1a:	f200 8416 	bhi.w	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003daf 	.word	0x08003daf
 8003d28:	08003e21 	.word	0x08003e21
 8003d2c:	0800454b 	.word	0x0800454b
 8003d30:	08003e83 	.word	0x08003e83
 8003d34:	0800454b 	.word	0x0800454b
 8003d38:	0800454b 	.word	0x0800454b
 8003d3c:	0800454b 	.word	0x0800454b
 8003d40:	08003ee5 	.word	0x08003ee5
 8003d44:	0800454b 	.word	0x0800454b
 8003d48:	0800454b 	.word	0x0800454b
 8003d4c:	0800454b 	.word	0x0800454b
 8003d50:	0800454b 	.word	0x0800454b
 8003d54:	0800454b 	.word	0x0800454b
 8003d58:	0800454b 	.word	0x0800454b
 8003d5c:	0800454b 	.word	0x0800454b
 8003d60:	08003f47 	.word	0x08003f47
 8003d64:	0800454b 	.word	0x0800454b
 8003d68:	0800454b 	.word	0x0800454b
 8003d6c:	0800454b 	.word	0x0800454b
 8003d70:	0800454b 	.word	0x0800454b
 8003d74:	0800454b 	.word	0x0800454b
 8003d78:	0800454b 	.word	0x0800454b
 8003d7c:	0800454b 	.word	0x0800454b
 8003d80:	0800454b 	.word	0x0800454b
 8003d84:	0800454b 	.word	0x0800454b
 8003d88:	0800454b 	.word	0x0800454b
 8003d8c:	0800454b 	.word	0x0800454b
 8003d90:	0800454b 	.word	0x0800454b
 8003d94:	0800454b 	.word	0x0800454b
 8003d98:	0800454b 	.word	0x0800454b
 8003d9c:	0800454b 	.word	0x0800454b
 8003da0:	08003faf 	.word	0x08003faf
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b40      	cmp	r3, #64	@ 0x40
 8003da8:	f000 8135 	beq.w	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
      break;

#endif /* QUADSPI */

    default:
      break;
 8003dac:	e3cd      	b.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003dae:	4b18      	ldr	r3, [pc, #96]	@ (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d103      	bne.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        frequency = HAL_RCC_GetPCLK2Freq();
 8003dc0:	f7ff fc0e 	bl	80035e0 <HAL_RCC_GetPCLK2Freq>
 8003dc4:	61f8      	str	r0, [r7, #28]
      break;
 8003dc6:	e3c2      	b.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d103      	bne.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
        frequency = HAL_RCC_GetSysClockFreq();
 8003dce:	f7ff fb83 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003dd2:	61f8      	str	r0, [r7, #28]
      break;
 8003dd4:	e3bb      	b.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 8003dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de2:	d105      	bne.n	8003df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d102      	bne.n	8003df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HSI_VALUE;
 8003dea:	4b0b      	ldr	r3, [pc, #44]	@ (8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003dec:	61fb      	str	r3, [r7, #28]
      break;
 8003dee:	e3ae      	b.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003df0:	4b07      	ldr	r3, [pc, #28]	@ (8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	f040 83a7 	bne.w	800454e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	f040 83a3 	bne.w	800454e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
        frequency = LSE_VALUE;
 8003e08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e0c:	61fb      	str	r3, [r7, #28]
      break;
 8003e0e:	e39e      	b.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003e10:	40021000 	.word	0x40021000
 8003e14:	0003d090 	.word	0x0003d090
 8003e18:	00f42400 	.word	0x00f42400
 8003e1c:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003e20:	4ba2      	ldr	r3, [pc, #648]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d103      	bne.n	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003e32:	f7ff fbbf 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8003e36:	61f8      	str	r0, [r7, #28]
      break;
 8003e38:	e38b      	b.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d103      	bne.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
        frequency = HAL_RCC_GetSysClockFreq();
 8003e40:	f7ff fb4a 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003e44:	61f8      	str	r0, [r7, #28]
      break;
 8003e46:	e384      	b.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003e48:	4b98      	ldr	r3, [pc, #608]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e54:	d105      	bne.n	8003e62 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d102      	bne.n	8003e62 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
        frequency = HSI_VALUE;
 8003e5c:	4b94      	ldr	r3, [pc, #592]	@ (80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003e5e:	61fb      	str	r3, [r7, #28]
      break;
 8003e60:	e377      	b.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003e62:	4b92      	ldr	r3, [pc, #584]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	f040 8370 	bne.w	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	2b0c      	cmp	r3, #12
 8003e76:	f040 836c 	bne.w	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
        frequency = LSE_VALUE;
 8003e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e7e:	61fb      	str	r3, [r7, #28]
      break;
 8003e80:	e367      	b.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003e82:	4b8a      	ldr	r3, [pc, #552]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e8c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d103      	bne.n	8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003e94:	f7ff fb8e 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8003e98:	61f8      	str	r0, [r7, #28]
      break;
 8003e9a:	e35c      	b.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	d103      	bne.n	8003eaa <HAL_RCCEx_GetPeriphCLKFreq+0x376>
        frequency = HAL_RCC_GetSysClockFreq();
 8003ea2:	f7ff fb19 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003ea6:	61f8      	str	r0, [r7, #28]
      break;
 8003ea8:	e355      	b.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003eaa:	4b80      	ldr	r3, [pc, #512]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb6:	d105      	bne.n	8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	d102      	bne.n	8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
        frequency = HSI_VALUE;
 8003ebe:	4b7c      	ldr	r3, [pc, #496]	@ (80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003ec0:	61fb      	str	r3, [r7, #28]
      break;
 8003ec2:	e348      	b.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003ec4:	4b79      	ldr	r3, [pc, #484]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	f040 8341 	bne.w	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	2b30      	cmp	r3, #48	@ 0x30
 8003ed8:	f040 833d 	bne.w	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        frequency = LSE_VALUE;
 8003edc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ee0:	61fb      	str	r3, [r7, #28]
      break;
 8003ee2:	e338      	b.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003ee4:	4b71      	ldr	r3, [pc, #452]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003eee:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d103      	bne.n	8003efe <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003ef6:	f7ff fb5d 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8003efa:	61f8      	str	r0, [r7, #28]
      break;
 8003efc:	e32d      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b40      	cmp	r3, #64	@ 0x40
 8003f02:	d103      	bne.n	8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        frequency = HAL_RCC_GetSysClockFreq();
 8003f04:	f7ff fae8 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003f08:	61f8      	str	r0, [r7, #28]
      break;
 8003f0a:	e326      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8003f0c:	4b67      	ldr	r3, [pc, #412]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f18:	d105      	bne.n	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b80      	cmp	r3, #128	@ 0x80
 8003f1e:	d102      	bne.n	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
        frequency = HSI_VALUE;
 8003f20:	4b63      	ldr	r3, [pc, #396]	@ (80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003f22:	61fb      	str	r3, [r7, #28]
      break;
 8003f24:	e319      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8003f26:	4b61      	ldr	r3, [pc, #388]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	f040 8312 	bne.w	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f3a:	f040 830e 	bne.w	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
        frequency = LSE_VALUE;
 8003f3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f42:	61fb      	str	r3, [r7, #28]
      break;
 8003f44:	e309      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003f46:	4b59      	ldr	r3, [pc, #356]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f50:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d103      	bne.n	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003f58:	f7ff fb2c 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8003f5c:	61f8      	str	r0, [r7, #28]
      break;
 8003f5e:	e2fe      	b.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f66:	d103      	bne.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
        frequency = HAL_RCC_GetSysClockFreq();
 8003f68:	f7ff fab6 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003f6c:	61f8      	str	r0, [r7, #28]
      break;
 8003f6e:	e2f6      	b.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8003f70:	4b4e      	ldr	r3, [pc, #312]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f7c:	d106      	bne.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f84:	d102      	bne.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
        frequency = HSI_VALUE;
 8003f86:	4b4a      	ldr	r3, [pc, #296]	@ (80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003f88:	61fb      	str	r3, [r7, #28]
      break;
 8003f8a:	e2e8      	b.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8003f8c:	4b47      	ldr	r3, [pc, #284]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	f040 82e1 	bne.w	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fa2:	f040 82dc 	bne.w	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
        frequency = LSE_VALUE;
 8003fa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003faa:	61fb      	str	r3, [r7, #28]
      break;
 8003fac:	e2d7      	b.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003fae:	4b3f      	ldr	r3, [pc, #252]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fb8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d103      	bne.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003fc0:	f7ff faf8 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8003fc4:	61f8      	str	r0, [r7, #28]
      break;
 8003fc6:	e2cc      	b.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fce:	d103      	bne.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
        frequency = HAL_RCC_GetSysClockFreq();
 8003fd0:	f7ff fa82 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003fd4:	61f8      	str	r0, [r7, #28]
      break;
 8003fd6:	e2c4      	b.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003fd8:	4b34      	ldr	r3, [pc, #208]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fe4:	d106      	bne.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fec:	d102      	bne.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
        frequency = HSI_VALUE;
 8003fee:	4b30      	ldr	r3, [pc, #192]	@ (80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003ff0:	61fb      	str	r3, [r7, #28]
      break;
 8003ff2:	e2b6      	b.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8003ff4:	4b2d      	ldr	r3, [pc, #180]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	f040 82af 	bne.w	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800400a:	f040 82aa 	bne.w	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
        frequency = LSE_VALUE;
 800400e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004012:	61fb      	str	r3, [r7, #28]
      break;
 8004014:	e2a5      	b.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004016:	4b25      	ldr	r3, [pc, #148]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004020:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d103      	bne.n	8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004028:	f7ff fac4 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 800402c:	61f8      	str	r0, [r7, #28]
      break;
 800402e:	e29a      	b.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004036:	d103      	bne.n	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        frequency = HAL_RCC_GetSysClockFreq();
 8004038:	f7ff fa4e 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 800403c:	61f8      	str	r0, [r7, #28]
      break;
 800403e:	e292      	b.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004040:	4b1a      	ldr	r3, [pc, #104]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800404c:	f040 828b 	bne.w	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004056:	f040 8286 	bne.w	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
        frequency = HSI_VALUE;
 800405a:	4b15      	ldr	r3, [pc, #84]	@ (80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800405c:	61fb      	str	r3, [r7, #28]
      break;
 800405e:	e282      	b.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004060:	4b12      	ldr	r3, [pc, #72]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004066:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800406a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d103      	bne.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004072:	f7ff fa9f 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8004076:	61f8      	str	r0, [r7, #28]
      break;
 8004078:	e277      	b.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004080:	d103      	bne.n	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x556>
        frequency = HAL_RCC_GetSysClockFreq();
 8004082:	f7ff fa29 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8004086:	61f8      	str	r0, [r7, #28]
      break;
 8004088:	e26f      	b.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800408a:	4b08      	ldr	r3, [pc, #32]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004096:	f040 8268 	bne.w	800456a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040a0:	f040 8263 	bne.w	800456a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
        frequency = HSI_VALUE;
 80040a4:	4b02      	ldr	r3, [pc, #8]	@ (80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80040a6:	61fb      	str	r3, [r7, #28]
      break;
 80040a8:	e25f      	b.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000
 80040b0:	00f42400 	.word	0x00f42400
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80040b4:	4ba0      	ldr	r3, [pc, #640]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040be:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d103      	bne.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
        frequency = HAL_RCC_GetPCLK1Freq();
 80040c6:	f7ff fa75 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 80040ca:	61f8      	str	r0, [r7, #28]
      break;
 80040cc:	e24f      	b.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d4:	d103      	bne.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
        frequency = HAL_RCC_GetSysClockFreq();
 80040d6:	f7ff f9ff 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 80040da:	61f8      	str	r0, [r7, #28]
      break;
 80040dc:	e247      	b.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80040de:	4b96      	ldr	r3, [pc, #600]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ea:	f040 8240 	bne.w	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040f4:	f040 823b 	bne.w	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        frequency = HSI_VALUE;
 80040f8:	4b90      	ldr	r3, [pc, #576]	@ (800433c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80040fa:	61fb      	str	r3, [r7, #28]
      break;
 80040fc:	e237      	b.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80040fe:	4b8e      	ldr	r3, [pc, #568]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004100:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d103      	bne.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004110:	f7ff fa50 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8004114:	61f8      	str	r0, [r7, #28]
      break;
 8004116:	e22c      	b.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if(srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d103      	bne.n	8004126 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        frequency = HAL_RCC_GetSysClockFreq();
 800411e:	f7ff f9db 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8004122:	61f8      	str	r0, [r7, #28]
      break;
 8004124:	e225      	b.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004126:	4b84      	ldr	r3, [pc, #528]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800412e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004132:	f040 821e 	bne.w	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b02      	cmp	r3, #2
 800413a:	f040 821a 	bne.w	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
        frequency = HSI_VALUE;
 800413e:	4b7f      	ldr	r3, [pc, #508]	@ (800433c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004140:	61fb      	str	r3, [r7, #28]
      break;
 8004142:	e216      	b.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004144:	4b7c      	ldr	r3, [pc, #496]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800414e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d103      	bne.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004156:	f7ff fa2d 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 800415a:	61f8      	str	r0, [r7, #28]
      break;
 800415c:	e20b      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800415e:	4b76      	ldr	r3, [pc, #472]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004160:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b02      	cmp	r3, #2
 800416a:	d107      	bne.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004172:	d103      	bne.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0x648>
        frequency = LSI_VALUE;
 8004174:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004178:	61fb      	str	r3, [r7, #28]
 800417a:	e01e      	b.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800417c:	4b6e      	ldr	r3, [pc, #440]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004188:	d106      	bne.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004190:	d102      	bne.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        frequency = HSI_VALUE;
 8004192:	4b6a      	ldr	r3, [pc, #424]	@ (800433c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	e010      	b.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004198:	4b67      	ldr	r3, [pc, #412]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	f040 81e7 	bne.w	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80041ae:	f040 81e2 	bne.w	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
        frequency = LSE_VALUE;
 80041b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041b6:	61fb      	str	r3, [r7, #28]
      break;
 80041b8:	e1dd      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80041ba:	e1dc      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80041bc:	4b5e      	ldr	r3, [pc, #376]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80041c6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
        frequency = HAL_RCC_GetSysClockFreq();
 80041ce:	f7ff f983 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 80041d2:	61f8      	str	r0, [r7, #28]
      break;
 80041d4:	e1d1      	b.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041dc:	d11b      	bne.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80041de:	4b56      	ldr	r3, [pc, #344]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 81c7 	beq.w	800457a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80041ec:	4b52      	ldr	r3, [pc, #328]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	0a1b      	lsrs	r3, r3, #8
 80041f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041f6:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	fb03 f202 	mul.w	r2, r3, r2
 8004200:	4b4d      	ldr	r3, [pc, #308]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	0d5b      	lsrs	r3, r3, #21
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	3301      	adds	r3, #1
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004212:	61fb      	str	r3, [r7, #28]
      break;
 8004214:	e1b1      	b.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800421c:	d102      	bne.n	8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        frequency = EXTERNAL_CLOCK_VALUE;
 800421e:	4b48      	ldr	r3, [pc, #288]	@ (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004220:	61fb      	str	r3, [r7, #28]
      break;
 8004222:	e1aa      	b.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 8004224:	4b44      	ldr	r3, [pc, #272]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800422c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004230:	f040 81a3 	bne.w	800457a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800423a:	f040 819e 	bne.w	800457a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
        frequency = HSI_VALUE;
 800423e:	4b3f      	ldr	r3, [pc, #252]	@ (800433c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004240:	61fb      	str	r3, [r7, #28]
      break;
 8004242:	e19a      	b.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004244:	4b3c      	ldr	r3, [pc, #240]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800424e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d103      	bne.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
        frequency = HAL_RCC_GetSysClockFreq();
 8004256:	f7ff f93f 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 800425a:	61f8      	str	r0, [r7, #28]
      break;
 800425c:	e18f      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004264:	d11b      	bne.n	800429e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8004266:	4b34      	ldr	r3, [pc, #208]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 8185 	beq.w	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004274:	4b30      	ldr	r3, [pc, #192]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	0a1b      	lsrs	r3, r3, #8
 800427a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800427e:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	fb03 f202 	mul.w	r2, r3, r2
 8004288:	4b2b      	ldr	r3, [pc, #172]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	0d5b      	lsrs	r3, r3, #21
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	3301      	adds	r3, #1
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	61fb      	str	r3, [r7, #28]
      break;
 800429c:	e16f      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042a4:	d102      	bne.n	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        frequency = EXTERNAL_CLOCK_VALUE;
 80042a6:	4b26      	ldr	r3, [pc, #152]	@ (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80042a8:	61fb      	str	r3, [r7, #28]
      break;
 80042aa:	e168      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 80042ac:	4b22      	ldr	r3, [pc, #136]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042b8:	f040 8161 	bne.w	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042c2:	f040 815c 	bne.w	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
        frequency = HSI_VALUE;
 80042c6:	4b1d      	ldr	r3, [pc, #116]	@ (800433c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80042c8:	61fb      	str	r3, [r7, #28]
      break;
 80042ca:	e158      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80042cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80042d6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042de:	d103      	bne.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
        frequency = HAL_RCC_GetPCLK1Freq();
 80042e0:	f7ff f968 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 80042e4:	61f8      	str	r0, [r7, #28]
      break;
 80042e6:	e14c      	b.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d102      	bne.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
        frequency = HSE_VALUE;
 80042ee:	4b15      	ldr	r3, [pc, #84]	@ (8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80042f0:	61fb      	str	r3, [r7, #28]
      break;
 80042f2:	e146      	b.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042fa:	f040 8142 	bne.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80042fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 813b 	beq.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800430c:	4b0a      	ldr	r3, [pc, #40]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	0a1b      	lsrs	r3, r3, #8
 8004312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004316:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	fb03 f202 	mul.w	r2, r3, r2
 8004320:	4b05      	ldr	r3, [pc, #20]	@ (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	0d5b      	lsrs	r3, r3, #21
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	3301      	adds	r3, #1
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004332:	61fb      	str	r3, [r7, #28]
      break;
 8004334:	e125      	b.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000
 800433c:	00f42400 	.word	0x00f42400
 8004340:	00bb8000 	.word	0x00bb8000
 8004344:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004348:	4b96      	ldr	r3, [pc, #600]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004352:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800435a:	d114      	bne.n	8004386 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800435c:	4b91      	ldr	r3, [pc, #580]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	0a1b      	lsrs	r3, r3, #8
 8004362:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004366:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	fb03 f202 	mul.w	r2, r3, r2
 8004370:	4b8c      	ldr	r3, [pc, #560]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	0d5b      	lsrs	r3, r3, #21
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	3301      	adds	r3, #1
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004382:	61fb      	str	r3, [r7, #28]
      break;
 8004384:	e0ff      	b.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 8004386:	4b87      	ldr	r3, [pc, #540]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004388:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b02      	cmp	r3, #2
 8004392:	f040 80f8 	bne.w	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	f040 80f4 	bne.w	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
        frequency = HSI48_VALUE;
 800439e:	4b82      	ldr	r3, [pc, #520]	@ (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80043a0:	61fb      	str	r3, [r7, #28]
      break;
 80043a2:	e0f0      	b.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80043a4:	4b7f      	ldr	r3, [pc, #508]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043aa:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80043ae:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043b6:	d114      	bne.n	80043e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80043b8:	4b7a      	ldr	r3, [pc, #488]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	0a1b      	lsrs	r3, r3, #8
 80043be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043c2:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	fb03 f202 	mul.w	r2, r3, r2
 80043cc:	4b75      	ldr	r3, [pc, #468]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	0d5b      	lsrs	r3, r3, #21
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	3301      	adds	r3, #1
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	fbb2 f3f3 	udiv	r3, r2, r3
 80043de:	61fb      	str	r3, [r7, #28]
      break;
 80043e0:	e0d3      	b.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 80043e2:	4b70      	ldr	r3, [pc, #448]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80043e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	f040 80cc 	bne.w	800458a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f040 80c8 	bne.w	800458a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
        frequency = HSI48_VALUE;
 80043fa:	4b6b      	ldr	r3, [pc, #428]	@ (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80043fc:	61fb      	str	r3, [r7, #28]
      break;
 80043fe:	e0c4      	b.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 8004400:	4b68      	ldr	r3, [pc, #416]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004406:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800440a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004412:	d129      	bne.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8004414:	4b63      	ldr	r3, [pc, #396]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80b6 	beq.w	800458e <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004422:	4b60      	ldr	r3, [pc, #384]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	0a1b      	lsrs	r3, r3, #8
 8004428:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800442c:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800442e:	4b5d      	ldr	r3, [pc, #372]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	0edb      	lsrs	r3, r3, #27
 8004434:	f003 031f 	and.w	r3, r3, #31
 8004438:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10a      	bne.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004440:	4b58      	ldr	r3, [pc, #352]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
              pllp = 17U;
 800444c:	2311      	movs	r3, #17
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	e001      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
              pllp = 7U;
 8004452:	2307      	movs	r3, #7
 8004454:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	fb03 f202 	mul.w	r2, r3, r2
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	61fb      	str	r3, [r7, #28]
      break;
 8004466:	e092      	b.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800446e:	f040 808e 	bne.w	800458e <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
        frequency = HAL_RCC_GetSysClockFreq();
 8004472:	f7ff f831 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8004476:	61f8      	str	r0, [r7, #28]
      break;
 8004478:	e089      	b.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 800447a:	4b4a      	ldr	r3, [pc, #296]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004480:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004484:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800448c:	d128      	bne.n	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 800448e:	4b45      	ldr	r3, [pc, #276]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d07b      	beq.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800449a:	4b42      	ldr	r3, [pc, #264]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	0a1b      	lsrs	r3, r3, #8
 80044a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044a4:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80044a6:	4b3f      	ldr	r3, [pc, #252]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	0edb      	lsrs	r3, r3, #27
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10a      	bne.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80044b8:	4b3a      	ldr	r3, [pc, #232]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x996>
              pllp = 17U;
 80044c4:	2311      	movs	r3, #17
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e001      	b.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
              pllp = 7U;
 80044ca:	2307      	movs	r3, #7
 80044cc:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	fb03 f202 	mul.w	r2, r3, r2
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044dc:	61fb      	str	r3, [r7, #28]
      break;
 80044de:	e058      	b.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044e6:	d154      	bne.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
        frequency = HAL_RCC_GetSysClockFreq();
 80044e8:	f7fe fff6 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 80044ec:	61f8      	str	r0, [r7, #28]
      break;
 80044ee:	e050      	b.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 80044f0:	4b2c      	ldr	r3, [pc, #176]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80044f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044f6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80044fa:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004502:	d114      	bne.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004504:	4b27      	ldr	r3, [pc, #156]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	0a1b      	lsrs	r3, r3, #8
 800450a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800450e:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	fb03 f202 	mul.w	r2, r3, r2
 8004518:	4b22      	ldr	r3, [pc, #136]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	0d5b      	lsrs	r3, r3, #21
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	3301      	adds	r3, #1
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	fbb2 f3f3 	udiv	r3, r2, r3
 800452a:	61fb      	str	r3, [r7, #28]
      break;
 800452c:	e033      	b.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004534:	d102      	bne.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0xa08>
        frequency = HSI_VALUE;
 8004536:	4b1d      	ldr	r3, [pc, #116]	@ (80045ac <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8004538:	61fb      	str	r3, [r7, #28]
      break;
 800453a:	e02c      	b.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d129      	bne.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
        frequency = HAL_RCC_GetSysClockFreq();
 8004542:	f7fe ffc9 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8004546:	61f8      	str	r0, [r7, #28]
      break;
 8004548:	e025      	b.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      break;
 800454a:	bf00      	nop
 800454c:	e024      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800454e:	bf00      	nop
 8004550:	e022      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004552:	bf00      	nop
 8004554:	e020      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004556:	bf00      	nop
 8004558:	e01e      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800455a:	bf00      	nop
 800455c:	e01c      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800455e:	bf00      	nop
 8004560:	e01a      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004562:	bf00      	nop
 8004564:	e018      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004566:	bf00      	nop
 8004568:	e016      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800456a:	bf00      	nop
 800456c:	e014      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800456e:	bf00      	nop
 8004570:	e012      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004572:	bf00      	nop
 8004574:	e010      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004576:	bf00      	nop
 8004578:	e00e      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800457a:	bf00      	nop
 800457c:	e00c      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800457e:	bf00      	nop
 8004580:	e00a      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004582:	bf00      	nop
 8004584:	e008      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004586:	bf00      	nop
 8004588:	e006      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800458a:	bf00      	nop
 800458c:	e004      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800458e:	bf00      	nop
 8004590:	e002      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004592:	bf00      	nop
 8004594:	e000      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004596:	bf00      	nop
    }
  }

  return(frequency);
 8004598:	69fb      	ldr	r3, [r7, #28]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3720      	adds	r7, #32
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40021000 	.word	0x40021000
 80045a8:	02dc6c00 	.word	0x02dc6c00
 80045ac:	00f42400 	.word	0x00f42400

080045b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e049      	b.n	8004656 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fd f856 	bl	8001688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	4619      	mov	r1, r3
 80045ee:	4610      	mov	r0, r2
 80045f0:	f001 f942 	bl	8005878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	d001      	beq.n	8004678 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e04c      	b.n	8004712 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a26      	ldr	r2, [pc, #152]	@ (8004720 <HAL_TIM_Base_Start+0xc0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d022      	beq.n	80046d0 <HAL_TIM_Base_Start+0x70>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004692:	d01d      	beq.n	80046d0 <HAL_TIM_Base_Start+0x70>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a22      	ldr	r2, [pc, #136]	@ (8004724 <HAL_TIM_Base_Start+0xc4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d018      	beq.n	80046d0 <HAL_TIM_Base_Start+0x70>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a21      	ldr	r2, [pc, #132]	@ (8004728 <HAL_TIM_Base_Start+0xc8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d013      	beq.n	80046d0 <HAL_TIM_Base_Start+0x70>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1f      	ldr	r2, [pc, #124]	@ (800472c <HAL_TIM_Base_Start+0xcc>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00e      	beq.n	80046d0 <HAL_TIM_Base_Start+0x70>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004730 <HAL_TIM_Base_Start+0xd0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d009      	beq.n	80046d0 <HAL_TIM_Base_Start+0x70>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004734 <HAL_TIM_Base_Start+0xd4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d004      	beq.n	80046d0 <HAL_TIM_Base_Start+0x70>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004738 <HAL_TIM_Base_Start+0xd8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d115      	bne.n	80046fc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	4b19      	ldr	r3, [pc, #100]	@ (800473c <HAL_TIM_Base_Start+0xdc>)
 80046d8:	4013      	ands	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b06      	cmp	r3, #6
 80046e0:	d015      	beq.n	800470e <HAL_TIM_Base_Start+0xae>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e8:	d011      	beq.n	800470e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0201 	orr.w	r2, r2, #1
 80046f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fa:	e008      	b.n	800470e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	e000      	b.n	8004710 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40012c00 	.word	0x40012c00
 8004724:	40000400 	.word	0x40000400
 8004728:	40000800 	.word	0x40000800
 800472c:	40000c00 	.word	0x40000c00
 8004730:	40013400 	.word	0x40013400
 8004734:	40014000 	.word	0x40014000
 8004738:	40015000 	.word	0x40015000
 800473c:	00010007 	.word	0x00010007

08004740 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e049      	b.n	80047e6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f841 	bl	80047ee <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f001 f87a 	bl	8005878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
	...

08004804 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d109      	bne.n	8004828 <HAL_TIM_OC_Start+0x24>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	bf14      	ite	ne
 8004820:	2301      	movne	r3, #1
 8004822:	2300      	moveq	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	e03c      	b.n	80048a2 <HAL_TIM_OC_Start+0x9e>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b04      	cmp	r3, #4
 800482c:	d109      	bne.n	8004842 <HAL_TIM_OC_Start+0x3e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b01      	cmp	r3, #1
 8004838:	bf14      	ite	ne
 800483a:	2301      	movne	r3, #1
 800483c:	2300      	moveq	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	e02f      	b.n	80048a2 <HAL_TIM_OC_Start+0x9e>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b08      	cmp	r3, #8
 8004846:	d109      	bne.n	800485c <HAL_TIM_OC_Start+0x58>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b01      	cmp	r3, #1
 8004852:	bf14      	ite	ne
 8004854:	2301      	movne	r3, #1
 8004856:	2300      	moveq	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	e022      	b.n	80048a2 <HAL_TIM_OC_Start+0x9e>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b0c      	cmp	r3, #12
 8004860:	d109      	bne.n	8004876 <HAL_TIM_OC_Start+0x72>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b01      	cmp	r3, #1
 800486c:	bf14      	ite	ne
 800486e:	2301      	movne	r3, #1
 8004870:	2300      	moveq	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	e015      	b.n	80048a2 <HAL_TIM_OC_Start+0x9e>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b10      	cmp	r3, #16
 800487a:	d109      	bne.n	8004890 <HAL_TIM_OC_Start+0x8c>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	e008      	b.n	80048a2 <HAL_TIM_OC_Start+0x9e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b01      	cmp	r3, #1
 800489a:	bf14      	ite	ne
 800489c:	2301      	movne	r3, #1
 800489e:	2300      	moveq	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e0a6      	b.n	80049f8 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d104      	bne.n	80048ba <HAL_TIM_OC_Start+0xb6>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048b8:	e023      	b.n	8004902 <HAL_TIM_OC_Start+0xfe>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d104      	bne.n	80048ca <HAL_TIM_OC_Start+0xc6>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048c8:	e01b      	b.n	8004902 <HAL_TIM_OC_Start+0xfe>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d104      	bne.n	80048da <HAL_TIM_OC_Start+0xd6>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048d8:	e013      	b.n	8004902 <HAL_TIM_OC_Start+0xfe>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b0c      	cmp	r3, #12
 80048de:	d104      	bne.n	80048ea <HAL_TIM_OC_Start+0xe6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048e8:	e00b      	b.n	8004902 <HAL_TIM_OC_Start+0xfe>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_OC_Start+0xf6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048f8:	e003      	b.n	8004902 <HAL_TIM_OC_Start+0xfe>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2202      	movs	r2, #2
 80048fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2201      	movs	r2, #1
 8004908:	6839      	ldr	r1, [r7, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f001 fd0e 	bl	800632c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a3a      	ldr	r2, [pc, #232]	@ (8004a00 <HAL_TIM_OC_Start+0x1fc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d018      	beq.n	800494c <HAL_TIM_OC_Start+0x148>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a39      	ldr	r2, [pc, #228]	@ (8004a04 <HAL_TIM_OC_Start+0x200>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d013      	beq.n	800494c <HAL_TIM_OC_Start+0x148>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a37      	ldr	r2, [pc, #220]	@ (8004a08 <HAL_TIM_OC_Start+0x204>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00e      	beq.n	800494c <HAL_TIM_OC_Start+0x148>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a36      	ldr	r2, [pc, #216]	@ (8004a0c <HAL_TIM_OC_Start+0x208>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d009      	beq.n	800494c <HAL_TIM_OC_Start+0x148>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a34      	ldr	r2, [pc, #208]	@ (8004a10 <HAL_TIM_OC_Start+0x20c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d004      	beq.n	800494c <HAL_TIM_OC_Start+0x148>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a33      	ldr	r2, [pc, #204]	@ (8004a14 <HAL_TIM_OC_Start+0x210>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d101      	bne.n	8004950 <HAL_TIM_OC_Start+0x14c>
 800494c:	2301      	movs	r3, #1
 800494e:	e000      	b.n	8004952 <HAL_TIM_OC_Start+0x14e>
 8004950:	2300      	movs	r3, #0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004964:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a25      	ldr	r2, [pc, #148]	@ (8004a00 <HAL_TIM_OC_Start+0x1fc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d022      	beq.n	80049b6 <HAL_TIM_OC_Start+0x1b2>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004978:	d01d      	beq.n	80049b6 <HAL_TIM_OC_Start+0x1b2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a26      	ldr	r2, [pc, #152]	@ (8004a18 <HAL_TIM_OC_Start+0x214>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d018      	beq.n	80049b6 <HAL_TIM_OC_Start+0x1b2>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a24      	ldr	r2, [pc, #144]	@ (8004a1c <HAL_TIM_OC_Start+0x218>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d013      	beq.n	80049b6 <HAL_TIM_OC_Start+0x1b2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a23      	ldr	r2, [pc, #140]	@ (8004a20 <HAL_TIM_OC_Start+0x21c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00e      	beq.n	80049b6 <HAL_TIM_OC_Start+0x1b2>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a19      	ldr	r2, [pc, #100]	@ (8004a04 <HAL_TIM_OC_Start+0x200>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d009      	beq.n	80049b6 <HAL_TIM_OC_Start+0x1b2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a18      	ldr	r2, [pc, #96]	@ (8004a08 <HAL_TIM_OC_Start+0x204>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d004      	beq.n	80049b6 <HAL_TIM_OC_Start+0x1b2>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a18      	ldr	r2, [pc, #96]	@ (8004a14 <HAL_TIM_OC_Start+0x210>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d115      	bne.n	80049e2 <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	4b19      	ldr	r3, [pc, #100]	@ (8004a24 <HAL_TIM_OC_Start+0x220>)
 80049be:	4013      	ands	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b06      	cmp	r3, #6
 80049c6:	d015      	beq.n	80049f4 <HAL_TIM_OC_Start+0x1f0>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ce:	d011      	beq.n	80049f4 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e0:	e008      	b.n	80049f4 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	e000      	b.n	80049f6 <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40012c00 	.word	0x40012c00
 8004a04:	40013400 	.word	0x40013400
 8004a08:	40014000 	.word	0x40014000
 8004a0c:	40014400 	.word	0x40014400
 8004a10:	40014800 	.word	0x40014800
 8004a14:	40015000 	.word	0x40015000
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	40000800 	.word	0x40000800
 8004a20:	40000c00 	.word	0x40000c00
 8004a24:	00010007 	.word	0x00010007

08004a28 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <HAL_TIM_OC_Start_IT+0x28>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	bf14      	ite	ne
 8004a48:	2301      	movne	r3, #1
 8004a4a:	2300      	moveq	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	e03c      	b.n	8004aca <HAL_TIM_OC_Start_IT+0xa2>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d109      	bne.n	8004a6a <HAL_TIM_OC_Start_IT+0x42>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	bf14      	ite	ne
 8004a62:	2301      	movne	r3, #1
 8004a64:	2300      	moveq	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	e02f      	b.n	8004aca <HAL_TIM_OC_Start_IT+0xa2>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d109      	bne.n	8004a84 <HAL_TIM_OC_Start_IT+0x5c>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	bf14      	ite	ne
 8004a7c:	2301      	movne	r3, #1
 8004a7e:	2300      	moveq	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	e022      	b.n	8004aca <HAL_TIM_OC_Start_IT+0xa2>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b0c      	cmp	r3, #12
 8004a88:	d109      	bne.n	8004a9e <HAL_TIM_OC_Start_IT+0x76>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	bf14      	ite	ne
 8004a96:	2301      	movne	r3, #1
 8004a98:	2300      	moveq	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	e015      	b.n	8004aca <HAL_TIM_OC_Start_IT+0xa2>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d109      	bne.n	8004ab8 <HAL_TIM_OC_Start_IT+0x90>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	bf14      	ite	ne
 8004ab0:	2301      	movne	r3, #1
 8004ab2:	2300      	moveq	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	e008      	b.n	8004aca <HAL_TIM_OC_Start_IT+0xa2>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	bf14      	ite	ne
 8004ac4:	2301      	movne	r3, #1
 8004ac6:	2300      	moveq	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e0f1      	b.n	8004cb6 <HAL_TIM_OC_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d104      	bne.n	8004ae2 <HAL_TIM_OC_Start_IT+0xba>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ae0:	e023      	b.n	8004b2a <HAL_TIM_OC_Start_IT+0x102>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d104      	bne.n	8004af2 <HAL_TIM_OC_Start_IT+0xca>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004af0:	e01b      	b.n	8004b2a <HAL_TIM_OC_Start_IT+0x102>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d104      	bne.n	8004b02 <HAL_TIM_OC_Start_IT+0xda>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b00:	e013      	b.n	8004b2a <HAL_TIM_OC_Start_IT+0x102>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b0c      	cmp	r3, #12
 8004b06:	d104      	bne.n	8004b12 <HAL_TIM_OC_Start_IT+0xea>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b10:	e00b      	b.n	8004b2a <HAL_TIM_OC_Start_IT+0x102>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b10      	cmp	r3, #16
 8004b16:	d104      	bne.n	8004b22 <HAL_TIM_OC_Start_IT+0xfa>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b20:	e003      	b.n	8004b2a <HAL_TIM_OC_Start_IT+0x102>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2202      	movs	r2, #2
 8004b26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b0c      	cmp	r3, #12
 8004b2e:	d841      	bhi.n	8004bb4 <HAL_TIM_OC_Start_IT+0x18c>
 8004b30:	a201      	add	r2, pc, #4	@ (adr r2, 8004b38 <HAL_TIM_OC_Start_IT+0x110>)
 8004b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b36:	bf00      	nop
 8004b38:	08004b6d 	.word	0x08004b6d
 8004b3c:	08004bb5 	.word	0x08004bb5
 8004b40:	08004bb5 	.word	0x08004bb5
 8004b44:	08004bb5 	.word	0x08004bb5
 8004b48:	08004b7f 	.word	0x08004b7f
 8004b4c:	08004bb5 	.word	0x08004bb5
 8004b50:	08004bb5 	.word	0x08004bb5
 8004b54:	08004bb5 	.word	0x08004bb5
 8004b58:	08004b91 	.word	0x08004b91
 8004b5c:	08004bb5 	.word	0x08004bb5
 8004b60:	08004bb5 	.word	0x08004bb5
 8004b64:	08004bb5 	.word	0x08004bb5
 8004b68:	08004ba3 	.word	0x08004ba3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0202 	orr.w	r2, r2, #2
 8004b7a:	60da      	str	r2, [r3, #12]
      break;
 8004b7c:	e01d      	b.n	8004bba <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f042 0204 	orr.w	r2, r2, #4
 8004b8c:	60da      	str	r2, [r3, #12]
      break;
 8004b8e:	e014      	b.n	8004bba <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0208 	orr.w	r2, r2, #8
 8004b9e:	60da      	str	r2, [r3, #12]
      break;
 8004ba0:	e00b      	b.n	8004bba <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0210 	orr.w	r2, r2, #16
 8004bb0:	60da      	str	r2, [r3, #12]
      break;
 8004bb2:	e002      	b.n	8004bba <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d179      	bne.n	8004cb4 <HAL_TIM_OC_Start_IT+0x28c>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	6839      	ldr	r1, [r7, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f001 fbaf 	bl	800632c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a3b      	ldr	r2, [pc, #236]	@ (8004cc0 <HAL_TIM_OC_Start_IT+0x298>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d018      	beq.n	8004c0a <HAL_TIM_OC_Start_IT+0x1e2>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a39      	ldr	r2, [pc, #228]	@ (8004cc4 <HAL_TIM_OC_Start_IT+0x29c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <HAL_TIM_OC_Start_IT+0x1e2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a38      	ldr	r2, [pc, #224]	@ (8004cc8 <HAL_TIM_OC_Start_IT+0x2a0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00e      	beq.n	8004c0a <HAL_TIM_OC_Start_IT+0x1e2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a36      	ldr	r2, [pc, #216]	@ (8004ccc <HAL_TIM_OC_Start_IT+0x2a4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d009      	beq.n	8004c0a <HAL_TIM_OC_Start_IT+0x1e2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a35      	ldr	r2, [pc, #212]	@ (8004cd0 <HAL_TIM_OC_Start_IT+0x2a8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <HAL_TIM_OC_Start_IT+0x1e2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a33      	ldr	r2, [pc, #204]	@ (8004cd4 <HAL_TIM_OC_Start_IT+0x2ac>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d101      	bne.n	8004c0e <HAL_TIM_OC_Start_IT+0x1e6>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <HAL_TIM_OC_Start_IT+0x1e8>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d007      	beq.n	8004c24 <HAL_TIM_OC_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c22:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a25      	ldr	r2, [pc, #148]	@ (8004cc0 <HAL_TIM_OC_Start_IT+0x298>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d022      	beq.n	8004c74 <HAL_TIM_OC_Start_IT+0x24c>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c36:	d01d      	beq.n	8004c74 <HAL_TIM_OC_Start_IT+0x24c>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a26      	ldr	r2, [pc, #152]	@ (8004cd8 <HAL_TIM_OC_Start_IT+0x2b0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d018      	beq.n	8004c74 <HAL_TIM_OC_Start_IT+0x24c>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a25      	ldr	r2, [pc, #148]	@ (8004cdc <HAL_TIM_OC_Start_IT+0x2b4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d013      	beq.n	8004c74 <HAL_TIM_OC_Start_IT+0x24c>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a23      	ldr	r2, [pc, #140]	@ (8004ce0 <HAL_TIM_OC_Start_IT+0x2b8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00e      	beq.n	8004c74 <HAL_TIM_OC_Start_IT+0x24c>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8004cc4 <HAL_TIM_OC_Start_IT+0x29c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d009      	beq.n	8004c74 <HAL_TIM_OC_Start_IT+0x24c>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a18      	ldr	r2, [pc, #96]	@ (8004cc8 <HAL_TIM_OC_Start_IT+0x2a0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d004      	beq.n	8004c74 <HAL_TIM_OC_Start_IT+0x24c>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a19      	ldr	r2, [pc, #100]	@ (8004cd4 <HAL_TIM_OC_Start_IT+0x2ac>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d115      	bne.n	8004ca0 <HAL_TIM_OC_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce4 <HAL_TIM_OC_Start_IT+0x2bc>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b06      	cmp	r3, #6
 8004c84:	d015      	beq.n	8004cb2 <HAL_TIM_OC_Start_IT+0x28a>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c8c:	d011      	beq.n	8004cb2 <HAL_TIM_OC_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 0201 	orr.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9e:	e008      	b.n	8004cb2 <HAL_TIM_OC_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0201 	orr.w	r2, r2, #1
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	e000      	b.n	8004cb4 <HAL_TIM_OC_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40012c00 	.word	0x40012c00
 8004cc4:	40013400 	.word	0x40013400
 8004cc8:	40014000 	.word	0x40014000
 8004ccc:	40014400 	.word	0x40014400
 8004cd0:	40014800 	.word	0x40014800
 8004cd4:	40015000 	.word	0x40015000
 8004cd8:	40000400 	.word	0x40000400
 8004cdc:	40000800 	.word	0x40000800
 8004ce0:	40000c00 	.word	0x40000c00
 8004ce4:	00010007 	.word	0x00010007

08004ce8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e049      	b.n	8004d8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f841 	bl	8004d96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3304      	adds	r3, #4
 8004d24:	4619      	mov	r1, r3
 8004d26:	4610      	mov	r0, r2
 8004d28:	f000 fda6 	bl	8005878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d109      	bne.n	8004dd0 <HAL_TIM_PWM_Start+0x24>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	bf14      	ite	ne
 8004dc8:	2301      	movne	r3, #1
 8004dca:	2300      	moveq	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	e03c      	b.n	8004e4a <HAL_TIM_PWM_Start+0x9e>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d109      	bne.n	8004dea <HAL_TIM_PWM_Start+0x3e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	bf14      	ite	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	2300      	moveq	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	e02f      	b.n	8004e4a <HAL_TIM_PWM_Start+0x9e>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d109      	bne.n	8004e04 <HAL_TIM_PWM_Start+0x58>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	bf14      	ite	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	e022      	b.n	8004e4a <HAL_TIM_PWM_Start+0x9e>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2b0c      	cmp	r3, #12
 8004e08:	d109      	bne.n	8004e1e <HAL_TIM_PWM_Start+0x72>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	bf14      	ite	ne
 8004e16:	2301      	movne	r3, #1
 8004e18:	2300      	moveq	r3, #0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	e015      	b.n	8004e4a <HAL_TIM_PWM_Start+0x9e>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b10      	cmp	r3, #16
 8004e22:	d109      	bne.n	8004e38 <HAL_TIM_PWM_Start+0x8c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	bf14      	ite	ne
 8004e30:	2301      	movne	r3, #1
 8004e32:	2300      	moveq	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	e008      	b.n	8004e4a <HAL_TIM_PWM_Start+0x9e>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	bf14      	ite	ne
 8004e44:	2301      	movne	r3, #1
 8004e46:	2300      	moveq	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e0a6      	b.n	8004fa0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d104      	bne.n	8004e62 <HAL_TIM_PWM_Start+0xb6>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e60:	e023      	b.n	8004eaa <HAL_TIM_PWM_Start+0xfe>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d104      	bne.n	8004e72 <HAL_TIM_PWM_Start+0xc6>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e70:	e01b      	b.n	8004eaa <HAL_TIM_PWM_Start+0xfe>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d104      	bne.n	8004e82 <HAL_TIM_PWM_Start+0xd6>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e80:	e013      	b.n	8004eaa <HAL_TIM_PWM_Start+0xfe>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b0c      	cmp	r3, #12
 8004e86:	d104      	bne.n	8004e92 <HAL_TIM_PWM_Start+0xe6>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e90:	e00b      	b.n	8004eaa <HAL_TIM_PWM_Start+0xfe>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b10      	cmp	r3, #16
 8004e96:	d104      	bne.n	8004ea2 <HAL_TIM_PWM_Start+0xf6>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ea0:	e003      	b.n	8004eaa <HAL_TIM_PWM_Start+0xfe>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	6839      	ldr	r1, [r7, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 fa3a 	bl	800632c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a3a      	ldr	r2, [pc, #232]	@ (8004fa8 <HAL_TIM_PWM_Start+0x1fc>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d018      	beq.n	8004ef4 <HAL_TIM_PWM_Start+0x148>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a39      	ldr	r2, [pc, #228]	@ (8004fac <HAL_TIM_PWM_Start+0x200>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d013      	beq.n	8004ef4 <HAL_TIM_PWM_Start+0x148>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a37      	ldr	r2, [pc, #220]	@ (8004fb0 <HAL_TIM_PWM_Start+0x204>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00e      	beq.n	8004ef4 <HAL_TIM_PWM_Start+0x148>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a36      	ldr	r2, [pc, #216]	@ (8004fb4 <HAL_TIM_PWM_Start+0x208>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d009      	beq.n	8004ef4 <HAL_TIM_PWM_Start+0x148>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a34      	ldr	r2, [pc, #208]	@ (8004fb8 <HAL_TIM_PWM_Start+0x20c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <HAL_TIM_PWM_Start+0x148>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a33      	ldr	r2, [pc, #204]	@ (8004fbc <HAL_TIM_PWM_Start+0x210>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d101      	bne.n	8004ef8 <HAL_TIM_PWM_Start+0x14c>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <HAL_TIM_PWM_Start+0x14e>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a25      	ldr	r2, [pc, #148]	@ (8004fa8 <HAL_TIM_PWM_Start+0x1fc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d022      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x1b2>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f20:	d01d      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x1b2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a26      	ldr	r2, [pc, #152]	@ (8004fc0 <HAL_TIM_PWM_Start+0x214>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x1b2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a24      	ldr	r2, [pc, #144]	@ (8004fc4 <HAL_TIM_PWM_Start+0x218>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x1b2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a23      	ldr	r2, [pc, #140]	@ (8004fc8 <HAL_TIM_PWM_Start+0x21c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x1b2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a19      	ldr	r2, [pc, #100]	@ (8004fac <HAL_TIM_PWM_Start+0x200>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x1b2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a18      	ldr	r2, [pc, #96]	@ (8004fb0 <HAL_TIM_PWM_Start+0x204>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x1b2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a18      	ldr	r2, [pc, #96]	@ (8004fbc <HAL_TIM_PWM_Start+0x210>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d115      	bne.n	8004f8a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	4b19      	ldr	r3, [pc, #100]	@ (8004fcc <HAL_TIM_PWM_Start+0x220>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b06      	cmp	r3, #6
 8004f6e:	d015      	beq.n	8004f9c <HAL_TIM_PWM_Start+0x1f0>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f76:	d011      	beq.n	8004f9c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f88:	e008      	b.n	8004f9c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0201 	orr.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e000      	b.n	8004f9e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40013400 	.word	0x40013400
 8004fb0:	40014000 	.word	0x40014000
 8004fb4:	40014400 	.word	0x40014400
 8004fb8:	40014800 	.word	0x40014800
 8004fbc:	40015000 	.word	0x40015000
 8004fc0:	40000400 	.word	0x40000400
 8004fc4:	40000800 	.word	0x40000800
 8004fc8:	40000c00 	.word	0x40000c00
 8004fcc:	00010007 	.word	0x00010007

08004fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d020      	beq.n	8005034 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01b      	beq.n	8005034 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0202 	mvn.w	r2, #2
 8005004:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fc0e 	bl	800583c <HAL_TIM_IC_CaptureCallback>
 8005020:	e005      	b.n	800502e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7fc fcea 	bl	80019fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fc11 	bl	8005850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	d020      	beq.n	8005080 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01b      	beq.n	8005080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0204 	mvn.w	r2, #4
 8005050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2202      	movs	r2, #2
 8005056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fbe8 	bl	800583c <HAL_TIM_IC_CaptureCallback>
 800506c:	e005      	b.n	800507a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fc fcc4 	bl	80019fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fbeb 	bl	8005850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 0308 	and.w	r3, r3, #8
 8005086:	2b00      	cmp	r3, #0
 8005088:	d020      	beq.n	80050cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01b      	beq.n	80050cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0208 	mvn.w	r2, #8
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2204      	movs	r2, #4
 80050a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fbc2 	bl	800583c <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fc fc9e 	bl	80019fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fbc5 	bl	8005850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 0310 	and.w	r3, r3, #16
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d020      	beq.n	8005118 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01b      	beq.n	8005118 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0210 	mvn.w	r2, #16
 80050e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2208      	movs	r2, #8
 80050ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fb9c 	bl	800583c <HAL_TIM_IC_CaptureCallback>
 8005104:	e005      	b.n	8005112 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fc fc78 	bl	80019fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fb9f 	bl	8005850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00c      	beq.n	800513c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0201 	mvn.w	r2, #1
 8005134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fc fc4a 	bl	80019d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005142:	2b00      	cmp	r3, #0
 8005144:	d104      	bne.n	8005150 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00c      	beq.n	800516a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005156:	2b00      	cmp	r3, #0
 8005158:	d007      	beq.n	800516a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f001 f9a7 	bl	80064b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00c      	beq.n	800518e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800517a:	2b00      	cmp	r3, #0
 800517c:	d007      	beq.n	800518e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f001 f99f 	bl	80064cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00c      	beq.n	80051b2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d007      	beq.n	80051b2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fb59 	bl	8005864 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f003 0320 	and.w	r3, r3, #32
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00c      	beq.n	80051d6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f06f 0220 	mvn.w	r2, #32
 80051ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f001 f967 	bl	80064a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00c      	beq.n	80051fa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80051f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f001 f973 	bl	80064e0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00c      	beq.n	800521e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f001 f96b 	bl	80064f4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00c      	beq.n	8005242 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d007      	beq.n	8005242 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800523a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f001 f963 	bl	8006508 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00c      	beq.n	8005266 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d007      	beq.n	8005266 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800525e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f001 f95b 	bl	800651c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005266:	bf00      	nop
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_TIM_OC_ConfigChannel+0x1e>
 800528a:	2302      	movs	r3, #2
 800528c:	e066      	b.n	800535c <HAL_TIM_OC_ConfigChannel+0xec>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b14      	cmp	r3, #20
 800529a:	d857      	bhi.n	800534c <HAL_TIM_OC_ConfigChannel+0xdc>
 800529c:	a201      	add	r2, pc, #4	@ (adr r2, 80052a4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052f9 	.word	0x080052f9
 80052a8:	0800534d 	.word	0x0800534d
 80052ac:	0800534d 	.word	0x0800534d
 80052b0:	0800534d 	.word	0x0800534d
 80052b4:	08005307 	.word	0x08005307
 80052b8:	0800534d 	.word	0x0800534d
 80052bc:	0800534d 	.word	0x0800534d
 80052c0:	0800534d 	.word	0x0800534d
 80052c4:	08005315 	.word	0x08005315
 80052c8:	0800534d 	.word	0x0800534d
 80052cc:	0800534d 	.word	0x0800534d
 80052d0:	0800534d 	.word	0x0800534d
 80052d4:	08005323 	.word	0x08005323
 80052d8:	0800534d 	.word	0x0800534d
 80052dc:	0800534d 	.word	0x0800534d
 80052e0:	0800534d 	.word	0x0800534d
 80052e4:	08005331 	.word	0x08005331
 80052e8:	0800534d 	.word	0x0800534d
 80052ec:	0800534d 	.word	0x0800534d
 80052f0:	0800534d 	.word	0x0800534d
 80052f4:	0800533f 	.word	0x0800533f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fb6e 	bl	80059e0 <TIM_OC1_SetConfig>
      break;
 8005304:	e025      	b.n	8005352 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	4618      	mov	r0, r3
 800530e:	f000 fc01 	bl	8005b14 <TIM_OC2_SetConfig>
      break;
 8005312:	e01e      	b.n	8005352 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fc8e 	bl	8005c3c <TIM_OC3_SetConfig>
      break;
 8005320:	e017      	b.n	8005352 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fd19 	bl	8005d60 <TIM_OC4_SetConfig>
      break;
 800532e:	e010      	b.n	8005352 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fda6 	bl	8005e88 <TIM_OC5_SetConfig>
      break;
 800533c:	e009      	b.n	8005352 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	4618      	mov	r0, r3
 8005346:	f000 fe09 	bl	8005f5c <TIM_OC6_SetConfig>
      break;
 800534a:	e002      	b.n	8005352 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	75fb      	strb	r3, [r7, #23]
      break;
 8005350:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800535a:	7dfb      	ldrb	r3, [r7, #23]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800537a:	2b01      	cmp	r3, #1
 800537c:	d101      	bne.n	8005382 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800537e:	2302      	movs	r3, #2
 8005380:	e0ff      	b.n	8005582 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b14      	cmp	r3, #20
 800538e:	f200 80f0 	bhi.w	8005572 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005392:	a201      	add	r2, pc, #4	@ (adr r2, 8005398 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	080053ed 	.word	0x080053ed
 800539c:	08005573 	.word	0x08005573
 80053a0:	08005573 	.word	0x08005573
 80053a4:	08005573 	.word	0x08005573
 80053a8:	0800542d 	.word	0x0800542d
 80053ac:	08005573 	.word	0x08005573
 80053b0:	08005573 	.word	0x08005573
 80053b4:	08005573 	.word	0x08005573
 80053b8:	0800546f 	.word	0x0800546f
 80053bc:	08005573 	.word	0x08005573
 80053c0:	08005573 	.word	0x08005573
 80053c4:	08005573 	.word	0x08005573
 80053c8:	080054af 	.word	0x080054af
 80053cc:	08005573 	.word	0x08005573
 80053d0:	08005573 	.word	0x08005573
 80053d4:	08005573 	.word	0x08005573
 80053d8:	080054f1 	.word	0x080054f1
 80053dc:	08005573 	.word	0x08005573
 80053e0:	08005573 	.word	0x08005573
 80053e4:	08005573 	.word	0x08005573
 80053e8:	08005531 	.word	0x08005531
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 faf4 	bl	80059e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0208 	orr.w	r2, r2, #8
 8005406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0204 	bic.w	r2, r2, #4
 8005416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6999      	ldr	r1, [r3, #24]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	691a      	ldr	r2, [r3, #16]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	619a      	str	r2, [r3, #24]
      break;
 800542a:	e0a5      	b.n	8005578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68b9      	ldr	r1, [r7, #8]
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fb6e 	bl	8005b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699a      	ldr	r2, [r3, #24]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6999      	ldr	r1, [r3, #24]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	021a      	lsls	r2, r3, #8
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	619a      	str	r2, [r3, #24]
      break;
 800546c:	e084      	b.n	8005578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68b9      	ldr	r1, [r7, #8]
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fbe1 	bl	8005c3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0208 	orr.w	r2, r2, #8
 8005488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0204 	bic.w	r2, r2, #4
 8005498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69d9      	ldr	r1, [r3, #28]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	61da      	str	r2, [r3, #28]
      break;
 80054ac:	e064      	b.n	8005578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68b9      	ldr	r1, [r7, #8]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 fc53 	bl	8005d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69da      	ldr	r2, [r3, #28]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69d9      	ldr	r1, [r3, #28]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	021a      	lsls	r2, r3, #8
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	61da      	str	r2, [r3, #28]
      break;
 80054ee:	e043      	b.n	8005578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fcc6 	bl	8005e88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0208 	orr.w	r2, r2, #8
 800550a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0204 	bic.w	r2, r2, #4
 800551a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800552e:	e023      	b.n	8005578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fd10 	bl	8005f5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800554a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800555a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	021a      	lsls	r2, r3, #8
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005570:	e002      	b.n	8005578 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	75fb      	strb	r3, [r7, #23]
      break;
 8005576:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005580:	7dfb      	ldrb	r3, [r7, #23]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop

0800558c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_TIM_ConfigClockSource+0x1c>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e0f6      	b.n	8005796 <HAL_TIM_ConfigClockSource+0x20a>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80055c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a6f      	ldr	r2, [pc, #444]	@ (80057a0 <HAL_TIM_ConfigClockSource+0x214>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	f000 80c1 	beq.w	800576a <HAL_TIM_ConfigClockSource+0x1de>
 80055e8:	4a6d      	ldr	r2, [pc, #436]	@ (80057a0 <HAL_TIM_ConfigClockSource+0x214>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	f200 80c6 	bhi.w	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 80055f0:	4a6c      	ldr	r2, [pc, #432]	@ (80057a4 <HAL_TIM_ConfigClockSource+0x218>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	f000 80b9 	beq.w	800576a <HAL_TIM_ConfigClockSource+0x1de>
 80055f8:	4a6a      	ldr	r2, [pc, #424]	@ (80057a4 <HAL_TIM_ConfigClockSource+0x218>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	f200 80be 	bhi.w	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 8005600:	4a69      	ldr	r2, [pc, #420]	@ (80057a8 <HAL_TIM_ConfigClockSource+0x21c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	f000 80b1 	beq.w	800576a <HAL_TIM_ConfigClockSource+0x1de>
 8005608:	4a67      	ldr	r2, [pc, #412]	@ (80057a8 <HAL_TIM_ConfigClockSource+0x21c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	f200 80b6 	bhi.w	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 8005610:	4a66      	ldr	r2, [pc, #408]	@ (80057ac <HAL_TIM_ConfigClockSource+0x220>)
 8005612:	4293      	cmp	r3, r2
 8005614:	f000 80a9 	beq.w	800576a <HAL_TIM_ConfigClockSource+0x1de>
 8005618:	4a64      	ldr	r2, [pc, #400]	@ (80057ac <HAL_TIM_ConfigClockSource+0x220>)
 800561a:	4293      	cmp	r3, r2
 800561c:	f200 80ae 	bhi.w	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 8005620:	4a63      	ldr	r2, [pc, #396]	@ (80057b0 <HAL_TIM_ConfigClockSource+0x224>)
 8005622:	4293      	cmp	r3, r2
 8005624:	f000 80a1 	beq.w	800576a <HAL_TIM_ConfigClockSource+0x1de>
 8005628:	4a61      	ldr	r2, [pc, #388]	@ (80057b0 <HAL_TIM_ConfigClockSource+0x224>)
 800562a:	4293      	cmp	r3, r2
 800562c:	f200 80a6 	bhi.w	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 8005630:	4a60      	ldr	r2, [pc, #384]	@ (80057b4 <HAL_TIM_ConfigClockSource+0x228>)
 8005632:	4293      	cmp	r3, r2
 8005634:	f000 8099 	beq.w	800576a <HAL_TIM_ConfigClockSource+0x1de>
 8005638:	4a5e      	ldr	r2, [pc, #376]	@ (80057b4 <HAL_TIM_ConfigClockSource+0x228>)
 800563a:	4293      	cmp	r3, r2
 800563c:	f200 809e 	bhi.w	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 8005640:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005644:	f000 8091 	beq.w	800576a <HAL_TIM_ConfigClockSource+0x1de>
 8005648:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800564c:	f200 8096 	bhi.w	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 8005650:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005654:	f000 8089 	beq.w	800576a <HAL_TIM_ConfigClockSource+0x1de>
 8005658:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800565c:	f200 808e 	bhi.w	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 8005660:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005664:	d03e      	beq.n	80056e4 <HAL_TIM_ConfigClockSource+0x158>
 8005666:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800566a:	f200 8087 	bhi.w	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 800566e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005672:	f000 8086 	beq.w	8005782 <HAL_TIM_ConfigClockSource+0x1f6>
 8005676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800567a:	d87f      	bhi.n	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 800567c:	2b70      	cmp	r3, #112	@ 0x70
 800567e:	d01a      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0x12a>
 8005680:	2b70      	cmp	r3, #112	@ 0x70
 8005682:	d87b      	bhi.n	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 8005684:	2b60      	cmp	r3, #96	@ 0x60
 8005686:	d050      	beq.n	800572a <HAL_TIM_ConfigClockSource+0x19e>
 8005688:	2b60      	cmp	r3, #96	@ 0x60
 800568a:	d877      	bhi.n	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 800568c:	2b50      	cmp	r3, #80	@ 0x50
 800568e:	d03c      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x17e>
 8005690:	2b50      	cmp	r3, #80	@ 0x50
 8005692:	d873      	bhi.n	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 8005694:	2b40      	cmp	r3, #64	@ 0x40
 8005696:	d058      	beq.n	800574a <HAL_TIM_ConfigClockSource+0x1be>
 8005698:	2b40      	cmp	r3, #64	@ 0x40
 800569a:	d86f      	bhi.n	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 800569c:	2b30      	cmp	r3, #48	@ 0x30
 800569e:	d064      	beq.n	800576a <HAL_TIM_ConfigClockSource+0x1de>
 80056a0:	2b30      	cmp	r3, #48	@ 0x30
 80056a2:	d86b      	bhi.n	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	d060      	beq.n	800576a <HAL_TIM_ConfigClockSource+0x1de>
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d867      	bhi.n	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d05c      	beq.n	800576a <HAL_TIM_ConfigClockSource+0x1de>
 80056b0:	2b10      	cmp	r3, #16
 80056b2:	d05a      	beq.n	800576a <HAL_TIM_ConfigClockSource+0x1de>
 80056b4:	e062      	b.n	800577c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056c6:	f000 fe11 	bl	80062ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	609a      	str	r2, [r3, #8]
      break;
 80056e2:	e04f      	b.n	8005784 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056f4:	f000 fdfa 	bl	80062ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005706:	609a      	str	r2, [r3, #8]
      break;
 8005708:	e03c      	b.n	8005784 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005716:	461a      	mov	r2, r3
 8005718:	f000 fd6c 	bl	80061f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2150      	movs	r1, #80	@ 0x50
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fdc5 	bl	80062b2 <TIM_ITRx_SetConfig>
      break;
 8005728:	e02c      	b.n	8005784 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005736:	461a      	mov	r2, r3
 8005738:	f000 fd8b 	bl	8006252 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2160      	movs	r1, #96	@ 0x60
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fdb5 	bl	80062b2 <TIM_ITRx_SetConfig>
      break;
 8005748:	e01c      	b.n	8005784 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005756:	461a      	mov	r2, r3
 8005758:	f000 fd4c 	bl	80061f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2140      	movs	r1, #64	@ 0x40
 8005762:	4618      	mov	r0, r3
 8005764:	f000 fda5 	bl	80062b2 <TIM_ITRx_SetConfig>
      break;
 8005768:	e00c      	b.n	8005784 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4619      	mov	r1, r3
 8005774:	4610      	mov	r0, r2
 8005776:	f000 fd9c 	bl	80062b2 <TIM_ITRx_SetConfig>
      break;
 800577a:	e003      	b.n	8005784 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	73fb      	strb	r3, [r7, #15]
      break;
 8005780:	e000      	b.n	8005784 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005782:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005794:	7bfb      	ldrb	r3, [r7, #15]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	00100070 	.word	0x00100070
 80057a4:	00100060 	.word	0x00100060
 80057a8:	00100050 	.word	0x00100050
 80057ac:	00100040 	.word	0x00100040
 80057b0:	00100030 	.word	0x00100030
 80057b4:	00100020 	.word	0x00100020

080057b8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e031      	b.n	8005834 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80057e0:	6839      	ldr	r1, [r7, #0]
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fc26 	bl	8006034 <TIM_SlaveTimer_SetConfig>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d009      	beq.n	8005802 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e018      	b.n	8005834 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005810:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005820:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a4c      	ldr	r2, [pc, #304]	@ (80059bc <TIM_Base_SetConfig+0x144>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d017      	beq.n	80058c0 <TIM_Base_SetConfig+0x48>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005896:	d013      	beq.n	80058c0 <TIM_Base_SetConfig+0x48>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a49      	ldr	r2, [pc, #292]	@ (80059c0 <TIM_Base_SetConfig+0x148>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00f      	beq.n	80058c0 <TIM_Base_SetConfig+0x48>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a48      	ldr	r2, [pc, #288]	@ (80059c4 <TIM_Base_SetConfig+0x14c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00b      	beq.n	80058c0 <TIM_Base_SetConfig+0x48>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a47      	ldr	r2, [pc, #284]	@ (80059c8 <TIM_Base_SetConfig+0x150>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d007      	beq.n	80058c0 <TIM_Base_SetConfig+0x48>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a46      	ldr	r2, [pc, #280]	@ (80059cc <TIM_Base_SetConfig+0x154>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d003      	beq.n	80058c0 <TIM_Base_SetConfig+0x48>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a45      	ldr	r2, [pc, #276]	@ (80059d0 <TIM_Base_SetConfig+0x158>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d108      	bne.n	80058d2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a39      	ldr	r2, [pc, #228]	@ (80059bc <TIM_Base_SetConfig+0x144>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d023      	beq.n	8005922 <TIM_Base_SetConfig+0xaa>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e0:	d01f      	beq.n	8005922 <TIM_Base_SetConfig+0xaa>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a36      	ldr	r2, [pc, #216]	@ (80059c0 <TIM_Base_SetConfig+0x148>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d01b      	beq.n	8005922 <TIM_Base_SetConfig+0xaa>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a35      	ldr	r2, [pc, #212]	@ (80059c4 <TIM_Base_SetConfig+0x14c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d017      	beq.n	8005922 <TIM_Base_SetConfig+0xaa>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a34      	ldr	r2, [pc, #208]	@ (80059c8 <TIM_Base_SetConfig+0x150>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d013      	beq.n	8005922 <TIM_Base_SetConfig+0xaa>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a33      	ldr	r2, [pc, #204]	@ (80059cc <TIM_Base_SetConfig+0x154>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00f      	beq.n	8005922 <TIM_Base_SetConfig+0xaa>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a33      	ldr	r2, [pc, #204]	@ (80059d4 <TIM_Base_SetConfig+0x15c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00b      	beq.n	8005922 <TIM_Base_SetConfig+0xaa>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a32      	ldr	r2, [pc, #200]	@ (80059d8 <TIM_Base_SetConfig+0x160>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d007      	beq.n	8005922 <TIM_Base_SetConfig+0xaa>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a31      	ldr	r2, [pc, #196]	@ (80059dc <TIM_Base_SetConfig+0x164>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d003      	beq.n	8005922 <TIM_Base_SetConfig+0xaa>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a2c      	ldr	r2, [pc, #176]	@ (80059d0 <TIM_Base_SetConfig+0x158>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d108      	bne.n	8005934 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a18      	ldr	r2, [pc, #96]	@ (80059bc <TIM_Base_SetConfig+0x144>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d013      	beq.n	8005988 <TIM_Base_SetConfig+0x110>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a1a      	ldr	r2, [pc, #104]	@ (80059cc <TIM_Base_SetConfig+0x154>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d00f      	beq.n	8005988 <TIM_Base_SetConfig+0x110>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a1a      	ldr	r2, [pc, #104]	@ (80059d4 <TIM_Base_SetConfig+0x15c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d00b      	beq.n	8005988 <TIM_Base_SetConfig+0x110>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a19      	ldr	r2, [pc, #100]	@ (80059d8 <TIM_Base_SetConfig+0x160>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d007      	beq.n	8005988 <TIM_Base_SetConfig+0x110>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a18      	ldr	r2, [pc, #96]	@ (80059dc <TIM_Base_SetConfig+0x164>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d003      	beq.n	8005988 <TIM_Base_SetConfig+0x110>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a13      	ldr	r2, [pc, #76]	@ (80059d0 <TIM_Base_SetConfig+0x158>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d103      	bne.n	8005990 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d105      	bne.n	80059ae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f023 0201 	bic.w	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	611a      	str	r2, [r3, #16]
  }
}
 80059ae:	bf00      	nop
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40012c00 	.word	0x40012c00
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40000800 	.word	0x40000800
 80059c8:	40000c00 	.word	0x40000c00
 80059cc:	40013400 	.word	0x40013400
 80059d0:	40015000 	.word	0x40015000
 80059d4:	40014000 	.word	0x40014000
 80059d8:	40014400 	.word	0x40014400
 80059dc:	40014800 	.word	0x40014800

080059e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	f023 0201 	bic.w	r2, r3, #1
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f023 0302 	bic.w	r3, r3, #2
 8005a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a30      	ldr	r2, [pc, #192]	@ (8005afc <TIM_OC1_SetConfig+0x11c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d013      	beq.n	8005a68 <TIM_OC1_SetConfig+0x88>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a2f      	ldr	r2, [pc, #188]	@ (8005b00 <TIM_OC1_SetConfig+0x120>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00f      	beq.n	8005a68 <TIM_OC1_SetConfig+0x88>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a2e      	ldr	r2, [pc, #184]	@ (8005b04 <TIM_OC1_SetConfig+0x124>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00b      	beq.n	8005a68 <TIM_OC1_SetConfig+0x88>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a2d      	ldr	r2, [pc, #180]	@ (8005b08 <TIM_OC1_SetConfig+0x128>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d007      	beq.n	8005a68 <TIM_OC1_SetConfig+0x88>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a2c      	ldr	r2, [pc, #176]	@ (8005b0c <TIM_OC1_SetConfig+0x12c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d003      	beq.n	8005a68 <TIM_OC1_SetConfig+0x88>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a2b      	ldr	r2, [pc, #172]	@ (8005b10 <TIM_OC1_SetConfig+0x130>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d10c      	bne.n	8005a82 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f023 0308 	bic.w	r3, r3, #8
 8005a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f023 0304 	bic.w	r3, r3, #4
 8005a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a1d      	ldr	r2, [pc, #116]	@ (8005afc <TIM_OC1_SetConfig+0x11c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <TIM_OC1_SetConfig+0xd2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005b00 <TIM_OC1_SetConfig+0x120>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00f      	beq.n	8005ab2 <TIM_OC1_SetConfig+0xd2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a1b      	ldr	r2, [pc, #108]	@ (8005b04 <TIM_OC1_SetConfig+0x124>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d00b      	beq.n	8005ab2 <TIM_OC1_SetConfig+0xd2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8005b08 <TIM_OC1_SetConfig+0x128>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d007      	beq.n	8005ab2 <TIM_OC1_SetConfig+0xd2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a19      	ldr	r2, [pc, #100]	@ (8005b0c <TIM_OC1_SetConfig+0x12c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d003      	beq.n	8005ab2 <TIM_OC1_SetConfig+0xd2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a18      	ldr	r2, [pc, #96]	@ (8005b10 <TIM_OC1_SetConfig+0x130>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d111      	bne.n	8005ad6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	621a      	str	r2, [r3, #32]
}
 8005af0:	bf00      	nop
 8005af2:	371c      	adds	r7, #28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	40012c00 	.word	0x40012c00
 8005b00:	40013400 	.word	0x40013400
 8005b04:	40014000 	.word	0x40014000
 8005b08:	40014400 	.word	0x40014400
 8005b0c:	40014800 	.word	0x40014800
 8005b10:	40015000 	.word	0x40015000

08005b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f023 0210 	bic.w	r2, r3, #16
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	021b      	lsls	r3, r3, #8
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f023 0320 	bic.w	r3, r3, #32
 8005b62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a2c      	ldr	r2, [pc, #176]	@ (8005c24 <TIM_OC2_SetConfig+0x110>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d007      	beq.n	8005b88 <TIM_OC2_SetConfig+0x74>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8005c28 <TIM_OC2_SetConfig+0x114>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_OC2_SetConfig+0x74>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a2a      	ldr	r2, [pc, #168]	@ (8005c2c <TIM_OC2_SetConfig+0x118>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d10d      	bne.n	8005ba4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ba2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a1f      	ldr	r2, [pc, #124]	@ (8005c24 <TIM_OC2_SetConfig+0x110>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d013      	beq.n	8005bd4 <TIM_OC2_SetConfig+0xc0>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a1e      	ldr	r2, [pc, #120]	@ (8005c28 <TIM_OC2_SetConfig+0x114>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00f      	beq.n	8005bd4 <TIM_OC2_SetConfig+0xc0>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c30 <TIM_OC2_SetConfig+0x11c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00b      	beq.n	8005bd4 <TIM_OC2_SetConfig+0xc0>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8005c34 <TIM_OC2_SetConfig+0x120>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d007      	beq.n	8005bd4 <TIM_OC2_SetConfig+0xc0>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8005c38 <TIM_OC2_SetConfig+0x124>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_OC2_SetConfig+0xc0>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a17      	ldr	r2, [pc, #92]	@ (8005c2c <TIM_OC2_SetConfig+0x118>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d113      	bne.n	8005bfc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005be2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	621a      	str	r2, [r3, #32]
}
 8005c16:	bf00      	nop
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	40012c00 	.word	0x40012c00
 8005c28:	40013400 	.word	0x40013400
 8005c2c:	40015000 	.word	0x40015000
 8005c30:	40014000 	.word	0x40014000
 8005c34:	40014400 	.word	0x40014400
 8005c38:	40014800 	.word	0x40014800

08005c3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0303 	bic.w	r3, r3, #3
 8005c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	021b      	lsls	r3, r3, #8
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2b      	ldr	r2, [pc, #172]	@ (8005d48 <TIM_OC3_SetConfig+0x10c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d007      	beq.n	8005cae <TIM_OC3_SetConfig+0x72>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8005d4c <TIM_OC3_SetConfig+0x110>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d003      	beq.n	8005cae <TIM_OC3_SetConfig+0x72>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a29      	ldr	r2, [pc, #164]	@ (8005d50 <TIM_OC3_SetConfig+0x114>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d10d      	bne.n	8005cca <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a1e      	ldr	r2, [pc, #120]	@ (8005d48 <TIM_OC3_SetConfig+0x10c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d013      	beq.n	8005cfa <TIM_OC3_SetConfig+0xbe>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d4c <TIM_OC3_SetConfig+0x110>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00f      	beq.n	8005cfa <TIM_OC3_SetConfig+0xbe>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8005d54 <TIM_OC3_SetConfig+0x118>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00b      	beq.n	8005cfa <TIM_OC3_SetConfig+0xbe>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d58 <TIM_OC3_SetConfig+0x11c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d007      	beq.n	8005cfa <TIM_OC3_SetConfig+0xbe>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a1b      	ldr	r2, [pc, #108]	@ (8005d5c <TIM_OC3_SetConfig+0x120>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d003      	beq.n	8005cfa <TIM_OC3_SetConfig+0xbe>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a16      	ldr	r2, [pc, #88]	@ (8005d50 <TIM_OC3_SetConfig+0x114>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d113      	bne.n	8005d22 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	621a      	str	r2, [r3, #32]
}
 8005d3c:	bf00      	nop
 8005d3e:	371c      	adds	r7, #28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	40012c00 	.word	0x40012c00
 8005d4c:	40013400 	.word	0x40013400
 8005d50:	40015000 	.word	0x40015000
 8005d54:	40014000 	.word	0x40014000
 8005d58:	40014400 	.word	0x40014400
 8005d5c:	40014800 	.word	0x40014800

08005d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	021b      	lsls	r3, r3, #8
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	031b      	lsls	r3, r3, #12
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a2c      	ldr	r2, [pc, #176]	@ (8005e70 <TIM_OC4_SetConfig+0x110>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d007      	beq.n	8005dd4 <TIM_OC4_SetConfig+0x74>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a2b      	ldr	r2, [pc, #172]	@ (8005e74 <TIM_OC4_SetConfig+0x114>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d003      	beq.n	8005dd4 <TIM_OC4_SetConfig+0x74>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a2a      	ldr	r2, [pc, #168]	@ (8005e78 <TIM_OC4_SetConfig+0x118>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d10d      	bne.n	8005df0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	031b      	lsls	r3, r3, #12
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a1f      	ldr	r2, [pc, #124]	@ (8005e70 <TIM_OC4_SetConfig+0x110>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d013      	beq.n	8005e20 <TIM_OC4_SetConfig+0xc0>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8005e74 <TIM_OC4_SetConfig+0x114>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00f      	beq.n	8005e20 <TIM_OC4_SetConfig+0xc0>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a1e      	ldr	r2, [pc, #120]	@ (8005e7c <TIM_OC4_SetConfig+0x11c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d00b      	beq.n	8005e20 <TIM_OC4_SetConfig+0xc0>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8005e80 <TIM_OC4_SetConfig+0x120>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d007      	beq.n	8005e20 <TIM_OC4_SetConfig+0xc0>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a1c      	ldr	r2, [pc, #112]	@ (8005e84 <TIM_OC4_SetConfig+0x124>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d003      	beq.n	8005e20 <TIM_OC4_SetConfig+0xc0>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a17      	ldr	r2, [pc, #92]	@ (8005e78 <TIM_OC4_SetConfig+0x118>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d113      	bne.n	8005e48 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e26:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e2e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	019b      	lsls	r3, r3, #6
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	019b      	lsls	r3, r3, #6
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40012c00 	.word	0x40012c00
 8005e74:	40013400 	.word	0x40013400
 8005e78:	40015000 	.word	0x40015000
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800

08005e88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005ecc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	041b      	lsls	r3, r3, #16
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a19      	ldr	r2, [pc, #100]	@ (8005f44 <TIM_OC5_SetConfig+0xbc>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d013      	beq.n	8005f0a <TIM_OC5_SetConfig+0x82>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a18      	ldr	r2, [pc, #96]	@ (8005f48 <TIM_OC5_SetConfig+0xc0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d00f      	beq.n	8005f0a <TIM_OC5_SetConfig+0x82>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a17      	ldr	r2, [pc, #92]	@ (8005f4c <TIM_OC5_SetConfig+0xc4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00b      	beq.n	8005f0a <TIM_OC5_SetConfig+0x82>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a16      	ldr	r2, [pc, #88]	@ (8005f50 <TIM_OC5_SetConfig+0xc8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d007      	beq.n	8005f0a <TIM_OC5_SetConfig+0x82>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a15      	ldr	r2, [pc, #84]	@ (8005f54 <TIM_OC5_SetConfig+0xcc>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d003      	beq.n	8005f0a <TIM_OC5_SetConfig+0x82>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a14      	ldr	r2, [pc, #80]	@ (8005f58 <TIM_OC5_SetConfig+0xd0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d109      	bne.n	8005f1e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	021b      	lsls	r3, r3, #8
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	621a      	str	r2, [r3, #32]
}
 8005f38:	bf00      	nop
 8005f3a:	371c      	adds	r7, #28
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	40012c00 	.word	0x40012c00
 8005f48:	40013400 	.word	0x40013400
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40014400 	.word	0x40014400
 8005f54:	40014800 	.word	0x40014800
 8005f58:	40015000 	.word	0x40015000

08005f5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	021b      	lsls	r3, r3, #8
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005fa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	051b      	lsls	r3, r3, #20
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a1a      	ldr	r2, [pc, #104]	@ (800601c <TIM_OC6_SetConfig+0xc0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d013      	beq.n	8005fe0 <TIM_OC6_SetConfig+0x84>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a19      	ldr	r2, [pc, #100]	@ (8006020 <TIM_OC6_SetConfig+0xc4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00f      	beq.n	8005fe0 <TIM_OC6_SetConfig+0x84>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a18      	ldr	r2, [pc, #96]	@ (8006024 <TIM_OC6_SetConfig+0xc8>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00b      	beq.n	8005fe0 <TIM_OC6_SetConfig+0x84>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a17      	ldr	r2, [pc, #92]	@ (8006028 <TIM_OC6_SetConfig+0xcc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d007      	beq.n	8005fe0 <TIM_OC6_SetConfig+0x84>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a16      	ldr	r2, [pc, #88]	@ (800602c <TIM_OC6_SetConfig+0xd0>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_OC6_SetConfig+0x84>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a15      	ldr	r2, [pc, #84]	@ (8006030 <TIM_OC6_SetConfig+0xd4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d109      	bne.n	8005ff4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	029b      	lsls	r3, r3, #10
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	621a      	str	r2, [r3, #32]
}
 800600e:	bf00      	nop
 8006010:	371c      	adds	r7, #28
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40012c00 	.word	0x40012c00
 8006020:	40013400 	.word	0x40013400
 8006024:	40014000 	.word	0x40014000
 8006028:	40014400 	.word	0x40014400
 800602c:	40014800 	.word	0x40014800
 8006030:	40015000 	.word	0x40015000

08006034 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006054:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006066:	f023 0307 	bic.w	r3, r3, #7
 800606a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	4a56      	ldr	r2, [pc, #344]	@ (80061dc <TIM_SlaveTimer_SetConfig+0x1a8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	f000 80a2 	beq.w	80061ce <TIM_SlaveTimer_SetConfig+0x19a>
 800608a:	4a54      	ldr	r2, [pc, #336]	@ (80061dc <TIM_SlaveTimer_SetConfig+0x1a8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	f200 809b 	bhi.w	80061c8 <TIM_SlaveTimer_SetConfig+0x194>
 8006092:	4a53      	ldr	r2, [pc, #332]	@ (80061e0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8006094:	4293      	cmp	r3, r2
 8006096:	f000 809a 	beq.w	80061ce <TIM_SlaveTimer_SetConfig+0x19a>
 800609a:	4a51      	ldr	r2, [pc, #324]	@ (80061e0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800609c:	4293      	cmp	r3, r2
 800609e:	f200 8093 	bhi.w	80061c8 <TIM_SlaveTimer_SetConfig+0x194>
 80060a2:	4a50      	ldr	r2, [pc, #320]	@ (80061e4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	f000 8092 	beq.w	80061ce <TIM_SlaveTimer_SetConfig+0x19a>
 80060aa:	4a4e      	ldr	r2, [pc, #312]	@ (80061e4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	f200 808b 	bhi.w	80061c8 <TIM_SlaveTimer_SetConfig+0x194>
 80060b2:	4a4d      	ldr	r2, [pc, #308]	@ (80061e8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	f000 808a 	beq.w	80061ce <TIM_SlaveTimer_SetConfig+0x19a>
 80060ba:	4a4b      	ldr	r2, [pc, #300]	@ (80061e8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	f200 8083 	bhi.w	80061c8 <TIM_SlaveTimer_SetConfig+0x194>
 80060c2:	4a4a      	ldr	r2, [pc, #296]	@ (80061ec <TIM_SlaveTimer_SetConfig+0x1b8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	f000 8082 	beq.w	80061ce <TIM_SlaveTimer_SetConfig+0x19a>
 80060ca:	4a48      	ldr	r2, [pc, #288]	@ (80061ec <TIM_SlaveTimer_SetConfig+0x1b8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d87b      	bhi.n	80061c8 <TIM_SlaveTimer_SetConfig+0x194>
 80060d0:	4a47      	ldr	r2, [pc, #284]	@ (80061f0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d07b      	beq.n	80061ce <TIM_SlaveTimer_SetConfig+0x19a>
 80060d6:	4a46      	ldr	r2, [pc, #280]	@ (80061f0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d875      	bhi.n	80061c8 <TIM_SlaveTimer_SetConfig+0x194>
 80060dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80060e0:	d075      	beq.n	80061ce <TIM_SlaveTimer_SetConfig+0x19a>
 80060e2:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80060e6:	d86f      	bhi.n	80061c8 <TIM_SlaveTimer_SetConfig+0x194>
 80060e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060ec:	d06f      	beq.n	80061ce <TIM_SlaveTimer_SetConfig+0x19a>
 80060ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060f2:	d869      	bhi.n	80061c8 <TIM_SlaveTimer_SetConfig+0x194>
 80060f4:	2b70      	cmp	r3, #112	@ 0x70
 80060f6:	d01a      	beq.n	800612e <TIM_SlaveTimer_SetConfig+0xfa>
 80060f8:	2b70      	cmp	r3, #112	@ 0x70
 80060fa:	d865      	bhi.n	80061c8 <TIM_SlaveTimer_SetConfig+0x194>
 80060fc:	2b60      	cmp	r3, #96	@ 0x60
 80060fe:	d059      	beq.n	80061b4 <TIM_SlaveTimer_SetConfig+0x180>
 8006100:	2b60      	cmp	r3, #96	@ 0x60
 8006102:	d861      	bhi.n	80061c8 <TIM_SlaveTimer_SetConfig+0x194>
 8006104:	2b50      	cmp	r3, #80	@ 0x50
 8006106:	d04b      	beq.n	80061a0 <TIM_SlaveTimer_SetConfig+0x16c>
 8006108:	2b50      	cmp	r3, #80	@ 0x50
 800610a:	d85d      	bhi.n	80061c8 <TIM_SlaveTimer_SetConfig+0x194>
 800610c:	2b40      	cmp	r3, #64	@ 0x40
 800610e:	d019      	beq.n	8006144 <TIM_SlaveTimer_SetConfig+0x110>
 8006110:	2b40      	cmp	r3, #64	@ 0x40
 8006112:	d859      	bhi.n	80061c8 <TIM_SlaveTimer_SetConfig+0x194>
 8006114:	2b30      	cmp	r3, #48	@ 0x30
 8006116:	d05a      	beq.n	80061ce <TIM_SlaveTimer_SetConfig+0x19a>
 8006118:	2b30      	cmp	r3, #48	@ 0x30
 800611a:	d855      	bhi.n	80061c8 <TIM_SlaveTimer_SetConfig+0x194>
 800611c:	2b20      	cmp	r3, #32
 800611e:	d056      	beq.n	80061ce <TIM_SlaveTimer_SetConfig+0x19a>
 8006120:	2b20      	cmp	r3, #32
 8006122:	d851      	bhi.n	80061c8 <TIM_SlaveTimer_SetConfig+0x194>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d052      	beq.n	80061ce <TIM_SlaveTimer_SetConfig+0x19a>
 8006128:	2b10      	cmp	r3, #16
 800612a:	d050      	beq.n	80061ce <TIM_SlaveTimer_SetConfig+0x19a>
 800612c:	e04c      	b.n	80061c8 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800613e:	f000 f8d5 	bl	80062ec <TIM_ETR_SetConfig>
      break;
 8006142:	e045      	b.n	80061d0 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b05      	cmp	r3, #5
 800614a:	d004      	beq.n	8006156 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006150:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8006154:	d101      	bne.n	800615a <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e03b      	b.n	80061d2 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6a1a      	ldr	r2, [r3, #32]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0201 	bic.w	r2, r2, #1
 8006170:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006180:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	4313      	orrs	r3, r2
 800618c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	621a      	str	r2, [r3, #32]
      break;
 800619e:	e017      	b.n	80061d0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ac:	461a      	mov	r2, r3
 80061ae:	f000 f821 	bl	80061f4 <TIM_TI1_ConfigInputStage>
      break;
 80061b2:	e00d      	b.n	80061d0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061c0:	461a      	mov	r2, r3
 80061c2:	f000 f846 	bl	8006252 <TIM_TI2_ConfigInputStage>
      break;
 80061c6:	e003      	b.n	80061d0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	75fb      	strb	r3, [r7, #23]
      break;
 80061cc:	e000      	b.n	80061d0 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 80061ce:	bf00      	nop
  }

  return status;
 80061d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	00100070 	.word	0x00100070
 80061e0:	00100060 	.word	0x00100060
 80061e4:	00100050 	.word	0x00100050
 80061e8:	00100040 	.word	0x00100040
 80061ec:	00100030 	.word	0x00100030
 80061f0:	00100020 	.word	0x00100020

080061f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	f023 0201 	bic.w	r2, r3, #1
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800621e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	011b      	lsls	r3, r3, #4
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	4313      	orrs	r3, r2
 8006228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f023 030a 	bic.w	r3, r3, #10
 8006230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	621a      	str	r2, [r3, #32]
}
 8006246:	bf00      	nop
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006252:	b480      	push	{r7}
 8006254:	b087      	sub	sp, #28
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	f023 0210 	bic.w	r2, r3, #16
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800627c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	031b      	lsls	r3, r3, #12
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800628e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	4313      	orrs	r3, r2
 8006298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	621a      	str	r2, [r3, #32]
}
 80062a6:	bf00      	nop
 80062a8:	371c      	adds	r7, #28
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b085      	sub	sp, #20
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
 80062ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80062c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f043 0307 	orr.w	r3, r3, #7
 80062d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	609a      	str	r2, [r3, #8]
}
 80062e0:	bf00      	nop
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	021a      	lsls	r2, r3, #8
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	431a      	orrs	r2, r3
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4313      	orrs	r3, r2
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	609a      	str	r2, [r3, #8]
}
 8006320:	bf00      	nop
 8006322:	371c      	adds	r7, #28
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f003 031f 	and.w	r3, r3, #31
 800633e:	2201      	movs	r2, #1
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6a1a      	ldr	r2, [r3, #32]
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	43db      	mvns	r3, r3
 800634e:	401a      	ands	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a1a      	ldr	r2, [r3, #32]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f003 031f 	and.w	r3, r3, #31
 800635e:	6879      	ldr	r1, [r7, #4]
 8006360:	fa01 f303 	lsl.w	r3, r1, r3
 8006364:	431a      	orrs	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	621a      	str	r2, [r3, #32]
}
 800636a:	bf00      	nop
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
	...

08006378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800638c:	2302      	movs	r3, #2
 800638e:	e074      	b.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a34      	ldr	r2, [pc, #208]	@ (8006488 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d009      	beq.n	80063ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a33      	ldr	r2, [pc, #204]	@ (800648c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d004      	beq.n	80063ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a31      	ldr	r2, [pc, #196]	@ (8006490 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d108      	bne.n	80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80063d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80063e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a21      	ldr	r2, [pc, #132]	@ (8006488 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d022      	beq.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006410:	d01d      	beq.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a1f      	ldr	r2, [pc, #124]	@ (8006494 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d018      	beq.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a1d      	ldr	r2, [pc, #116]	@ (8006498 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d013      	beq.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a1c      	ldr	r2, [pc, #112]	@ (800649c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00e      	beq.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a15      	ldr	r2, [pc, #84]	@ (800648c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d009      	beq.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a18      	ldr	r2, [pc, #96]	@ (80064a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d004      	beq.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a11      	ldr	r2, [pc, #68]	@ (8006490 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d10c      	bne.n	8006468 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	4313      	orrs	r3, r2
 800645e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	40012c00 	.word	0x40012c00
 800648c:	40013400 	.word	0x40013400
 8006490:	40015000 	.word	0x40015000
 8006494:	40000400 	.word	0x40000400
 8006498:	40000800 	.word	0x40000800
 800649c:	40000c00 	.word	0x40000c00
 80064a0:	40014000 	.word	0x40014000

080064a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <srand>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4b10      	ldr	r3, [pc, #64]	@ (8006574 <srand+0x44>)
 8006534:	681d      	ldr	r5, [r3, #0]
 8006536:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006538:	4604      	mov	r4, r0
 800653a:	b9b3      	cbnz	r3, 800656a <srand+0x3a>
 800653c:	2018      	movs	r0, #24
 800653e:	f000 fa4d 	bl	80069dc <malloc>
 8006542:	4602      	mov	r2, r0
 8006544:	6328      	str	r0, [r5, #48]	@ 0x30
 8006546:	b920      	cbnz	r0, 8006552 <srand+0x22>
 8006548:	4b0b      	ldr	r3, [pc, #44]	@ (8006578 <srand+0x48>)
 800654a:	480c      	ldr	r0, [pc, #48]	@ (800657c <srand+0x4c>)
 800654c:	2146      	movs	r1, #70	@ 0x46
 800654e:	f000 f9dd 	bl	800690c <__assert_func>
 8006552:	490b      	ldr	r1, [pc, #44]	@ (8006580 <srand+0x50>)
 8006554:	4b0b      	ldr	r3, [pc, #44]	@ (8006584 <srand+0x54>)
 8006556:	e9c0 1300 	strd	r1, r3, [r0]
 800655a:	4b0b      	ldr	r3, [pc, #44]	@ (8006588 <srand+0x58>)
 800655c:	6083      	str	r3, [r0, #8]
 800655e:	230b      	movs	r3, #11
 8006560:	8183      	strh	r3, [r0, #12]
 8006562:	2100      	movs	r1, #0
 8006564:	2001      	movs	r0, #1
 8006566:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800656a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800656c:	2200      	movs	r2, #0
 800656e:	611c      	str	r4, [r3, #16]
 8006570:	615a      	str	r2, [r3, #20]
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	200032c0 	.word	0x200032c0
 8006578:	08007fa0 	.word	0x08007fa0
 800657c:	08007fb7 	.word	0x08007fb7
 8006580:	abcd330e 	.word	0xabcd330e
 8006584:	e66d1234 	.word	0xe66d1234
 8006588:	0005deec 	.word	0x0005deec

0800658c <rand>:
 800658c:	4b16      	ldr	r3, [pc, #88]	@ (80065e8 <rand+0x5c>)
 800658e:	b510      	push	{r4, lr}
 8006590:	681c      	ldr	r4, [r3, #0]
 8006592:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006594:	b9b3      	cbnz	r3, 80065c4 <rand+0x38>
 8006596:	2018      	movs	r0, #24
 8006598:	f000 fa20 	bl	80069dc <malloc>
 800659c:	4602      	mov	r2, r0
 800659e:	6320      	str	r0, [r4, #48]	@ 0x30
 80065a0:	b920      	cbnz	r0, 80065ac <rand+0x20>
 80065a2:	4b12      	ldr	r3, [pc, #72]	@ (80065ec <rand+0x60>)
 80065a4:	4812      	ldr	r0, [pc, #72]	@ (80065f0 <rand+0x64>)
 80065a6:	2152      	movs	r1, #82	@ 0x52
 80065a8:	f000 f9b0 	bl	800690c <__assert_func>
 80065ac:	4911      	ldr	r1, [pc, #68]	@ (80065f4 <rand+0x68>)
 80065ae:	4b12      	ldr	r3, [pc, #72]	@ (80065f8 <rand+0x6c>)
 80065b0:	e9c0 1300 	strd	r1, r3, [r0]
 80065b4:	4b11      	ldr	r3, [pc, #68]	@ (80065fc <rand+0x70>)
 80065b6:	6083      	str	r3, [r0, #8]
 80065b8:	230b      	movs	r3, #11
 80065ba:	8183      	strh	r3, [r0, #12]
 80065bc:	2100      	movs	r1, #0
 80065be:	2001      	movs	r0, #1
 80065c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80065c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80065c6:	480e      	ldr	r0, [pc, #56]	@ (8006600 <rand+0x74>)
 80065c8:	690b      	ldr	r3, [r1, #16]
 80065ca:	694c      	ldr	r4, [r1, #20]
 80065cc:	4a0d      	ldr	r2, [pc, #52]	@ (8006604 <rand+0x78>)
 80065ce:	4358      	muls	r0, r3
 80065d0:	fb02 0004 	mla	r0, r2, r4, r0
 80065d4:	fba3 3202 	umull	r3, r2, r3, r2
 80065d8:	3301      	adds	r3, #1
 80065da:	eb40 0002 	adc.w	r0, r0, r2
 80065de:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80065e2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80065e6:	bd10      	pop	{r4, pc}
 80065e8:	200032c0 	.word	0x200032c0
 80065ec:	08007fa0 	.word	0x08007fa0
 80065f0:	08007fb7 	.word	0x08007fb7
 80065f4:	abcd330e 	.word	0xabcd330e
 80065f8:	e66d1234 	.word	0xe66d1234
 80065fc:	0005deec 	.word	0x0005deec
 8006600:	5851f42d 	.word	0x5851f42d
 8006604:	4c957f2d 	.word	0x4c957f2d

08006608 <std>:
 8006608:	2300      	movs	r3, #0
 800660a:	b510      	push	{r4, lr}
 800660c:	4604      	mov	r4, r0
 800660e:	e9c0 3300 	strd	r3, r3, [r0]
 8006612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006616:	6083      	str	r3, [r0, #8]
 8006618:	8181      	strh	r1, [r0, #12]
 800661a:	6643      	str	r3, [r0, #100]	@ 0x64
 800661c:	81c2      	strh	r2, [r0, #14]
 800661e:	6183      	str	r3, [r0, #24]
 8006620:	4619      	mov	r1, r3
 8006622:	2208      	movs	r2, #8
 8006624:	305c      	adds	r0, #92	@ 0x5c
 8006626:	f000 f8f4 	bl	8006812 <memset>
 800662a:	4b0d      	ldr	r3, [pc, #52]	@ (8006660 <std+0x58>)
 800662c:	6263      	str	r3, [r4, #36]	@ 0x24
 800662e:	4b0d      	ldr	r3, [pc, #52]	@ (8006664 <std+0x5c>)
 8006630:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006632:	4b0d      	ldr	r3, [pc, #52]	@ (8006668 <std+0x60>)
 8006634:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006636:	4b0d      	ldr	r3, [pc, #52]	@ (800666c <std+0x64>)
 8006638:	6323      	str	r3, [r4, #48]	@ 0x30
 800663a:	4b0d      	ldr	r3, [pc, #52]	@ (8006670 <std+0x68>)
 800663c:	6224      	str	r4, [r4, #32]
 800663e:	429c      	cmp	r4, r3
 8006640:	d006      	beq.n	8006650 <std+0x48>
 8006642:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006646:	4294      	cmp	r4, r2
 8006648:	d002      	beq.n	8006650 <std+0x48>
 800664a:	33d0      	adds	r3, #208	@ 0xd0
 800664c:	429c      	cmp	r4, r3
 800664e:	d105      	bne.n	800665c <std+0x54>
 8006650:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006658:	f000 b954 	b.w	8006904 <__retarget_lock_init_recursive>
 800665c:	bd10      	pop	{r4, pc}
 800665e:	bf00      	nop
 8006660:	0800678d 	.word	0x0800678d
 8006664:	080067af 	.word	0x080067af
 8006668:	080067e7 	.word	0x080067e7
 800666c:	0800680b 	.word	0x0800680b
 8006670:	200035d8 	.word	0x200035d8

08006674 <stdio_exit_handler>:
 8006674:	4a02      	ldr	r2, [pc, #8]	@ (8006680 <stdio_exit_handler+0xc>)
 8006676:	4903      	ldr	r1, [pc, #12]	@ (8006684 <stdio_exit_handler+0x10>)
 8006678:	4803      	ldr	r0, [pc, #12]	@ (8006688 <stdio_exit_handler+0x14>)
 800667a:	f000 b869 	b.w	8006750 <_fwalk_sglue>
 800667e:	bf00      	nop
 8006680:	200032b4 	.word	0x200032b4
 8006684:	08006c51 	.word	0x08006c51
 8006688:	200032c4 	.word	0x200032c4

0800668c <cleanup_stdio>:
 800668c:	6841      	ldr	r1, [r0, #4]
 800668e:	4b0c      	ldr	r3, [pc, #48]	@ (80066c0 <cleanup_stdio+0x34>)
 8006690:	4299      	cmp	r1, r3
 8006692:	b510      	push	{r4, lr}
 8006694:	4604      	mov	r4, r0
 8006696:	d001      	beq.n	800669c <cleanup_stdio+0x10>
 8006698:	f000 fada 	bl	8006c50 <_fflush_r>
 800669c:	68a1      	ldr	r1, [r4, #8]
 800669e:	4b09      	ldr	r3, [pc, #36]	@ (80066c4 <cleanup_stdio+0x38>)
 80066a0:	4299      	cmp	r1, r3
 80066a2:	d002      	beq.n	80066aa <cleanup_stdio+0x1e>
 80066a4:	4620      	mov	r0, r4
 80066a6:	f000 fad3 	bl	8006c50 <_fflush_r>
 80066aa:	68e1      	ldr	r1, [r4, #12]
 80066ac:	4b06      	ldr	r3, [pc, #24]	@ (80066c8 <cleanup_stdio+0x3c>)
 80066ae:	4299      	cmp	r1, r3
 80066b0:	d004      	beq.n	80066bc <cleanup_stdio+0x30>
 80066b2:	4620      	mov	r0, r4
 80066b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066b8:	f000 baca 	b.w	8006c50 <_fflush_r>
 80066bc:	bd10      	pop	{r4, pc}
 80066be:	bf00      	nop
 80066c0:	200035d8 	.word	0x200035d8
 80066c4:	20003640 	.word	0x20003640
 80066c8:	200036a8 	.word	0x200036a8

080066cc <global_stdio_init.part.0>:
 80066cc:	b510      	push	{r4, lr}
 80066ce:	4b0b      	ldr	r3, [pc, #44]	@ (80066fc <global_stdio_init.part.0+0x30>)
 80066d0:	4c0b      	ldr	r4, [pc, #44]	@ (8006700 <global_stdio_init.part.0+0x34>)
 80066d2:	4a0c      	ldr	r2, [pc, #48]	@ (8006704 <global_stdio_init.part.0+0x38>)
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	4620      	mov	r0, r4
 80066d8:	2200      	movs	r2, #0
 80066da:	2104      	movs	r1, #4
 80066dc:	f7ff ff94 	bl	8006608 <std>
 80066e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80066e4:	2201      	movs	r2, #1
 80066e6:	2109      	movs	r1, #9
 80066e8:	f7ff ff8e 	bl	8006608 <std>
 80066ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80066f0:	2202      	movs	r2, #2
 80066f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066f6:	2112      	movs	r1, #18
 80066f8:	f7ff bf86 	b.w	8006608 <std>
 80066fc:	20003710 	.word	0x20003710
 8006700:	200035d8 	.word	0x200035d8
 8006704:	08006675 	.word	0x08006675

08006708 <__sfp_lock_acquire>:
 8006708:	4801      	ldr	r0, [pc, #4]	@ (8006710 <__sfp_lock_acquire+0x8>)
 800670a:	f000 b8fc 	b.w	8006906 <__retarget_lock_acquire_recursive>
 800670e:	bf00      	nop
 8006710:	20003719 	.word	0x20003719

08006714 <__sfp_lock_release>:
 8006714:	4801      	ldr	r0, [pc, #4]	@ (800671c <__sfp_lock_release+0x8>)
 8006716:	f000 b8f7 	b.w	8006908 <__retarget_lock_release_recursive>
 800671a:	bf00      	nop
 800671c:	20003719 	.word	0x20003719

08006720 <__sinit>:
 8006720:	b510      	push	{r4, lr}
 8006722:	4604      	mov	r4, r0
 8006724:	f7ff fff0 	bl	8006708 <__sfp_lock_acquire>
 8006728:	6a23      	ldr	r3, [r4, #32]
 800672a:	b11b      	cbz	r3, 8006734 <__sinit+0x14>
 800672c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006730:	f7ff bff0 	b.w	8006714 <__sfp_lock_release>
 8006734:	4b04      	ldr	r3, [pc, #16]	@ (8006748 <__sinit+0x28>)
 8006736:	6223      	str	r3, [r4, #32]
 8006738:	4b04      	ldr	r3, [pc, #16]	@ (800674c <__sinit+0x2c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1f5      	bne.n	800672c <__sinit+0xc>
 8006740:	f7ff ffc4 	bl	80066cc <global_stdio_init.part.0>
 8006744:	e7f2      	b.n	800672c <__sinit+0xc>
 8006746:	bf00      	nop
 8006748:	0800668d 	.word	0x0800668d
 800674c:	20003710 	.word	0x20003710

08006750 <_fwalk_sglue>:
 8006750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006754:	4607      	mov	r7, r0
 8006756:	4688      	mov	r8, r1
 8006758:	4614      	mov	r4, r2
 800675a:	2600      	movs	r6, #0
 800675c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006760:	f1b9 0901 	subs.w	r9, r9, #1
 8006764:	d505      	bpl.n	8006772 <_fwalk_sglue+0x22>
 8006766:	6824      	ldr	r4, [r4, #0]
 8006768:	2c00      	cmp	r4, #0
 800676a:	d1f7      	bne.n	800675c <_fwalk_sglue+0xc>
 800676c:	4630      	mov	r0, r6
 800676e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006772:	89ab      	ldrh	r3, [r5, #12]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d907      	bls.n	8006788 <_fwalk_sglue+0x38>
 8006778:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800677c:	3301      	adds	r3, #1
 800677e:	d003      	beq.n	8006788 <_fwalk_sglue+0x38>
 8006780:	4629      	mov	r1, r5
 8006782:	4638      	mov	r0, r7
 8006784:	47c0      	blx	r8
 8006786:	4306      	orrs	r6, r0
 8006788:	3568      	adds	r5, #104	@ 0x68
 800678a:	e7e9      	b.n	8006760 <_fwalk_sglue+0x10>

0800678c <__sread>:
 800678c:	b510      	push	{r4, lr}
 800678e:	460c      	mov	r4, r1
 8006790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006794:	f000 f868 	bl	8006868 <_read_r>
 8006798:	2800      	cmp	r0, #0
 800679a:	bfab      	itete	ge
 800679c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800679e:	89a3      	ldrhlt	r3, [r4, #12]
 80067a0:	181b      	addge	r3, r3, r0
 80067a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067a6:	bfac      	ite	ge
 80067a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067aa:	81a3      	strhlt	r3, [r4, #12]
 80067ac:	bd10      	pop	{r4, pc}

080067ae <__swrite>:
 80067ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b2:	461f      	mov	r7, r3
 80067b4:	898b      	ldrh	r3, [r1, #12]
 80067b6:	05db      	lsls	r3, r3, #23
 80067b8:	4605      	mov	r5, r0
 80067ba:	460c      	mov	r4, r1
 80067bc:	4616      	mov	r6, r2
 80067be:	d505      	bpl.n	80067cc <__swrite+0x1e>
 80067c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c4:	2302      	movs	r3, #2
 80067c6:	2200      	movs	r2, #0
 80067c8:	f000 f83c 	bl	8006844 <_lseek_r>
 80067cc:	89a3      	ldrh	r3, [r4, #12]
 80067ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067d6:	81a3      	strh	r3, [r4, #12]
 80067d8:	4632      	mov	r2, r6
 80067da:	463b      	mov	r3, r7
 80067dc:	4628      	mov	r0, r5
 80067de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067e2:	f000 b853 	b.w	800688c <_write_r>

080067e6 <__sseek>:
 80067e6:	b510      	push	{r4, lr}
 80067e8:	460c      	mov	r4, r1
 80067ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ee:	f000 f829 	bl	8006844 <_lseek_r>
 80067f2:	1c43      	adds	r3, r0, #1
 80067f4:	89a3      	ldrh	r3, [r4, #12]
 80067f6:	bf15      	itete	ne
 80067f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80067fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80067fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006802:	81a3      	strheq	r3, [r4, #12]
 8006804:	bf18      	it	ne
 8006806:	81a3      	strhne	r3, [r4, #12]
 8006808:	bd10      	pop	{r4, pc}

0800680a <__sclose>:
 800680a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680e:	f000 b809 	b.w	8006824 <_close_r>

08006812 <memset>:
 8006812:	4402      	add	r2, r0
 8006814:	4603      	mov	r3, r0
 8006816:	4293      	cmp	r3, r2
 8006818:	d100      	bne.n	800681c <memset+0xa>
 800681a:	4770      	bx	lr
 800681c:	f803 1b01 	strb.w	r1, [r3], #1
 8006820:	e7f9      	b.n	8006816 <memset+0x4>
	...

08006824 <_close_r>:
 8006824:	b538      	push	{r3, r4, r5, lr}
 8006826:	4d06      	ldr	r5, [pc, #24]	@ (8006840 <_close_r+0x1c>)
 8006828:	2300      	movs	r3, #0
 800682a:	4604      	mov	r4, r0
 800682c:	4608      	mov	r0, r1
 800682e:	602b      	str	r3, [r5, #0]
 8006830:	f7fb f992 	bl	8001b58 <_close>
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	d102      	bne.n	800683e <_close_r+0x1a>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	b103      	cbz	r3, 800683e <_close_r+0x1a>
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	bd38      	pop	{r3, r4, r5, pc}
 8006840:	20003714 	.word	0x20003714

08006844 <_lseek_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4d07      	ldr	r5, [pc, #28]	@ (8006864 <_lseek_r+0x20>)
 8006848:	4604      	mov	r4, r0
 800684a:	4608      	mov	r0, r1
 800684c:	4611      	mov	r1, r2
 800684e:	2200      	movs	r2, #0
 8006850:	602a      	str	r2, [r5, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	f7fb f9a7 	bl	8001ba6 <_lseek>
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	d102      	bne.n	8006862 <_lseek_r+0x1e>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	b103      	cbz	r3, 8006862 <_lseek_r+0x1e>
 8006860:	6023      	str	r3, [r4, #0]
 8006862:	bd38      	pop	{r3, r4, r5, pc}
 8006864:	20003714 	.word	0x20003714

08006868 <_read_r>:
 8006868:	b538      	push	{r3, r4, r5, lr}
 800686a:	4d07      	ldr	r5, [pc, #28]	@ (8006888 <_read_r+0x20>)
 800686c:	4604      	mov	r4, r0
 800686e:	4608      	mov	r0, r1
 8006870:	4611      	mov	r1, r2
 8006872:	2200      	movs	r2, #0
 8006874:	602a      	str	r2, [r5, #0]
 8006876:	461a      	mov	r2, r3
 8006878:	f7fb f935 	bl	8001ae6 <_read>
 800687c:	1c43      	adds	r3, r0, #1
 800687e:	d102      	bne.n	8006886 <_read_r+0x1e>
 8006880:	682b      	ldr	r3, [r5, #0]
 8006882:	b103      	cbz	r3, 8006886 <_read_r+0x1e>
 8006884:	6023      	str	r3, [r4, #0]
 8006886:	bd38      	pop	{r3, r4, r5, pc}
 8006888:	20003714 	.word	0x20003714

0800688c <_write_r>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	4d07      	ldr	r5, [pc, #28]	@ (80068ac <_write_r+0x20>)
 8006890:	4604      	mov	r4, r0
 8006892:	4608      	mov	r0, r1
 8006894:	4611      	mov	r1, r2
 8006896:	2200      	movs	r2, #0
 8006898:	602a      	str	r2, [r5, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	f7fb f940 	bl	8001b20 <_write>
 80068a0:	1c43      	adds	r3, r0, #1
 80068a2:	d102      	bne.n	80068aa <_write_r+0x1e>
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	b103      	cbz	r3, 80068aa <_write_r+0x1e>
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	bd38      	pop	{r3, r4, r5, pc}
 80068ac:	20003714 	.word	0x20003714

080068b0 <__errno>:
 80068b0:	4b01      	ldr	r3, [pc, #4]	@ (80068b8 <__errno+0x8>)
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	200032c0 	.word	0x200032c0

080068bc <__libc_init_array>:
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	4d0d      	ldr	r5, [pc, #52]	@ (80068f4 <__libc_init_array+0x38>)
 80068c0:	4c0d      	ldr	r4, [pc, #52]	@ (80068f8 <__libc_init_array+0x3c>)
 80068c2:	1b64      	subs	r4, r4, r5
 80068c4:	10a4      	asrs	r4, r4, #2
 80068c6:	2600      	movs	r6, #0
 80068c8:	42a6      	cmp	r6, r4
 80068ca:	d109      	bne.n	80068e0 <__libc_init_array+0x24>
 80068cc:	4d0b      	ldr	r5, [pc, #44]	@ (80068fc <__libc_init_array+0x40>)
 80068ce:	4c0c      	ldr	r4, [pc, #48]	@ (8006900 <__libc_init_array+0x44>)
 80068d0:	f000 fe38 	bl	8007544 <_init>
 80068d4:	1b64      	subs	r4, r4, r5
 80068d6:	10a4      	asrs	r4, r4, #2
 80068d8:	2600      	movs	r6, #0
 80068da:	42a6      	cmp	r6, r4
 80068dc:	d105      	bne.n	80068ea <__libc_init_array+0x2e>
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e4:	4798      	blx	r3
 80068e6:	3601      	adds	r6, #1
 80068e8:	e7ee      	b.n	80068c8 <__libc_init_array+0xc>
 80068ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ee:	4798      	blx	r3
 80068f0:	3601      	adds	r6, #1
 80068f2:	e7f2      	b.n	80068da <__libc_init_array+0x1e>
 80068f4:	08008088 	.word	0x08008088
 80068f8:	08008088 	.word	0x08008088
 80068fc:	08008088 	.word	0x08008088
 8006900:	0800808c 	.word	0x0800808c

08006904 <__retarget_lock_init_recursive>:
 8006904:	4770      	bx	lr

08006906 <__retarget_lock_acquire_recursive>:
 8006906:	4770      	bx	lr

08006908 <__retarget_lock_release_recursive>:
 8006908:	4770      	bx	lr
	...

0800690c <__assert_func>:
 800690c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800690e:	4614      	mov	r4, r2
 8006910:	461a      	mov	r2, r3
 8006912:	4b09      	ldr	r3, [pc, #36]	@ (8006938 <__assert_func+0x2c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4605      	mov	r5, r0
 8006918:	68d8      	ldr	r0, [r3, #12]
 800691a:	b14c      	cbz	r4, 8006930 <__assert_func+0x24>
 800691c:	4b07      	ldr	r3, [pc, #28]	@ (800693c <__assert_func+0x30>)
 800691e:	9100      	str	r1, [sp, #0]
 8006920:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006924:	4906      	ldr	r1, [pc, #24]	@ (8006940 <__assert_func+0x34>)
 8006926:	462b      	mov	r3, r5
 8006928:	f000 f9ba 	bl	8006ca0 <fiprintf>
 800692c:	f000 f9da 	bl	8006ce4 <abort>
 8006930:	4b04      	ldr	r3, [pc, #16]	@ (8006944 <__assert_func+0x38>)
 8006932:	461c      	mov	r4, r3
 8006934:	e7f3      	b.n	800691e <__assert_func+0x12>
 8006936:	bf00      	nop
 8006938:	200032c0 	.word	0x200032c0
 800693c:	0800800f 	.word	0x0800800f
 8006940:	0800801c 	.word	0x0800801c
 8006944:	0800804a 	.word	0x0800804a

08006948 <_free_r>:
 8006948:	b538      	push	{r3, r4, r5, lr}
 800694a:	4605      	mov	r5, r0
 800694c:	2900      	cmp	r1, #0
 800694e:	d041      	beq.n	80069d4 <_free_r+0x8c>
 8006950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006954:	1f0c      	subs	r4, r1, #4
 8006956:	2b00      	cmp	r3, #0
 8006958:	bfb8      	it	lt
 800695a:	18e4      	addlt	r4, r4, r3
 800695c:	f000 f8e8 	bl	8006b30 <__malloc_lock>
 8006960:	4a1d      	ldr	r2, [pc, #116]	@ (80069d8 <_free_r+0x90>)
 8006962:	6813      	ldr	r3, [r2, #0]
 8006964:	b933      	cbnz	r3, 8006974 <_free_r+0x2c>
 8006966:	6063      	str	r3, [r4, #4]
 8006968:	6014      	str	r4, [r2, #0]
 800696a:	4628      	mov	r0, r5
 800696c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006970:	f000 b8e4 	b.w	8006b3c <__malloc_unlock>
 8006974:	42a3      	cmp	r3, r4
 8006976:	d908      	bls.n	800698a <_free_r+0x42>
 8006978:	6820      	ldr	r0, [r4, #0]
 800697a:	1821      	adds	r1, r4, r0
 800697c:	428b      	cmp	r3, r1
 800697e:	bf01      	itttt	eq
 8006980:	6819      	ldreq	r1, [r3, #0]
 8006982:	685b      	ldreq	r3, [r3, #4]
 8006984:	1809      	addeq	r1, r1, r0
 8006986:	6021      	streq	r1, [r4, #0]
 8006988:	e7ed      	b.n	8006966 <_free_r+0x1e>
 800698a:	461a      	mov	r2, r3
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	b10b      	cbz	r3, 8006994 <_free_r+0x4c>
 8006990:	42a3      	cmp	r3, r4
 8006992:	d9fa      	bls.n	800698a <_free_r+0x42>
 8006994:	6811      	ldr	r1, [r2, #0]
 8006996:	1850      	adds	r0, r2, r1
 8006998:	42a0      	cmp	r0, r4
 800699a:	d10b      	bne.n	80069b4 <_free_r+0x6c>
 800699c:	6820      	ldr	r0, [r4, #0]
 800699e:	4401      	add	r1, r0
 80069a0:	1850      	adds	r0, r2, r1
 80069a2:	4283      	cmp	r3, r0
 80069a4:	6011      	str	r1, [r2, #0]
 80069a6:	d1e0      	bne.n	800696a <_free_r+0x22>
 80069a8:	6818      	ldr	r0, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	6053      	str	r3, [r2, #4]
 80069ae:	4408      	add	r0, r1
 80069b0:	6010      	str	r0, [r2, #0]
 80069b2:	e7da      	b.n	800696a <_free_r+0x22>
 80069b4:	d902      	bls.n	80069bc <_free_r+0x74>
 80069b6:	230c      	movs	r3, #12
 80069b8:	602b      	str	r3, [r5, #0]
 80069ba:	e7d6      	b.n	800696a <_free_r+0x22>
 80069bc:	6820      	ldr	r0, [r4, #0]
 80069be:	1821      	adds	r1, r4, r0
 80069c0:	428b      	cmp	r3, r1
 80069c2:	bf04      	itt	eq
 80069c4:	6819      	ldreq	r1, [r3, #0]
 80069c6:	685b      	ldreq	r3, [r3, #4]
 80069c8:	6063      	str	r3, [r4, #4]
 80069ca:	bf04      	itt	eq
 80069cc:	1809      	addeq	r1, r1, r0
 80069ce:	6021      	streq	r1, [r4, #0]
 80069d0:	6054      	str	r4, [r2, #4]
 80069d2:	e7ca      	b.n	800696a <_free_r+0x22>
 80069d4:	bd38      	pop	{r3, r4, r5, pc}
 80069d6:	bf00      	nop
 80069d8:	20003720 	.word	0x20003720

080069dc <malloc>:
 80069dc:	4b02      	ldr	r3, [pc, #8]	@ (80069e8 <malloc+0xc>)
 80069de:	4601      	mov	r1, r0
 80069e0:	6818      	ldr	r0, [r3, #0]
 80069e2:	f000 b825 	b.w	8006a30 <_malloc_r>
 80069e6:	bf00      	nop
 80069e8:	200032c0 	.word	0x200032c0

080069ec <sbrk_aligned>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	4e0f      	ldr	r6, [pc, #60]	@ (8006a2c <sbrk_aligned+0x40>)
 80069f0:	460c      	mov	r4, r1
 80069f2:	6831      	ldr	r1, [r6, #0]
 80069f4:	4605      	mov	r5, r0
 80069f6:	b911      	cbnz	r1, 80069fe <sbrk_aligned+0x12>
 80069f8:	f000 f964 	bl	8006cc4 <_sbrk_r>
 80069fc:	6030      	str	r0, [r6, #0]
 80069fe:	4621      	mov	r1, r4
 8006a00:	4628      	mov	r0, r5
 8006a02:	f000 f95f 	bl	8006cc4 <_sbrk_r>
 8006a06:	1c43      	adds	r3, r0, #1
 8006a08:	d103      	bne.n	8006a12 <sbrk_aligned+0x26>
 8006a0a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006a0e:	4620      	mov	r0, r4
 8006a10:	bd70      	pop	{r4, r5, r6, pc}
 8006a12:	1cc4      	adds	r4, r0, #3
 8006a14:	f024 0403 	bic.w	r4, r4, #3
 8006a18:	42a0      	cmp	r0, r4
 8006a1a:	d0f8      	beq.n	8006a0e <sbrk_aligned+0x22>
 8006a1c:	1a21      	subs	r1, r4, r0
 8006a1e:	4628      	mov	r0, r5
 8006a20:	f000 f950 	bl	8006cc4 <_sbrk_r>
 8006a24:	3001      	adds	r0, #1
 8006a26:	d1f2      	bne.n	8006a0e <sbrk_aligned+0x22>
 8006a28:	e7ef      	b.n	8006a0a <sbrk_aligned+0x1e>
 8006a2a:	bf00      	nop
 8006a2c:	2000371c 	.word	0x2000371c

08006a30 <_malloc_r>:
 8006a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a34:	1ccd      	adds	r5, r1, #3
 8006a36:	f025 0503 	bic.w	r5, r5, #3
 8006a3a:	3508      	adds	r5, #8
 8006a3c:	2d0c      	cmp	r5, #12
 8006a3e:	bf38      	it	cc
 8006a40:	250c      	movcc	r5, #12
 8006a42:	2d00      	cmp	r5, #0
 8006a44:	4606      	mov	r6, r0
 8006a46:	db01      	blt.n	8006a4c <_malloc_r+0x1c>
 8006a48:	42a9      	cmp	r1, r5
 8006a4a:	d904      	bls.n	8006a56 <_malloc_r+0x26>
 8006a4c:	230c      	movs	r3, #12
 8006a4e:	6033      	str	r3, [r6, #0]
 8006a50:	2000      	movs	r0, #0
 8006a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b2c <_malloc_r+0xfc>
 8006a5a:	f000 f869 	bl	8006b30 <__malloc_lock>
 8006a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8006a62:	461c      	mov	r4, r3
 8006a64:	bb44      	cbnz	r4, 8006ab8 <_malloc_r+0x88>
 8006a66:	4629      	mov	r1, r5
 8006a68:	4630      	mov	r0, r6
 8006a6a:	f7ff ffbf 	bl	80069ec <sbrk_aligned>
 8006a6e:	1c43      	adds	r3, r0, #1
 8006a70:	4604      	mov	r4, r0
 8006a72:	d158      	bne.n	8006b26 <_malloc_r+0xf6>
 8006a74:	f8d8 4000 	ldr.w	r4, [r8]
 8006a78:	4627      	mov	r7, r4
 8006a7a:	2f00      	cmp	r7, #0
 8006a7c:	d143      	bne.n	8006b06 <_malloc_r+0xd6>
 8006a7e:	2c00      	cmp	r4, #0
 8006a80:	d04b      	beq.n	8006b1a <_malloc_r+0xea>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	4639      	mov	r1, r7
 8006a86:	4630      	mov	r0, r6
 8006a88:	eb04 0903 	add.w	r9, r4, r3
 8006a8c:	f000 f91a 	bl	8006cc4 <_sbrk_r>
 8006a90:	4581      	cmp	r9, r0
 8006a92:	d142      	bne.n	8006b1a <_malloc_r+0xea>
 8006a94:	6821      	ldr	r1, [r4, #0]
 8006a96:	1a6d      	subs	r5, r5, r1
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f7ff ffa6 	bl	80069ec <sbrk_aligned>
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d03a      	beq.n	8006b1a <_malloc_r+0xea>
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	442b      	add	r3, r5
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	f8d8 3000 	ldr.w	r3, [r8]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	bb62      	cbnz	r2, 8006b0c <_malloc_r+0xdc>
 8006ab2:	f8c8 7000 	str.w	r7, [r8]
 8006ab6:	e00f      	b.n	8006ad8 <_malloc_r+0xa8>
 8006ab8:	6822      	ldr	r2, [r4, #0]
 8006aba:	1b52      	subs	r2, r2, r5
 8006abc:	d420      	bmi.n	8006b00 <_malloc_r+0xd0>
 8006abe:	2a0b      	cmp	r2, #11
 8006ac0:	d917      	bls.n	8006af2 <_malloc_r+0xc2>
 8006ac2:	1961      	adds	r1, r4, r5
 8006ac4:	42a3      	cmp	r3, r4
 8006ac6:	6025      	str	r5, [r4, #0]
 8006ac8:	bf18      	it	ne
 8006aca:	6059      	strne	r1, [r3, #4]
 8006acc:	6863      	ldr	r3, [r4, #4]
 8006ace:	bf08      	it	eq
 8006ad0:	f8c8 1000 	streq.w	r1, [r8]
 8006ad4:	5162      	str	r2, [r4, r5]
 8006ad6:	604b      	str	r3, [r1, #4]
 8006ad8:	4630      	mov	r0, r6
 8006ada:	f000 f82f 	bl	8006b3c <__malloc_unlock>
 8006ade:	f104 000b 	add.w	r0, r4, #11
 8006ae2:	1d23      	adds	r3, r4, #4
 8006ae4:	f020 0007 	bic.w	r0, r0, #7
 8006ae8:	1ac2      	subs	r2, r0, r3
 8006aea:	bf1c      	itt	ne
 8006aec:	1a1b      	subne	r3, r3, r0
 8006aee:	50a3      	strne	r3, [r4, r2]
 8006af0:	e7af      	b.n	8006a52 <_malloc_r+0x22>
 8006af2:	6862      	ldr	r2, [r4, #4]
 8006af4:	42a3      	cmp	r3, r4
 8006af6:	bf0c      	ite	eq
 8006af8:	f8c8 2000 	streq.w	r2, [r8]
 8006afc:	605a      	strne	r2, [r3, #4]
 8006afe:	e7eb      	b.n	8006ad8 <_malloc_r+0xa8>
 8006b00:	4623      	mov	r3, r4
 8006b02:	6864      	ldr	r4, [r4, #4]
 8006b04:	e7ae      	b.n	8006a64 <_malloc_r+0x34>
 8006b06:	463c      	mov	r4, r7
 8006b08:	687f      	ldr	r7, [r7, #4]
 8006b0a:	e7b6      	b.n	8006a7a <_malloc_r+0x4a>
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	d1fb      	bne.n	8006b0c <_malloc_r+0xdc>
 8006b14:	2300      	movs	r3, #0
 8006b16:	6053      	str	r3, [r2, #4]
 8006b18:	e7de      	b.n	8006ad8 <_malloc_r+0xa8>
 8006b1a:	230c      	movs	r3, #12
 8006b1c:	6033      	str	r3, [r6, #0]
 8006b1e:	4630      	mov	r0, r6
 8006b20:	f000 f80c 	bl	8006b3c <__malloc_unlock>
 8006b24:	e794      	b.n	8006a50 <_malloc_r+0x20>
 8006b26:	6005      	str	r5, [r0, #0]
 8006b28:	e7d6      	b.n	8006ad8 <_malloc_r+0xa8>
 8006b2a:	bf00      	nop
 8006b2c:	20003720 	.word	0x20003720

08006b30 <__malloc_lock>:
 8006b30:	4801      	ldr	r0, [pc, #4]	@ (8006b38 <__malloc_lock+0x8>)
 8006b32:	f7ff bee8 	b.w	8006906 <__retarget_lock_acquire_recursive>
 8006b36:	bf00      	nop
 8006b38:	20003718 	.word	0x20003718

08006b3c <__malloc_unlock>:
 8006b3c:	4801      	ldr	r0, [pc, #4]	@ (8006b44 <__malloc_unlock+0x8>)
 8006b3e:	f7ff bee3 	b.w	8006908 <__retarget_lock_release_recursive>
 8006b42:	bf00      	nop
 8006b44:	20003718 	.word	0x20003718

08006b48 <__sflush_r>:
 8006b48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b50:	0716      	lsls	r6, r2, #28
 8006b52:	4605      	mov	r5, r0
 8006b54:	460c      	mov	r4, r1
 8006b56:	d454      	bmi.n	8006c02 <__sflush_r+0xba>
 8006b58:	684b      	ldr	r3, [r1, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	dc02      	bgt.n	8006b64 <__sflush_r+0x1c>
 8006b5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	dd48      	ble.n	8006bf6 <__sflush_r+0xae>
 8006b64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b66:	2e00      	cmp	r6, #0
 8006b68:	d045      	beq.n	8006bf6 <__sflush_r+0xae>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b70:	682f      	ldr	r7, [r5, #0]
 8006b72:	6a21      	ldr	r1, [r4, #32]
 8006b74:	602b      	str	r3, [r5, #0]
 8006b76:	d030      	beq.n	8006bda <__sflush_r+0x92>
 8006b78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b7a:	89a3      	ldrh	r3, [r4, #12]
 8006b7c:	0759      	lsls	r1, r3, #29
 8006b7e:	d505      	bpl.n	8006b8c <__sflush_r+0x44>
 8006b80:	6863      	ldr	r3, [r4, #4]
 8006b82:	1ad2      	subs	r2, r2, r3
 8006b84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b86:	b10b      	cbz	r3, 8006b8c <__sflush_r+0x44>
 8006b88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b8a:	1ad2      	subs	r2, r2, r3
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b90:	6a21      	ldr	r1, [r4, #32]
 8006b92:	4628      	mov	r0, r5
 8006b94:	47b0      	blx	r6
 8006b96:	1c43      	adds	r3, r0, #1
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	d106      	bne.n	8006baa <__sflush_r+0x62>
 8006b9c:	6829      	ldr	r1, [r5, #0]
 8006b9e:	291d      	cmp	r1, #29
 8006ba0:	d82b      	bhi.n	8006bfa <__sflush_r+0xb2>
 8006ba2:	4a2a      	ldr	r2, [pc, #168]	@ (8006c4c <__sflush_r+0x104>)
 8006ba4:	40ca      	lsrs	r2, r1
 8006ba6:	07d6      	lsls	r6, r2, #31
 8006ba8:	d527      	bpl.n	8006bfa <__sflush_r+0xb2>
 8006baa:	2200      	movs	r2, #0
 8006bac:	6062      	str	r2, [r4, #4]
 8006bae:	04d9      	lsls	r1, r3, #19
 8006bb0:	6922      	ldr	r2, [r4, #16]
 8006bb2:	6022      	str	r2, [r4, #0]
 8006bb4:	d504      	bpl.n	8006bc0 <__sflush_r+0x78>
 8006bb6:	1c42      	adds	r2, r0, #1
 8006bb8:	d101      	bne.n	8006bbe <__sflush_r+0x76>
 8006bba:	682b      	ldr	r3, [r5, #0]
 8006bbc:	b903      	cbnz	r3, 8006bc0 <__sflush_r+0x78>
 8006bbe:	6560      	str	r0, [r4, #84]	@ 0x54
 8006bc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bc2:	602f      	str	r7, [r5, #0]
 8006bc4:	b1b9      	cbz	r1, 8006bf6 <__sflush_r+0xae>
 8006bc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bca:	4299      	cmp	r1, r3
 8006bcc:	d002      	beq.n	8006bd4 <__sflush_r+0x8c>
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f7ff feba 	bl	8006948 <_free_r>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bd8:	e00d      	b.n	8006bf6 <__sflush_r+0xae>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	4628      	mov	r0, r5
 8006bde:	47b0      	blx	r6
 8006be0:	4602      	mov	r2, r0
 8006be2:	1c50      	adds	r0, r2, #1
 8006be4:	d1c9      	bne.n	8006b7a <__sflush_r+0x32>
 8006be6:	682b      	ldr	r3, [r5, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0c6      	beq.n	8006b7a <__sflush_r+0x32>
 8006bec:	2b1d      	cmp	r3, #29
 8006bee:	d001      	beq.n	8006bf4 <__sflush_r+0xac>
 8006bf0:	2b16      	cmp	r3, #22
 8006bf2:	d11e      	bne.n	8006c32 <__sflush_r+0xea>
 8006bf4:	602f      	str	r7, [r5, #0]
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	e022      	b.n	8006c40 <__sflush_r+0xf8>
 8006bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bfe:	b21b      	sxth	r3, r3
 8006c00:	e01b      	b.n	8006c3a <__sflush_r+0xf2>
 8006c02:	690f      	ldr	r7, [r1, #16]
 8006c04:	2f00      	cmp	r7, #0
 8006c06:	d0f6      	beq.n	8006bf6 <__sflush_r+0xae>
 8006c08:	0793      	lsls	r3, r2, #30
 8006c0a:	680e      	ldr	r6, [r1, #0]
 8006c0c:	bf08      	it	eq
 8006c0e:	694b      	ldreq	r3, [r1, #20]
 8006c10:	600f      	str	r7, [r1, #0]
 8006c12:	bf18      	it	ne
 8006c14:	2300      	movne	r3, #0
 8006c16:	eba6 0807 	sub.w	r8, r6, r7
 8006c1a:	608b      	str	r3, [r1, #8]
 8006c1c:	f1b8 0f00 	cmp.w	r8, #0
 8006c20:	dde9      	ble.n	8006bf6 <__sflush_r+0xae>
 8006c22:	6a21      	ldr	r1, [r4, #32]
 8006c24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006c26:	4643      	mov	r3, r8
 8006c28:	463a      	mov	r2, r7
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	47b0      	blx	r6
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	dc08      	bgt.n	8006c44 <__sflush_r+0xfc>
 8006c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c3a:	81a3      	strh	r3, [r4, #12]
 8006c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c44:	4407      	add	r7, r0
 8006c46:	eba8 0800 	sub.w	r8, r8, r0
 8006c4a:	e7e7      	b.n	8006c1c <__sflush_r+0xd4>
 8006c4c:	20400001 	.word	0x20400001

08006c50 <_fflush_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	690b      	ldr	r3, [r1, #16]
 8006c54:	4605      	mov	r5, r0
 8006c56:	460c      	mov	r4, r1
 8006c58:	b913      	cbnz	r3, 8006c60 <_fflush_r+0x10>
 8006c5a:	2500      	movs	r5, #0
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
 8006c60:	b118      	cbz	r0, 8006c6a <_fflush_r+0x1a>
 8006c62:	6a03      	ldr	r3, [r0, #32]
 8006c64:	b90b      	cbnz	r3, 8006c6a <_fflush_r+0x1a>
 8006c66:	f7ff fd5b 	bl	8006720 <__sinit>
 8006c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0f3      	beq.n	8006c5a <_fflush_r+0xa>
 8006c72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c74:	07d0      	lsls	r0, r2, #31
 8006c76:	d404      	bmi.n	8006c82 <_fflush_r+0x32>
 8006c78:	0599      	lsls	r1, r3, #22
 8006c7a:	d402      	bmi.n	8006c82 <_fflush_r+0x32>
 8006c7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c7e:	f7ff fe42 	bl	8006906 <__retarget_lock_acquire_recursive>
 8006c82:	4628      	mov	r0, r5
 8006c84:	4621      	mov	r1, r4
 8006c86:	f7ff ff5f 	bl	8006b48 <__sflush_r>
 8006c8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c8c:	07da      	lsls	r2, r3, #31
 8006c8e:	4605      	mov	r5, r0
 8006c90:	d4e4      	bmi.n	8006c5c <_fflush_r+0xc>
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	059b      	lsls	r3, r3, #22
 8006c96:	d4e1      	bmi.n	8006c5c <_fflush_r+0xc>
 8006c98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c9a:	f7ff fe35 	bl	8006908 <__retarget_lock_release_recursive>
 8006c9e:	e7dd      	b.n	8006c5c <_fflush_r+0xc>

08006ca0 <fiprintf>:
 8006ca0:	b40e      	push	{r1, r2, r3}
 8006ca2:	b503      	push	{r0, r1, lr}
 8006ca4:	4601      	mov	r1, r0
 8006ca6:	ab03      	add	r3, sp, #12
 8006ca8:	4805      	ldr	r0, [pc, #20]	@ (8006cc0 <fiprintf+0x20>)
 8006caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cae:	6800      	ldr	r0, [r0, #0]
 8006cb0:	9301      	str	r3, [sp, #4]
 8006cb2:	f000 f847 	bl	8006d44 <_vfiprintf_r>
 8006cb6:	b002      	add	sp, #8
 8006cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cbc:	b003      	add	sp, #12
 8006cbe:	4770      	bx	lr
 8006cc0:	200032c0 	.word	0x200032c0

08006cc4 <_sbrk_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	4d06      	ldr	r5, [pc, #24]	@ (8006ce0 <_sbrk_r+0x1c>)
 8006cc8:	2300      	movs	r3, #0
 8006cca:	4604      	mov	r4, r0
 8006ccc:	4608      	mov	r0, r1
 8006cce:	602b      	str	r3, [r5, #0]
 8006cd0:	f7fa ff76 	bl	8001bc0 <_sbrk>
 8006cd4:	1c43      	adds	r3, r0, #1
 8006cd6:	d102      	bne.n	8006cde <_sbrk_r+0x1a>
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	b103      	cbz	r3, 8006cde <_sbrk_r+0x1a>
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	bd38      	pop	{r3, r4, r5, pc}
 8006ce0:	20003714 	.word	0x20003714

08006ce4 <abort>:
 8006ce4:	b508      	push	{r3, lr}
 8006ce6:	2006      	movs	r0, #6
 8006ce8:	f000 fb8c 	bl	8007404 <raise>
 8006cec:	2001      	movs	r0, #1
 8006cee:	f7fa feef 	bl	8001ad0 <_exit>

08006cf2 <__sfputc_r>:
 8006cf2:	6893      	ldr	r3, [r2, #8]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	b410      	push	{r4}
 8006cfa:	6093      	str	r3, [r2, #8]
 8006cfc:	da08      	bge.n	8006d10 <__sfputc_r+0x1e>
 8006cfe:	6994      	ldr	r4, [r2, #24]
 8006d00:	42a3      	cmp	r3, r4
 8006d02:	db01      	blt.n	8006d08 <__sfputc_r+0x16>
 8006d04:	290a      	cmp	r1, #10
 8006d06:	d103      	bne.n	8006d10 <__sfputc_r+0x1e>
 8006d08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d0c:	f000 babe 	b.w	800728c <__swbuf_r>
 8006d10:	6813      	ldr	r3, [r2, #0]
 8006d12:	1c58      	adds	r0, r3, #1
 8006d14:	6010      	str	r0, [r2, #0]
 8006d16:	7019      	strb	r1, [r3, #0]
 8006d18:	4608      	mov	r0, r1
 8006d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <__sfputs_r>:
 8006d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d22:	4606      	mov	r6, r0
 8006d24:	460f      	mov	r7, r1
 8006d26:	4614      	mov	r4, r2
 8006d28:	18d5      	adds	r5, r2, r3
 8006d2a:	42ac      	cmp	r4, r5
 8006d2c:	d101      	bne.n	8006d32 <__sfputs_r+0x12>
 8006d2e:	2000      	movs	r0, #0
 8006d30:	e007      	b.n	8006d42 <__sfputs_r+0x22>
 8006d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d36:	463a      	mov	r2, r7
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f7ff ffda 	bl	8006cf2 <__sfputc_r>
 8006d3e:	1c43      	adds	r3, r0, #1
 8006d40:	d1f3      	bne.n	8006d2a <__sfputs_r+0xa>
 8006d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d44 <_vfiprintf_r>:
 8006d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d48:	460d      	mov	r5, r1
 8006d4a:	b09d      	sub	sp, #116	@ 0x74
 8006d4c:	4614      	mov	r4, r2
 8006d4e:	4698      	mov	r8, r3
 8006d50:	4606      	mov	r6, r0
 8006d52:	b118      	cbz	r0, 8006d5c <_vfiprintf_r+0x18>
 8006d54:	6a03      	ldr	r3, [r0, #32]
 8006d56:	b90b      	cbnz	r3, 8006d5c <_vfiprintf_r+0x18>
 8006d58:	f7ff fce2 	bl	8006720 <__sinit>
 8006d5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d5e:	07d9      	lsls	r1, r3, #31
 8006d60:	d405      	bmi.n	8006d6e <_vfiprintf_r+0x2a>
 8006d62:	89ab      	ldrh	r3, [r5, #12]
 8006d64:	059a      	lsls	r2, r3, #22
 8006d66:	d402      	bmi.n	8006d6e <_vfiprintf_r+0x2a>
 8006d68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d6a:	f7ff fdcc 	bl	8006906 <__retarget_lock_acquire_recursive>
 8006d6e:	89ab      	ldrh	r3, [r5, #12]
 8006d70:	071b      	lsls	r3, r3, #28
 8006d72:	d501      	bpl.n	8006d78 <_vfiprintf_r+0x34>
 8006d74:	692b      	ldr	r3, [r5, #16]
 8006d76:	b99b      	cbnz	r3, 8006da0 <_vfiprintf_r+0x5c>
 8006d78:	4629      	mov	r1, r5
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	f000 fac4 	bl	8007308 <__swsetup_r>
 8006d80:	b170      	cbz	r0, 8006da0 <_vfiprintf_r+0x5c>
 8006d82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d84:	07dc      	lsls	r4, r3, #31
 8006d86:	d504      	bpl.n	8006d92 <_vfiprintf_r+0x4e>
 8006d88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d8c:	b01d      	add	sp, #116	@ 0x74
 8006d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d92:	89ab      	ldrh	r3, [r5, #12]
 8006d94:	0598      	lsls	r0, r3, #22
 8006d96:	d4f7      	bmi.n	8006d88 <_vfiprintf_r+0x44>
 8006d98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d9a:	f7ff fdb5 	bl	8006908 <__retarget_lock_release_recursive>
 8006d9e:	e7f3      	b.n	8006d88 <_vfiprintf_r+0x44>
 8006da0:	2300      	movs	r3, #0
 8006da2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006da4:	2320      	movs	r3, #32
 8006da6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006daa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dae:	2330      	movs	r3, #48	@ 0x30
 8006db0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006f60 <_vfiprintf_r+0x21c>
 8006db4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006db8:	f04f 0901 	mov.w	r9, #1
 8006dbc:	4623      	mov	r3, r4
 8006dbe:	469a      	mov	sl, r3
 8006dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dc4:	b10a      	cbz	r2, 8006dca <_vfiprintf_r+0x86>
 8006dc6:	2a25      	cmp	r2, #37	@ 0x25
 8006dc8:	d1f9      	bne.n	8006dbe <_vfiprintf_r+0x7a>
 8006dca:	ebba 0b04 	subs.w	fp, sl, r4
 8006dce:	d00b      	beq.n	8006de8 <_vfiprintf_r+0xa4>
 8006dd0:	465b      	mov	r3, fp
 8006dd2:	4622      	mov	r2, r4
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f7ff ffa2 	bl	8006d20 <__sfputs_r>
 8006ddc:	3001      	adds	r0, #1
 8006dde:	f000 80a7 	beq.w	8006f30 <_vfiprintf_r+0x1ec>
 8006de2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006de4:	445a      	add	r2, fp
 8006de6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006de8:	f89a 3000 	ldrb.w	r3, [sl]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 809f 	beq.w	8006f30 <_vfiprintf_r+0x1ec>
 8006df2:	2300      	movs	r3, #0
 8006df4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dfc:	f10a 0a01 	add.w	sl, sl, #1
 8006e00:	9304      	str	r3, [sp, #16]
 8006e02:	9307      	str	r3, [sp, #28]
 8006e04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e08:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e0a:	4654      	mov	r4, sl
 8006e0c:	2205      	movs	r2, #5
 8006e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e12:	4853      	ldr	r0, [pc, #332]	@ (8006f60 <_vfiprintf_r+0x21c>)
 8006e14:	f7f9 fa04 	bl	8000220 <memchr>
 8006e18:	9a04      	ldr	r2, [sp, #16]
 8006e1a:	b9d8      	cbnz	r0, 8006e54 <_vfiprintf_r+0x110>
 8006e1c:	06d1      	lsls	r1, r2, #27
 8006e1e:	bf44      	itt	mi
 8006e20:	2320      	movmi	r3, #32
 8006e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e26:	0713      	lsls	r3, r2, #28
 8006e28:	bf44      	itt	mi
 8006e2a:	232b      	movmi	r3, #43	@ 0x2b
 8006e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e30:	f89a 3000 	ldrb.w	r3, [sl]
 8006e34:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e36:	d015      	beq.n	8006e64 <_vfiprintf_r+0x120>
 8006e38:	9a07      	ldr	r2, [sp, #28]
 8006e3a:	4654      	mov	r4, sl
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	f04f 0c0a 	mov.w	ip, #10
 8006e42:	4621      	mov	r1, r4
 8006e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e48:	3b30      	subs	r3, #48	@ 0x30
 8006e4a:	2b09      	cmp	r3, #9
 8006e4c:	d94b      	bls.n	8006ee6 <_vfiprintf_r+0x1a2>
 8006e4e:	b1b0      	cbz	r0, 8006e7e <_vfiprintf_r+0x13a>
 8006e50:	9207      	str	r2, [sp, #28]
 8006e52:	e014      	b.n	8006e7e <_vfiprintf_r+0x13a>
 8006e54:	eba0 0308 	sub.w	r3, r0, r8
 8006e58:	fa09 f303 	lsl.w	r3, r9, r3
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	9304      	str	r3, [sp, #16]
 8006e60:	46a2      	mov	sl, r4
 8006e62:	e7d2      	b.n	8006e0a <_vfiprintf_r+0xc6>
 8006e64:	9b03      	ldr	r3, [sp, #12]
 8006e66:	1d19      	adds	r1, r3, #4
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	9103      	str	r1, [sp, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	bfbb      	ittet	lt
 8006e70:	425b      	neglt	r3, r3
 8006e72:	f042 0202 	orrlt.w	r2, r2, #2
 8006e76:	9307      	strge	r3, [sp, #28]
 8006e78:	9307      	strlt	r3, [sp, #28]
 8006e7a:	bfb8      	it	lt
 8006e7c:	9204      	strlt	r2, [sp, #16]
 8006e7e:	7823      	ldrb	r3, [r4, #0]
 8006e80:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e82:	d10a      	bne.n	8006e9a <_vfiprintf_r+0x156>
 8006e84:	7863      	ldrb	r3, [r4, #1]
 8006e86:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e88:	d132      	bne.n	8006ef0 <_vfiprintf_r+0x1ac>
 8006e8a:	9b03      	ldr	r3, [sp, #12]
 8006e8c:	1d1a      	adds	r2, r3, #4
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	9203      	str	r2, [sp, #12]
 8006e92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e96:	3402      	adds	r4, #2
 8006e98:	9305      	str	r3, [sp, #20]
 8006e9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006f70 <_vfiprintf_r+0x22c>
 8006e9e:	7821      	ldrb	r1, [r4, #0]
 8006ea0:	2203      	movs	r2, #3
 8006ea2:	4650      	mov	r0, sl
 8006ea4:	f7f9 f9bc 	bl	8000220 <memchr>
 8006ea8:	b138      	cbz	r0, 8006eba <_vfiprintf_r+0x176>
 8006eaa:	9b04      	ldr	r3, [sp, #16]
 8006eac:	eba0 000a 	sub.w	r0, r0, sl
 8006eb0:	2240      	movs	r2, #64	@ 0x40
 8006eb2:	4082      	lsls	r2, r0
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	3401      	adds	r4, #1
 8006eb8:	9304      	str	r3, [sp, #16]
 8006eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ebe:	4829      	ldr	r0, [pc, #164]	@ (8006f64 <_vfiprintf_r+0x220>)
 8006ec0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ec4:	2206      	movs	r2, #6
 8006ec6:	f7f9 f9ab 	bl	8000220 <memchr>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	d03f      	beq.n	8006f4e <_vfiprintf_r+0x20a>
 8006ece:	4b26      	ldr	r3, [pc, #152]	@ (8006f68 <_vfiprintf_r+0x224>)
 8006ed0:	bb1b      	cbnz	r3, 8006f1a <_vfiprintf_r+0x1d6>
 8006ed2:	9b03      	ldr	r3, [sp, #12]
 8006ed4:	3307      	adds	r3, #7
 8006ed6:	f023 0307 	bic.w	r3, r3, #7
 8006eda:	3308      	adds	r3, #8
 8006edc:	9303      	str	r3, [sp, #12]
 8006ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee0:	443b      	add	r3, r7
 8006ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ee4:	e76a      	b.n	8006dbc <_vfiprintf_r+0x78>
 8006ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006eea:	460c      	mov	r4, r1
 8006eec:	2001      	movs	r0, #1
 8006eee:	e7a8      	b.n	8006e42 <_vfiprintf_r+0xfe>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	3401      	adds	r4, #1
 8006ef4:	9305      	str	r3, [sp, #20]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	f04f 0c0a 	mov.w	ip, #10
 8006efc:	4620      	mov	r0, r4
 8006efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f02:	3a30      	subs	r2, #48	@ 0x30
 8006f04:	2a09      	cmp	r2, #9
 8006f06:	d903      	bls.n	8006f10 <_vfiprintf_r+0x1cc>
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0c6      	beq.n	8006e9a <_vfiprintf_r+0x156>
 8006f0c:	9105      	str	r1, [sp, #20]
 8006f0e:	e7c4      	b.n	8006e9a <_vfiprintf_r+0x156>
 8006f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f14:	4604      	mov	r4, r0
 8006f16:	2301      	movs	r3, #1
 8006f18:	e7f0      	b.n	8006efc <_vfiprintf_r+0x1b8>
 8006f1a:	ab03      	add	r3, sp, #12
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	462a      	mov	r2, r5
 8006f20:	4b12      	ldr	r3, [pc, #72]	@ (8006f6c <_vfiprintf_r+0x228>)
 8006f22:	a904      	add	r1, sp, #16
 8006f24:	4630      	mov	r0, r6
 8006f26:	f3af 8000 	nop.w
 8006f2a:	4607      	mov	r7, r0
 8006f2c:	1c78      	adds	r0, r7, #1
 8006f2e:	d1d6      	bne.n	8006ede <_vfiprintf_r+0x19a>
 8006f30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f32:	07d9      	lsls	r1, r3, #31
 8006f34:	d405      	bmi.n	8006f42 <_vfiprintf_r+0x1fe>
 8006f36:	89ab      	ldrh	r3, [r5, #12]
 8006f38:	059a      	lsls	r2, r3, #22
 8006f3a:	d402      	bmi.n	8006f42 <_vfiprintf_r+0x1fe>
 8006f3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f3e:	f7ff fce3 	bl	8006908 <__retarget_lock_release_recursive>
 8006f42:	89ab      	ldrh	r3, [r5, #12]
 8006f44:	065b      	lsls	r3, r3, #25
 8006f46:	f53f af1f 	bmi.w	8006d88 <_vfiprintf_r+0x44>
 8006f4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f4c:	e71e      	b.n	8006d8c <_vfiprintf_r+0x48>
 8006f4e:	ab03      	add	r3, sp, #12
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	462a      	mov	r2, r5
 8006f54:	4b05      	ldr	r3, [pc, #20]	@ (8006f6c <_vfiprintf_r+0x228>)
 8006f56:	a904      	add	r1, sp, #16
 8006f58:	4630      	mov	r0, r6
 8006f5a:	f000 f879 	bl	8007050 <_printf_i>
 8006f5e:	e7e4      	b.n	8006f2a <_vfiprintf_r+0x1e6>
 8006f60:	0800804b 	.word	0x0800804b
 8006f64:	08008055 	.word	0x08008055
 8006f68:	00000000 	.word	0x00000000
 8006f6c:	08006d21 	.word	0x08006d21
 8006f70:	08008051 	.word	0x08008051

08006f74 <_printf_common>:
 8006f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f78:	4616      	mov	r6, r2
 8006f7a:	4698      	mov	r8, r3
 8006f7c:	688a      	ldr	r2, [r1, #8]
 8006f7e:	690b      	ldr	r3, [r1, #16]
 8006f80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f84:	4293      	cmp	r3, r2
 8006f86:	bfb8      	it	lt
 8006f88:	4613      	movlt	r3, r2
 8006f8a:	6033      	str	r3, [r6, #0]
 8006f8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f90:	4607      	mov	r7, r0
 8006f92:	460c      	mov	r4, r1
 8006f94:	b10a      	cbz	r2, 8006f9a <_printf_common+0x26>
 8006f96:	3301      	adds	r3, #1
 8006f98:	6033      	str	r3, [r6, #0]
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	0699      	lsls	r1, r3, #26
 8006f9e:	bf42      	ittt	mi
 8006fa0:	6833      	ldrmi	r3, [r6, #0]
 8006fa2:	3302      	addmi	r3, #2
 8006fa4:	6033      	strmi	r3, [r6, #0]
 8006fa6:	6825      	ldr	r5, [r4, #0]
 8006fa8:	f015 0506 	ands.w	r5, r5, #6
 8006fac:	d106      	bne.n	8006fbc <_printf_common+0x48>
 8006fae:	f104 0a19 	add.w	sl, r4, #25
 8006fb2:	68e3      	ldr	r3, [r4, #12]
 8006fb4:	6832      	ldr	r2, [r6, #0]
 8006fb6:	1a9b      	subs	r3, r3, r2
 8006fb8:	42ab      	cmp	r3, r5
 8006fba:	dc26      	bgt.n	800700a <_printf_common+0x96>
 8006fbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006fc0:	6822      	ldr	r2, [r4, #0]
 8006fc2:	3b00      	subs	r3, #0
 8006fc4:	bf18      	it	ne
 8006fc6:	2301      	movne	r3, #1
 8006fc8:	0692      	lsls	r2, r2, #26
 8006fca:	d42b      	bmi.n	8007024 <_printf_common+0xb0>
 8006fcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006fd0:	4641      	mov	r1, r8
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	47c8      	blx	r9
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	d01e      	beq.n	8007018 <_printf_common+0xa4>
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	6922      	ldr	r2, [r4, #16]
 8006fde:	f003 0306 	and.w	r3, r3, #6
 8006fe2:	2b04      	cmp	r3, #4
 8006fe4:	bf02      	ittt	eq
 8006fe6:	68e5      	ldreq	r5, [r4, #12]
 8006fe8:	6833      	ldreq	r3, [r6, #0]
 8006fea:	1aed      	subeq	r5, r5, r3
 8006fec:	68a3      	ldr	r3, [r4, #8]
 8006fee:	bf0c      	ite	eq
 8006ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ff4:	2500      	movne	r5, #0
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	bfc4      	itt	gt
 8006ffa:	1a9b      	subgt	r3, r3, r2
 8006ffc:	18ed      	addgt	r5, r5, r3
 8006ffe:	2600      	movs	r6, #0
 8007000:	341a      	adds	r4, #26
 8007002:	42b5      	cmp	r5, r6
 8007004:	d11a      	bne.n	800703c <_printf_common+0xc8>
 8007006:	2000      	movs	r0, #0
 8007008:	e008      	b.n	800701c <_printf_common+0xa8>
 800700a:	2301      	movs	r3, #1
 800700c:	4652      	mov	r2, sl
 800700e:	4641      	mov	r1, r8
 8007010:	4638      	mov	r0, r7
 8007012:	47c8      	blx	r9
 8007014:	3001      	adds	r0, #1
 8007016:	d103      	bne.n	8007020 <_printf_common+0xac>
 8007018:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800701c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007020:	3501      	adds	r5, #1
 8007022:	e7c6      	b.n	8006fb2 <_printf_common+0x3e>
 8007024:	18e1      	adds	r1, r4, r3
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	2030      	movs	r0, #48	@ 0x30
 800702a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800702e:	4422      	add	r2, r4
 8007030:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007034:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007038:	3302      	adds	r3, #2
 800703a:	e7c7      	b.n	8006fcc <_printf_common+0x58>
 800703c:	2301      	movs	r3, #1
 800703e:	4622      	mov	r2, r4
 8007040:	4641      	mov	r1, r8
 8007042:	4638      	mov	r0, r7
 8007044:	47c8      	blx	r9
 8007046:	3001      	adds	r0, #1
 8007048:	d0e6      	beq.n	8007018 <_printf_common+0xa4>
 800704a:	3601      	adds	r6, #1
 800704c:	e7d9      	b.n	8007002 <_printf_common+0x8e>
	...

08007050 <_printf_i>:
 8007050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007054:	7e0f      	ldrb	r7, [r1, #24]
 8007056:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007058:	2f78      	cmp	r7, #120	@ 0x78
 800705a:	4691      	mov	r9, r2
 800705c:	4680      	mov	r8, r0
 800705e:	460c      	mov	r4, r1
 8007060:	469a      	mov	sl, r3
 8007062:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007066:	d807      	bhi.n	8007078 <_printf_i+0x28>
 8007068:	2f62      	cmp	r7, #98	@ 0x62
 800706a:	d80a      	bhi.n	8007082 <_printf_i+0x32>
 800706c:	2f00      	cmp	r7, #0
 800706e:	f000 80d1 	beq.w	8007214 <_printf_i+0x1c4>
 8007072:	2f58      	cmp	r7, #88	@ 0x58
 8007074:	f000 80b8 	beq.w	80071e8 <_printf_i+0x198>
 8007078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800707c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007080:	e03a      	b.n	80070f8 <_printf_i+0xa8>
 8007082:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007086:	2b15      	cmp	r3, #21
 8007088:	d8f6      	bhi.n	8007078 <_printf_i+0x28>
 800708a:	a101      	add	r1, pc, #4	@ (adr r1, 8007090 <_printf_i+0x40>)
 800708c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007090:	080070e9 	.word	0x080070e9
 8007094:	080070fd 	.word	0x080070fd
 8007098:	08007079 	.word	0x08007079
 800709c:	08007079 	.word	0x08007079
 80070a0:	08007079 	.word	0x08007079
 80070a4:	08007079 	.word	0x08007079
 80070a8:	080070fd 	.word	0x080070fd
 80070ac:	08007079 	.word	0x08007079
 80070b0:	08007079 	.word	0x08007079
 80070b4:	08007079 	.word	0x08007079
 80070b8:	08007079 	.word	0x08007079
 80070bc:	080071fb 	.word	0x080071fb
 80070c0:	08007127 	.word	0x08007127
 80070c4:	080071b5 	.word	0x080071b5
 80070c8:	08007079 	.word	0x08007079
 80070cc:	08007079 	.word	0x08007079
 80070d0:	0800721d 	.word	0x0800721d
 80070d4:	08007079 	.word	0x08007079
 80070d8:	08007127 	.word	0x08007127
 80070dc:	08007079 	.word	0x08007079
 80070e0:	08007079 	.word	0x08007079
 80070e4:	080071bd 	.word	0x080071bd
 80070e8:	6833      	ldr	r3, [r6, #0]
 80070ea:	1d1a      	adds	r2, r3, #4
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6032      	str	r2, [r6, #0]
 80070f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070f8:	2301      	movs	r3, #1
 80070fa:	e09c      	b.n	8007236 <_printf_i+0x1e6>
 80070fc:	6833      	ldr	r3, [r6, #0]
 80070fe:	6820      	ldr	r0, [r4, #0]
 8007100:	1d19      	adds	r1, r3, #4
 8007102:	6031      	str	r1, [r6, #0]
 8007104:	0606      	lsls	r6, r0, #24
 8007106:	d501      	bpl.n	800710c <_printf_i+0xbc>
 8007108:	681d      	ldr	r5, [r3, #0]
 800710a:	e003      	b.n	8007114 <_printf_i+0xc4>
 800710c:	0645      	lsls	r5, r0, #25
 800710e:	d5fb      	bpl.n	8007108 <_printf_i+0xb8>
 8007110:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007114:	2d00      	cmp	r5, #0
 8007116:	da03      	bge.n	8007120 <_printf_i+0xd0>
 8007118:	232d      	movs	r3, #45	@ 0x2d
 800711a:	426d      	negs	r5, r5
 800711c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007120:	4858      	ldr	r0, [pc, #352]	@ (8007284 <_printf_i+0x234>)
 8007122:	230a      	movs	r3, #10
 8007124:	e011      	b.n	800714a <_printf_i+0xfa>
 8007126:	6821      	ldr	r1, [r4, #0]
 8007128:	6833      	ldr	r3, [r6, #0]
 800712a:	0608      	lsls	r0, r1, #24
 800712c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007130:	d402      	bmi.n	8007138 <_printf_i+0xe8>
 8007132:	0649      	lsls	r1, r1, #25
 8007134:	bf48      	it	mi
 8007136:	b2ad      	uxthmi	r5, r5
 8007138:	2f6f      	cmp	r7, #111	@ 0x6f
 800713a:	4852      	ldr	r0, [pc, #328]	@ (8007284 <_printf_i+0x234>)
 800713c:	6033      	str	r3, [r6, #0]
 800713e:	bf14      	ite	ne
 8007140:	230a      	movne	r3, #10
 8007142:	2308      	moveq	r3, #8
 8007144:	2100      	movs	r1, #0
 8007146:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800714a:	6866      	ldr	r6, [r4, #4]
 800714c:	60a6      	str	r6, [r4, #8]
 800714e:	2e00      	cmp	r6, #0
 8007150:	db05      	blt.n	800715e <_printf_i+0x10e>
 8007152:	6821      	ldr	r1, [r4, #0]
 8007154:	432e      	orrs	r6, r5
 8007156:	f021 0104 	bic.w	r1, r1, #4
 800715a:	6021      	str	r1, [r4, #0]
 800715c:	d04b      	beq.n	80071f6 <_printf_i+0x1a6>
 800715e:	4616      	mov	r6, r2
 8007160:	fbb5 f1f3 	udiv	r1, r5, r3
 8007164:	fb03 5711 	mls	r7, r3, r1, r5
 8007168:	5dc7      	ldrb	r7, [r0, r7]
 800716a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800716e:	462f      	mov	r7, r5
 8007170:	42bb      	cmp	r3, r7
 8007172:	460d      	mov	r5, r1
 8007174:	d9f4      	bls.n	8007160 <_printf_i+0x110>
 8007176:	2b08      	cmp	r3, #8
 8007178:	d10b      	bne.n	8007192 <_printf_i+0x142>
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	07df      	lsls	r7, r3, #31
 800717e:	d508      	bpl.n	8007192 <_printf_i+0x142>
 8007180:	6923      	ldr	r3, [r4, #16]
 8007182:	6861      	ldr	r1, [r4, #4]
 8007184:	4299      	cmp	r1, r3
 8007186:	bfde      	ittt	le
 8007188:	2330      	movle	r3, #48	@ 0x30
 800718a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800718e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007192:	1b92      	subs	r2, r2, r6
 8007194:	6122      	str	r2, [r4, #16]
 8007196:	f8cd a000 	str.w	sl, [sp]
 800719a:	464b      	mov	r3, r9
 800719c:	aa03      	add	r2, sp, #12
 800719e:	4621      	mov	r1, r4
 80071a0:	4640      	mov	r0, r8
 80071a2:	f7ff fee7 	bl	8006f74 <_printf_common>
 80071a6:	3001      	adds	r0, #1
 80071a8:	d14a      	bne.n	8007240 <_printf_i+0x1f0>
 80071aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071ae:	b004      	add	sp, #16
 80071b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	f043 0320 	orr.w	r3, r3, #32
 80071ba:	6023      	str	r3, [r4, #0]
 80071bc:	4832      	ldr	r0, [pc, #200]	@ (8007288 <_printf_i+0x238>)
 80071be:	2778      	movs	r7, #120	@ 0x78
 80071c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	6831      	ldr	r1, [r6, #0]
 80071c8:	061f      	lsls	r7, r3, #24
 80071ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80071ce:	d402      	bmi.n	80071d6 <_printf_i+0x186>
 80071d0:	065f      	lsls	r7, r3, #25
 80071d2:	bf48      	it	mi
 80071d4:	b2ad      	uxthmi	r5, r5
 80071d6:	6031      	str	r1, [r6, #0]
 80071d8:	07d9      	lsls	r1, r3, #31
 80071da:	bf44      	itt	mi
 80071dc:	f043 0320 	orrmi.w	r3, r3, #32
 80071e0:	6023      	strmi	r3, [r4, #0]
 80071e2:	b11d      	cbz	r5, 80071ec <_printf_i+0x19c>
 80071e4:	2310      	movs	r3, #16
 80071e6:	e7ad      	b.n	8007144 <_printf_i+0xf4>
 80071e8:	4826      	ldr	r0, [pc, #152]	@ (8007284 <_printf_i+0x234>)
 80071ea:	e7e9      	b.n	80071c0 <_printf_i+0x170>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	f023 0320 	bic.w	r3, r3, #32
 80071f2:	6023      	str	r3, [r4, #0]
 80071f4:	e7f6      	b.n	80071e4 <_printf_i+0x194>
 80071f6:	4616      	mov	r6, r2
 80071f8:	e7bd      	b.n	8007176 <_printf_i+0x126>
 80071fa:	6833      	ldr	r3, [r6, #0]
 80071fc:	6825      	ldr	r5, [r4, #0]
 80071fe:	6961      	ldr	r1, [r4, #20]
 8007200:	1d18      	adds	r0, r3, #4
 8007202:	6030      	str	r0, [r6, #0]
 8007204:	062e      	lsls	r6, r5, #24
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	d501      	bpl.n	800720e <_printf_i+0x1be>
 800720a:	6019      	str	r1, [r3, #0]
 800720c:	e002      	b.n	8007214 <_printf_i+0x1c4>
 800720e:	0668      	lsls	r0, r5, #25
 8007210:	d5fb      	bpl.n	800720a <_printf_i+0x1ba>
 8007212:	8019      	strh	r1, [r3, #0]
 8007214:	2300      	movs	r3, #0
 8007216:	6123      	str	r3, [r4, #16]
 8007218:	4616      	mov	r6, r2
 800721a:	e7bc      	b.n	8007196 <_printf_i+0x146>
 800721c:	6833      	ldr	r3, [r6, #0]
 800721e:	1d1a      	adds	r2, r3, #4
 8007220:	6032      	str	r2, [r6, #0]
 8007222:	681e      	ldr	r6, [r3, #0]
 8007224:	6862      	ldr	r2, [r4, #4]
 8007226:	2100      	movs	r1, #0
 8007228:	4630      	mov	r0, r6
 800722a:	f7f8 fff9 	bl	8000220 <memchr>
 800722e:	b108      	cbz	r0, 8007234 <_printf_i+0x1e4>
 8007230:	1b80      	subs	r0, r0, r6
 8007232:	6060      	str	r0, [r4, #4]
 8007234:	6863      	ldr	r3, [r4, #4]
 8007236:	6123      	str	r3, [r4, #16]
 8007238:	2300      	movs	r3, #0
 800723a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800723e:	e7aa      	b.n	8007196 <_printf_i+0x146>
 8007240:	6923      	ldr	r3, [r4, #16]
 8007242:	4632      	mov	r2, r6
 8007244:	4649      	mov	r1, r9
 8007246:	4640      	mov	r0, r8
 8007248:	47d0      	blx	sl
 800724a:	3001      	adds	r0, #1
 800724c:	d0ad      	beq.n	80071aa <_printf_i+0x15a>
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	079b      	lsls	r3, r3, #30
 8007252:	d413      	bmi.n	800727c <_printf_i+0x22c>
 8007254:	68e0      	ldr	r0, [r4, #12]
 8007256:	9b03      	ldr	r3, [sp, #12]
 8007258:	4298      	cmp	r0, r3
 800725a:	bfb8      	it	lt
 800725c:	4618      	movlt	r0, r3
 800725e:	e7a6      	b.n	80071ae <_printf_i+0x15e>
 8007260:	2301      	movs	r3, #1
 8007262:	4632      	mov	r2, r6
 8007264:	4649      	mov	r1, r9
 8007266:	4640      	mov	r0, r8
 8007268:	47d0      	blx	sl
 800726a:	3001      	adds	r0, #1
 800726c:	d09d      	beq.n	80071aa <_printf_i+0x15a>
 800726e:	3501      	adds	r5, #1
 8007270:	68e3      	ldr	r3, [r4, #12]
 8007272:	9903      	ldr	r1, [sp, #12]
 8007274:	1a5b      	subs	r3, r3, r1
 8007276:	42ab      	cmp	r3, r5
 8007278:	dcf2      	bgt.n	8007260 <_printf_i+0x210>
 800727a:	e7eb      	b.n	8007254 <_printf_i+0x204>
 800727c:	2500      	movs	r5, #0
 800727e:	f104 0619 	add.w	r6, r4, #25
 8007282:	e7f5      	b.n	8007270 <_printf_i+0x220>
 8007284:	0800805c 	.word	0x0800805c
 8007288:	0800806d 	.word	0x0800806d

0800728c <__swbuf_r>:
 800728c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728e:	460e      	mov	r6, r1
 8007290:	4614      	mov	r4, r2
 8007292:	4605      	mov	r5, r0
 8007294:	b118      	cbz	r0, 800729e <__swbuf_r+0x12>
 8007296:	6a03      	ldr	r3, [r0, #32]
 8007298:	b90b      	cbnz	r3, 800729e <__swbuf_r+0x12>
 800729a:	f7ff fa41 	bl	8006720 <__sinit>
 800729e:	69a3      	ldr	r3, [r4, #24]
 80072a0:	60a3      	str	r3, [r4, #8]
 80072a2:	89a3      	ldrh	r3, [r4, #12]
 80072a4:	071a      	lsls	r2, r3, #28
 80072a6:	d501      	bpl.n	80072ac <__swbuf_r+0x20>
 80072a8:	6923      	ldr	r3, [r4, #16]
 80072aa:	b943      	cbnz	r3, 80072be <__swbuf_r+0x32>
 80072ac:	4621      	mov	r1, r4
 80072ae:	4628      	mov	r0, r5
 80072b0:	f000 f82a 	bl	8007308 <__swsetup_r>
 80072b4:	b118      	cbz	r0, 80072be <__swbuf_r+0x32>
 80072b6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80072ba:	4638      	mov	r0, r7
 80072bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	6922      	ldr	r2, [r4, #16]
 80072c2:	1a98      	subs	r0, r3, r2
 80072c4:	6963      	ldr	r3, [r4, #20]
 80072c6:	b2f6      	uxtb	r6, r6
 80072c8:	4283      	cmp	r3, r0
 80072ca:	4637      	mov	r7, r6
 80072cc:	dc05      	bgt.n	80072da <__swbuf_r+0x4e>
 80072ce:	4621      	mov	r1, r4
 80072d0:	4628      	mov	r0, r5
 80072d2:	f7ff fcbd 	bl	8006c50 <_fflush_r>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	d1ed      	bne.n	80072b6 <__swbuf_r+0x2a>
 80072da:	68a3      	ldr	r3, [r4, #8]
 80072dc:	3b01      	subs	r3, #1
 80072de:	60a3      	str	r3, [r4, #8]
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	6022      	str	r2, [r4, #0]
 80072e6:	701e      	strb	r6, [r3, #0]
 80072e8:	6962      	ldr	r2, [r4, #20]
 80072ea:	1c43      	adds	r3, r0, #1
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d004      	beq.n	80072fa <__swbuf_r+0x6e>
 80072f0:	89a3      	ldrh	r3, [r4, #12]
 80072f2:	07db      	lsls	r3, r3, #31
 80072f4:	d5e1      	bpl.n	80072ba <__swbuf_r+0x2e>
 80072f6:	2e0a      	cmp	r6, #10
 80072f8:	d1df      	bne.n	80072ba <__swbuf_r+0x2e>
 80072fa:	4621      	mov	r1, r4
 80072fc:	4628      	mov	r0, r5
 80072fe:	f7ff fca7 	bl	8006c50 <_fflush_r>
 8007302:	2800      	cmp	r0, #0
 8007304:	d0d9      	beq.n	80072ba <__swbuf_r+0x2e>
 8007306:	e7d6      	b.n	80072b6 <__swbuf_r+0x2a>

08007308 <__swsetup_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	4b29      	ldr	r3, [pc, #164]	@ (80073b0 <__swsetup_r+0xa8>)
 800730c:	4605      	mov	r5, r0
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	460c      	mov	r4, r1
 8007312:	b118      	cbz	r0, 800731c <__swsetup_r+0x14>
 8007314:	6a03      	ldr	r3, [r0, #32]
 8007316:	b90b      	cbnz	r3, 800731c <__swsetup_r+0x14>
 8007318:	f7ff fa02 	bl	8006720 <__sinit>
 800731c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007320:	0719      	lsls	r1, r3, #28
 8007322:	d422      	bmi.n	800736a <__swsetup_r+0x62>
 8007324:	06da      	lsls	r2, r3, #27
 8007326:	d407      	bmi.n	8007338 <__swsetup_r+0x30>
 8007328:	2209      	movs	r2, #9
 800732a:	602a      	str	r2, [r5, #0]
 800732c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007330:	81a3      	strh	r3, [r4, #12]
 8007332:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007336:	e033      	b.n	80073a0 <__swsetup_r+0x98>
 8007338:	0758      	lsls	r0, r3, #29
 800733a:	d512      	bpl.n	8007362 <__swsetup_r+0x5a>
 800733c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800733e:	b141      	cbz	r1, 8007352 <__swsetup_r+0x4a>
 8007340:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007344:	4299      	cmp	r1, r3
 8007346:	d002      	beq.n	800734e <__swsetup_r+0x46>
 8007348:	4628      	mov	r0, r5
 800734a:	f7ff fafd 	bl	8006948 <_free_r>
 800734e:	2300      	movs	r3, #0
 8007350:	6363      	str	r3, [r4, #52]	@ 0x34
 8007352:	89a3      	ldrh	r3, [r4, #12]
 8007354:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007358:	81a3      	strh	r3, [r4, #12]
 800735a:	2300      	movs	r3, #0
 800735c:	6063      	str	r3, [r4, #4]
 800735e:	6923      	ldr	r3, [r4, #16]
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	89a3      	ldrh	r3, [r4, #12]
 8007364:	f043 0308 	orr.w	r3, r3, #8
 8007368:	81a3      	strh	r3, [r4, #12]
 800736a:	6923      	ldr	r3, [r4, #16]
 800736c:	b94b      	cbnz	r3, 8007382 <__swsetup_r+0x7a>
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007378:	d003      	beq.n	8007382 <__swsetup_r+0x7a>
 800737a:	4621      	mov	r1, r4
 800737c:	4628      	mov	r0, r5
 800737e:	f000 f883 	bl	8007488 <__smakebuf_r>
 8007382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007386:	f013 0201 	ands.w	r2, r3, #1
 800738a:	d00a      	beq.n	80073a2 <__swsetup_r+0x9a>
 800738c:	2200      	movs	r2, #0
 800738e:	60a2      	str	r2, [r4, #8]
 8007390:	6962      	ldr	r2, [r4, #20]
 8007392:	4252      	negs	r2, r2
 8007394:	61a2      	str	r2, [r4, #24]
 8007396:	6922      	ldr	r2, [r4, #16]
 8007398:	b942      	cbnz	r2, 80073ac <__swsetup_r+0xa4>
 800739a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800739e:	d1c5      	bne.n	800732c <__swsetup_r+0x24>
 80073a0:	bd38      	pop	{r3, r4, r5, pc}
 80073a2:	0799      	lsls	r1, r3, #30
 80073a4:	bf58      	it	pl
 80073a6:	6962      	ldrpl	r2, [r4, #20]
 80073a8:	60a2      	str	r2, [r4, #8]
 80073aa:	e7f4      	b.n	8007396 <__swsetup_r+0x8e>
 80073ac:	2000      	movs	r0, #0
 80073ae:	e7f7      	b.n	80073a0 <__swsetup_r+0x98>
 80073b0:	200032c0 	.word	0x200032c0

080073b4 <_raise_r>:
 80073b4:	291f      	cmp	r1, #31
 80073b6:	b538      	push	{r3, r4, r5, lr}
 80073b8:	4605      	mov	r5, r0
 80073ba:	460c      	mov	r4, r1
 80073bc:	d904      	bls.n	80073c8 <_raise_r+0x14>
 80073be:	2316      	movs	r3, #22
 80073c0:	6003      	str	r3, [r0, #0]
 80073c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80073ca:	b112      	cbz	r2, 80073d2 <_raise_r+0x1e>
 80073cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073d0:	b94b      	cbnz	r3, 80073e6 <_raise_r+0x32>
 80073d2:	4628      	mov	r0, r5
 80073d4:	f000 f830 	bl	8007438 <_getpid_r>
 80073d8:	4622      	mov	r2, r4
 80073da:	4601      	mov	r1, r0
 80073dc:	4628      	mov	r0, r5
 80073de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073e2:	f000 b817 	b.w	8007414 <_kill_r>
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d00a      	beq.n	8007400 <_raise_r+0x4c>
 80073ea:	1c59      	adds	r1, r3, #1
 80073ec:	d103      	bne.n	80073f6 <_raise_r+0x42>
 80073ee:	2316      	movs	r3, #22
 80073f0:	6003      	str	r3, [r0, #0]
 80073f2:	2001      	movs	r0, #1
 80073f4:	e7e7      	b.n	80073c6 <_raise_r+0x12>
 80073f6:	2100      	movs	r1, #0
 80073f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80073fc:	4620      	mov	r0, r4
 80073fe:	4798      	blx	r3
 8007400:	2000      	movs	r0, #0
 8007402:	e7e0      	b.n	80073c6 <_raise_r+0x12>

08007404 <raise>:
 8007404:	4b02      	ldr	r3, [pc, #8]	@ (8007410 <raise+0xc>)
 8007406:	4601      	mov	r1, r0
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	f7ff bfd3 	b.w	80073b4 <_raise_r>
 800740e:	bf00      	nop
 8007410:	200032c0 	.word	0x200032c0

08007414 <_kill_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	4d07      	ldr	r5, [pc, #28]	@ (8007434 <_kill_r+0x20>)
 8007418:	2300      	movs	r3, #0
 800741a:	4604      	mov	r4, r0
 800741c:	4608      	mov	r0, r1
 800741e:	4611      	mov	r1, r2
 8007420:	602b      	str	r3, [r5, #0]
 8007422:	f7fa fb45 	bl	8001ab0 <_kill>
 8007426:	1c43      	adds	r3, r0, #1
 8007428:	d102      	bne.n	8007430 <_kill_r+0x1c>
 800742a:	682b      	ldr	r3, [r5, #0]
 800742c:	b103      	cbz	r3, 8007430 <_kill_r+0x1c>
 800742e:	6023      	str	r3, [r4, #0]
 8007430:	bd38      	pop	{r3, r4, r5, pc}
 8007432:	bf00      	nop
 8007434:	20003714 	.word	0x20003714

08007438 <_getpid_r>:
 8007438:	f7fa bb32 	b.w	8001aa0 <_getpid>

0800743c <__swhatbuf_r>:
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	460c      	mov	r4, r1
 8007440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007444:	2900      	cmp	r1, #0
 8007446:	b096      	sub	sp, #88	@ 0x58
 8007448:	4615      	mov	r5, r2
 800744a:	461e      	mov	r6, r3
 800744c:	da0d      	bge.n	800746a <__swhatbuf_r+0x2e>
 800744e:	89a3      	ldrh	r3, [r4, #12]
 8007450:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007454:	f04f 0100 	mov.w	r1, #0
 8007458:	bf14      	ite	ne
 800745a:	2340      	movne	r3, #64	@ 0x40
 800745c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007460:	2000      	movs	r0, #0
 8007462:	6031      	str	r1, [r6, #0]
 8007464:	602b      	str	r3, [r5, #0]
 8007466:	b016      	add	sp, #88	@ 0x58
 8007468:	bd70      	pop	{r4, r5, r6, pc}
 800746a:	466a      	mov	r2, sp
 800746c:	f000 f848 	bl	8007500 <_fstat_r>
 8007470:	2800      	cmp	r0, #0
 8007472:	dbec      	blt.n	800744e <__swhatbuf_r+0x12>
 8007474:	9901      	ldr	r1, [sp, #4]
 8007476:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800747a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800747e:	4259      	negs	r1, r3
 8007480:	4159      	adcs	r1, r3
 8007482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007486:	e7eb      	b.n	8007460 <__swhatbuf_r+0x24>

08007488 <__smakebuf_r>:
 8007488:	898b      	ldrh	r3, [r1, #12]
 800748a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800748c:	079d      	lsls	r5, r3, #30
 800748e:	4606      	mov	r6, r0
 8007490:	460c      	mov	r4, r1
 8007492:	d507      	bpl.n	80074a4 <__smakebuf_r+0x1c>
 8007494:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007498:	6023      	str	r3, [r4, #0]
 800749a:	6123      	str	r3, [r4, #16]
 800749c:	2301      	movs	r3, #1
 800749e:	6163      	str	r3, [r4, #20]
 80074a0:	b003      	add	sp, #12
 80074a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074a4:	ab01      	add	r3, sp, #4
 80074a6:	466a      	mov	r2, sp
 80074a8:	f7ff ffc8 	bl	800743c <__swhatbuf_r>
 80074ac:	9f00      	ldr	r7, [sp, #0]
 80074ae:	4605      	mov	r5, r0
 80074b0:	4639      	mov	r1, r7
 80074b2:	4630      	mov	r0, r6
 80074b4:	f7ff fabc 	bl	8006a30 <_malloc_r>
 80074b8:	b948      	cbnz	r0, 80074ce <__smakebuf_r+0x46>
 80074ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074be:	059a      	lsls	r2, r3, #22
 80074c0:	d4ee      	bmi.n	80074a0 <__smakebuf_r+0x18>
 80074c2:	f023 0303 	bic.w	r3, r3, #3
 80074c6:	f043 0302 	orr.w	r3, r3, #2
 80074ca:	81a3      	strh	r3, [r4, #12]
 80074cc:	e7e2      	b.n	8007494 <__smakebuf_r+0xc>
 80074ce:	89a3      	ldrh	r3, [r4, #12]
 80074d0:	6020      	str	r0, [r4, #0]
 80074d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074d6:	81a3      	strh	r3, [r4, #12]
 80074d8:	9b01      	ldr	r3, [sp, #4]
 80074da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80074de:	b15b      	cbz	r3, 80074f8 <__smakebuf_r+0x70>
 80074e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074e4:	4630      	mov	r0, r6
 80074e6:	f000 f81d 	bl	8007524 <_isatty_r>
 80074ea:	b128      	cbz	r0, 80074f8 <__smakebuf_r+0x70>
 80074ec:	89a3      	ldrh	r3, [r4, #12]
 80074ee:	f023 0303 	bic.w	r3, r3, #3
 80074f2:	f043 0301 	orr.w	r3, r3, #1
 80074f6:	81a3      	strh	r3, [r4, #12]
 80074f8:	89a3      	ldrh	r3, [r4, #12]
 80074fa:	431d      	orrs	r5, r3
 80074fc:	81a5      	strh	r5, [r4, #12]
 80074fe:	e7cf      	b.n	80074a0 <__smakebuf_r+0x18>

08007500 <_fstat_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	4d07      	ldr	r5, [pc, #28]	@ (8007520 <_fstat_r+0x20>)
 8007504:	2300      	movs	r3, #0
 8007506:	4604      	mov	r4, r0
 8007508:	4608      	mov	r0, r1
 800750a:	4611      	mov	r1, r2
 800750c:	602b      	str	r3, [r5, #0]
 800750e:	f7fa fb2f 	bl	8001b70 <_fstat>
 8007512:	1c43      	adds	r3, r0, #1
 8007514:	d102      	bne.n	800751c <_fstat_r+0x1c>
 8007516:	682b      	ldr	r3, [r5, #0]
 8007518:	b103      	cbz	r3, 800751c <_fstat_r+0x1c>
 800751a:	6023      	str	r3, [r4, #0]
 800751c:	bd38      	pop	{r3, r4, r5, pc}
 800751e:	bf00      	nop
 8007520:	20003714 	.word	0x20003714

08007524 <_isatty_r>:
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	4d06      	ldr	r5, [pc, #24]	@ (8007540 <_isatty_r+0x1c>)
 8007528:	2300      	movs	r3, #0
 800752a:	4604      	mov	r4, r0
 800752c:	4608      	mov	r0, r1
 800752e:	602b      	str	r3, [r5, #0]
 8007530:	f7fa fb2e 	bl	8001b90 <_isatty>
 8007534:	1c43      	adds	r3, r0, #1
 8007536:	d102      	bne.n	800753e <_isatty_r+0x1a>
 8007538:	682b      	ldr	r3, [r5, #0]
 800753a:	b103      	cbz	r3, 800753e <_isatty_r+0x1a>
 800753c:	6023      	str	r3, [r4, #0]
 800753e:	bd38      	pop	{r3, r4, r5, pc}
 8007540:	20003714 	.word	0x20003714

08007544 <_init>:
 8007544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007546:	bf00      	nop
 8007548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800754a:	bc08      	pop	{r3}
 800754c:	469e      	mov	lr, r3
 800754e:	4770      	bx	lr

08007550 <_fini>:
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007552:	bf00      	nop
 8007554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007556:	bc08      	pop	{r3}
 8007558:	469e      	mov	lr, r3
 800755a:	4770      	bx	lr
