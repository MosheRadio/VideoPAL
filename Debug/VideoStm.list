
VideoStm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .screen       00002760  20000000  20000000  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005c4c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000928  08005e24  08005e24  00006e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800674c  0800674c  0005ac00  2**0
                  CONTENTS, READONLY
  5 .ARM          00000000  0800674c  0800674c  0005ac00  2**0
                  CONTENTS, READONLY
  6 .preinit_array 00000000  0800674c  0800674c  0005ac00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800674c  0800674c  0000774c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08006750  08006750  00007750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00001518  20002760  08006754  00007760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000002c0  20003c78  08007c6c  00008c78  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003f38  08007c6c  00008f38  2**0
                  ALLOC
 12 .screenBB     0004ec00  22000000  22000000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 00000030  00000000  00000000  0005ac00  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e19c  00000000  00000000  0005ac30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000249e  00000000  00000000  00068dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f18  00000000  00000000  0006b270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000269cf  00000000  00000000  0006c188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001022a  00000000  00000000  00092b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7d3a  00000000  00000000  000a2d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019aabb  2**0
                  CONTENTS, READONLY
 21 .debug_rnglists 00000b8b  00000000  00000000  0019aafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003e4c  00000000  00000000  0019b68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000061  00000000  00000000  0019f4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20003c78 	.word	0x20003c78
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005e0c 	.word	0x08005e0c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20003c7c 	.word	0x20003c7c
 8000214:	08005e0c 	.word	0x08005e0c

08000218 <gdiBitBlt>:
		h			Bitmap height, in pixels
		bm			Pointer to the bitmap start position

	return			none
*/
void gdiBitBlt(PGDI_RECT prc, int16_t x, int16_t y, int16_t w, int16_t h, pBMP bm) {
 8000218:	b490      	push	{r4, r7}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	4608      	mov	r0, r1
 8000222:	4611      	mov	r1, r2
 8000224:	461a      	mov	r2, r3
 8000226:	4603      	mov	r3, r0
 8000228:	817b      	strh	r3, [r7, #10]
 800022a:	460b      	mov	r3, r1
 800022c:	813b      	strh	r3, [r7, #8]
 800022e:	4613      	mov	r3, r2
 8000230:	80fb      	strh	r3, [r7, #6]
int16_t todo;
uint16_t alignment;

//	Calculate clipping region

	if (prc != NULL) {
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d00f      	beq.n	8000258 <gdiBitBlt+0x40>
		x += prc->x;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800023e:	b29a      	uxth	r2, r3
 8000240:	897b      	ldrh	r3, [r7, #10]
 8000242:	4413      	add	r3, r2
 8000244:	b29b      	uxth	r3, r3
 8000246:	817b      	strh	r3, [r7, #10]
		y += prc->y;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800024e:	b29a      	uxth	r2, r3
 8000250:	893b      	ldrh	r3, [r7, #8]
 8000252:	4413      	add	r3, r2
 8000254:	b29b      	uxth	r3, r3
 8000256:	813b      	strh	r3, [r7, #8]
//??		w = min(prc->w, VID_PIXELS_X-x);	// clip X
//??		h = min(prc->w, VID_PIXELS_Y-y);	// clip Y
	}
	alignment = x & 0b0000000000001111;
 8000258:	897b      	ldrh	r3, [r7, #10]
 800025a:	f003 030f 	and.w	r3, r3, #15
 800025e:	82bb      	strh	r3, [r7, #20]
	for(;--h >= 0; y++) {
 8000260:	e2cc      	b.n	80007fc <gdiBitBlt+0x5e4>
		for (todo = w; todo>0;) {
 8000262:	88fb      	ldrh	r3, [r7, #6]
 8000264:	82fb      	strh	r3, [r7, #22]
 8000266:	e2be      	b.n	80007e6 <gdiBitBlt+0x5ce>
			if (todo >= 9) {
 8000268:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800026c:	2b08      	cmp	r3, #8
 800026e:	dd2d      	ble.n	80002cc <gdiBitBlt+0xb4>
				bitmask.word = (todo >= 16) ?
									0xFFFF		<< (16-alignment):
 8000270:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000274:	2b0f      	cmp	r3, #15
 8000276:	dd08      	ble.n	800028a <gdiBitBlt+0x72>
 8000278:	8abb      	ldrh	r3, [r7, #20]
 800027a:	f1c3 0310 	rsb	r3, r3, #16
 800027e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000282:	fa02 f303 	lsl.w	r3, r2, r3
 8000286:	461a      	mov	r2, r3
 8000288:	e00c      	b.n	80002a4 <gdiBitBlt+0x8c>
						masktable[todo-1]		<< (16-alignment);
 800028a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800028e:	3b01      	subs	r3, #1
 8000290:	4a79      	ldr	r2, [pc, #484]	@ (8000478 <gdiBitBlt+0x260>)
 8000292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000296:	461a      	mov	r2, r3
 8000298:	8abb      	ldrh	r3, [r7, #20]
 800029a:	f1c3 0310 	rsb	r3, r3, #16
 800029e:	fa02 f303 	lsl.w	r3, r2, r3
									0xFFFF		<< (16-alignment):
 80002a2:	461a      	mov	r2, r3
				bitmask.word = (todo >= 16) ?
 80002a4:	4b75      	ldr	r3, [pc, #468]	@ (800047c <gdiBitBlt+0x264>)
 80002a6:	601a      	str	r2, [r3, #0]
				pattern.word = *bm.halfwords++	<< (16-alignment);
 80002a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002aa:	1c9a      	adds	r2, r3, #2
 80002ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80002ae:	881b      	ldrh	r3, [r3, #0]
 80002b0:	461a      	mov	r2, r3
 80002b2:	8abb      	ldrh	r3, [r7, #20]
 80002b4:	f1c3 0310 	rsb	r3, r3, #16
 80002b8:	fa02 f303 	lsl.w	r3, r2, r3
 80002bc:	461a      	mov	r2, r3
 80002be:	4b70      	ldr	r3, [pc, #448]	@ (8000480 <gdiBitBlt+0x268>)
 80002c0:	601a      	str	r2, [r3, #0]
				todo -= 16;
 80002c2:	8afb      	ldrh	r3, [r7, #22]
 80002c4:	3b10      	subs	r3, #16
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	82fb      	strh	r3, [r7, #22]
 80002ca:	e01f      	b.n	800030c <gdiBitBlt+0xf4>
			} else {
				bitmask.word = masktable[todo-1] << (16-alignment);
 80002cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80002d0:	3b01      	subs	r3, #1
 80002d2:	4a69      	ldr	r2, [pc, #420]	@ (8000478 <gdiBitBlt+0x260>)
 80002d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002d8:	461a      	mov	r2, r3
 80002da:	8abb      	ldrh	r3, [r7, #20]
 80002dc:	f1c3 0310 	rsb	r3, r3, #16
 80002e0:	fa02 f303 	lsl.w	r3, r2, r3
 80002e4:	461a      	mov	r2, r3
 80002e6:	4b65      	ldr	r3, [pc, #404]	@ (800047c <gdiBitBlt+0x264>)
 80002e8:	601a      	str	r2, [r3, #0]
				pattern.word = *bm.bytesinROM++  << (24-alignment);
 80002ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002ec:	1c5a      	adds	r2, r3, #1
 80002ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	461a      	mov	r2, r3
 80002f4:	8abb      	ldrh	r3, [r7, #20]
 80002f6:	f1c3 0318 	rsb	r3, r3, #24
 80002fa:	fa02 f303 	lsl.w	r3, r2, r3
 80002fe:	461a      	mov	r2, r3
 8000300:	4b5f      	ldr	r3, [pc, #380]	@ (8000480 <gdiBitBlt+0x268>)
 8000302:	601a      	str	r2, [r3, #0]
				todo -= 8;
 8000304:	8afb      	ldrh	r3, [r7, #22]
 8000306:	3b08      	subs	r3, #8
 8000308:	b29b      	uxth	r3, r3
 800030a:	82fb      	strh	r3, [r7, #22]
			}
			switch(rop) {
 800030c:	4b5d      	ldr	r3, [pc, #372]	@ (8000484 <gdiBitBlt+0x26c>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b04      	cmp	r3, #4
 8000312:	f200 8268 	bhi.w	80007e6 <gdiBitBlt+0x5ce>
 8000316:	a201      	add	r2, pc, #4	@ (adr r2, 800031c <gdiBitBlt+0x104>)
 8000318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031c:	08000331 	.word	0x08000331
 8000320:	0800048d 	.word	0x0800048d
 8000324:	08000715 	.word	0x08000715
 8000328:	080005d5 	.word	0x080005d5
 800032c:	08000675 	.word	0x08000675
				case GDI_ROP_COPY:
					screen[y][x>>4] &= ~bitmask.halfword[1];
 8000330:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000334:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000338:	111b      	asrs	r3, r3, #4
 800033a:	b21b      	sxth	r3, r3
 800033c:	4618      	mov	r0, r3
 800033e:	4952      	ldr	r1, [pc, #328]	@ (8000488 <gdiBitBlt+0x270>)
 8000340:	4613      	mov	r3, r2
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	4413      	add	r3, r2
 8000346:	00da      	lsls	r2, r3, #3
 8000348:	1ad2      	subs	r2, r2, r3
 800034a:	1813      	adds	r3, r2, r0
 800034c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000350:	b21a      	sxth	r2, r3
 8000352:	4b4a      	ldr	r3, [pc, #296]	@ (800047c <gdiBitBlt+0x264>)
 8000354:	885b      	ldrh	r3, [r3, #2]
 8000356:	b21b      	sxth	r3, r3
 8000358:	43db      	mvns	r3, r3
 800035a:	b21b      	sxth	r3, r3
 800035c:	4013      	ands	r3, r2
 800035e:	b219      	sxth	r1, r3
 8000360:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000364:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000368:	111b      	asrs	r3, r3, #4
 800036a:	b21b      	sxth	r3, r3
 800036c:	461c      	mov	r4, r3
 800036e:	b288      	uxth	r0, r1
 8000370:	4945      	ldr	r1, [pc, #276]	@ (8000488 <gdiBitBlt+0x270>)
 8000372:	4613      	mov	r3, r2
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	4413      	add	r3, r2
 8000378:	00da      	lsls	r2, r3, #3
 800037a:	1ad2      	subs	r2, r2, r3
 800037c:	1913      	adds	r3, r2, r4
 800037e:	4602      	mov	r2, r0
 8000380:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					screen[y][x>>4] |=  pattern.halfword[1];
 8000384:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000388:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800038c:	111b      	asrs	r3, r3, #4
 800038e:	b21b      	sxth	r3, r3
 8000390:	4618      	mov	r0, r3
 8000392:	493d      	ldr	r1, [pc, #244]	@ (8000488 <gdiBitBlt+0x270>)
 8000394:	4613      	mov	r3, r2
 8000396:	005b      	lsls	r3, r3, #1
 8000398:	4413      	add	r3, r2
 800039a:	00da      	lsls	r2, r3, #3
 800039c:	1ad2      	subs	r2, r2, r3
 800039e:	1813      	adds	r3, r2, r0
 80003a0:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80003a4:	4b36      	ldr	r3, [pc, #216]	@ (8000480 <gdiBitBlt+0x268>)
 80003a6:	885b      	ldrh	r3, [r3, #2]
 80003a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80003ac:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80003b0:	1100      	asrs	r0, r0, #4
 80003b2:	b200      	sxth	r0, r0
 80003b4:	4604      	mov	r4, r0
 80003b6:	430b      	orrs	r3, r1
 80003b8:	b298      	uxth	r0, r3
 80003ba:	4933      	ldr	r1, [pc, #204]	@ (8000488 <gdiBitBlt+0x270>)
 80003bc:	4613      	mov	r3, r2
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	4413      	add	r3, r2
 80003c2:	00da      	lsls	r2, r3, #3
 80003c4:	1ad2      	subs	r2, r2, r3
 80003c6:	1913      	adds	r3, r2, r4
 80003c8:	4602      	mov	r2, r0
 80003ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (bitmask.halfword[0] != 0) {
 80003ce:	4b2b      	ldr	r3, [pc, #172]	@ (800047c <gdiBitBlt+0x264>)
 80003d0:	881b      	ldrh	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	f000 81fe 	beq.w	80007d4 <gdiBitBlt+0x5bc>
						screen[y][(x>>4)+1] &= ~bitmask.halfword[0];
 80003d8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80003dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80003e0:	111b      	asrs	r3, r3, #4
 80003e2:	b21b      	sxth	r3, r3
 80003e4:	1c59      	adds	r1, r3, #1
 80003e6:	4828      	ldr	r0, [pc, #160]	@ (8000488 <gdiBitBlt+0x270>)
 80003e8:	4613      	mov	r3, r2
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	4413      	add	r3, r2
 80003ee:	00da      	lsls	r2, r3, #3
 80003f0:	1ad2      	subs	r2, r2, r3
 80003f2:	1853      	adds	r3, r2, r1
 80003f4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80003f8:	b21a      	sxth	r2, r3
 80003fa:	4b20      	ldr	r3, [pc, #128]	@ (800047c <gdiBitBlt+0x264>)
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	b21b      	sxth	r3, r3
 8000400:	43db      	mvns	r3, r3
 8000402:	b21b      	sxth	r3, r3
 8000404:	4013      	ands	r3, r2
 8000406:	b218      	sxth	r0, r3
 8000408:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800040c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000410:	111b      	asrs	r3, r3, #4
 8000412:	b21b      	sxth	r3, r3
 8000414:	1c59      	adds	r1, r3, #1
 8000416:	b284      	uxth	r4, r0
 8000418:	481b      	ldr	r0, [pc, #108]	@ (8000488 <gdiBitBlt+0x270>)
 800041a:	4613      	mov	r3, r2
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	4413      	add	r3, r2
 8000420:	00da      	lsls	r2, r3, #3
 8000422:	1ad2      	subs	r2, r2, r3
 8000424:	1853      	adds	r3, r2, r1
 8000426:	4622      	mov	r2, r4
 8000428:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						screen[y][(x>>4)+1] |=  pattern.halfword[0];
 800042c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000430:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000434:	111b      	asrs	r3, r3, #4
 8000436:	b21b      	sxth	r3, r3
 8000438:	1c59      	adds	r1, r3, #1
 800043a:	4813      	ldr	r0, [pc, #76]	@ (8000488 <gdiBitBlt+0x270>)
 800043c:	4613      	mov	r3, r2
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	4413      	add	r3, r2
 8000442:	00da      	lsls	r2, r3, #3
 8000444:	1ad2      	subs	r2, r2, r3
 8000446:	1853      	adds	r3, r2, r1
 8000448:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 800044c:	4b0c      	ldr	r3, [pc, #48]	@ (8000480 <gdiBitBlt+0x268>)
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000454:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000458:	1109      	asrs	r1, r1, #4
 800045a:	b209      	sxth	r1, r1
 800045c:	3101      	adds	r1, #1
 800045e:	4303      	orrs	r3, r0
 8000460:	b29c      	uxth	r4, r3
 8000462:	4809      	ldr	r0, [pc, #36]	@ (8000488 <gdiBitBlt+0x270>)
 8000464:	4613      	mov	r3, r2
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	4413      	add	r3, r2
 800046a:	00da      	lsls	r2, r3, #3
 800046c:	1ad2      	subs	r2, r2, r3
 800046e:	1853      	adds	r3, r2, r1
 8000470:	4622      	mov	r2, r4
 8000472:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					}
					break;
 8000476:	e1ad      	b.n	80007d4 <gdiBitBlt+0x5bc>
 8000478:	080061fc 	.word	0x080061fc
 800047c:	20003c98 	.word	0x20003c98
 8000480:	20003c94 	.word	0x20003c94
 8000484:	20002760 	.word	0x20002760
 8000488:	20000000 	.word	0x20000000
				case GDI_ROP_BONW:	// inverse video
					screen[y][x>>4] |=  bitmask.halfword[1];
 800048c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000490:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000494:	111b      	asrs	r3, r3, #4
 8000496:	b21b      	sxth	r3, r3
 8000498:	4618      	mov	r0, r3
 800049a:	49cb      	ldr	r1, [pc, #812]	@ (80007c8 <gdiBitBlt+0x5b0>)
 800049c:	4613      	mov	r3, r2
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	4413      	add	r3, r2
 80004a2:	00da      	lsls	r2, r3, #3
 80004a4:	1ad2      	subs	r2, r2, r3
 80004a6:	1813      	adds	r3, r2, r0
 80004a8:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80004ac:	4bc7      	ldr	r3, [pc, #796]	@ (80007cc <gdiBitBlt+0x5b4>)
 80004ae:	885b      	ldrh	r3, [r3, #2]
 80004b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004b4:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80004b8:	1100      	asrs	r0, r0, #4
 80004ba:	b200      	sxth	r0, r0
 80004bc:	4604      	mov	r4, r0
 80004be:	430b      	orrs	r3, r1
 80004c0:	b298      	uxth	r0, r3
 80004c2:	49c1      	ldr	r1, [pc, #772]	@ (80007c8 <gdiBitBlt+0x5b0>)
 80004c4:	4613      	mov	r3, r2
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	4413      	add	r3, r2
 80004ca:	00da      	lsls	r2, r3, #3
 80004cc:	1ad2      	subs	r2, r2, r3
 80004ce:	1913      	adds	r3, r2, r4
 80004d0:	4602      	mov	r2, r0
 80004d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					screen[y][x>>4] &= ~pattern.halfword[1];
 80004d6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004de:	111b      	asrs	r3, r3, #4
 80004e0:	b21b      	sxth	r3, r3
 80004e2:	4618      	mov	r0, r3
 80004e4:	49b8      	ldr	r1, [pc, #736]	@ (80007c8 <gdiBitBlt+0x5b0>)
 80004e6:	4613      	mov	r3, r2
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	4413      	add	r3, r2
 80004ec:	00da      	lsls	r2, r3, #3
 80004ee:	1ad2      	subs	r2, r2, r3
 80004f0:	1813      	adds	r3, r2, r0
 80004f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004f6:	b21a      	sxth	r2, r3
 80004f8:	4bb5      	ldr	r3, [pc, #724]	@ (80007d0 <gdiBitBlt+0x5b8>)
 80004fa:	885b      	ldrh	r3, [r3, #2]
 80004fc:	b21b      	sxth	r3, r3
 80004fe:	43db      	mvns	r3, r3
 8000500:	b21b      	sxth	r3, r3
 8000502:	4013      	ands	r3, r2
 8000504:	b219      	sxth	r1, r3
 8000506:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800050a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800050e:	111b      	asrs	r3, r3, #4
 8000510:	b21b      	sxth	r3, r3
 8000512:	461c      	mov	r4, r3
 8000514:	b288      	uxth	r0, r1
 8000516:	49ac      	ldr	r1, [pc, #688]	@ (80007c8 <gdiBitBlt+0x5b0>)
 8000518:	4613      	mov	r3, r2
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	4413      	add	r3, r2
 800051e:	00da      	lsls	r2, r3, #3
 8000520:	1ad2      	subs	r2, r2, r3
 8000522:	1913      	adds	r3, r2, r4
 8000524:	4602      	mov	r2, r0
 8000526:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (bitmask.halfword[0] != 0) {
 800052a:	4ba8      	ldr	r3, [pc, #672]	@ (80007cc <gdiBitBlt+0x5b4>)
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	f000 8152 	beq.w	80007d8 <gdiBitBlt+0x5c0>
						screen[y][(x>>4)+1] |=  bitmask.halfword[0];
 8000534:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000538:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800053c:	111b      	asrs	r3, r3, #4
 800053e:	b21b      	sxth	r3, r3
 8000540:	1c59      	adds	r1, r3, #1
 8000542:	48a1      	ldr	r0, [pc, #644]	@ (80007c8 <gdiBitBlt+0x5b0>)
 8000544:	4613      	mov	r3, r2
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	4413      	add	r3, r2
 800054a:	00da      	lsls	r2, r3, #3
 800054c:	1ad2      	subs	r2, r2, r3
 800054e:	1853      	adds	r3, r2, r1
 8000550:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000554:	4b9d      	ldr	r3, [pc, #628]	@ (80007cc <gdiBitBlt+0x5b4>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800055c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000560:	1109      	asrs	r1, r1, #4
 8000562:	b209      	sxth	r1, r1
 8000564:	3101      	adds	r1, #1
 8000566:	4303      	orrs	r3, r0
 8000568:	b29c      	uxth	r4, r3
 800056a:	4897      	ldr	r0, [pc, #604]	@ (80007c8 <gdiBitBlt+0x5b0>)
 800056c:	4613      	mov	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	4413      	add	r3, r2
 8000572:	00da      	lsls	r2, r3, #3
 8000574:	1ad2      	subs	r2, r2, r3
 8000576:	1853      	adds	r3, r2, r1
 8000578:	4622      	mov	r2, r4
 800057a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						screen[y][(x>>4)+1] &= ~pattern.halfword[0];
 800057e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000582:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000586:	111b      	asrs	r3, r3, #4
 8000588:	b21b      	sxth	r3, r3
 800058a:	1c59      	adds	r1, r3, #1
 800058c:	488e      	ldr	r0, [pc, #568]	@ (80007c8 <gdiBitBlt+0x5b0>)
 800058e:	4613      	mov	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	4413      	add	r3, r2
 8000594:	00da      	lsls	r2, r3, #3
 8000596:	1ad2      	subs	r2, r2, r3
 8000598:	1853      	adds	r3, r2, r1
 800059a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800059e:	b21a      	sxth	r2, r3
 80005a0:	4b8b      	ldr	r3, [pc, #556]	@ (80007d0 <gdiBitBlt+0x5b8>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	b21b      	sxth	r3, r3
 80005a6:	43db      	mvns	r3, r3
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	4013      	ands	r3, r2
 80005ac:	b218      	sxth	r0, r3
 80005ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005b6:	111b      	asrs	r3, r3, #4
 80005b8:	b21b      	sxth	r3, r3
 80005ba:	1c59      	adds	r1, r3, #1
 80005bc:	b284      	uxth	r4, r0
 80005be:	4882      	ldr	r0, [pc, #520]	@ (80007c8 <gdiBitBlt+0x5b0>)
 80005c0:	4613      	mov	r3, r2
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	4413      	add	r3, r2
 80005c6:	00da      	lsls	r2, r3, #3
 80005c8:	1ad2      	subs	r2, r2, r3
 80005ca:	1853      	adds	r3, r2, r1
 80005cc:	4622      	mov	r2, r4
 80005ce:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					}
					break;
 80005d2:	e101      	b.n	80007d8 <gdiBitBlt+0x5c0>
				case GDI_ROP_XOR:
					screen[y][x>>4] ^= pattern.halfword[1];
 80005d4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005dc:	111b      	asrs	r3, r3, #4
 80005de:	b21b      	sxth	r3, r3
 80005e0:	4618      	mov	r0, r3
 80005e2:	4979      	ldr	r1, [pc, #484]	@ (80007c8 <gdiBitBlt+0x5b0>)
 80005e4:	4613      	mov	r3, r2
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	4413      	add	r3, r2
 80005ea:	00da      	lsls	r2, r3, #3
 80005ec:	1ad2      	subs	r2, r2, r3
 80005ee:	1813      	adds	r3, r2, r0
 80005f0:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80005f4:	4b76      	ldr	r3, [pc, #472]	@ (80007d0 <gdiBitBlt+0x5b8>)
 80005f6:	885b      	ldrh	r3, [r3, #2]
 80005f8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005fc:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000600:	1100      	asrs	r0, r0, #4
 8000602:	b200      	sxth	r0, r0
 8000604:	4604      	mov	r4, r0
 8000606:	404b      	eors	r3, r1
 8000608:	b298      	uxth	r0, r3
 800060a:	496f      	ldr	r1, [pc, #444]	@ (80007c8 <gdiBitBlt+0x5b0>)
 800060c:	4613      	mov	r3, r2
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	4413      	add	r3, r2
 8000612:	00da      	lsls	r2, r3, #3
 8000614:	1ad2      	subs	r2, r2, r3
 8000616:	1913      	adds	r3, r2, r4
 8000618:	4602      	mov	r2, r0
 800061a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 800061e:	4b6c      	ldr	r3, [pc, #432]	@ (80007d0 <gdiBitBlt+0x5b8>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	f000 80da 	beq.w	80007dc <gdiBitBlt+0x5c4>
						screen[y][(x>>4)+1] ^= pattern.halfword[0];
 8000628:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800062c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000630:	111b      	asrs	r3, r3, #4
 8000632:	b21b      	sxth	r3, r3
 8000634:	1c59      	adds	r1, r3, #1
 8000636:	4864      	ldr	r0, [pc, #400]	@ (80007c8 <gdiBitBlt+0x5b0>)
 8000638:	4613      	mov	r3, r2
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	4413      	add	r3, r2
 800063e:	00da      	lsls	r2, r3, #3
 8000640:	1ad2      	subs	r2, r2, r3
 8000642:	1853      	adds	r3, r2, r1
 8000644:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000648:	4b61      	ldr	r3, [pc, #388]	@ (80007d0 <gdiBitBlt+0x5b8>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000650:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000654:	1109      	asrs	r1, r1, #4
 8000656:	b209      	sxth	r1, r1
 8000658:	3101      	adds	r1, #1
 800065a:	4043      	eors	r3, r0
 800065c:	b29c      	uxth	r4, r3
 800065e:	485a      	ldr	r0, [pc, #360]	@ (80007c8 <gdiBitBlt+0x5b0>)
 8000660:	4613      	mov	r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	00da      	lsls	r2, r3, #3
 8000668:	1ad2      	subs	r2, r2, r3
 800066a:	1853      	adds	r3, r2, r1
 800066c:	4622      	mov	r2, r4
 800066e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 8000672:	e0b3      	b.n	80007dc <gdiBitBlt+0x5c4>
				case GDI_ROP_OR:
					screen[y][x>>4] |= pattern.halfword[1];
 8000674:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000678:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800067c:	111b      	asrs	r3, r3, #4
 800067e:	b21b      	sxth	r3, r3
 8000680:	4618      	mov	r0, r3
 8000682:	4951      	ldr	r1, [pc, #324]	@ (80007c8 <gdiBitBlt+0x5b0>)
 8000684:	4613      	mov	r3, r2
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	4413      	add	r3, r2
 800068a:	00da      	lsls	r2, r3, #3
 800068c:	1ad2      	subs	r2, r2, r3
 800068e:	1813      	adds	r3, r2, r0
 8000690:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000694:	4b4e      	ldr	r3, [pc, #312]	@ (80007d0 <gdiBitBlt+0x5b8>)
 8000696:	885b      	ldrh	r3, [r3, #2]
 8000698:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800069c:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80006a0:	1100      	asrs	r0, r0, #4
 80006a2:	b200      	sxth	r0, r0
 80006a4:	4604      	mov	r4, r0
 80006a6:	430b      	orrs	r3, r1
 80006a8:	b298      	uxth	r0, r3
 80006aa:	4947      	ldr	r1, [pc, #284]	@ (80007c8 <gdiBitBlt+0x5b0>)
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	00da      	lsls	r2, r3, #3
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	1913      	adds	r3, r2, r4
 80006b8:	4602      	mov	r2, r0
 80006ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 80006be:	4b44      	ldr	r3, [pc, #272]	@ (80007d0 <gdiBitBlt+0x5b8>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	f000 808c 	beq.w	80007e0 <gdiBitBlt+0x5c8>
						screen[y][(x>>4)+1] |= pattern.halfword[0];
 80006c8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80006d0:	111b      	asrs	r3, r3, #4
 80006d2:	b21b      	sxth	r3, r3
 80006d4:	1c59      	adds	r1, r3, #1
 80006d6:	483c      	ldr	r0, [pc, #240]	@ (80007c8 <gdiBitBlt+0x5b0>)
 80006d8:	4613      	mov	r3, r2
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	4413      	add	r3, r2
 80006de:	00da      	lsls	r2, r3, #3
 80006e0:	1ad2      	subs	r2, r2, r3
 80006e2:	1853      	adds	r3, r2, r1
 80006e4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80006e8:	4b39      	ldr	r3, [pc, #228]	@ (80007d0 <gdiBitBlt+0x5b8>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006f0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80006f4:	1109      	asrs	r1, r1, #4
 80006f6:	b209      	sxth	r1, r1
 80006f8:	3101      	adds	r1, #1
 80006fa:	4303      	orrs	r3, r0
 80006fc:	b29c      	uxth	r4, r3
 80006fe:	4832      	ldr	r0, [pc, #200]	@ (80007c8 <gdiBitBlt+0x5b0>)
 8000700:	4613      	mov	r3, r2
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	4413      	add	r3, r2
 8000706:	00da      	lsls	r2, r3, #3
 8000708:	1ad2      	subs	r2, r2, r3
 800070a:	1853      	adds	r3, r2, r1
 800070c:	4622      	mov	r2, r4
 800070e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 8000712:	e065      	b.n	80007e0 <gdiBitBlt+0x5c8>
				case GDI_ROP_NAND:
					screen[y][x>>4] &= ~pattern.halfword[1];
 8000714:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000718:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800071c:	111b      	asrs	r3, r3, #4
 800071e:	b21b      	sxth	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	4929      	ldr	r1, [pc, #164]	@ (80007c8 <gdiBitBlt+0x5b0>)
 8000724:	4613      	mov	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	4413      	add	r3, r2
 800072a:	00da      	lsls	r2, r3, #3
 800072c:	1ad2      	subs	r2, r2, r3
 800072e:	1813      	adds	r3, r2, r0
 8000730:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000734:	b21a      	sxth	r2, r3
 8000736:	4b26      	ldr	r3, [pc, #152]	@ (80007d0 <gdiBitBlt+0x5b8>)
 8000738:	885b      	ldrh	r3, [r3, #2]
 800073a:	b21b      	sxth	r3, r3
 800073c:	43db      	mvns	r3, r3
 800073e:	b21b      	sxth	r3, r3
 8000740:	4013      	ands	r3, r2
 8000742:	b219      	sxth	r1, r3
 8000744:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000748:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800074c:	111b      	asrs	r3, r3, #4
 800074e:	b21b      	sxth	r3, r3
 8000750:	461c      	mov	r4, r3
 8000752:	b288      	uxth	r0, r1
 8000754:	491c      	ldr	r1, [pc, #112]	@ (80007c8 <gdiBitBlt+0x5b0>)
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	00da      	lsls	r2, r3, #3
 800075e:	1ad2      	subs	r2, r2, r3
 8000760:	1913      	adds	r3, r2, r4
 8000762:	4602      	mov	r2, r0
 8000764:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 8000768:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <gdiBitBlt+0x5b8>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d039      	beq.n	80007e4 <gdiBitBlt+0x5cc>
						screen[y][(x>>4)+1] &= ~pattern.halfword[0];
 8000770:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000774:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000778:	111b      	asrs	r3, r3, #4
 800077a:	b21b      	sxth	r3, r3
 800077c:	1c59      	adds	r1, r3, #1
 800077e:	4812      	ldr	r0, [pc, #72]	@ (80007c8 <gdiBitBlt+0x5b0>)
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	00da      	lsls	r2, r3, #3
 8000788:	1ad2      	subs	r2, r2, r3
 800078a:	1853      	adds	r3, r2, r1
 800078c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000790:	b21a      	sxth	r2, r3
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <gdiBitBlt+0x5b8>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	b21b      	sxth	r3, r3
 8000798:	43db      	mvns	r3, r3
 800079a:	b21b      	sxth	r3, r3
 800079c:	4013      	ands	r3, r2
 800079e:	b218      	sxth	r0, r3
 80007a0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80007a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007a8:	111b      	asrs	r3, r3, #4
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	1c59      	adds	r1, r3, #1
 80007ae:	b284      	uxth	r4, r0
 80007b0:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <gdiBitBlt+0x5b0>)
 80007b2:	4613      	mov	r3, r2
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	4413      	add	r3, r2
 80007b8:	00da      	lsls	r2, r3, #3
 80007ba:	1ad2      	subs	r2, r2, r3
 80007bc:	1853      	adds	r3, r2, r1
 80007be:	4622      	mov	r2, r4
 80007c0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 80007c4:	e00e      	b.n	80007e4 <gdiBitBlt+0x5cc>
 80007c6:	bf00      	nop
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20003c98 	.word	0x20003c98
 80007d0:	20003c94 	.word	0x20003c94
					break;
 80007d4:	bf00      	nop
 80007d6:	e006      	b.n	80007e6 <gdiBitBlt+0x5ce>
					break;
 80007d8:	bf00      	nop
 80007da:	e004      	b.n	80007e6 <gdiBitBlt+0x5ce>
					break;
 80007dc:	bf00      	nop
 80007de:	e002      	b.n	80007e6 <gdiBitBlt+0x5ce>
					break;
 80007e0:	bf00      	nop
 80007e2:	e000      	b.n	80007e6 <gdiBitBlt+0x5ce>
					break;
 80007e4:	bf00      	nop
		for (todo = w; todo>0;) {
 80007e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	f73f ad3c 	bgt.w	8000268 <gdiBitBlt+0x50>
	for(;--h >= 0; y++) {
 80007f0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	3301      	adds	r3, #1
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	813b      	strh	r3, [r7, #8]
 80007fc:	8c3b      	ldrh	r3, [r7, #32]
 80007fe:	3b01      	subs	r3, #1
 8000800:	b29b      	uxth	r3, r3
 8000802:	843b      	strh	r3, [r7, #32]
 8000804:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000808:	2b00      	cmp	r3, #0
 800080a:	f6bf ad2a 	bge.w	8000262 <gdiBitBlt+0x4a>
			}
		}
	}
}
 800080e:	bf00      	nop
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bc90      	pop	{r4, r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop

0800081c <gdiDrawTextEx>:
		ptext		Pointer to text

	return			none
*/
void gdiDrawTextEx(int16_t x, int16_t y, char *ptext)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af02      	add	r7, sp, #8
 8000822:	4603      	mov	r3, r0
 8000824:	603a      	str	r2, [r7, #0]
 8000826:	80fb      	strh	r3, [r7, #6]
 8000828:	460b      	mov	r3, r1
 800082a:	80bb      	strh	r3, [r7, #4]
	char		c;

	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH)
 800082c:	e01a      	b.n	8000864 <gdiDrawTextEx+0x48>
		if (c >= GDI_SYSFONT_OFFSET)
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	2b1f      	cmp	r3, #31
 8000832:	d913      	bls.n	800085c <gdiDrawTextEx+0x40>
			gdiBitBlt(NULL, x, y, GDI_SYSFONT_WIDTH, GDI_SYSFONT_HEIGHT, (pBMP) gdiSystemFont[c-GDI_SYSFONT_OFFSET]);
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	f1a3 0220 	sub.w	r2, r3, #32
 800083a:	4613      	mov	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4413      	add	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	4a0f      	ldr	r2, [pc, #60]	@ (8000880 <gdiDrawTextEx+0x64>)
 8000844:	4413      	add	r3, r2
 8000846:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800084a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	230a      	movs	r3, #10
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2306      	movs	r3, #6
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff fcde 	bl	8000218 <gdiBitBlt>
	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH)
 800085c:	88fb      	ldrh	r3, [r7, #6]
 800085e:	3306      	adds	r3, #6
 8000860:	b29b      	uxth	r3, r3
 8000862:	80fb      	strh	r3, [r7, #6]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	603a      	str	r2, [r7, #0]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	73fb      	strb	r3, [r7, #15]
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d1dc      	bne.n	800082e <gdiDrawTextEx+0x12>
//	clip here if		if (x >= VID_PIXELS_X - GDI_SYSFONT_WIDTH)
		// else control character handling ...
}
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	08005e3c 	.word	0x08005e3c

08000884 <Gpio_deinit>:
{
  TimingDelay = nTime;
  while((TimingDelay != 0));
  while(Paused);
}
void Gpio_deinit(GPIO_TypeDef  *GPIOx){
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
		for(int i =0; i<15;i++){
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	e008      	b.n	80008a4 <Gpio_deinit+0x20>
			HAL_GPIO_DeInit(GPIOA, i);
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	4619      	mov	r1, r3
 8000896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089a:	f001 fd09 	bl	80022b0 <HAL_GPIO_DeInit>
		for(int i =0; i<15;i++){
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3301      	adds	r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b0e      	cmp	r3, #14
 80008a8:	ddf3      	ble.n	8000892 <Gpio_deinit+0xe>
		}
	}
 80008aa:	bf00      	nop
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <TIMER_SET>:


void TIMER_SET(uint32_t sys){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]


	if (sys == 16000000){
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a33      	ldr	r2, [pc, #204]	@ (800098c <TIMER_SET+0xd8>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d113      	bne.n	80008ec <TIMER_SET+0x38>
		  __HAL_I2S_DISABLE(&hi2s2);
 80008c4:	4b32      	ldr	r3, [pc, #200]	@ (8000990 <TIMER_SET+0xdc>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	69da      	ldr	r2, [r3, #28]
 80008ca:	4b31      	ldr	r3, [pc, #196]	@ (8000990 <TIMER_SET+0xdc>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80008d2:	61da      	str	r2, [r3, #28]
		   SPI2->I2SPR = 1;
 80008d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000994 <TIMER_SET+0xe0>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	621a      	str	r2, [r3, #32]
		   __HAL_I2S_ENABLE(&hi2s2);
 80008da:	4b2d      	ldr	r3, [pc, #180]	@ (8000990 <TIMER_SET+0xdc>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	69da      	ldr	r2, [r3, #28]
 80008e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000990 <TIMER_SET+0xdc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80008e8:	61da      	str	r2, [r3, #28]
	else if(sys == 120000000){
		__HAL_I2S_DISABLE(&hi2s2);
		SPI2->I2SPR = (7 << SPI_I2SPR_I2SDIV_Pos) | (1 << SPI_I2SPR_ODD_Pos);
		__HAL_I2S_ENABLE(&hi2s2);
	}
}
 80008ea:	e04a      	b.n	8000982 <TIMER_SET+0xce>
	else if(sys == 48000000){
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a2a      	ldr	r2, [pc, #168]	@ (8000998 <TIMER_SET+0xe4>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d113      	bne.n	800091c <TIMER_SET+0x68>
		  __HAL_I2S_DISABLE(&hi2s2);
 80008f4:	4b26      	ldr	r3, [pc, #152]	@ (8000990 <TIMER_SET+0xdc>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	69da      	ldr	r2, [r3, #28]
 80008fa:	4b25      	ldr	r3, [pc, #148]	@ (8000990 <TIMER_SET+0xdc>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000902:	61da      	str	r2, [r3, #28]
		  SPI2->I2SPR = (3 << SPI_I2SPR_I2SDIV_Pos)
 8000904:	4b23      	ldr	r3, [pc, #140]	@ (8000994 <TIMER_SET+0xe0>)
 8000906:	2203      	movs	r2, #3
 8000908:	621a      	str	r2, [r3, #32]
		   __HAL_I2S_ENABLE(&hi2s2);
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <TIMER_SET+0xdc>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	69da      	ldr	r2, [r3, #28]
 8000910:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <TIMER_SET+0xdc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000918:	61da      	str	r2, [r3, #28]
}
 800091a:	e032      	b.n	8000982 <TIMER_SET+0xce>
	else if (sys == 96000000){
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a1f      	ldr	r2, [pc, #124]	@ (800099c <TIMER_SET+0xe8>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d116      	bne.n	8000952 <TIMER_SET+0x9e>
		  __HAL_I2S_DISABLE(&hi2s2);
 8000924:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <TIMER_SET+0xdc>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	69da      	ldr	r2, [r3, #28]
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <TIMER_SET+0xdc>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000932:	61da      	str	r2, [r3, #28]
		  SPI2->I2SPR = (6 << SPI_I2SPR_I2SDIV_Pos)
 8000934:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <TIMER_SET+0xe0>)
 8000936:	2206      	movs	r2, #6
 8000938:	621a      	str	r2, [r3, #32]
		   __HAL_I2S_ENABLE(&hi2s2);
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <TIMER_SET+0xdc>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	69da      	ldr	r2, [r3, #28]
 8000940:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <TIMER_SET+0xdc>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000948:	61da      	str	r2, [r3, #28]
		   HAL_Delay(1);
 800094a:	2001      	movs	r0, #1
 800094c:	f000 feb0 	bl	80016b0 <HAL_Delay>
}
 8000950:	e017      	b.n	8000982 <TIMER_SET+0xce>
	else if(sys == 120000000){
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a12      	ldr	r2, [pc, #72]	@ (80009a0 <TIMER_SET+0xec>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d113      	bne.n	8000982 <TIMER_SET+0xce>
		__HAL_I2S_DISABLE(&hi2s2);
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <TIMER_SET+0xdc>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	69da      	ldr	r2, [r3, #28]
 8000960:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <TIMER_SET+0xdc>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000968:	61da      	str	r2, [r3, #28]
		SPI2->I2SPR = (7 << SPI_I2SPR_I2SDIV_Pos) | (1 << SPI_I2SPR_ODD_Pos);
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <TIMER_SET+0xe0>)
 800096c:	f240 1207 	movw	r2, #263	@ 0x107
 8000970:	621a      	str	r2, [r3, #32]
		__HAL_I2S_ENABLE(&hi2s2);
 8000972:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <TIMER_SET+0xdc>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	69da      	ldr	r2, [r3, #28]
 8000978:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <TIMER_SET+0xdc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000980:	61da      	str	r2, [r3, #28]
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	00f42400 	.word	0x00f42400
 8000990:	20003c9c 	.word	0x20003c9c
 8000994:	40003800 	.word	0x40003800
 8000998:	02dc6c00 	.word	0x02dc6c00
 800099c:	05b8d800 	.word	0x05b8d800
 80009a0:	07270e00 	.word	0x07270e00

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_I2S_DeInit(&hi2s2);
 80009aa:	4868      	ldr	r0, [pc, #416]	@ (8000b4c <main+0x1a8>)
 80009ac:	f001 fe42 	bl	8002634 <HAL_I2S_DeInit>
	HAL_TIM_OC_DeInit(&htim2);
 80009b0:	4867      	ldr	r0, [pc, #412]	@ (8000b50 <main+0x1ac>)
 80009b2:	f003 fe0c 	bl	80045ce <HAL_TIM_OC_DeInit>
	HAL_TIM_OC_DeInit(&htim3);
 80009b6:	4867      	ldr	r0, [pc, #412]	@ (8000b54 <main+0x1b0>)
 80009b8:	f003 fe09 	bl	80045ce <HAL_TIM_OC_DeInit>
	Gpio_deinit(GPIOA);
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c0:	f7ff ff60 	bl	8000884 <Gpio_deinit>
	Gpio_deinit(GPIOB);
 80009c4:	4864      	ldr	r0, [pc, #400]	@ (8000b58 <main+0x1b4>)
 80009c6:	f7ff ff5d 	bl	8000884 <Gpio_deinit>
	Gpio_deinit(GPIOC);
 80009ca:	4864      	ldr	r0, [pc, #400]	@ (8000b5c <main+0x1b8>)
 80009cc:	f7ff ff5a 	bl	8000884 <Gpio_deinit>
	HAL_DMA_DeInit(&hdma_tim3_ch1);
 80009d0:	4863      	ldr	r0, [pc, #396]	@ (8000b60 <main+0x1bc>)
 80009d2:	f001 f847 	bl	8001a64 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_tim3_ch3);
 80009d6:	4863      	ldr	r0, [pc, #396]	@ (8000b64 <main+0x1c0>)
 80009d8:	f001 f844 	bl	8001a64 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_spi2_tx);
 80009dc:	4862      	ldr	r0, [pc, #392]	@ (8000b68 <main+0x1c4>)
 80009de:	f001 f841 	bl	8001a64 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_tim3_ch4);
 80009e2:	4862      	ldr	r0, [pc, #392]	@ (8000b6c <main+0x1c8>)
 80009e4:	f001 f83e 	bl	8001a64 <HAL_DMA_DeInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e8:	f000 fdf1 	bl	80015ce <HAL_Init>

  /* USER CODE BEGIN Init */

  /* --- Enable Flash prefetch and caches before changing SYSCLK --- */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b60      	ldr	r3, [pc, #384]	@ (8000b70 <main+0x1cc>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a5f      	ldr	r2, [pc, #380]	@ (8000b70 <main+0x1cc>)
 80009f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009f6:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f8:	4b5d      	ldr	r3, [pc, #372]	@ (8000b70 <main+0x1cc>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a5c      	ldr	r2, [pc, #368]	@ (8000b70 <main+0x1cc>)
 80009fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a02:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a04:	4b5a      	ldr	r3, [pc, #360]	@ (8000b70 <main+0x1cc>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a59      	ldr	r2, [pc, #356]	@ (8000b70 <main+0x1cc>)
 8000a0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a0e:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a10:	f000 f8c4 	bl	8000b9c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a14:	f000 fae0 	bl	8000fd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a18:	f000 fa9c 	bl	8000f54 <MX_DMA_Init>
  MX_TIM2_Init();
 8000a1c:	f000 f930 	bl	8000c80 <MX_TIM2_Init>
  MX_I2S2_Init();
 8000a20:	f000 f906 	bl	8000c30 <MX_I2S2_Init>
  TIMER_SET(HAL_RCC_GetSysClockFreq());
 8000a24:	f002 fc48 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff ff42 	bl	80008b4 <TIMER_SET>
  MX_TIM3_Init();
 8000a30:	f000 f9ba 	bl	8000da8 <MX_TIM3_Init>
  //Video_SetupTiming();
  // 1) How many timer ticks per half-word at your clock?


  //do know if it is necessary
  HAL_TIM_Base_Start(&htim2); // start the timer for the video sync
 8000a34:	4846      	ldr	r0, [pc, #280]	@ (8000b50 <main+0x1ac>)
 8000a36:	f003 fd03 	bl	8004440 <HAL_TIM_Base_Start>

  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);  // OC4Ref → TRGO
 8000a3a:	210c      	movs	r1, #12
 8000a3c:	4844      	ldr	r0, [pc, #272]	@ (8000b50 <main+0x1ac>)
 8000a3e:	f003 fe37 	bl	80046b0 <HAL_TIM_OC_Start>


  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000a42:	2100      	movs	r1, #0
 8000a44:	4843      	ldr	r0, [pc, #268]	@ (8000b54 <main+0x1b0>)
 8000a46:	f003 fe33 	bl	80046b0 <HAL_TIM_OC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // this the same
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	4841      	ldr	r0, [pc, #260]	@ (8000b54 <main+0x1b0>)
 8000a4e:	f003 ffa3 	bl	8004998 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3);
 8000a52:	2108      	movs	r1, #8
 8000a54:	483f      	ldr	r0, [pc, #252]	@ (8000b54 <main+0x1b0>)
 8000a56:	f003 fe2b 	bl	80046b0 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_4);
 8000a5a:	210c      	movs	r1, #12
 8000a5c:	483d      	ldr	r0, [pc, #244]	@ (8000b54 <main+0x1b0>)
 8000a5e:	f003 fe27 	bl	80046b0 <HAL_TIM_OC_Start>



  HAL_DMA_Start(
 8000a62:	4944      	ldr	r1, [pc, #272]	@ (8000b74 <main+0x1d0>)
 8000a64:	f240 1345 	movw	r3, #325	@ 0x145
 8000a68:	4a43      	ldr	r2, [pc, #268]	@ (8000b78 <main+0x1d4>)
 8000a6a:	483d      	ldr	r0, [pc, #244]	@ (8000b60 <main+0x1bc>)
 8000a6c:	f001 f890 	bl	8001b90 <HAL_DMA_Start>
    &hdma_tim3_ch1,
    (uint32_t)SyncTable,                // memory: array of CCR1 timings
    (uint32_t)&TIM3->CCR1,              // peripheral: CCR1 register
    325                           // one entry per visible line
  );
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);  // also enable CC1DE for VSync
 8000a70:	4b38      	ldr	r3, [pc, #224]	@ (8000b54 <main+0x1b0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	68da      	ldr	r2, [r3, #12]
 8000a76:	4b37      	ldr	r3, [pc, #220]	@ (8000b54 <main+0x1b0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a7e:	60da      	str	r2, [r3, #12]

  // 2) LINE BUFFERS → I2S DMA CMAR at back porch (CC3)
  HAL_DMA_Start(
 8000a80:	493e      	ldr	r1, [pc, #248]	@ (8000b7c <main+0x1d8>)
    &hdma_tim3_ch3,
    (uint32_t)lineptrs,                 // memory: array of line-buffer addresses
    (uint32_t)&hdma_spi2_tx.Instance->CMAR,
 8000a82:	4b39      	ldr	r3, [pc, #228]	@ (8000b68 <main+0x1c4>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	330c      	adds	r3, #12
  HAL_DMA_Start(
 8000a88:	461a      	mov	r2, r3
 8000a8a:	f240 1339 	movw	r3, #313	@ 0x139
 8000a8e:	4835      	ldr	r0, [pc, #212]	@ (8000b64 <main+0x1c0>)
 8000a90:	f001 f87e 	bl	8001b90 <HAL_DMA_Start>
	313//VID_VSIZE
  );

  // 3) BLACK-PORCH → I2S DMA CMAR at front porch (CC4)
  HAL_DMA_Start(
 8000a94:	493a      	ldr	r1, [pc, #232]	@ (8000b80 <main+0x1dc>)
    &hdma_tim3_ch4,
    (uint32_t)borders,                  // memory: single-entry blank-line buffer
    (uint32_t)&hdma_spi2_tx.Instance->CMAR,
 8000a96:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <main+0x1c4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	330c      	adds	r3, #12
  HAL_DMA_Start(
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	f240 1339 	movw	r3, #313	@ 0x139
 8000aa2:	4832      	ldr	r0, [pc, #200]	@ (8000b6c <main+0x1c8>)
 8000aa4:	f001 f874 	bl	8001b90 <HAL_DMA_Start>
    313// one entry per line
  );

  // 4) Kick off the I2S DMA stream once
  HAL_I2S_Transmit_DMA(
 8000aa8:	2220      	movs	r2, #32
 8000aaa:	4936      	ldr	r1, [pc, #216]	@ (8000b84 <main+0x1e0>)
 8000aac:	4827      	ldr	r0, [pc, #156]	@ (8000b4c <main+0x1a8>)
 8000aae:	f001 fde9 	bl	8002684 <HAL_I2S_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vidClearScreen();
 8000ab2:	f000 fd57 	bl	8001564 <vidClearScreen>
  //gdiDrawTextEx(140, 90, "IDAN");
//  gdiDrawTextEx(150, 80, "RUBEN");
//  gdiDrawTextEx(160, 100, "a");
  while (1)
  {
		for (int i=80, j=50; j < 150 && j < 200; i++ && j++) {
 8000ab6:	2350      	movs	r3, #80	@ 0x50
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	2332      	movs	r3, #50	@ 0x32
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	e012      	b.n	8000ae6 <main+0x142>
            gdiDrawTextEx(i, j, "IDAN");
 8000ac0:	4a31      	ldr	r2, [pc, #196]	@ (8000b88 <main+0x1e4>)
 8000ac2:	68b9      	ldr	r1, [r7, #8]
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f7ff fea9 	bl	800081c <gdiDrawTextEx>
//			if (i == 160 && j == 150) {
//				i = 50;
//				j = 50;
//			}
        	HAL_Delay(50);
 8000aca:	2032      	movs	r0, #50	@ 0x32
 8000acc:	f000 fdf0 	bl	80016b0 <HAL_Delay>
        	vidClearScreen();
 8000ad0:	f000 fd48 	bl	8001564 <vidClearScreen>
		for (int i=80, j=50; j < 150 && j < 200; i++ && j++) {
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	60fa      	str	r2, [r7, #12]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <main+0x142>
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	60ba      	str	r2, [r7, #8]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	2b95      	cmp	r3, #149	@ 0x95
 8000aea:	dc02      	bgt.n	8000af2 <main+0x14e>
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	2bc7      	cmp	r3, #199	@ 0xc7
 8000af0:	dde6      	ble.n	8000ac0 <main+0x11c>
		}
		vidClearScreen();
 8000af2:	f000 fd37 	bl	8001564 <vidClearScreen>

		for (int k=0; k < 100; k++) {
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	e021      	b.n	8000b40 <main+0x19c>
			gdiDrawTextEx((100+k), 50, "I");
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3364      	adds	r3, #100	@ 0x64
 8000b00:	4a22      	ldr	r2, [pc, #136]	@ (8000b8c <main+0x1e8>)
 8000b02:	2132      	movs	r1, #50	@ 0x32
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fe89 	bl	800081c <gdiDrawTextEx>
			gdiDrawTextEx((105+k), 50, "D");
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3369      	adds	r3, #105	@ 0x69
 8000b0e:	4a20      	ldr	r2, [pc, #128]	@ (8000b90 <main+0x1ec>)
 8000b10:	2132      	movs	r1, #50	@ 0x32
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fe82 	bl	800081c <gdiDrawTextEx>
			gdiDrawTextEx((110+k), 50, "A");
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	336e      	adds	r3, #110	@ 0x6e
 8000b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b94 <main+0x1f0>)
 8000b1e:	2132      	movs	r1, #50	@ 0x32
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fe7b 	bl	800081c <gdiDrawTextEx>
			gdiDrawTextEx((115+k), 50, "N");
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3373      	adds	r3, #115	@ 0x73
 8000b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8000b98 <main+0x1f4>)
 8000b2c:	2132      	movs	r1, #50	@ 0x32
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fe74 	bl	800081c <gdiDrawTextEx>
			HAL_Delay(50);
 8000b34:	2032      	movs	r0, #50	@ 0x32
 8000b36:	f000 fdbb 	bl	80016b0 <HAL_Delay>
		for (int k=0; k < 100; k++) {
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b63      	cmp	r3, #99	@ 0x63
 8000b44:	ddda      	ble.n	8000afc <main+0x158>
		}
		vidClearScreen();
 8000b46:	f000 fd0d 	bl	8001564 <vidClearScreen>
		for (int i=80, j=50; j < 150 && j < 200; i++ && j++) {
 8000b4a:	e7b4      	b.n	8000ab6 <main+0x112>
 8000b4c:	20003c9c 	.word	0x20003c9c
 8000b50:	20003d38 	.word	0x20003d38
 8000b54:	20003d84 	.word	0x20003d84
 8000b58:	48000400 	.word	0x48000400
 8000b5c:	48000800 	.word	0x48000800
 8000b60:	20003dd0 	.word	0x20003dd0
 8000b64:	20003e30 	.word	0x20003e30
 8000b68:	20003cd8 	.word	0x20003cd8
 8000b6c:	20003e90 	.word	0x20003e90
 8000b70:	40022000 	.word	0x40022000
 8000b74:	08006234 	.word	0x08006234
 8000b78:	40000434 	.word	0x40000434
 8000b7c:	200028e8 	.word	0x200028e8
 8000b80:	200032ac 	.word	0x200032ac
 8000b84:	20003ef4 	.word	0x20003ef4
 8000b88:	08005e24 	.word	0x08005e24
 8000b8c:	08005e2c 	.word	0x08005e2c
 8000b90:	08005e30 	.word	0x08005e30
 8000b94:	08005e34 	.word	0x08005e34
 8000b98:	08005e38 	.word	0x08005e38

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b094      	sub	sp, #80	@ 0x50
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0318 	add.w	r3, r7, #24
 8000ba6:	2238      	movs	r2, #56	@ 0x38
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f005 f902 	bl	8005db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bbe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bc2:	f001 fe77 	bl	80028b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bca:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000bce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000bdc:	231e      	movs	r3, #30
 8000bde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV10;
 8000be0:	230a      	movs	r3, #10
 8000be2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000be4:	2308      	movs	r3, #8
 8000be6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bec:	f107 0318 	add.w	r3, r7, #24
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 ff13 	bl	8002a1c <HAL_RCC_OscConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000bfc:	f000 fa1c 	bl	8001038 <Error_Handler>

  // 8mhz *12 / 2

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c00:	230f      	movs	r3, #15
 8000c02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c04:	2303      	movs	r3, #3
 8000c06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]



  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2105      	movs	r1, #5
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 fa11 	bl	8003040 <HAL_RCC_ClockConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c24:	f000 fa08 	bl	8001038 <Error_Handler>
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3750      	adds	r7, #80	@ 0x50
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2S2_Init 1 */
	//hi2s2.Init.CPOL = I2S_CPOL_HIGH;

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000c34:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <MX_I2S2_Init+0x48>)
 8000c36:	4a11      	ldr	r2, [pc, #68]	@ (8000c7c <MX_I2S2_Init+0x4c>)
 8000c38:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <MX_I2S2_Init+0x48>)
 8000c3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c40:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c42:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <MX_I2S2_Init+0x48>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c48:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <MX_I2S2_Init+0x48>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <MX_I2S2_Init+0x48>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <MX_I2S2_Init+0x48>)
 8000c56:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000c5a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_I2S2_Init+0x48>)
 8000c5e:	2208      	movs	r2, #8
 8000c60:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_I2S2_Init+0x48>)
 8000c64:	f001 fc06 	bl	8002474 <HAL_I2S_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8000c6e:	f000 f9e3 	bl	8001038 <Error_Handler>
//   SPI2->I2SPR = 1;   // I2SDIV = 1, ODD = 0
//   __HAL_I2S_ENABLE(&hi2s2);

  /* USER CODE END I2S2_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20003c9c 	.word	0x20003c9c
 8000c7c:	40003800 	.word	0x40003800

08000c80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b094      	sub	sp, #80	@ 0x50
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c86:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	619a      	str	r2, [r3, #24]
  //htim2.Init.Prescaler         = VID_HSIZE/4 - 1; // 32/4 -1 = 7
  //htim2.Init.Period            = 2*VID_VSIZE - 1; // 2*625-1 = 1249
  //sConfigOC.Pulse      = VID_VSIZE - 1;

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc2:	4b38      	ldr	r3, [pc, #224]	@ (8000da4 <MX_TIM2_Init+0x124>)
 8000cc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VID_HSIZE/4 - 1; // 32/4 -1 = 7
 8000cca:	4b36      	ldr	r3, [pc, #216]	@ (8000da4 <MX_TIM2_Init+0x124>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	4b34      	ldr	r3, [pc, #208]	@ (8000da4 <MX_TIM2_Init+0x124>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2*VID_VSIZE - 1; // 2*625-1 = 1249
 8000cd6:	4b33      	ldr	r3, [pc, #204]	@ (8000da4 <MX_TIM2_Init+0x124>)
 8000cd8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8000cdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000cde:	4b31      	ldr	r3, [pc, #196]	@ (8000da4 <MX_TIM2_Init+0x124>)
 8000ce0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ce4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8000da4 <MX_TIM2_Init+0x124>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cec:	482d      	ldr	r0, [pc, #180]	@ (8000da4 <MX_TIM2_Init+0x124>)
 8000cee:	f003 fb4f 	bl	8004390 <HAL_TIM_Base_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000cf8:	f000 f99e 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE1;
 8000cfc:	2370      	movs	r3, #112	@ 0x70
 8000cfe:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d00:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d04:	4619      	mov	r1, r3
 8000d06:	4827      	ldr	r0, [pc, #156]	@ (8000da4 <MX_TIM2_Init+0x124>)
 8000d08:	f004 f8e6 	bl	8004ed8 <HAL_TIM_ConfigClockSource>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d12:	f000 f991 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d16:	4823      	ldr	r0, [pc, #140]	@ (8000da4 <MX_TIM2_Init+0x124>)
 8000d18:	f003 fddc 	bl	80048d4 <HAL_TIM_PWM_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 8000d22:	f000 f989 	bl	8001038 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;//NEEDS TO BE CHECK WITH EXTERNAL1
 8000d26:	2306      	movs	r3, #6
 8000d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000d2a:	2370      	movs	r3, #112	@ 0x70
 8000d2c:	633b      	str	r3, [r7, #48]	@ 0x30
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	637b      	str	r3, [r7, #52]	@ 0x34
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	63bb      	str	r3, [r7, #56]	@ 0x38
  sSlaveConfig.TriggerFilter = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000d3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4818      	ldr	r0, [pc, #96]	@ (8000da4 <MX_TIM2_Init+0x124>)
 8000d42:	f004 f9df 	bl	8005104 <HAL_TIM_SlaveConfigSynchro>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8000d4c:	f000 f974 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF; // OC4Ref → TRGO;
 8000d50:	2370      	movs	r3, #112	@ 0x70
 8000d52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000d54:	2380      	movs	r3, #128	@ 0x80
 8000d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d58:	f107 0320 	add.w	r3, r7, #32
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4811      	ldr	r0, [pc, #68]	@ (8000da4 <MX_TIM2_Init+0x124>)
 8000d60:	f004 ff92 	bl	8005c88 <HAL_TIMEx_MasterConfigSynchronization>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000d6a:	f000 f965 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6e:	2360      	movs	r3, #96	@ 0x60
 8000d70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse =  VID_VSIZE - 1;
 8000d72:	f44f 731c 	mov.w	r3, #624	@ 0x270
 8000d76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	220c      	movs	r2, #12
 8000d84:	4619      	mov	r1, r3
 8000d86:	4807      	ldr	r0, [pc, #28]	@ (8000da4 <MX_TIM2_Init+0x124>)
 8000d88:	f003 ff92 	bl	8004cb0 <HAL_TIM_PWM_ConfigChannel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM2_Init+0x116>
  {
    Error_Handler();
 8000d92:	f000 f951 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d96:	4803      	ldr	r0, [pc, #12]	@ (8000da4 <MX_TIM2_Init+0x124>)
 8000d98:	f000 fb0c 	bl	80013b4 <HAL_TIM_MspPostInit>

}
 8000d9c:	bf00      	nop
 8000d9e:	3750      	adds	r7, #80	@ 0x50
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20003d38 	.word	0x20003d38

08000da8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b094      	sub	sp, #80	@ 0x50
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000dbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dcc:	f107 0320 	add.w	r3, r7, #32
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]
 8000de6:	615a      	str	r2, [r3, #20]
 8000de8:	619a      	str	r2, [r3, #24]

  //FOR CHANNEL 2:
  //sConfigOC.Pulse = HSYNCCOUNTS;

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dea:	4b58      	ldr	r3, [pc, #352]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000dec:	4a58      	ldr	r2, [pc, #352]	@ (8000f50 <MX_TIM3_Init+0x1a8>)
 8000dee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000df0:	4b56      	ldr	r3, [pc, #344]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df6:	4b55      	ldr	r3, [pc, #340]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIMERCOUNTS - 1;
 8000dfc:	4b53      	ldr	r3, [pc, #332]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000dfe:	f641 52ff 	movw	r2, #7679	@ 0x1dff
 8000e02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e04:	4b51      	ldr	r3, [pc, #324]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0a:	4b50      	ldr	r3, [pc, #320]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e10:	484e      	ldr	r0, [pc, #312]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000e12:	f003 fabd 	bl	8004390 <HAL_TIM_Base_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000e1c:	f000 f90c 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e24:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e26:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4847      	ldr	r0, [pc, #284]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000e2e:	f004 f853 	bl	8004ed8 <HAL_TIM_ConfigClockSource>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e38:	f000 f8fe 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000e3c:	4843      	ldr	r0, [pc, #268]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000e3e:	f003 fb6f 	bl	8004520 <HAL_TIM_OC_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8000e48:	f000 f8f6 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e4c:	483f      	ldr	r0, [pc, #252]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000e4e:	f003 fd41 	bl	80048d4 <HAL_TIM_PWM_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000e58:	f000 f8ee 	bl	8001038 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000e5c:	2306      	movs	r3, #6
 8000e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000e60:	2310      	movs	r3, #16
 8000e62:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000e64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4838      	ldr	r0, [pc, #224]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000e6c:	f004 f94a 	bl	8005104 <HAL_TIM_SlaveConfigSynchro>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000e76:	f000 f8df 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000e7e:	2380      	movs	r3, #128	@ 0x80
 8000e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e82:	f107 0320 	add.w	r3, r7, #32
 8000e86:	4619      	mov	r1, r3
 8000e88:	4830      	ldr	r0, [pc, #192]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000e8a:	f004 fefd 	bl	8005c88 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000e94:	f000 f8d0 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000e98:	2330      	movs	r3, #48	@ 0x30
 8000e9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = NO_TOG;
 8000e9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ea0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2200      	movs	r2, #0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4826      	ldr	r0, [pc, #152]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000eb2:	f003 fe83 	bl	8004bbc <HAL_TIM_OC_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000ebc:	f000 f8bc 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec0:	2360      	movs	r3, #96	@ 0x60
 8000ec2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = HSYNCCOUNTS;//HSYNCCOUNTS;
 8000ec4:	f44f 730d 	mov.w	r3, #564	@ 0x234
 8000ec8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2204      	movs	r2, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	481e      	ldr	r0, [pc, #120]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000ed2:	f003 feed 	bl	8004cb0 <HAL_TIM_PWM_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM3_Init+0x138>
  {
    Error_Handler();
 8000edc:	f000 f8ac 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;//208;
 8000ee4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ee8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2208      	movs	r2, #8
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4816      	ldr	r0, [pc, #88]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000ef2:	f003 fe63 	bl	8004bbc <HAL_TIM_OC_ConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM3_Init+0x158>
  {
    Error_Handler();
 8000efc:	f000 f89c 	bl	8001038 <Error_Handler>
  }
  sConfigOC.Pulse = 8000;//(672+208);//(672+208);
 8000f00:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000f04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	220c      	movs	r2, #12
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480f      	ldr	r0, [pc, #60]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000f0e:	f003 fe55 	bl	8004bbc <HAL_TIM_OC_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM3_Init+0x174>
  {
    Error_Handler();
 8000f18:	f000 f88e 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  //TIM_DMACmd(TIM3, TIM_DMA_CC1|TIM_DMA_CC3, ENABLE);
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f1c:	480b      	ldr	r0, [pc, #44]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000f1e:	f000 fa49 	bl	80013b4 <HAL_TIM_MspPostInit>
  /* Allow TIM3 Compare-3 (CC3) and Compare-4 (CC4) events to generate DMA requests */
  //__HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC2);
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC3);   // CC3DE bit → DMA request on CC3
 8000f22:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000f30:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC4);   // CC4DE bit → DMA request on CC4
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <MX_TIM3_Init+0x1a4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000f40:	60da      	str	r2, [r3, #12]
  //__HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
  //__HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);


}
 8000f42:	bf00      	nop
 8000f44:	3750      	adds	r7, #80	@ 0x50
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20003d84 	.word	0x20003d84
 8000f50:	40000400 	.word	0x40000400

08000f54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <MX_DMA_Init+0x80>)
 8000f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f5e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd4 <MX_DMA_Init+0x80>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f66:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <MX_DMA_Init+0x80>)
 8000f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f72:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <MX_DMA_Init+0x80>)
 8000f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f76:	4a17      	ldr	r2, [pc, #92]	@ (8000fd4 <MX_DMA_Init+0x80>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f7e:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <MX_DMA_Init+0x80>)
 8000f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	200c      	movs	r0, #12
 8000f90:	f000 fc8b 	bl	80018aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f94:	200c      	movs	r0, #12
 8000f96:	f000 fca2 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	200d      	movs	r0, #13
 8000fa0:	f000 fc83 	bl	80018aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000fa4:	200d      	movs	r0, #13
 8000fa6:	f000 fc9a 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	200f      	movs	r0, #15
 8000fb0:	f000 fc7b 	bl	80018aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000fb4:	200f      	movs	r0, #15
 8000fb6:	f000 fc92 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2010      	movs	r0, #16
 8000fc0:	f000 fc73 	bl	80018aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000fc4:	2010      	movs	r0, #16
 8000fc6:	f000 fc8a 	bl	80018de <HAL_NVIC_EnableIRQ>

}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <MX_GPIO_Init+0x5c>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	4a14      	ldr	r2, [pc, #80]	@ (8001034 <MX_GPIO_Init+0x5c>)
 8000fe4:	f043 0320 	orr.w	r3, r3, #32
 8000fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fea:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <MX_GPIO_Init+0x5c>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	f003 0320 	and.w	r3, r3, #32
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_GPIO_Init+0x5c>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8001034 <MX_GPIO_Init+0x5c>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_GPIO_Init+0x5c>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_GPIO_Init+0x5c>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001012:	4a08      	ldr	r2, [pc, #32]	@ (8001034 <MX_GPIO_Init+0x5c>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_GPIO_Init+0x5c>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */


  /* USER CODE END MX_GPIO_Init_2 */
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <Error_Handler+0x8>

08001044 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <HAL_MspInit+0x44>)
 800104c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800104e:	4a0e      	ldr	r2, [pc, #56]	@ (8001088 <HAL_MspInit+0x44>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6613      	str	r3, [r2, #96]	@ 0x60
 8001056:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <HAL_MspInit+0x44>)
 8001058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <HAL_MspInit+0x44>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001066:	4a08      	ldr	r2, [pc, #32]	@ (8001088 <HAL_MspInit+0x44>)
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800106c:	6593      	str	r3, [r2, #88]	@ 0x58
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_MspInit+0x44>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800107a:	f001 fcbf 	bl	80029fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000

0800108c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b09e      	sub	sp, #120	@ 0x78
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	2254      	movs	r2, #84	@ 0x54
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f004 fe81 	bl	8005db4 <memset>
  if(hi2s->Instance==SPI2)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a35      	ldr	r2, [pc, #212]	@ (800118c <HAL_I2S_MspInit+0x100>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d163      	bne.n	8001184 <HAL_I2S_MspInit+0xf8>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80010bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010c0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 f9d4 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 80010d6:	f7ff ffaf 	bl	8001038 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010da:	4b2d      	ldr	r3, [pc, #180]	@ (8001190 <HAL_I2S_MspInit+0x104>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010de:	4a2c      	ldr	r2, [pc, #176]	@ (8001190 <HAL_I2S_MspInit+0x104>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <HAL_I2S_MspInit+0x104>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <HAL_I2S_MspInit+0x104>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	4a26      	ldr	r2, [pc, #152]	@ (8001190 <HAL_I2S_MspInit+0x104>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fe:	4b24      	ldr	r3, [pc, #144]	@ (8001190 <HAL_I2S_MspInit+0x104>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800110a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800110e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800111c:	2305      	movs	r3, #5
 800111e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001120:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001124:	4619      	mov	r1, r3
 8001126:	481b      	ldr	r0, [pc, #108]	@ (8001194 <HAL_I2S_MspInit+0x108>)
 8001128:	f000 ff40 	bl	8001fac <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800112c:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <HAL_I2S_MspInit+0x10c>)
 800112e:	4a1b      	ldr	r2, [pc, #108]	@ (800119c <HAL_I2S_MspInit+0x110>)
 8001130:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001132:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <HAL_I2S_MspInit+0x10c>)
 8001134:	220d      	movs	r2, #13
 8001136:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001138:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <HAL_I2S_MspInit+0x10c>)
 800113a:	2210      	movs	r2, #16
 800113c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800113e:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <HAL_I2S_MspInit+0x10c>)
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <HAL_I2S_MspInit+0x10c>)
 8001146:	2280      	movs	r2, #128	@ 0x80
 8001148:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800114a:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <HAL_I2S_MspInit+0x10c>)
 800114c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001150:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001152:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <HAL_I2S_MspInit+0x10c>)
 8001154:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001158:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800115a:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <HAL_I2S_MspInit+0x10c>)
 800115c:	2220      	movs	r2, #32
 800115e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001160:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <HAL_I2S_MspInit+0x10c>)
 8001162:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001166:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001168:	480b      	ldr	r0, [pc, #44]	@ (8001198 <HAL_I2S_MspInit+0x10c>)
 800116a:	f000 fbd3 	bl	8001914 <HAL_DMA_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_I2S_MspInit+0xec>
    {
      Error_Handler();
 8001174:	f7ff ff60 	bl	8001038 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <HAL_I2S_MspInit+0x10c>)
 800117c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800117e:	4a06      	ldr	r2, [pc, #24]	@ (8001198 <HAL_I2S_MspInit+0x10c>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001184:	bf00      	nop
 8001186:	3778      	adds	r7, #120	@ 0x78
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40003800 	.word	0x40003800
 8001190:	40021000 	.word	0x40021000
 8001194:	48000400 	.word	0x48000400
 8001198:	20003cd8 	.word	0x20003cd8
 800119c:	40020058 	.word	0x40020058

080011a0 <HAL_I2S_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspDeInit(I2S_HandleTypeDef* hi2s)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance==SPI2)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0b      	ldr	r2, [pc, #44]	@ (80011dc <HAL_I2S_MspDeInit+0x3c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d10f      	bne.n	80011d2 <HAL_I2S_MspDeInit+0x32>
  {
    /* USER CODE BEGIN SPI2_MspDeInit 0 */

    /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 80011b2:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <HAL_I2S_MspDeInit+0x40>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b6:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <HAL_I2S_MspDeInit+0x40>)
 80011b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80011bc:	6593      	str	r3, [r2, #88]	@ 0x58
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 80011be:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 80011c2:	4808      	ldr	r0, [pc, #32]	@ (80011e4 <HAL_I2S_MspDeInit+0x44>)
 80011c4:	f001 f874 	bl	80022b0 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(hi2s->hdmatx);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fc49 	bl	8001a64 <HAL_DMA_DeInit>
    /* USER CODE BEGIN SPI2_MspDeInit 1 */

    /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40003800 	.word	0x40003800
 80011e0:	40021000 	.word	0x40021000
 80011e4:	48000400 	.word	0x48000400

080011e8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001208:	d129      	bne.n	800125e <HAL_TIM_Base_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800120a:	4b62      	ldr	r3, [pc, #392]	@ (8001394 <HAL_TIM_Base_MspInit+0x1ac>)
 800120c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800120e:	4a61      	ldr	r2, [pc, #388]	@ (8001394 <HAL_TIM_Base_MspInit+0x1ac>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6593      	str	r3, [r2, #88]	@ 0x58
 8001216:	4b5f      	ldr	r3, [pc, #380]	@ (8001394 <HAL_TIM_Base_MspInit+0x1ac>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b5c      	ldr	r3, [pc, #368]	@ (8001394 <HAL_TIM_Base_MspInit+0x1ac>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	4a5b      	ldr	r2, [pc, #364]	@ (8001394 <HAL_TIM_Base_MspInit+0x1ac>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122e:	4b59      	ldr	r3, [pc, #356]	@ (8001394 <HAL_TIM_Base_MspInit+0x1ac>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800123a:	2301      	movs	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 800124a:	230e      	movs	r3, #14
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001258:	f000 fea8 	bl	8001fac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800125c:	e095      	b.n	800138a <HAL_TIM_Base_MspInit+0x1a2>
  else if(htim_base->Instance==TIM3)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a4d      	ldr	r2, [pc, #308]	@ (8001398 <HAL_TIM_Base_MspInit+0x1b0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	f040 8090 	bne.w	800138a <HAL_TIM_Base_MspInit+0x1a2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800126a:	4b4a      	ldr	r3, [pc, #296]	@ (8001394 <HAL_TIM_Base_MspInit+0x1ac>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126e:	4a49      	ldr	r2, [pc, #292]	@ (8001394 <HAL_TIM_Base_MspInit+0x1ac>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6593      	str	r3, [r2, #88]	@ 0x58
 8001276:	4b47      	ldr	r3, [pc, #284]	@ (8001394 <HAL_TIM_Base_MspInit+0x1ac>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Channel6;
 8001282:	4b46      	ldr	r3, [pc, #280]	@ (800139c <HAL_TIM_Base_MspInit+0x1b4>)
 8001284:	4a46      	ldr	r2, [pc, #280]	@ (80013a0 <HAL_TIM_Base_MspInit+0x1b8>)
 8001286:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001288:	4b44      	ldr	r3, [pc, #272]	@ (800139c <HAL_TIM_Base_MspInit+0x1b4>)
 800128a:	223d      	movs	r2, #61	@ 0x3d
 800128c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800128e:	4b43      	ldr	r3, [pc, #268]	@ (800139c <HAL_TIM_Base_MspInit+0x1b4>)
 8001290:	2210      	movs	r2, #16
 8001292:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001294:	4b41      	ldr	r3, [pc, #260]	@ (800139c <HAL_TIM_Base_MspInit+0x1b4>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800129a:	4b40      	ldr	r3, [pc, #256]	@ (800139c <HAL_TIM_Base_MspInit+0x1b4>)
 800129c:	2280      	movs	r2, #128	@ 0x80
 800129e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012a0:	4b3e      	ldr	r3, [pc, #248]	@ (800139c <HAL_TIM_Base_MspInit+0x1b4>)
 80012a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012a6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012a8:	4b3c      	ldr	r3, [pc, #240]	@ (800139c <HAL_TIM_Base_MspInit+0x1b4>)
 80012aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012ae:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_CIRCULAR;
 80012b0:	4b3a      	ldr	r3, [pc, #232]	@ (800139c <HAL_TIM_Base_MspInit+0x1b4>)
 80012b2:	2220      	movs	r2, #32
 80012b4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80012b6:	4b39      	ldr	r3, [pc, #228]	@ (800139c <HAL_TIM_Base_MspInit+0x1b4>)
 80012b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80012be:	4837      	ldr	r0, [pc, #220]	@ (800139c <HAL_TIM_Base_MspInit+0x1b4>)
 80012c0:	f000 fb28 	bl	8001914 <HAL_DMA_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_TIM_Base_MspInit+0xe6>
      Error_Handler();
 80012ca:	f7ff feb5 	bl	8001038 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a32      	ldr	r2, [pc, #200]	@ (800139c <HAL_TIM_Base_MspInit+0x1b4>)
 80012d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80012d4:	4a31      	ldr	r2, [pc, #196]	@ (800139c <HAL_TIM_Base_MspInit+0x1b4>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 80012da:	4b32      	ldr	r3, [pc, #200]	@ (80013a4 <HAL_TIM_Base_MspInit+0x1bc>)
 80012dc:	4a32      	ldr	r2, [pc, #200]	@ (80013a8 <HAL_TIM_Base_MspInit+0x1c0>)
 80012de:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 80012e0:	4b30      	ldr	r3, [pc, #192]	@ (80013a4 <HAL_TIM_Base_MspInit+0x1bc>)
 80012e2:	223f      	movs	r2, #63	@ 0x3f
 80012e4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012e6:	4b2f      	ldr	r3, [pc, #188]	@ (80013a4 <HAL_TIM_Base_MspInit+0x1bc>)
 80012e8:	2210      	movs	r2, #16
 80012ea:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ec:	4b2d      	ldr	r3, [pc, #180]	@ (80013a4 <HAL_TIM_Base_MspInit+0x1bc>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80012f2:	4b2c      	ldr	r3, [pc, #176]	@ (80013a4 <HAL_TIM_Base_MspInit+0x1bc>)
 80012f4:	2280      	movs	r2, #128	@ 0x80
 80012f6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012f8:	4b2a      	ldr	r3, [pc, #168]	@ (80013a4 <HAL_TIM_Base_MspInit+0x1bc>)
 80012fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012fe:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001300:	4b28      	ldr	r3, [pc, #160]	@ (80013a4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001302:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001306:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8001308:	4b26      	ldr	r3, [pc, #152]	@ (80013a4 <HAL_TIM_Base_MspInit+0x1bc>)
 800130a:	2220      	movs	r2, #32
 800130c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 800130e:	4b25      	ldr	r3, [pc, #148]	@ (80013a4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001310:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001314:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8001316:	4823      	ldr	r0, [pc, #140]	@ (80013a4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001318:	f000 fafc 	bl	8001914 <HAL_DMA_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_TIM_Base_MspInit+0x13e>
      Error_Handler();
 8001322:	f7ff fe89 	bl	8001038 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a1e      	ldr	r2, [pc, #120]	@ (80013a4 <HAL_TIM_Base_MspInit+0x1bc>)
 800132a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800132c:	4a1d      	ldr	r2, [pc, #116]	@ (80013a4 <HAL_TIM_Base_MspInit+0x1bc>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim3_ch4.Instance = DMA1_Channel3;
 8001332:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <HAL_TIM_Base_MspInit+0x1c4>)
 8001334:	4a1e      	ldr	r2, [pc, #120]	@ (80013b0 <HAL_TIM_Base_MspInit+0x1c8>)
 8001336:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 8001338:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <HAL_TIM_Base_MspInit+0x1c4>)
 800133a:	2240      	movs	r2, #64	@ 0x40
 800133c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800133e:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <HAL_TIM_Base_MspInit+0x1c4>)
 8001340:	2210      	movs	r2, #16
 8001342:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001344:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <HAL_TIM_Base_MspInit+0x1c4>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800134a:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <HAL_TIM_Base_MspInit+0x1c4>)
 800134c:	2280      	movs	r2, #128	@ 0x80
 800134e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001350:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <HAL_TIM_Base_MspInit+0x1c4>)
 8001352:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001356:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <HAL_TIM_Base_MspInit+0x1c4>)
 800135a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800135e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_CIRCULAR;
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HAL_TIM_Base_MspInit+0x1c4>)
 8001362:	2220      	movs	r2, #32
 8001364:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <HAL_TIM_Base_MspInit+0x1c4>)
 8001368:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800136c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 800136e:	480f      	ldr	r0, [pc, #60]	@ (80013ac <HAL_TIM_Base_MspInit+0x1c4>)
 8001370:	f000 fad0 	bl	8001914 <HAL_DMA_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_TIM_Base_MspInit+0x196>
      Error_Handler();
 800137a:	f7ff fe5d 	bl	8001038 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <HAL_TIM_Base_MspInit+0x1c4>)
 8001382:	631a      	str	r2, [r3, #48]	@ 0x30
 8001384:	4a09      	ldr	r2, [pc, #36]	@ (80013ac <HAL_TIM_Base_MspInit+0x1c4>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	@ 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	40000400 	.word	0x40000400
 800139c:	20003dd0 	.word	0x20003dd0
 80013a0:	4002006c 	.word	0x4002006c
 80013a4:	20003e30 	.word	0x20003e30
 80013a8:	4002001c 	.word	0x4002001c
 80013ac:	20003e90 	.word	0x20003e90
 80013b0:	40020030 	.word	0x40020030

080013b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013d4:	d11d      	bne.n	8001412 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b22      	ldr	r3, [pc, #136]	@ (8001460 <HAL_TIM_MspPostInit+0xac>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	4a21      	ldr	r2, [pc, #132]	@ (8001460 <HAL_TIM_MspPostInit+0xac>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <HAL_TIM_MspPostInit+0xac>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013ee:	2308      	movs	r3, #8
 80013f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013fe:	2301      	movs	r3, #1
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800140c:	f000 fdce 	bl	8001fac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001410:	e021      	b.n	8001456 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a13      	ldr	r2, [pc, #76]	@ (8001464 <HAL_TIM_MspPostInit+0xb0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d11c      	bne.n	8001456 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <HAL_TIM_MspPostInit+0xac>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001420:	4a0f      	ldr	r2, [pc, #60]	@ (8001460 <HAL_TIM_MspPostInit+0xac>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001428:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <HAL_TIM_MspPostInit+0xac>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001434:	2350      	movs	r3, #80	@ 0x50
 8001436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001438:	2312      	movs	r3, #18
 800143a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001444:	2302      	movs	r3, #2
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001452:	f000 fdab 	bl	8001fac <HAL_GPIO_Init>
}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	@ 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000
 8001464:	40000400 	.word	0x40000400

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <NMI_Handler+0x4>

08001470 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <MemManage_Handler+0x4>

08001480 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <UsageFault_Handler+0x4>

08001490 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c0:	f000 f8d8 	bl	8001674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (TimingDelay != 0) {
 80014c4:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <SysTick_Handler+0x20>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d004      	beq.n	80014d6 <SysTick_Handler+0x1a>
    --TimingDelay;
 80014cc:	4b03      	ldr	r3, [pc, #12]	@ (80014dc <SysTick_Handler+0x20>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	4a02      	ldr	r2, [pc, #8]	@ (80014dc <SysTick_Handler+0x20>)
 80014d4:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20003ef0 	.word	0x20003ef0

080014e0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <DMA1_Channel2_IRQHandler+0x10>)
 80014e6:	f000 fc11 	bl	8001d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20003e30 	.word	0x20003e30

080014f4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <DMA1_Channel3_IRQHandler+0x10>)
 80014fa:	f000 fc07 	bl	8001d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20003e90 	.word	0x20003e90

08001508 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <DMA1_Channel5_IRQHandler+0x10>)
 800150e:	f000 fbfd 	bl	8001d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20003cd8 	.word	0x20003cd8

0800151c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8001520:	4802      	ldr	r0, [pc, #8]	@ (800152c <DMA1_Channel6_IRQHandler+0x10>)
 8001522:	f000 fbf3 	bl	8001d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20003dd0 	.word	0x20003dd0

08001530 <TIM3_IRQHandler>:
//  }
//}


void TIM3_IRQHandler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
//		TIM3->SR = TIM_IT_CC4;// ~TIM_IT_CC1;		// clear all but Update
//	// scope output on high
//	} else
//		TIM3->SR = 0;					// other interrupts not of interest
	  //HAL_TIM_IRQHandler(&htim3);
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <SystemInit+0x20>)
 8001546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800154a:	4a05      	ldr	r2, [pc, #20]	@ (8001560 <SystemInit+0x20>)
 800154c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001550:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <vidClearScreen>:
/* Private functions ---------------------------------------------------------*/



void vidClearScreen(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	{
		fb[line]				[0] = 0b1111111111111110;
		fb[line]  [XFERS_PERLINE-1] = 0b1111111111111110;
	}
#else
	memset(screen,0xFF,sizeof(screen));
 8001568:	f242 7260 	movw	r2, #10080	@ 0x2760
 800156c:	21ff      	movs	r1, #255	@ 0xff
 800156e:	4802      	ldr	r0, [pc, #8]	@ (8001578 <vidClearScreen+0x14>)
 8001570:	f004 fc20 	bl	8005db4 <memset>
#endif

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000000 	.word	0x20000000

0800157c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800157c:	480d      	ldr	r0, [pc, #52]	@ (80015b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800157e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001580:	f7ff ffde 	bl	8001540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001584:	480c      	ldr	r0, [pc, #48]	@ (80015b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001586:	490d      	ldr	r1, [pc, #52]	@ (80015bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001588:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <LoopForever+0xe>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800159c:	4c0a      	ldr	r4, [pc, #40]	@ (80015c8 <LoopForever+0x16>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015aa:	f004 fc0b 	bl	8005dc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ae:	f7ff f9f9 	bl	80009a4 <main>

080015b2 <LoopForever>:

LoopForever:
    b LoopForever
 80015b2:	e7fe      	b.n	80015b2 <LoopForever>
  ldr   r0, =_estack
 80015b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015b8:	20002760 	.word	0x20002760
  ldr r1, =_edata
 80015bc:	20003c78 	.word	0x20003c78
  ldr r2, =_sidata
 80015c0:	08006754 	.word	0x08006754
  ldr r2, =_sbss
 80015c4:	20003c78 	.word	0x20003c78
  ldr r4, =_ebss
 80015c8:	20003f38 	.word	0x20003f38

080015cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC1_2_IRQHandler>

080015ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f000 f95b 	bl	8001894 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015de:	200f      	movs	r0, #15
 80015e0:	f000 f80e 	bl	8001600 <HAL_InitTick>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d002      	beq.n	80015f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	71fb      	strb	r3, [r7, #7]
 80015ee:	e001      	b.n	80015f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015f0:	f7ff fd28 	bl	8001044 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015f4:	79fb      	ldrb	r3, [r7, #7]

}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800160c:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <HAL_InitTick+0x68>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d022      	beq.n	800165a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001614:	4b15      	ldr	r3, [pc, #84]	@ (800166c <HAL_InitTick+0x6c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <HAL_InitTick+0x68>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001620:	fbb1 f3f3 	udiv	r3, r1, r3
 8001624:	fbb2 f3f3 	udiv	r3, r2, r3
 8001628:	4618      	mov	r0, r3
 800162a:	f000 f966 	bl	80018fa <HAL_SYSTICK_Config>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10f      	bne.n	8001654 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b0f      	cmp	r3, #15
 8001638:	d809      	bhi.n	800164e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163a:	2200      	movs	r2, #0
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001642:	f000 f932 	bl	80018aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001646:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <HAL_InitTick+0x70>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	e007      	b.n	800165e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	e004      	b.n	800165e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e001      	b.n	800165e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20003c74 	.word	0x20003c74
 800166c:	20002764 	.word	0x20002764
 8001670:	20003c70 	.word	0x20003c70

08001674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <HAL_IncTick+0x1c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <HAL_IncTick+0x20>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4413      	add	r3, r2
 8001682:	4a03      	ldr	r2, [pc, #12]	@ (8001690 <HAL_IncTick+0x1c>)
 8001684:	6013      	str	r3, [r2, #0]
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	20003f34 	.word	0x20003f34
 8001694:	20003c74 	.word	0x20003c74

08001698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return uwTick;
 800169c:	4b03      	ldr	r3, [pc, #12]	@ (80016ac <HAL_GetTick+0x14>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20003f34 	.word	0x20003f34

080016b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b8:	f7ff ffee 	bl	8001698 <HAL_GetTick>
 80016bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016c8:	d004      	beq.n	80016d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ca:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <HAL_Delay+0x40>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4413      	add	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016d4:	bf00      	nop
 80016d6:	f7ff ffdf 	bl	8001698 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d8f7      	bhi.n	80016d6 <HAL_Delay+0x26>
  {
  }
}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20003c74 	.word	0x20003c74

080016f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001704:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001710:	4013      	ands	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800171c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001726:	4a04      	ldr	r2, [pc, #16]	@ (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	60d3      	str	r3, [r2, #12]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001740:	4b04      	ldr	r3, [pc, #16]	@ (8001754 <__NVIC_GetPriorityGrouping+0x18>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	f003 0307 	and.w	r3, r3, #7
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	2b00      	cmp	r3, #0
 8001768:	db0b      	blt.n	8001782 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	f003 021f 	and.w	r2, r3, #31
 8001770:	4907      	ldr	r1, [pc, #28]	@ (8001790 <__NVIC_EnableIRQ+0x38>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	2001      	movs	r0, #1
 800177a:	fa00 f202 	lsl.w	r2, r0, r2
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000e100 	.word	0xe000e100

08001794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	6039      	str	r1, [r7, #0]
 800179e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db0a      	blt.n	80017be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	490c      	ldr	r1, [pc, #48]	@ (80017e0 <__NVIC_SetPriority+0x4c>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	0112      	lsls	r2, r2, #4
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	440b      	add	r3, r1
 80017b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017bc:	e00a      	b.n	80017d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4908      	ldr	r1, [pc, #32]	@ (80017e4 <__NVIC_SetPriority+0x50>)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	3b04      	subs	r3, #4
 80017cc:	0112      	lsls	r2, r2, #4
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	440b      	add	r3, r1
 80017d2:	761a      	strb	r2, [r3, #24]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000e100 	.word	0xe000e100
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	@ 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f1c3 0307 	rsb	r3, r3, #7
 8001802:	2b04      	cmp	r3, #4
 8001804:	bf28      	it	cs
 8001806:	2304      	movcs	r3, #4
 8001808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3304      	adds	r3, #4
 800180e:	2b06      	cmp	r3, #6
 8001810:	d902      	bls.n	8001818 <NVIC_EncodePriority+0x30>
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3b03      	subs	r3, #3
 8001816:	e000      	b.n	800181a <NVIC_EncodePriority+0x32>
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	401a      	ands	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001830:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43d9      	mvns	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	4313      	orrs	r3, r2
         );
}
 8001842:	4618      	mov	r0, r3
 8001844:	3724      	adds	r7, #36	@ 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001860:	d301      	bcc.n	8001866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001862:	2301      	movs	r3, #1
 8001864:	e00f      	b.n	8001886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001866:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <SysTick_Config+0x40>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186e:	210f      	movs	r1, #15
 8001870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001874:	f7ff ff8e 	bl	8001794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001878:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <SysTick_Config+0x40>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187e:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <SysTick_Config+0x40>)
 8001880:	2207      	movs	r2, #7
 8001882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	e000e010 	.word	0xe000e010

08001894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ff29 	bl	80016f4 <__NVIC_SetPriorityGrouping>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b8:	f7ff ff40 	bl	800173c <__NVIC_GetPriorityGrouping>
 80018bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f7ff ff90 	bl	80017e8 <NVIC_EncodePriority>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff5f 	bl	8001794 <__NVIC_SetPriority>
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff33 	bl	8001758 <__NVIC_EnableIRQ>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ffa4 	bl	8001850 <SysTick_Config>
 8001908:	4603      	mov	r3, r0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e08d      	b.n	8001a42 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	4b47      	ldr	r3, [pc, #284]	@ (8001a4c <HAL_DMA_Init+0x138>)
 800192e:	429a      	cmp	r2, r3
 8001930:	d80f      	bhi.n	8001952 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	4b45      	ldr	r3, [pc, #276]	@ (8001a50 <HAL_DMA_Init+0x13c>)
 800193a:	4413      	add	r3, r2
 800193c:	4a45      	ldr	r2, [pc, #276]	@ (8001a54 <HAL_DMA_Init+0x140>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	091b      	lsrs	r3, r3, #4
 8001944:	009a      	lsls	r2, r3, #2
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a42      	ldr	r2, [pc, #264]	@ (8001a58 <HAL_DMA_Init+0x144>)
 800194e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001950:	e00e      	b.n	8001970 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	4b40      	ldr	r3, [pc, #256]	@ (8001a5c <HAL_DMA_Init+0x148>)
 800195a:	4413      	add	r3, r2
 800195c:	4a3d      	ldr	r2, [pc, #244]	@ (8001a54 <HAL_DMA_Init+0x140>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	009a      	lsls	r2, r3, #2
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a3c      	ldr	r2, [pc, #240]	@ (8001a60 <HAL_DMA_Init+0x14c>)
 800196e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2202      	movs	r2, #2
 8001974:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800198a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001994:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 fa90 	bl	8001ee8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019d0:	d102      	bne.n	80019d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019ec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d010      	beq.n	8001a18 <HAL_DMA_Init+0x104>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d80c      	bhi.n	8001a18 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fab0 	bl	8001f64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	e008      	b.n	8001a2a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40020407 	.word	0x40020407
 8001a50:	bffdfff8 	.word	0xbffdfff8
 8001a54:	cccccccd 	.word	0xcccccccd
 8001a58:	40020000 	.word	0x40020000
 8001a5c:	bffdfbf8 	.word	0xbffdfbf8
 8001a60:	40020400 	.word	0x40020400

08001a64 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e07b      	b.n	8001b6e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0201 	bic.w	r2, r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b78 <HAL_DMA_DeInit+0x114>)
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d80f      	bhi.n	8001ab2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b38      	ldr	r3, [pc, #224]	@ (8001b7c <HAL_DMA_DeInit+0x118>)
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a38      	ldr	r2, [pc, #224]	@ (8001b80 <HAL_DMA_DeInit+0x11c>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	009a      	lsls	r2, r3, #2
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a35      	ldr	r2, [pc, #212]	@ (8001b84 <HAL_DMA_DeInit+0x120>)
 8001aae:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ab0:	e00e      	b.n	8001ad0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b33      	ldr	r3, [pc, #204]	@ (8001b88 <HAL_DMA_DeInit+0x124>)
 8001aba:	4413      	add	r3, r2
 8001abc:	4a30      	ldr	r2, [pc, #192]	@ (8001b80 <HAL_DMA_DeInit+0x11c>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	009a      	lsls	r2, r3, #2
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a2f      	ldr	r2, [pc, #188]	@ (8001b8c <HAL_DMA_DeInit+0x128>)
 8001ace:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aea:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f9fb 	bl	8001ee8 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b02:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00f      	beq.n	8001b2c <HAL_DMA_DeInit+0xc8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d80b      	bhi.n	8001b2c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fa25 	bl	8001f64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b2a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40020407 	.word	0x40020407
 8001b7c:	bffdfff8 	.word	0xbffdfff8
 8001b80:	cccccccd 	.word	0xcccccccd
 8001b84:	40020000 	.word	0x40020000
 8001b88:	bffdfbf8 	.word	0xbffdfbf8
 8001b8c:	40020400 	.word	0x40020400

08001b90 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_DMA_Start+0x20>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e02e      	b.n	8001c0e <HAL_DMA_Start+0x7e>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d11d      	bne.n	8001c00 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0201 	bic.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	68b9      	ldr	r1, [r7, #8]
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f000 f93e 	bl	8001e6a <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	e005      	b.n	8001c0c <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    status = HAL_BUSY;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_DMA_Start_IT+0x20>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e066      	b.n	8001d04 <HAL_DMA_Start_IT+0xee>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d155      	bne.n	8001cf6 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 f8fb 	bl	8001e6a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 020e 	orr.w	r2, r2, #14
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	e00f      	b.n	8001cae <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0204 	bic.w	r2, r2, #4
 8001c9c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 020a 	orr.w	r2, r2, #10
 8001cac:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cca:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d007      	beq.n	8001ce4 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ce2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	e005      	b.n	8001d02 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d026      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x7a>
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d021      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0320 	and.w	r3, r3, #32
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d107      	bne.n	8001d60 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0204 	bic.w	r2, r2, #4
 8001d5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6c:	2104      	movs	r1, #4
 8001d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d72:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d071      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d84:	e06c      	b.n	8001e60 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	2202      	movs	r2, #2
 8001d90:	409a      	lsls	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d02e      	beq.n	8001df8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d029      	beq.n	8001df8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0320 	and.w	r3, r3, #32
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10b      	bne.n	8001dca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 020a 	bic.w	r2, r2, #10
 8001dc0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dce:	f003 021f 	and.w	r2, r3, #31
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ddc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d038      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001df6:	e033      	b.n	8001e60 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	2208      	movs	r2, #8
 8001e02:	409a      	lsls	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d02a      	beq.n	8001e62 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d025      	beq.n	8001e62 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 020e 	bic.w	r2, r2, #14
 8001e24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	f003 021f 	and.w	r2, r3, #31
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	2101      	movs	r1, #1
 8001e34:	fa01 f202 	lsl.w	r2, r1, r2
 8001e38:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d004      	beq.n	8001e62 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
}
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b085      	sub	sp, #20
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e80:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d004      	beq.n	8001e94 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e92:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b10      	cmp	r3, #16
 8001eb6:	d108      	bne.n	8001eca <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ec8:	e007      	b.n	8001eda <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	60da      	str	r2, [r3, #12]
}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b16      	ldr	r3, [pc, #88]	@ (8001f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d802      	bhi.n	8001f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001efc:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	e001      	b.n	8001f06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001f02:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001f04:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	3b08      	subs	r3, #8
 8001f12:	4a12      	ldr	r2, [pc, #72]	@ (8001f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001f14:	fba2 2303 	umull	r2, r3, r2, r3
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	009a      	lsls	r2, r3, #2
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a0b      	ldr	r2, [pc, #44]	@ (8001f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001f32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f42:	bf00      	nop
 8001f44:	371c      	adds	r7, #28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40020407 	.word	0x40020407
 8001f54:	40020800 	.word	0x40020800
 8001f58:	40020820 	.word	0x40020820
 8001f5c:	cccccccd 	.word	0xcccccccd
 8001f60:	40020880 	.word	0x40020880

08001f64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a08      	ldr	r2, [pc, #32]	@ (8001fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001f86:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	2201      	movs	r2, #1
 8001f92:	409a      	lsls	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	1000823f 	.word	0x1000823f
 8001fa8:	40020940 	.word	0x40020940

08001fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fba:	e15a      	b.n	8002272 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 814c 	beq.w	800226c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d005      	beq.n	8001fec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d130      	bne.n	800204e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002022:	2201      	movs	r2, #1
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f003 0201 	and.w	r2, r3, #1
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b03      	cmp	r3, #3
 8002058:	d017      	beq.n	800208a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	2203      	movs	r2, #3
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d123      	bne.n	80020de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	08da      	lsrs	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3208      	adds	r2, #8
 800209e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	08da      	lsrs	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3208      	adds	r2, #8
 80020d8:	6939      	ldr	r1, [r7, #16]
 80020da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0203 	and.w	r2, r3, #3
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80a6 	beq.w	800226c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002120:	4b5b      	ldr	r3, [pc, #364]	@ (8002290 <HAL_GPIO_Init+0x2e4>)
 8002122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002124:	4a5a      	ldr	r2, [pc, #360]	@ (8002290 <HAL_GPIO_Init+0x2e4>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6613      	str	r3, [r2, #96]	@ 0x60
 800212c:	4b58      	ldr	r3, [pc, #352]	@ (8002290 <HAL_GPIO_Init+0x2e4>)
 800212e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002138:	4a56      	ldr	r2, [pc, #344]	@ (8002294 <HAL_GPIO_Init+0x2e8>)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	089b      	lsrs	r3, r3, #2
 800213e:	3302      	adds	r3, #2
 8002140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	220f      	movs	r2, #15
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002162:	d01f      	beq.n	80021a4 <HAL_GPIO_Init+0x1f8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a4c      	ldr	r2, [pc, #304]	@ (8002298 <HAL_GPIO_Init+0x2ec>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d019      	beq.n	80021a0 <HAL_GPIO_Init+0x1f4>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a4b      	ldr	r2, [pc, #300]	@ (800229c <HAL_GPIO_Init+0x2f0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d013      	beq.n	800219c <HAL_GPIO_Init+0x1f0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a4a      	ldr	r2, [pc, #296]	@ (80022a0 <HAL_GPIO_Init+0x2f4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d00d      	beq.n	8002198 <HAL_GPIO_Init+0x1ec>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a49      	ldr	r2, [pc, #292]	@ (80022a4 <HAL_GPIO_Init+0x2f8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d007      	beq.n	8002194 <HAL_GPIO_Init+0x1e8>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a48      	ldr	r2, [pc, #288]	@ (80022a8 <HAL_GPIO_Init+0x2fc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d101      	bne.n	8002190 <HAL_GPIO_Init+0x1e4>
 800218c:	2305      	movs	r3, #5
 800218e:	e00a      	b.n	80021a6 <HAL_GPIO_Init+0x1fa>
 8002190:	2306      	movs	r3, #6
 8002192:	e008      	b.n	80021a6 <HAL_GPIO_Init+0x1fa>
 8002194:	2304      	movs	r3, #4
 8002196:	e006      	b.n	80021a6 <HAL_GPIO_Init+0x1fa>
 8002198:	2303      	movs	r3, #3
 800219a:	e004      	b.n	80021a6 <HAL_GPIO_Init+0x1fa>
 800219c:	2302      	movs	r3, #2
 800219e:	e002      	b.n	80021a6 <HAL_GPIO_Init+0x1fa>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <HAL_GPIO_Init+0x1fa>
 80021a4:	2300      	movs	r3, #0
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	f002 0203 	and.w	r2, r2, #3
 80021ac:	0092      	lsls	r2, r2, #2
 80021ae:	4093      	lsls	r3, r2
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021b6:	4937      	ldr	r1, [pc, #220]	@ (8002294 <HAL_GPIO_Init+0x2e8>)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	3302      	adds	r3, #2
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021c4:	4b39      	ldr	r3, [pc, #228]	@ (80022ac <HAL_GPIO_Init+0x300>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4013      	ands	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021e8:	4a30      	ldr	r2, [pc, #192]	@ (80022ac <HAL_GPIO_Init+0x300>)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021ee:	4b2f      	ldr	r3, [pc, #188]	@ (80022ac <HAL_GPIO_Init+0x300>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4013      	ands	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4313      	orrs	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002212:	4a26      	ldr	r2, [pc, #152]	@ (80022ac <HAL_GPIO_Init+0x300>)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002218:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <HAL_GPIO_Init+0x300>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	43db      	mvns	r3, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800223c:	4a1b      	ldr	r2, [pc, #108]	@ (80022ac <HAL_GPIO_Init+0x300>)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002242:	4b1a      	ldr	r3, [pc, #104]	@ (80022ac <HAL_GPIO_Init+0x300>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002266:	4a11      	ldr	r2, [pc, #68]	@ (80022ac <HAL_GPIO_Init+0x300>)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	3301      	adds	r3, #1
 8002270:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	f47f ae9d 	bne.w	8001fbc <HAL_GPIO_Init+0x10>
  }
}
 8002282:	bf00      	nop
 8002284:	bf00      	nop
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	40021000 	.word	0x40021000
 8002294:	40010000 	.word	0x40010000
 8002298:	48000400 	.word	0x48000400
 800229c:	48000800 	.word	0x48000800
 80022a0:	48000c00 	.word	0x48000c00
 80022a4:	48001000 	.word	0x48001000
 80022a8:	48001400 	.word	0x48001400
 80022ac:	40010400 	.word	0x40010400

080022b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80022be:	e0bd      	b.n	800243c <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80022c0:	2201      	movs	r2, #1
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80b0 	beq.w	8002436 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80022d6:	4a60      	ldr	r2, [pc, #384]	@ (8002458 <HAL_GPIO_DeInit+0x1a8>)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	3302      	adds	r3, #2
 80022de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	220f      	movs	r2, #15
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4013      	ands	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022fe:	d01f      	beq.n	8002340 <HAL_GPIO_DeInit+0x90>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a56      	ldr	r2, [pc, #344]	@ (800245c <HAL_GPIO_DeInit+0x1ac>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d019      	beq.n	800233c <HAL_GPIO_DeInit+0x8c>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a55      	ldr	r2, [pc, #340]	@ (8002460 <HAL_GPIO_DeInit+0x1b0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d013      	beq.n	8002338 <HAL_GPIO_DeInit+0x88>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a54      	ldr	r2, [pc, #336]	@ (8002464 <HAL_GPIO_DeInit+0x1b4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d00d      	beq.n	8002334 <HAL_GPIO_DeInit+0x84>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a53      	ldr	r2, [pc, #332]	@ (8002468 <HAL_GPIO_DeInit+0x1b8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d007      	beq.n	8002330 <HAL_GPIO_DeInit+0x80>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a52      	ldr	r2, [pc, #328]	@ (800246c <HAL_GPIO_DeInit+0x1bc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d101      	bne.n	800232c <HAL_GPIO_DeInit+0x7c>
 8002328:	2305      	movs	r3, #5
 800232a:	e00a      	b.n	8002342 <HAL_GPIO_DeInit+0x92>
 800232c:	2306      	movs	r3, #6
 800232e:	e008      	b.n	8002342 <HAL_GPIO_DeInit+0x92>
 8002330:	2304      	movs	r3, #4
 8002332:	e006      	b.n	8002342 <HAL_GPIO_DeInit+0x92>
 8002334:	2303      	movs	r3, #3
 8002336:	e004      	b.n	8002342 <HAL_GPIO_DeInit+0x92>
 8002338:	2302      	movs	r3, #2
 800233a:	e002      	b.n	8002342 <HAL_GPIO_DeInit+0x92>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <HAL_GPIO_DeInit+0x92>
 8002340:	2300      	movs	r3, #0
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	f002 0203 	and.w	r2, r2, #3
 8002348:	0092      	lsls	r2, r2, #2
 800234a:	4093      	lsls	r3, r2
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	429a      	cmp	r2, r3
 8002350:	d132      	bne.n	80023b8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002352:	4b47      	ldr	r3, [pc, #284]	@ (8002470 <HAL_GPIO_DeInit+0x1c0>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	4945      	ldr	r1, [pc, #276]	@ (8002470 <HAL_GPIO_DeInit+0x1c0>)
 800235c:	4013      	ands	r3, r2
 800235e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002360:	4b43      	ldr	r3, [pc, #268]	@ (8002470 <HAL_GPIO_DeInit+0x1c0>)
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	43db      	mvns	r3, r3
 8002368:	4941      	ldr	r1, [pc, #260]	@ (8002470 <HAL_GPIO_DeInit+0x1c0>)
 800236a:	4013      	ands	r3, r2
 800236c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800236e:	4b40      	ldr	r3, [pc, #256]	@ (8002470 <HAL_GPIO_DeInit+0x1c0>)
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	43db      	mvns	r3, r3
 8002376:	493e      	ldr	r1, [pc, #248]	@ (8002470 <HAL_GPIO_DeInit+0x1c0>)
 8002378:	4013      	ands	r3, r2
 800237a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800237c:	4b3c      	ldr	r3, [pc, #240]	@ (8002470 <HAL_GPIO_DeInit+0x1c0>)
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	43db      	mvns	r3, r3
 8002384:	493a      	ldr	r1, [pc, #232]	@ (8002470 <HAL_GPIO_DeInit+0x1c0>)
 8002386:	4013      	ands	r3, r2
 8002388:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	220f      	movs	r2, #15
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800239a:	4a2f      	ldr	r2, [pc, #188]	@ (8002458 <HAL_GPIO_DeInit+0x1a8>)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	3302      	adds	r3, #2
 80023a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	43da      	mvns	r2, r3
 80023aa:	482b      	ldr	r0, [pc, #172]	@ (8002458 <HAL_GPIO_DeInit+0x1a8>)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	400a      	ands	r2, r1
 80023b2:	3302      	adds	r3, #2
 80023b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2103      	movs	r1, #3
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	08da      	lsrs	r2, r3, #3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3208      	adds	r2, #8
 80023d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	220f      	movs	r2, #15
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	08d2      	lsrs	r2, r2, #3
 80023ec:	4019      	ands	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3208      	adds	r2, #8
 80023f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	2103      	movs	r1, #3
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	401a      	ands	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	2101      	movs	r1, #1
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	401a      	ands	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	2103      	movs	r1, #3
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	401a      	ands	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	3301      	adds	r3, #1
 800243a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	f47f af3b 	bne.w	80022c0 <HAL_GPIO_DeInit+0x10>
  }
}
 800244a:	bf00      	nop
 800244c:	bf00      	nop
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	40010000 	.word	0x40010000
 800245c:	48000400 	.word	0x48000400
 8002460:	48000800 	.word	0x48000800
 8002464:	48000c00 	.word	0x48000c00
 8002468:	48001000 	.word	0x48001000
 800246c:	48001400 	.word	0x48001400
 8002470:	40010400 	.word	0x40010400

08002474 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e0d0      	b.n	8002628 <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7fe fdf6 	bl	800108c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80024b6:	f023 030f 	bic.w	r3, r3, #15
 80024ba:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2202      	movs	r2, #2
 80024c2:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d061      	beq.n	8002590 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80024d4:	2310      	movs	r3, #16
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	e001      	b.n	80024de <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80024da:	2320      	movs	r3, #32
 80024dc:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	d802      	bhi.n	80024ec <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80024ec:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80024f0:	f001 fa10 	bl	8003914 <HAL_RCCEx_GetPeriphCLKFreq>
 80024f4:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024fe:	d125      	bne.n	800254c <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d010      	beq.n	800252a <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	461a      	mov	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	fbb2 f3f3 	udiv	r3, r2, r3
 8002524:	3305      	adds	r3, #5
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	e01f      	b.n	800256a <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	fbb2 f2f3 	udiv	r2, r2, r3
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	461a      	mov	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	fbb2 f3f3 	udiv	r3, r2, r3
 8002546:	3305      	adds	r3, #5
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	e00e      	b.n	800256a <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	fbb2 f2f3 	udiv	r2, r2, r3
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	461a      	mov	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	fbb2 f3f3 	udiv	r3, r2, r3
 8002566:	3305      	adds	r3, #5
 8002568:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4a30      	ldr	r2, [pc, #192]	@ (8002630 <HAL_I2S_Init+0x1bc>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	08db      	lsrs	r3, r3, #3
 8002574:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	e003      	b.n	8002598 <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002590:	2302      	movs	r3, #2
 8002592:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d902      	bls.n	80025a4 <HAL_I2S_Init+0x130>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	2bff      	cmp	r3, #255	@ 0xff
 80025a2:	d907      	bls.n	80025b4 <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a8:	f043 0210 	orr.w	r2, r3, #16
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e039      	b.n	8002628 <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	ea42 0103 	orr.w	r1, r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80025d2:	f023 030f 	bic.w	r3, r3, #15
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6851      	ldr	r1, [r2, #4]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6892      	ldr	r2, [r2, #8]
 80025de:	4311      	orrs	r1, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	68d2      	ldr	r2, [r2, #12]
 80025e4:	4311      	orrs	r1, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6992      	ldr	r2, [r2, #24]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025f6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b30      	cmp	r3, #48	@ 0x30
 80025fe:	d003      	beq.n	8002608 <HAL_I2S_Init+0x194>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2bb0      	cmp	r3, #176	@ 0xb0
 8002606:	d107      	bne.n	8002618 <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69da      	ldr	r2, [r3, #28]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002616:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3720      	adds	r7, #32
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	cccccccd 	.word	0xcccccccd

08002634 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e01a      	b.n	800267c <HAL_I2S_DeInit+0x48>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2202      	movs	r2, #2
 800264a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800265c:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7fe fd9e 	bl	80011a0 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	4613      	mov	r3, r2
 8002690:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_I2S_Transmit_DMA+0x1a>
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e08a      	b.n	80027b8 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d001      	beq.n	80026b2 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80026ae:	2302      	movs	r3, #2
 80026b0:	e082      	b.n	80027b8 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_I2S_Transmit_DMA+0x3e>
 80026be:	2302      	movs	r3, #2
 80026c0:	e07a      	b.n	80027b8 <HAL_I2S_Transmit_DMA+0x134>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2203      	movs	r2, #3
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d002      	beq.n	80026f6 <HAL_I2S_Transmit_DMA+0x72>
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2b05      	cmp	r3, #5
 80026f4:	d10a      	bne.n	800270c <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	845a      	strh	r2, [r3, #34]	@ 0x22
 800270a:	e005      	b.n	8002718 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	88fa      	ldrh	r2, [r7, #6]
 8002710:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	88fa      	ldrh	r2, [r7, #6]
 8002716:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271c:	4a28      	ldr	r2, [pc, #160]	@ (80027c0 <HAL_I2S_Transmit_DMA+0x13c>)
 800271e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002724:	4a27      	ldr	r2, [pc, #156]	@ (80027c4 <HAL_I2S_Transmit_DMA+0x140>)
 8002726:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272c:	4a26      	ldr	r2, [pc, #152]	@ (80027c8 <HAL_I2S_Transmit_DMA+0x144>)
 800272e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002738:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002740:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8c1b      	ldrh	r3, [r3, #32]
 8002746:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002748:	f7ff fa65 	bl	8001c16 <HAL_DMA_Start_IT>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00f      	beq.n	8002772 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002756:	f043 0208 	orr.w	r2, r3, #8
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    __HAL_UNLOCK(hi2s);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e022      	b.n	80027b8 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d107      	bne.n	8002798 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0202 	orr.w	r2, r2, #2
 8002796:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d107      	bne.n	80027b6 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69da      	ldr	r2, [r3, #28]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027b4:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	0800284b 	.word	0x0800284b
 80027c4:	08002809 	.word	0x08002809
 80027c8:	08002867 	.word	0x08002867

080027cc <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002814:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10e      	bne.n	800283c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0202 	bic.w	r2, r2, #2
 800282c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	845a      	strh	r2, [r3, #34]	@ 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f7ff ffcf 	bl	80027e0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002856:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f7ff ffb7 	bl	80027cc <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002872:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0203 	bic.w	r2, r2, #3
 8002882:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289c:	f043 0208 	orr.w	r2, r3, #8
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7ff ffa5 	bl	80027f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d141      	bne.n	8002946 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028c2:	4b4b      	ldr	r3, [pc, #300]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028ce:	d131      	bne.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028d0:	4b47      	ldr	r3, [pc, #284]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028d6:	4a46      	ldr	r2, [pc, #280]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028e0:	4b43      	ldr	r3, [pc, #268]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028e8:	4a41      	ldr	r2, [pc, #260]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028f0:	4b40      	ldr	r3, [pc, #256]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2232      	movs	r2, #50	@ 0x32
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	4a3f      	ldr	r2, [pc, #252]	@ (80029f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002900:	0c9b      	lsrs	r3, r3, #18
 8002902:	3301      	adds	r3, #1
 8002904:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002906:	e002      	b.n	800290e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3b01      	subs	r3, #1
 800290c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800290e:	4b38      	ldr	r3, [pc, #224]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002916:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800291a:	d102      	bne.n	8002922 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f2      	bne.n	8002908 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002922:	4b33      	ldr	r3, [pc, #204]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800292a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800292e:	d158      	bne.n	80029e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e057      	b.n	80029e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002934:	4b2e      	ldr	r3, [pc, #184]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800293a:	4a2d      	ldr	r2, [pc, #180]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800293c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002940:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002944:	e04d      	b.n	80029e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800294c:	d141      	bne.n	80029d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800294e:	4b28      	ldr	r3, [pc, #160]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800295a:	d131      	bne.n	80029c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800295c:	4b24      	ldr	r3, [pc, #144]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800295e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002962:	4a23      	ldr	r2, [pc, #140]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002968:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800296c:	4b20      	ldr	r3, [pc, #128]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002974:	4a1e      	ldr	r2, [pc, #120]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002976:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800297a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800297c:	4b1d      	ldr	r3, [pc, #116]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2232      	movs	r2, #50	@ 0x32
 8002982:	fb02 f303 	mul.w	r3, r2, r3
 8002986:	4a1c      	ldr	r2, [pc, #112]	@ (80029f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	0c9b      	lsrs	r3, r3, #18
 800298e:	3301      	adds	r3, #1
 8002990:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002992:	e002      	b.n	800299a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	3b01      	subs	r3, #1
 8002998:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800299a:	4b15      	ldr	r3, [pc, #84]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029a6:	d102      	bne.n	80029ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f2      	bne.n	8002994 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029ae:	4b10      	ldr	r3, [pc, #64]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ba:	d112      	bne.n	80029e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e011      	b.n	80029e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029c0:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029c6:	4a0a      	ldr	r2, [pc, #40]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80029d0:	e007      	b.n	80029e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029d2:	4b07      	ldr	r3, [pc, #28]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029da:	4a05      	ldr	r2, [pc, #20]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	40007000 	.word	0x40007000
 80029f4:	20002764 	.word	0x20002764
 80029f8:	431bde83 	.word	0x431bde83

080029fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002a00:	4b05      	ldr	r3, [pc, #20]	@ (8002a18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a04      	ldr	r2, [pc, #16]	@ (8002a18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a0a:	6093      	str	r3, [r2, #8]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40007000 	.word	0x40007000

08002a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e2fe      	b.n	800302c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d075      	beq.n	8002b26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a3a:	4b97      	ldr	r3, [pc, #604]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a44:	4b94      	ldr	r3, [pc, #592]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	d102      	bne.n	8002a5a <HAL_RCC_OscConfig+0x3e>
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d002      	beq.n	8002a60 <HAL_RCC_OscConfig+0x44>
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d10b      	bne.n	8002a78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	4b8d      	ldr	r3, [pc, #564]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d05b      	beq.n	8002b24 <HAL_RCC_OscConfig+0x108>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d157      	bne.n	8002b24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e2d9      	b.n	800302c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a80:	d106      	bne.n	8002a90 <HAL_RCC_OscConfig+0x74>
 8002a82:	4b85      	ldr	r3, [pc, #532]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a84      	ldr	r2, [pc, #528]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e01d      	b.n	8002acc <HAL_RCC_OscConfig+0xb0>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x98>
 8002a9a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002aa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b7c      	ldr	r3, [pc, #496]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a7b      	ldr	r2, [pc, #492]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e00b      	b.n	8002acc <HAL_RCC_OscConfig+0xb0>
 8002ab4:	4b78      	ldr	r3, [pc, #480]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a77      	ldr	r2, [pc, #476]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002aba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	4b75      	ldr	r3, [pc, #468]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a74      	ldr	r2, [pc, #464]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002ac6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d013      	beq.n	8002afc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fde0 	bl	8001698 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002adc:	f7fe fddc 	bl	8001698 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	@ 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e29e      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aee:	4b6a      	ldr	r3, [pc, #424]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0xc0>
 8002afa:	e014      	b.n	8002b26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe fdcc 	bl	8001698 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b04:	f7fe fdc8 	bl	8001698 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	@ 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e28a      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b16:	4b60      	ldr	r3, [pc, #384]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0xe8>
 8002b22:	e000      	b.n	8002b26 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d075      	beq.n	8002c1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b32:	4b59      	ldr	r3, [pc, #356]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b3c:	4b56      	ldr	r3, [pc, #344]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	2b0c      	cmp	r3, #12
 8002b4a:	d102      	bne.n	8002b52 <HAL_RCC_OscConfig+0x136>
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d002      	beq.n	8002b58 <HAL_RCC_OscConfig+0x13c>
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d11f      	bne.n	8002b98 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b58:	4b4f      	ldr	r3, [pc, #316]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_OscConfig+0x154>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e25d      	b.n	800302c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b70:	4b49      	ldr	r3, [pc, #292]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	061b      	lsls	r3, r3, #24
 8002b7e:	4946      	ldr	r1, [pc, #280]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b84:	4b45      	ldr	r3, [pc, #276]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe fd39 	bl	8001600 <HAL_InitTick>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d043      	beq.n	8002c1c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e249      	b.n	800302c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d023      	beq.n	8002be8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba0:	4b3d      	ldr	r3, [pc, #244]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a3c      	ldr	r2, [pc, #240]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fe fd74 	bl	8001698 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb4:	f7fe fd70 	bl	8001698 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e232      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc6:	4b34      	ldr	r3, [pc, #208]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd2:	4b31      	ldr	r3, [pc, #196]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	061b      	lsls	r3, r3, #24
 8002be0:	492d      	ldr	r1, [pc, #180]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	604b      	str	r3, [r1, #4]
 8002be6:	e01a      	b.n	8002c1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be8:	4b2b      	ldr	r3, [pc, #172]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a2a      	ldr	r2, [pc, #168]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002bee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fd50 	bl	8001698 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfc:	f7fe fd4c 	bl	8001698 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e20e      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c0e:	4b22      	ldr	r3, [pc, #136]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x1e0>
 8002c1a:	e000      	b.n	8002c1e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d041      	beq.n	8002cae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01c      	beq.n	8002c6c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c32:	4b19      	ldr	r3, [pc, #100]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c38:	4a17      	ldr	r2, [pc, #92]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c42:	f7fe fd29 	bl	8001698 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4a:	f7fe fd25 	bl	8001698 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e1e7      	b.n	800302c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0ef      	beq.n	8002c4a <HAL_RCC_OscConfig+0x22e>
 8002c6a:	e020      	b.n	8002cae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c72:	4a09      	ldr	r2, [pc, #36]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7fe fd0c 	bl	8001698 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c82:	e00d      	b.n	8002ca0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c84:	f7fe fd08 	bl	8001698 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d906      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e1ca      	b.n	800302c <HAL_RCC_OscConfig+0x610>
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	20003c70 	.word	0x20003c70
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ca0:	4b8c      	ldr	r3, [pc, #560]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1ea      	bne.n	8002c84 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 80a6 	beq.w	8002e08 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cc0:	4b84      	ldr	r3, [pc, #528]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x2b4>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2b6>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cda:	4a7e      	ldr	r2, [pc, #504]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ce0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ce2:	4b7c      	ldr	r3, [pc, #496]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cf2:	4b79      	ldr	r3, [pc, #484]	@ (8002ed8 <HAL_RCC_OscConfig+0x4bc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d118      	bne.n	8002d30 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cfe:	4b76      	ldr	r3, [pc, #472]	@ (8002ed8 <HAL_RCC_OscConfig+0x4bc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a75      	ldr	r2, [pc, #468]	@ (8002ed8 <HAL_RCC_OscConfig+0x4bc>)
 8002d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0a:	f7fe fcc5 	bl	8001698 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d12:	f7fe fcc1 	bl	8001698 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e183      	b.n	800302c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d24:	4b6c      	ldr	r3, [pc, #432]	@ (8002ed8 <HAL_RCC_OscConfig+0x4bc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d108      	bne.n	8002d4a <HAL_RCC_OscConfig+0x32e>
 8002d38:	4b66      	ldr	r3, [pc, #408]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3e:	4a65      	ldr	r2, [pc, #404]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d48:	e024      	b.n	8002d94 <HAL_RCC_OscConfig+0x378>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b05      	cmp	r3, #5
 8002d50:	d110      	bne.n	8002d74 <HAL_RCC_OscConfig+0x358>
 8002d52:	4b60      	ldr	r3, [pc, #384]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d58:	4a5e      	ldr	r2, [pc, #376]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002d5a:	f043 0304 	orr.w	r3, r3, #4
 8002d5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d62:	4b5c      	ldr	r3, [pc, #368]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d68:	4a5a      	ldr	r2, [pc, #360]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d72:	e00f      	b.n	8002d94 <HAL_RCC_OscConfig+0x378>
 8002d74:	4b57      	ldr	r3, [pc, #348]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7a:	4a56      	ldr	r2, [pc, #344]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d84:	4b53      	ldr	r3, [pc, #332]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8a:	4a52      	ldr	r2, [pc, #328]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002d8c:	f023 0304 	bic.w	r3, r3, #4
 8002d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d016      	beq.n	8002dca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9c:	f7fe fc7c 	bl	8001698 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da2:	e00a      	b.n	8002dba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da4:	f7fe fc78 	bl	8001698 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e138      	b.n	800302c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dba:	4b46      	ldr	r3, [pc, #280]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0ed      	beq.n	8002da4 <HAL_RCC_OscConfig+0x388>
 8002dc8:	e015      	b.n	8002df6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dca:	f7fe fc65 	bl	8001698 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd2:	f7fe fc61 	bl	8001698 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e121      	b.n	800302c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002de8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1ed      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002df6:	7ffb      	ldrb	r3, [r7, #31]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d105      	bne.n	8002e08 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfc:	4b35      	ldr	r3, [pc, #212]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e00:	4a34      	ldr	r2, [pc, #208]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e06:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d03c      	beq.n	8002e8e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d01c      	beq.n	8002e56 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e22:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2c:	f7fe fc34 	bl	8001698 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e34:	f7fe fc30 	bl	8001698 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e0f2      	b.n	800302c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e46:	4b23      	ldr	r3, [pc, #140]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002e48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0ef      	beq.n	8002e34 <HAL_RCC_OscConfig+0x418>
 8002e54:	e01b      	b.n	8002e8e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e56:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002e58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e66:	f7fe fc17 	bl	8001698 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e6e:	f7fe fc13 	bl	8001698 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e0d5      	b.n	800302c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e80:	4b14      	ldr	r3, [pc, #80]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002e82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1ef      	bne.n	8002e6e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 80c9 	beq.w	800302a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e98:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	2b0c      	cmp	r3, #12
 8002ea2:	f000 8083 	beq.w	8002fac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d15e      	bne.n	8002f6c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eae:	4b09      	ldr	r3, [pc, #36]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a08      	ldr	r2, [pc, #32]	@ (8002ed4 <HAL_RCC_OscConfig+0x4b8>)
 8002eb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eba:	f7fe fbed 	bl	8001698 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ec0:	e00c      	b.n	8002edc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec2:	f7fe fbe9 	bl	8001698 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d905      	bls.n	8002edc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e0ab      	b.n	800302c <HAL_RCC_OscConfig+0x610>
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002edc:	4b55      	ldr	r3, [pc, #340]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1ec      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ee8:	4b52      	ldr	r3, [pc, #328]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	4b52      	ldr	r3, [pc, #328]	@ (8003038 <HAL_RCC_OscConfig+0x61c>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6a11      	ldr	r1, [r2, #32]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ef8:	3a01      	subs	r2, #1
 8002efa:	0112      	lsls	r2, r2, #4
 8002efc:	4311      	orrs	r1, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002f02:	0212      	lsls	r2, r2, #8
 8002f04:	4311      	orrs	r1, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f0a:	0852      	lsrs	r2, r2, #1
 8002f0c:	3a01      	subs	r2, #1
 8002f0e:	0552      	lsls	r2, r2, #21
 8002f10:	4311      	orrs	r1, r2
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f16:	0852      	lsrs	r2, r2, #1
 8002f18:	3a01      	subs	r2, #1
 8002f1a:	0652      	lsls	r2, r2, #25
 8002f1c:	4311      	orrs	r1, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f22:	06d2      	lsls	r2, r2, #27
 8002f24:	430a      	orrs	r2, r1
 8002f26:	4943      	ldr	r1, [pc, #268]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f2c:	4b41      	ldr	r3, [pc, #260]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a40      	ldr	r2, [pc, #256]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f38:	4b3e      	ldr	r3, [pc, #248]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4a3d      	ldr	r2, [pc, #244]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002f3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fe fba8 	bl	8001698 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7fe fba4 	bl	8001698 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e066      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5e:	4b35      	ldr	r3, [pc, #212]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x530>
 8002f6a:	e05e      	b.n	800302a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6c:	4b31      	ldr	r3, [pc, #196]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a30      	ldr	r2, [pc, #192]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002f72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe fb8e 	bl	8001698 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f80:	f7fe fb8a 	bl	8001698 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e04c      	b.n	800302c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f92:	4b28      	ldr	r3, [pc, #160]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002f9e:	4b25      	ldr	r3, [pc, #148]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	4924      	ldr	r1, [pc, #144]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002fa4:	4b25      	ldr	r3, [pc, #148]	@ (800303c <HAL_RCC_OscConfig+0x620>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	60cb      	str	r3, [r1, #12]
 8002faa:	e03e      	b.n	800302a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e039      	b.n	800302c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8003034 <HAL_RCC_OscConfig+0x618>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f003 0203 	and.w	r2, r3, #3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d12c      	bne.n	8003026 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d123      	bne.n	8003026 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d11b      	bne.n	8003026 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d113      	bne.n	8003026 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003008:	085b      	lsrs	r3, r3, #1
 800300a:	3b01      	subs	r3, #1
 800300c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800300e:	429a      	cmp	r2, r3
 8003010:	d109      	bne.n	8003026 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	3b01      	subs	r3, #1
 8003020:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d001      	beq.n	800302a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3720      	adds	r7, #32
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40021000 	.word	0x40021000
 8003038:	019f800c 	.word	0x019f800c
 800303c:	feeefffc 	.word	0xfeeefffc

08003040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e11e      	b.n	8003296 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003058:	4b91      	ldr	r3, [pc, #580]	@ (80032a0 <HAL_RCC_ClockConfig+0x260>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d910      	bls.n	8003088 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b8e      	ldr	r3, [pc, #568]	@ (80032a0 <HAL_RCC_ClockConfig+0x260>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 020f 	bic.w	r2, r3, #15
 800306e:	498c      	ldr	r1, [pc, #560]	@ (80032a0 <HAL_RCC_ClockConfig+0x260>)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b8a      	ldr	r3, [pc, #552]	@ (80032a0 <HAL_RCC_ClockConfig+0x260>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e106      	b.n	8003296 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d073      	beq.n	800317c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d129      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309c:	4b81      	ldr	r3, [pc, #516]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0f4      	b.n	8003296 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80030ac:	f000 f99e 	bl	80033ec <RCC_GetSysClockFreqFromPLLSource>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4a7c      	ldr	r2, [pc, #496]	@ (80032a8 <HAL_RCC_ClockConfig+0x268>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d93f      	bls.n	800313a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030ba:	4b7a      	ldr	r3, [pc, #488]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d033      	beq.n	800313a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d12f      	bne.n	800313a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030da:	4b72      	ldr	r3, [pc, #456]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030e2:	4a70      	ldr	r2, [pc, #448]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 80030e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030ea:	2380      	movs	r3, #128	@ 0x80
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	e024      	b.n	800313a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d107      	bne.n	8003108 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030f8:	4b6a      	ldr	r3, [pc, #424]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d109      	bne.n	8003118 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0c6      	b.n	8003296 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003108:	4b66      	ldr	r3, [pc, #408]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0be      	b.n	8003296 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003118:	f000 f8ce 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 800311c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4a61      	ldr	r2, [pc, #388]	@ (80032a8 <HAL_RCC_ClockConfig+0x268>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d909      	bls.n	800313a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003126:	4b5f      	ldr	r3, [pc, #380]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800312e:	4a5d      	ldr	r2, [pc, #372]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 8003130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003134:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003136:	2380      	movs	r3, #128	@ 0x80
 8003138:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800313a:	4b5a      	ldr	r3, [pc, #360]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4957      	ldr	r1, [pc, #348]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 8003148:	4313      	orrs	r3, r2
 800314a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800314c:	f7fe faa4 	bl	8001698 <HAL_GetTick>
 8003150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	e00a      	b.n	800316a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003154:	f7fe faa0 	bl	8001698 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e095      	b.n	8003296 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	4b4e      	ldr	r3, [pc, #312]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 020c 	and.w	r2, r3, #12
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	429a      	cmp	r2, r3
 800317a:	d1eb      	bne.n	8003154 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d023      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003194:	4b43      	ldr	r3, [pc, #268]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4a42      	ldr	r2, [pc, #264]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 800319a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800319e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d007      	beq.n	80031bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80031ac:	4b3d      	ldr	r3, [pc, #244]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80031b4:	4a3b      	ldr	r2, [pc, #236]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 80031b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031bc:	4b39      	ldr	r3, [pc, #228]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4936      	ldr	r1, [pc, #216]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	608b      	str	r3, [r1, #8]
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2b80      	cmp	r3, #128	@ 0x80
 80031d4:	d105      	bne.n	80031e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80031d6:	4b33      	ldr	r3, [pc, #204]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	4a32      	ldr	r2, [pc, #200]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 80031dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031e2:	4b2f      	ldr	r3, [pc, #188]	@ (80032a0 <HAL_RCC_ClockConfig+0x260>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d21d      	bcs.n	800322c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f0:	4b2b      	ldr	r3, [pc, #172]	@ (80032a0 <HAL_RCC_ClockConfig+0x260>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f023 020f 	bic.w	r2, r3, #15
 80031f8:	4929      	ldr	r1, [pc, #164]	@ (80032a0 <HAL_RCC_ClockConfig+0x260>)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003200:	f7fe fa4a 	bl	8001698 <HAL_GetTick>
 8003204:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	e00a      	b.n	800321e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003208:	f7fe fa46 	bl	8001698 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e03b      	b.n	8003296 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b20      	ldr	r3, [pc, #128]	@ (80032a0 <HAL_RCC_ClockConfig+0x260>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d1ed      	bne.n	8003208 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003238:	4b1a      	ldr	r3, [pc, #104]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4917      	ldr	r1, [pc, #92]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003256:	4b13      	ldr	r3, [pc, #76]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	490f      	ldr	r1, [pc, #60]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800326a:	f000 f825 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 800326e:	4602      	mov	r2, r0
 8003270:	4b0c      	ldr	r3, [pc, #48]	@ (80032a4 <HAL_RCC_ClockConfig+0x264>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	490c      	ldr	r1, [pc, #48]	@ (80032ac <HAL_RCC_ClockConfig+0x26c>)
 800327c:	5ccb      	ldrb	r3, [r1, r3]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	fa22 f303 	lsr.w	r3, r2, r3
 8003286:	4a0a      	ldr	r2, [pc, #40]	@ (80032b0 <HAL_RCC_ClockConfig+0x270>)
 8003288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800328a:	4b0a      	ldr	r3, [pc, #40]	@ (80032b4 <HAL_RCC_ClockConfig+0x274>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe f9b6 	bl	8001600 <HAL_InitTick>
 8003294:	4603      	mov	r3, r0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40022000 	.word	0x40022000
 80032a4:	40021000 	.word	0x40021000
 80032a8:	04c4b400 	.word	0x04c4b400
 80032ac:	0800621c 	.word	0x0800621c
 80032b0:	20002764 	.word	0x20002764
 80032b4:	20003c70 	.word	0x20003c70

080032b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80032be:	4b2c      	ldr	r3, [pc, #176]	@ (8003370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d102      	bne.n	80032d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003374 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	e047      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80032d0:	4b27      	ldr	r3, [pc, #156]	@ (8003370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 030c 	and.w	r3, r3, #12
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d102      	bne.n	80032e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032dc:	4b26      	ldr	r3, [pc, #152]	@ (8003378 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	e03e      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80032e2:	4b23      	ldr	r3, [pc, #140]	@ (8003370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b0c      	cmp	r3, #12
 80032ec:	d136      	bne.n	800335c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032ee:	4b20      	ldr	r3, [pc, #128]	@ (8003370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	3301      	adds	r3, #1
 8003304:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b03      	cmp	r3, #3
 800330a:	d10c      	bne.n	8003326 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800330c:	4a1a      	ldr	r2, [pc, #104]	@ (8003378 <HAL_RCC_GetSysClockFreq+0xc0>)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	fbb2 f3f3 	udiv	r3, r2, r3
 8003314:	4a16      	ldr	r2, [pc, #88]	@ (8003370 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003316:	68d2      	ldr	r2, [r2, #12]
 8003318:	0a12      	lsrs	r2, r2, #8
 800331a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800331e:	fb02 f303 	mul.w	r3, r2, r3
 8003322:	617b      	str	r3, [r7, #20]
      break;
 8003324:	e00c      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003326:	4a13      	ldr	r2, [pc, #76]	@ (8003374 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	fbb2 f3f3 	udiv	r3, r2, r3
 800332e:	4a10      	ldr	r2, [pc, #64]	@ (8003370 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003330:	68d2      	ldr	r2, [r2, #12]
 8003332:	0a12      	lsrs	r2, r2, #8
 8003334:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003338:	fb02 f303 	mul.w	r3, r2, r3
 800333c:	617b      	str	r3, [r7, #20]
      break;
 800333e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003340:	4b0b      	ldr	r3, [pc, #44]	@ (8003370 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	0e5b      	lsrs	r3, r3, #25
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	3301      	adds	r3, #1
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	e001      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003360:	693b      	ldr	r3, [r7, #16]
}
 8003362:	4618      	mov	r0, r3
 8003364:	371c      	adds	r7, #28
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	00f42400 	.word	0x00f42400
 8003378:	007a1200 	.word	0x007a1200

0800337c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003380:	4b03      	ldr	r3, [pc, #12]	@ (8003390 <HAL_RCC_GetHCLKFreq+0x14>)
 8003382:	681b      	ldr	r3, [r3, #0]
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	20002764 	.word	0x20002764

08003394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003398:	f7ff fff0 	bl	800337c <HAL_RCC_GetHCLKFreq>
 800339c:	4602      	mov	r2, r0
 800339e:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	0a1b      	lsrs	r3, r3, #8
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4904      	ldr	r1, [pc, #16]	@ (80033bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80033aa:	5ccb      	ldrb	r3, [r1, r3]
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40021000 	.word	0x40021000
 80033bc:	0800622c 	.word	0x0800622c

080033c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033c4:	f7ff ffda 	bl	800337c <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	0adb      	lsrs	r3, r3, #11
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4904      	ldr	r1, [pc, #16]	@ (80033e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000
 80033e8:	0800622c 	.word	0x0800622c

080033ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033f2:	4b1e      	ldr	r3, [pc, #120]	@ (800346c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033fc:	4b1b      	ldr	r3, [pc, #108]	@ (800346c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	3301      	adds	r3, #1
 8003408:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b03      	cmp	r3, #3
 800340e:	d10c      	bne.n	800342a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003410:	4a17      	ldr	r2, [pc, #92]	@ (8003470 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	4a14      	ldr	r2, [pc, #80]	@ (800346c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800341a:	68d2      	ldr	r2, [r2, #12]
 800341c:	0a12      	lsrs	r2, r2, #8
 800341e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	617b      	str	r3, [r7, #20]
    break;
 8003428:	e00c      	b.n	8003444 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800342a:	4a12      	ldr	r2, [pc, #72]	@ (8003474 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003432:	4a0e      	ldr	r2, [pc, #56]	@ (800346c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003434:	68d2      	ldr	r2, [r2, #12]
 8003436:	0a12      	lsrs	r2, r2, #8
 8003438:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800343c:	fb02 f303 	mul.w	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]
    break;
 8003442:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003444:	4b09      	ldr	r3, [pc, #36]	@ (800346c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	0e5b      	lsrs	r3, r3, #25
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	3301      	adds	r3, #1
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	fbb2 f3f3 	udiv	r3, r2, r3
 800345c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800345e:	687b      	ldr	r3, [r7, #4]
}
 8003460:	4618      	mov	r0, r3
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	40021000 	.word	0x40021000
 8003470:	007a1200 	.word	0x007a1200
 8003474:	00f42400 	.word	0x00f42400

08003478 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003480:	2300      	movs	r3, #0
 8003482:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003484:	2300      	movs	r3, #0
 8003486:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8098 	beq.w	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003496:	2300      	movs	r3, #0
 8003498:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349a:	4b43      	ldr	r3, [pc, #268]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800349c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10d      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a6:	4b40      	ldr	r3, [pc, #256]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034aa:	4a3f      	ldr	r2, [pc, #252]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80034b2:	4b3d      	ldr	r3, [pc, #244]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034be:	2301      	movs	r3, #1
 80034c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034c2:	4b3a      	ldr	r3, [pc, #232]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a39      	ldr	r2, [pc, #228]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034ce:	f7fe f8e3 	bl	8001698 <HAL_GetTick>
 80034d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034d4:	e009      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d6:	f7fe f8df 	bl	8001698 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d902      	bls.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	74fb      	strb	r3, [r7, #19]
        break;
 80034e8:	e005      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034ea:	4b30      	ldr	r3, [pc, #192]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0ef      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80034f6:	7cfb      	ldrb	r3, [r7, #19]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d159      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034fc:	4b2a      	ldr	r3, [pc, #168]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003506:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d01e      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	429a      	cmp	r2, r3
 8003516:	d019      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003518:	4b23      	ldr	r3, [pc, #140]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003522:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003524:	4b20      	ldr	r3, [pc, #128]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352a:	4a1f      	ldr	r2, [pc, #124]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003534:	4b1c      	ldr	r3, [pc, #112]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353a:	4a1b      	ldr	r2, [pc, #108]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800353c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003544:	4a18      	ldr	r2, [pc, #96]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d016      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003556:	f7fe f89f 	bl	8001698 <HAL_GetTick>
 800355a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800355c:	e00b      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fe f89b 	bl	8001698 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356c:	4293      	cmp	r3, r2
 800356e:	d902      	bls.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	74fb      	strb	r3, [r7, #19]
            break;
 8003574:	e006      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003576:	4b0c      	ldr	r3, [pc, #48]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ec      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10b      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800358a:	4b07      	ldr	r3, [pc, #28]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003590:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003598:	4903      	ldr	r1, [pc, #12]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035a0:	e008      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035a2:	7cfb      	ldrb	r3, [r7, #19]
 80035a4:	74bb      	strb	r3, [r7, #18]
 80035a6:	e005      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035b4:	7c7b      	ldrb	r3, [r7, #17]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d105      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ba:	4ba7      	ldr	r3, [pc, #668]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035be:	4aa6      	ldr	r2, [pc, #664]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035d2:	4ba1      	ldr	r3, [pc, #644]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d8:	f023 0203 	bic.w	r2, r3, #3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	499d      	ldr	r1, [pc, #628]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035f4:	4b98      	ldr	r3, [pc, #608]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fa:	f023 020c 	bic.w	r2, r3, #12
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	4995      	ldr	r1, [pc, #596]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003616:	4b90      	ldr	r3, [pc, #576]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	498c      	ldr	r1, [pc, #560]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003638:	4b87      	ldr	r3, [pc, #540]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	4984      	ldr	r1, [pc, #528]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800365a:	4b7f      	ldr	r3, [pc, #508]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003660:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	497b      	ldr	r1, [pc, #492]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800367c:	4b76      	ldr	r3, [pc, #472]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003682:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	4973      	ldr	r1, [pc, #460]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800369e:	4b6e      	ldr	r3, [pc, #440]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	496a      	ldr	r1, [pc, #424]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036c0:	4b65      	ldr	r3, [pc, #404]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	4962      	ldr	r1, [pc, #392]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	4959      	ldr	r1, [pc, #356]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003704:	4b54      	ldr	r3, [pc, #336]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003706:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800370a:	f023 0203 	bic.w	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003712:	4951      	ldr	r1, [pc, #324]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003726:	4b4c      	ldr	r3, [pc, #304]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003734:	4948      	ldr	r1, [pc, #288]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d015      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003748:	4b43      	ldr	r3, [pc, #268]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800374e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	4940      	ldr	r1, [pc, #256]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003766:	d105      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003768:	4b3b      	ldr	r3, [pc, #236]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4a3a      	ldr	r2, [pc, #232]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800376e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003772:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800377c:	2b00      	cmp	r3, #0
 800377e:	d015      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003780:	4b35      	ldr	r3, [pc, #212]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003786:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800378e:	4932      	ldr	r1, [pc, #200]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800379a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800379e:	d105      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037aa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d015      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037b8:	4b27      	ldr	r3, [pc, #156]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c6:	4924      	ldr	r1, [pc, #144]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037d6:	d105      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d015      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037f0:	4b19      	ldr	r3, [pc, #100]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fe:	4916      	ldr	r1, [pc, #88]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800380e:	d105      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003810:	4b11      	ldr	r3, [pc, #68]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4a10      	ldr	r2, [pc, #64]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003816:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800381a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d019      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003828:	4b0b      	ldr	r3, [pc, #44]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	4908      	ldr	r1, [pc, #32]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003846:	d109      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003848:	4b03      	ldr	r3, [pc, #12]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a02      	ldr	r2, [pc, #8]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800384e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003852:	60d3      	str	r3, [r2, #12]
 8003854:	e002      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d015      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003868:	4b29      	ldr	r3, [pc, #164]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003876:	4926      	ldr	r1, [pc, #152]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003882:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003886:	d105      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003888:	4b21      	ldr	r3, [pc, #132]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4a20      	ldr	r2, [pc, #128]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800388e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003892:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d015      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80038a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ae:	4918      	ldr	r1, [pc, #96]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038be:	d105      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80038c0:	4b13      	ldr	r3, [pc, #76]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4a12      	ldr	r2, [pc, #72]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d015      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80038d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e6:	490a      	ldr	r1, [pc, #40]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038f6:	d105      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f8:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4a04      	ldr	r2, [pc, #16]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003902:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003904:	7cbb      	ldrb	r3, [r7, #18]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000

08003914 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003926:	d136      	bne.n	8003996 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003928:	4bb1      	ldr	r3, [pc, #708]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003932:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003934:	4bae      	ldr	r3, [pc, #696]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b02      	cmp	r3, #2
 8003940:	d108      	bne.n	8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003948:	d104      	bne.n	8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 800394a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	f000 bd12 	b.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003954:	4ba6      	ldr	r3, [pc, #664]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b02      	cmp	r3, #2
 8003960:	d108      	bne.n	8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003968:	d104      	bne.n	8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 800396a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800396e:	61fb      	str	r3, [r7, #28]
 8003970:	f000 bd02 	b.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003974:	4b9e      	ldr	r3, [pc, #632]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003980:	f040 84fa 	bne.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800398a:	f040 84f5 	bne.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = HSE_VALUE / 32U;
 800398e:	4b99      	ldr	r3, [pc, #612]	@ (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	f000 bcf1 	b.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 8003996:	4b96      	ldr	r3, [pc, #600]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d10c      	bne.n	80039bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80039a2:	4b93      	ldr	r3, [pc, #588]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ae:	d102      	bne.n	80039b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 80039b0:	4b91      	ldr	r3, [pc, #580]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	e017      	b.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	e014      	b.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 80039bc:	4b8c      	ldr	r3, [pc, #560]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d10c      	bne.n	80039e2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80039c8:	4b89      	ldr	r3, [pc, #548]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039d4:	d102      	bne.n	80039dc <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 80039d6:	4b89      	ldr	r3, [pc, #548]	@ (8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	e004      	b.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	e001      	b.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80039e6:	4b82      	ldr	r3, [pc, #520]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	3301      	adds	r3, #1
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a00:	f000 8466 	beq.w	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a0a:	f200 848e 	bhi.w	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a14:	f000 8263 	beq.w	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a1e:	f200 8484 	bhi.w	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a28:	f000 8417 	beq.w	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a32:	f200 847a 	bhi.w	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a3c:	f000 83d0 	beq.w	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a46:	f200 8470 	bhi.w	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a50:	f000 8398 	beq.w	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a5a:	f200 8466 	bhi.w	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a64:	f000 8360 	beq.w	8004128 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a6e:	f200 845c 	bhi.w	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a78:	f000 8318 	beq.w	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a82:	f200 8452 	bhi.w	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a8c:	f000 82ca 	beq.w	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a96:	f200 8448 	bhi.w	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa0:	f000 827c 	beq.w	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aaa:	f200 843e 	bhi.w	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab4:	f000 8236 	beq.w	8003f24 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003abe:	f200 8434 	bhi.w	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ac8:	f000 81e4 	beq.w	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ad2:	f200 842a 	bhi.w	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b80      	cmp	r3, #128	@ 0x80
 8003ada:	f000 81b1 	beq.w	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b80      	cmp	r3, #128	@ 0x80
 8003ae2:	f200 8422 	bhi.w	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	d84b      	bhi.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 841b 	beq.w	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	2b1f      	cmp	r3, #31
 8003afa:	f200 8416 	bhi.w	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003afe:	a201      	add	r2, pc, #4	@ (adr r2, 8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>)
 8003b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b04:	08003b8f 	.word	0x08003b8f
 8003b08:	08003c01 	.word	0x08003c01
 8003b0c:	0800432b 	.word	0x0800432b
 8003b10:	08003c63 	.word	0x08003c63
 8003b14:	0800432b 	.word	0x0800432b
 8003b18:	0800432b 	.word	0x0800432b
 8003b1c:	0800432b 	.word	0x0800432b
 8003b20:	08003cc5 	.word	0x08003cc5
 8003b24:	0800432b 	.word	0x0800432b
 8003b28:	0800432b 	.word	0x0800432b
 8003b2c:	0800432b 	.word	0x0800432b
 8003b30:	0800432b 	.word	0x0800432b
 8003b34:	0800432b 	.word	0x0800432b
 8003b38:	0800432b 	.word	0x0800432b
 8003b3c:	0800432b 	.word	0x0800432b
 8003b40:	08003d27 	.word	0x08003d27
 8003b44:	0800432b 	.word	0x0800432b
 8003b48:	0800432b 	.word	0x0800432b
 8003b4c:	0800432b 	.word	0x0800432b
 8003b50:	0800432b 	.word	0x0800432b
 8003b54:	0800432b 	.word	0x0800432b
 8003b58:	0800432b 	.word	0x0800432b
 8003b5c:	0800432b 	.word	0x0800432b
 8003b60:	0800432b 	.word	0x0800432b
 8003b64:	0800432b 	.word	0x0800432b
 8003b68:	0800432b 	.word	0x0800432b
 8003b6c:	0800432b 	.word	0x0800432b
 8003b70:	0800432b 	.word	0x0800432b
 8003b74:	0800432b 	.word	0x0800432b
 8003b78:	0800432b 	.word	0x0800432b
 8003b7c:	0800432b 	.word	0x0800432b
 8003b80:	08003d8f 	.word	0x08003d8f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b40      	cmp	r3, #64	@ 0x40
 8003b88:	f000 8135 	beq.w	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
      break;

#endif /* QUADSPI */

    default:
      break;
 8003b8c:	e3cd      	b.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003b8e:	4b18      	ldr	r3, [pc, #96]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d103      	bne.n	8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        frequency = HAL_RCC_GetPCLK2Freq();
 8003ba0:	f7ff fc0e 	bl	80033c0 <HAL_RCC_GetPCLK2Freq>
 8003ba4:	61f8      	str	r0, [r7, #28]
      break;
 8003ba6:	e3c2      	b.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d103      	bne.n	8003bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
        frequency = HAL_RCC_GetSysClockFreq();
 8003bae:	f7ff fb83 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003bb2:	61f8      	str	r0, [r7, #28]
      break;
 8003bb4:	e3bb      	b.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bc2:	d105      	bne.n	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d102      	bne.n	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HSI_VALUE;
 8003bca:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003bcc:	61fb      	str	r3, [r7, #28]
      break;
 8003bce:	e3ae      	b.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003bd0:	4b07      	ldr	r3, [pc, #28]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	f040 83a7 	bne.w	800432e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	f040 83a3 	bne.w	800432e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
        frequency = LSE_VALUE;
 8003be8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bec:	61fb      	str	r3, [r7, #28]
      break;
 8003bee:	e39e      	b.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	0003d090 	.word	0x0003d090
 8003bf8:	00f42400 	.word	0x00f42400
 8003bfc:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003c00:	4ba2      	ldr	r3, [pc, #648]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c06:	f003 030c 	and.w	r3, r3, #12
 8003c0a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003c12:	f7ff fbbf 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8003c16:	61f8      	str	r0, [r7, #28]
      break;
 8003c18:	e38b      	b.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d103      	bne.n	8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
        frequency = HAL_RCC_GetSysClockFreq();
 8003c20:	f7ff fb4a 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003c24:	61f8      	str	r0, [r7, #28]
      break;
 8003c26:	e384      	b.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003c28:	4b98      	ldr	r3, [pc, #608]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c34:	d105      	bne.n	8003c42 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d102      	bne.n	8003c42 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
        frequency = HSI_VALUE;
 8003c3c:	4b94      	ldr	r3, [pc, #592]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003c3e:	61fb      	str	r3, [r7, #28]
      break;
 8003c40:	e377      	b.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003c42:	4b92      	ldr	r3, [pc, #584]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	f040 8370 	bne.w	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b0c      	cmp	r3, #12
 8003c56:	f040 836c 	bne.w	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
        frequency = LSE_VALUE;
 8003c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c5e:	61fb      	str	r3, [r7, #28]
      break;
 8003c60:	e367      	b.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003c62:	4b8a      	ldr	r3, [pc, #552]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c6c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d103      	bne.n	8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003c74:	f7ff fb8e 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8003c78:	61f8      	str	r0, [r7, #28]
      break;
 8003c7a:	e35c      	b.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	2b10      	cmp	r3, #16
 8003c80:	d103      	bne.n	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
        frequency = HAL_RCC_GetSysClockFreq();
 8003c82:	f7ff fb19 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003c86:	61f8      	str	r0, [r7, #28]
      break;
 8003c88:	e355      	b.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003c8a:	4b80      	ldr	r3, [pc, #512]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c96:	d105      	bne.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d102      	bne.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
        frequency = HSI_VALUE;
 8003c9e:	4b7c      	ldr	r3, [pc, #496]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003ca0:	61fb      	str	r3, [r7, #28]
      break;
 8003ca2:	e348      	b.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003ca4:	4b79      	ldr	r3, [pc, #484]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	f040 8341 	bne.w	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b30      	cmp	r3, #48	@ 0x30
 8003cb8:	f040 833d 	bne.w	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        frequency = LSE_VALUE;
 8003cbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cc0:	61fb      	str	r3, [r7, #28]
      break;
 8003cc2:	e338      	b.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003cc4:	4b71      	ldr	r3, [pc, #452]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003cce:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d103      	bne.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003cd6:	f7ff fb5d 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8003cda:	61f8      	str	r0, [r7, #28]
      break;
 8003cdc:	e32d      	b.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b40      	cmp	r3, #64	@ 0x40
 8003ce2:	d103      	bne.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        frequency = HAL_RCC_GetSysClockFreq();
 8003ce4:	f7ff fae8 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003ce8:	61f8      	str	r0, [r7, #28]
      break;
 8003cea:	e326      	b.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8003cec:	4b67      	ldr	r3, [pc, #412]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cf8:	d105      	bne.n	8003d06 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b80      	cmp	r3, #128	@ 0x80
 8003cfe:	d102      	bne.n	8003d06 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
        frequency = HSI_VALUE;
 8003d00:	4b63      	ldr	r3, [pc, #396]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003d02:	61fb      	str	r3, [r7, #28]
      break;
 8003d04:	e319      	b.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8003d06:	4b61      	ldr	r3, [pc, #388]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	f040 8312 	bne.w	800433a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d1a:	f040 830e 	bne.w	800433a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
        frequency = LSE_VALUE;
 8003d1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d22:	61fb      	str	r3, [r7, #28]
      break;
 8003d24:	e309      	b.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003d26:	4b59      	ldr	r3, [pc, #356]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d30:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d103      	bne.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003d38:	f7ff fb2c 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8003d3c:	61f8      	str	r0, [r7, #28]
      break;
 8003d3e:	e2fe      	b.n	800433e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d46:	d103      	bne.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
        frequency = HAL_RCC_GetSysClockFreq();
 8003d48:	f7ff fab6 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003d4c:	61f8      	str	r0, [r7, #28]
      break;
 8003d4e:	e2f6      	b.n	800433e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8003d50:	4b4e      	ldr	r3, [pc, #312]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d5c:	d106      	bne.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d64:	d102      	bne.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
        frequency = HSI_VALUE;
 8003d66:	4b4a      	ldr	r3, [pc, #296]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003d68:	61fb      	str	r3, [r7, #28]
      break;
 8003d6a:	e2e8      	b.n	800433e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8003d6c:	4b47      	ldr	r3, [pc, #284]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	f040 82e1 	bne.w	800433e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d82:	f040 82dc 	bne.w	800433e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
        frequency = LSE_VALUE;
 8003d86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d8a:	61fb      	str	r3, [r7, #28]
      break;
 8003d8c:	e2d7      	b.n	800433e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d98:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d103      	bne.n	8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003da0:	f7ff faf8 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8003da4:	61f8      	str	r0, [r7, #28]
      break;
 8003da6:	e2cc      	b.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dae:	d103      	bne.n	8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
        frequency = HAL_RCC_GetSysClockFreq();
 8003db0:	f7ff fa82 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003db4:	61f8      	str	r0, [r7, #28]
      break;
 8003db6:	e2c4      	b.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003db8:	4b34      	ldr	r3, [pc, #208]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dc4:	d106      	bne.n	8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dcc:	d102      	bne.n	8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
        frequency = HSI_VALUE;
 8003dce:	4b30      	ldr	r3, [pc, #192]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003dd0:	61fb      	str	r3, [r7, #28]
      break;
 8003dd2:	e2b6      	b.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8003dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	f040 82af 	bne.w	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003dea:	f040 82aa 	bne.w	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
        frequency = LSE_VALUE;
 8003dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003df2:	61fb      	str	r3, [r7, #28]
      break;
 8003df4:	e2a5      	b.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003df6:	4b25      	ldr	r3, [pc, #148]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003e00:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d103      	bne.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003e08:	f7ff fac4 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8003e0c:	61f8      	str	r0, [r7, #28]
      break;
 8003e0e:	e29a      	b.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e16:	d103      	bne.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        frequency = HAL_RCC_GetSysClockFreq();
 8003e18:	f7ff fa4e 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003e1c:	61f8      	str	r0, [r7, #28]
      break;
 8003e1e:	e292      	b.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8003e20:	4b1a      	ldr	r3, [pc, #104]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e2c:	f040 828b 	bne.w	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e36:	f040 8286 	bne.w	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
        frequency = HSI_VALUE;
 8003e3a:	4b15      	ldr	r3, [pc, #84]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003e3c:	61fb      	str	r3, [r7, #28]
      break;
 8003e3e:	e282      	b.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003e40:	4b12      	ldr	r3, [pc, #72]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e46:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003e4a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d103      	bne.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003e52:	f7ff fa9f 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8003e56:	61f8      	str	r0, [r7, #28]
      break;
 8003e58:	e277      	b.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e60:	d103      	bne.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x556>
        frequency = HAL_RCC_GetSysClockFreq();
 8003e62:	f7ff fa29 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003e66:	61f8      	str	r0, [r7, #28]
      break;
 8003e68:	e26f      	b.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8003e6a:	4b08      	ldr	r3, [pc, #32]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e76:	f040 8268 	bne.w	800434a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e80:	f040 8263 	bne.w	800434a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
        frequency = HSI_VALUE;
 8003e84:	4b02      	ldr	r3, [pc, #8]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003e86:	61fb      	str	r3, [r7, #28]
      break;
 8003e88:	e25f      	b.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8003e8a:	bf00      	nop
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	00f42400 	.word	0x00f42400
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003e94:	4ba0      	ldr	r3, [pc, #640]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e9e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d103      	bne.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003ea6:	f7ff fa75 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8003eaa:	61f8      	str	r0, [r7, #28]
      break;
 8003eac:	e24f      	b.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb4:	d103      	bne.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
        frequency = HAL_RCC_GetSysClockFreq();
 8003eb6:	f7ff f9ff 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003eba:	61f8      	str	r0, [r7, #28]
      break;
 8003ebc:	e247      	b.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8003ebe:	4b96      	ldr	r3, [pc, #600]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eca:	f040 8240 	bne.w	800434e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ed4:	f040 823b 	bne.w	800434e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        frequency = HSI_VALUE;
 8003ed8:	4b90      	ldr	r3, [pc, #576]	@ (800411c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8003eda:	61fb      	str	r3, [r7, #28]
      break;
 8003edc:	e237      	b.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8003ede:	4b8e      	ldr	r3, [pc, #568]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003ee0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d103      	bne.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003ef0:	f7ff fa50 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8003ef4:	61f8      	str	r0, [r7, #28]
      break;
 8003ef6:	e22c      	b.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if(srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d103      	bne.n	8003f06 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        frequency = HAL_RCC_GetSysClockFreq();
 8003efe:	f7ff f9db 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003f02:	61f8      	str	r0, [r7, #28]
      break;
 8003f04:	e225      	b.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8003f06:	4b84      	ldr	r3, [pc, #528]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f12:	f040 821e 	bne.w	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	f040 821a 	bne.w	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
        frequency = HSI_VALUE;
 8003f1e:	4b7f      	ldr	r3, [pc, #508]	@ (800411c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8003f20:	61fb      	str	r3, [r7, #28]
      break;
 8003f22:	e216      	b.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003f24:	4b7c      	ldr	r3, [pc, #496]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003f2e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d103      	bne.n	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003f36:	f7ff fa2d 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8003f3a:	61f8      	str	r0, [r7, #28]
      break;
 8003f3c:	e20b      	b.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8003f3e:	4b76      	ldr	r3, [pc, #472]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d107      	bne.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f52:	d103      	bne.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x648>
        frequency = LSI_VALUE;
 8003f54:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	e01e      	b.n	8003f9a <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8003f5c:	4b6e      	ldr	r3, [pc, #440]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f68:	d106      	bne.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f70:	d102      	bne.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        frequency = HSI_VALUE;
 8003f72:	4b6a      	ldr	r3, [pc, #424]	@ (800411c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	e010      	b.n	8003f9a <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8003f78:	4b67      	ldr	r3, [pc, #412]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	f040 81e7 	bne.w	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003f8e:	f040 81e2 	bne.w	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
        frequency = LSE_VALUE;
 8003f92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f96:	61fb      	str	r3, [r7, #28]
      break;
 8003f98:	e1dd      	b.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8003f9a:	e1dc      	b.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003f9c:	4b5e      	ldr	r3, [pc, #376]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003fa6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
        frequency = HAL_RCC_GetSysClockFreq();
 8003fae:	f7ff f983 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003fb2:	61f8      	str	r0, [r7, #28]
      break;
 8003fb4:	e1d1      	b.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fbc:	d11b      	bne.n	8003ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8003fbe:	4b56      	ldr	r3, [pc, #344]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 81c7 	beq.w	800435a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003fcc:	4b52      	ldr	r3, [pc, #328]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	0a1b      	lsrs	r3, r3, #8
 8003fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fd6:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	fb03 f202 	mul.w	r2, r3, r2
 8003fe0:	4b4d      	ldr	r3, [pc, #308]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	0d5b      	lsrs	r3, r3, #21
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	3301      	adds	r3, #1
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff2:	61fb      	str	r3, [r7, #28]
      break;
 8003ff4:	e1b1      	b.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ffc:	d102      	bne.n	8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        frequency = EXTERNAL_CLOCK_VALUE;
 8003ffe:	4b48      	ldr	r3, [pc, #288]	@ (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004000:	61fb      	str	r3, [r7, #28]
      break;
 8004002:	e1aa      	b.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 8004004:	4b44      	ldr	r3, [pc, #272]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004010:	f040 81a3 	bne.w	800435a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800401a:	f040 819e 	bne.w	800435a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
        frequency = HSI_VALUE;
 800401e:	4b3f      	ldr	r3, [pc, #252]	@ (800411c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004020:	61fb      	str	r3, [r7, #28]
      break;
 8004022:	e19a      	b.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004024:	4b3c      	ldr	r3, [pc, #240]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800402e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d103      	bne.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
        frequency = HAL_RCC_GetSysClockFreq();
 8004036:	f7ff f93f 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 800403a:	61f8      	str	r0, [r7, #28]
      break;
 800403c:	e18f      	b.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004044:	d11b      	bne.n	800407e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8004046:	4b34      	ldr	r3, [pc, #208]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 8185 	beq.w	800435e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004054:	4b30      	ldr	r3, [pc, #192]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	0a1b      	lsrs	r3, r3, #8
 800405a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800405e:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	fb03 f202 	mul.w	r2, r3, r2
 8004068:	4b2b      	ldr	r3, [pc, #172]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	0d5b      	lsrs	r3, r3, #21
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	3301      	adds	r3, #1
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	fbb2 f3f3 	udiv	r3, r2, r3
 800407a:	61fb      	str	r3, [r7, #28]
      break;
 800407c:	e16f      	b.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004084:	d102      	bne.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004086:	4b26      	ldr	r3, [pc, #152]	@ (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004088:	61fb      	str	r3, [r7, #28]
      break;
 800408a:	e168      	b.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 800408c:	4b22      	ldr	r3, [pc, #136]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004098:	f040 8161 	bne.w	800435e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80040a2:	f040 815c 	bne.w	800435e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
        frequency = HSI_VALUE;
 80040a6:	4b1d      	ldr	r3, [pc, #116]	@ (800411c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80040a8:	61fb      	str	r3, [r7, #28]
      break;
 80040aa:	e158      	b.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80040ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80040b6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040be:	d103      	bne.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
        frequency = HAL_RCC_GetPCLK1Freq();
 80040c0:	f7ff f968 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 80040c4:	61f8      	str	r0, [r7, #28]
      break;
 80040c6:	e14c      	b.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d102      	bne.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
        frequency = HSE_VALUE;
 80040ce:	4b15      	ldr	r3, [pc, #84]	@ (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80040d0:	61fb      	str	r3, [r7, #28]
      break;
 80040d2:	e146      	b.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040da:	f040 8142 	bne.w	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80040de:	4b0e      	ldr	r3, [pc, #56]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 813b 	beq.w	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80040ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	0a1b      	lsrs	r3, r3, #8
 80040f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040f6:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	fb03 f202 	mul.w	r2, r3, r2
 8004100:	4b05      	ldr	r3, [pc, #20]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	0d5b      	lsrs	r3, r3, #21
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	3301      	adds	r3, #1
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004112:	61fb      	str	r3, [r7, #28]
      break;
 8004114:	e125      	b.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8004116:	bf00      	nop
 8004118:	40021000 	.word	0x40021000
 800411c:	00f42400 	.word	0x00f42400
 8004120:	00bb8000 	.word	0x00bb8000
 8004124:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004128:	4b96      	ldr	r3, [pc, #600]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004132:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800413a:	d114      	bne.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800413c:	4b91      	ldr	r3, [pc, #580]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	0a1b      	lsrs	r3, r3, #8
 8004142:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004146:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	fb03 f202 	mul.w	r2, r3, r2
 8004150:	4b8c      	ldr	r3, [pc, #560]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	0d5b      	lsrs	r3, r3, #21
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	3301      	adds	r3, #1
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004162:	61fb      	str	r3, [r7, #28]
      break;
 8004164:	e0ff      	b.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 8004166:	4b87      	ldr	r3, [pc, #540]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004168:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b02      	cmp	r3, #2
 8004172:	f040 80f8 	bne.w	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	f040 80f4 	bne.w	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
        frequency = HSI48_VALUE;
 800417e:	4b82      	ldr	r3, [pc, #520]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8004180:	61fb      	str	r3, [r7, #28]
      break;
 8004182:	e0f0      	b.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004184:	4b7f      	ldr	r3, [pc, #508]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800418e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004196:	d114      	bne.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004198:	4b7a      	ldr	r3, [pc, #488]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	0a1b      	lsrs	r3, r3, #8
 800419e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041a2:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	fb03 f202 	mul.w	r2, r3, r2
 80041ac:	4b75      	ldr	r3, [pc, #468]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	0d5b      	lsrs	r3, r3, #21
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	3301      	adds	r3, #1
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80041be:	61fb      	str	r3, [r7, #28]
      break;
 80041c0:	e0d3      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 80041c2:	4b70      	ldr	r3, [pc, #448]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80041c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	f040 80cc 	bne.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f040 80c8 	bne.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
        frequency = HSI48_VALUE;
 80041da:	4b6b      	ldr	r3, [pc, #428]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80041dc:	61fb      	str	r3, [r7, #28]
      break;
 80041de:	e0c4      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 80041e0:	4b68      	ldr	r3, [pc, #416]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80041ea:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041f2:	d129      	bne.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 80041f4:	4b63      	ldr	r3, [pc, #396]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80b6 	beq.w	800436e <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004202:	4b60      	ldr	r3, [pc, #384]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800420c:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800420e:	4b5d      	ldr	r3, [pc, #372]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	0edb      	lsrs	r3, r3, #27
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004220:	4b58      	ldr	r3, [pc, #352]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
              pllp = 17U;
 800422c:	2311      	movs	r3, #17
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	e001      	b.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
              pllp = 7U;
 8004232:	2307      	movs	r3, #7
 8004234:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	fb03 f202 	mul.w	r2, r3, r2
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	61fb      	str	r3, [r7, #28]
      break;
 8004246:	e092      	b.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800424e:	f040 808e 	bne.w	800436e <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
        frequency = HAL_RCC_GetSysClockFreq();
 8004252:	f7ff f831 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8004256:	61f8      	str	r0, [r7, #28]
      break;
 8004258:	e089      	b.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 800425a:	4b4a      	ldr	r3, [pc, #296]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004260:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004264:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800426c:	d128      	bne.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 800426e:	4b45      	ldr	r3, [pc, #276]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d07b      	beq.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800427a:	4b42      	ldr	r3, [pc, #264]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	0a1b      	lsrs	r3, r3, #8
 8004280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004284:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004286:	4b3f      	ldr	r3, [pc, #252]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	0edb      	lsrs	r3, r3, #27
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004298:	4b3a      	ldr	r3, [pc, #232]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <HAL_RCCEx_GetPeriphCLKFreq+0x996>
              pllp = 17U;
 80042a4:	2311      	movs	r3, #17
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	e001      	b.n	80042ae <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
              pllp = 7U;
 80042aa:	2307      	movs	r3, #7
 80042ac:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	fb03 f202 	mul.w	r2, r3, r2
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042bc:	61fb      	str	r3, [r7, #28]
      break;
 80042be:	e058      	b.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042c6:	d154      	bne.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
        frequency = HAL_RCC_GetSysClockFreq();
 80042c8:	f7fe fff6 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 80042cc:	61f8      	str	r0, [r7, #28]
      break;
 80042ce:	e050      	b.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 80042d0:	4b2c      	ldr	r3, [pc, #176]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80042d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042d6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80042da:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042e2:	d114      	bne.n	800430e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80042e4:	4b27      	ldr	r3, [pc, #156]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	0a1b      	lsrs	r3, r3, #8
 80042ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ee:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	fb03 f202 	mul.w	r2, r3, r2
 80042f8:	4b22      	ldr	r3, [pc, #136]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	0d5b      	lsrs	r3, r3, #21
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	3301      	adds	r3, #1
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	fbb2 f3f3 	udiv	r3, r2, r3
 800430a:	61fb      	str	r3, [r7, #28]
      break;
 800430c:	e033      	b.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004314:	d102      	bne.n	800431c <HAL_RCCEx_GetPeriphCLKFreq+0xa08>
        frequency = HSI_VALUE;
 8004316:	4b1d      	ldr	r3, [pc, #116]	@ (800438c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8004318:	61fb      	str	r3, [r7, #28]
      break;
 800431a:	e02c      	b.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d129      	bne.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
        frequency = HAL_RCC_GetSysClockFreq();
 8004322:	f7fe ffc9 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8004326:	61f8      	str	r0, [r7, #28]
      break;
 8004328:	e025      	b.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      break;
 800432a:	bf00      	nop
 800432c:	e024      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800432e:	bf00      	nop
 8004330:	e022      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004332:	bf00      	nop
 8004334:	e020      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004336:	bf00      	nop
 8004338:	e01e      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800433a:	bf00      	nop
 800433c:	e01c      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800433e:	bf00      	nop
 8004340:	e01a      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004342:	bf00      	nop
 8004344:	e018      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004346:	bf00      	nop
 8004348:	e016      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800434a:	bf00      	nop
 800434c:	e014      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800434e:	bf00      	nop
 8004350:	e012      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004352:	bf00      	nop
 8004354:	e010      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004356:	bf00      	nop
 8004358:	e00e      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800435a:	bf00      	nop
 800435c:	e00c      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800435e:	bf00      	nop
 8004360:	e00a      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004362:	bf00      	nop
 8004364:	e008      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004366:	bf00      	nop
 8004368:	e006      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800436a:	bf00      	nop
 800436c:	e004      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800436e:	bf00      	nop
 8004370:	e002      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004372:	bf00      	nop
 8004374:	e000      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004376:	bf00      	nop
    }
  }

  return(frequency);
 8004378:	69fb      	ldr	r3, [r7, #28]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3720      	adds	r7, #32
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000
 8004388:	02dc6c00 	.word	0x02dc6c00
 800438c:	00f42400 	.word	0x00f42400

08004390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e049      	b.n	8004436 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fc ff16 	bl	80011e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3304      	adds	r3, #4
 80043cc:	4619      	mov	r1, r3
 80043ce:	4610      	mov	r0, r2
 80043d0:	f000 feda 	bl	8005188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d001      	beq.n	8004458 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e04c      	b.n	80044f2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a26      	ldr	r2, [pc, #152]	@ (8004500 <HAL_TIM_Base_Start+0xc0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d022      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004472:	d01d      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a22      	ldr	r2, [pc, #136]	@ (8004504 <HAL_TIM_Base_Start+0xc4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d018      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a21      	ldr	r2, [pc, #132]	@ (8004508 <HAL_TIM_Base_Start+0xc8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d013      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1f      	ldr	r2, [pc, #124]	@ (800450c <HAL_TIM_Base_Start+0xcc>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00e      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1e      	ldr	r2, [pc, #120]	@ (8004510 <HAL_TIM_Base_Start+0xd0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d009      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004514 <HAL_TIM_Base_Start+0xd4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d004      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004518 <HAL_TIM_Base_Start+0xd8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d115      	bne.n	80044dc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	4b19      	ldr	r3, [pc, #100]	@ (800451c <HAL_TIM_Base_Start+0xdc>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b06      	cmp	r3, #6
 80044c0:	d015      	beq.n	80044ee <HAL_TIM_Base_Start+0xae>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c8:	d011      	beq.n	80044ee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0201 	orr.w	r2, r2, #1
 80044d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044da:	e008      	b.n	80044ee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	e000      	b.n	80044f0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40012c00 	.word	0x40012c00
 8004504:	40000400 	.word	0x40000400
 8004508:	40000800 	.word	0x40000800
 800450c:	40000c00 	.word	0x40000c00
 8004510:	40013400 	.word	0x40013400
 8004514:	40014000 	.word	0x40014000
 8004518:	40015000 	.word	0x40015000
 800451c:	00010007 	.word	0x00010007

08004520 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e049      	b.n	80045c6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f89d 	bl	8004686 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3304      	adds	r3, #4
 800455c:	4619      	mov	r1, r3
 800455e:	4610      	mov	r0, r2
 8004560:	f000 fe12 	bl	8005188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2202      	movs	r2, #2
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6a1a      	ldr	r2, [r3, #32]
 80045e4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80045e8:	4013      	ands	r3, r2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10f      	bne.n	800460e <HAL_TIM_OC_DeInit+0x40>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6a1a      	ldr	r2, [r3, #32]
 80045f4:	f244 4344 	movw	r3, #17476	@ 0x4444
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d107      	bne.n	800460e <HAL_TIM_OC_DeInit+0x40>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0201 	bic.w	r2, r2, #1
 800460c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f843 	bl	800469a <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
	...

080046b0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d109      	bne.n	80046d4 <HAL_TIM_OC_Start+0x24>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	bf14      	ite	ne
 80046cc:	2301      	movne	r3, #1
 80046ce:	2300      	moveq	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	e03c      	b.n	800474e <HAL_TIM_OC_Start+0x9e>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d109      	bne.n	80046ee <HAL_TIM_OC_Start+0x3e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	bf14      	ite	ne
 80046e6:	2301      	movne	r3, #1
 80046e8:	2300      	moveq	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	e02f      	b.n	800474e <HAL_TIM_OC_Start+0x9e>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d109      	bne.n	8004708 <HAL_TIM_OC_Start+0x58>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	bf14      	ite	ne
 8004700:	2301      	movne	r3, #1
 8004702:	2300      	moveq	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	e022      	b.n	800474e <HAL_TIM_OC_Start+0x9e>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b0c      	cmp	r3, #12
 800470c:	d109      	bne.n	8004722 <HAL_TIM_OC_Start+0x72>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b01      	cmp	r3, #1
 8004718:	bf14      	ite	ne
 800471a:	2301      	movne	r3, #1
 800471c:	2300      	moveq	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	e015      	b.n	800474e <HAL_TIM_OC_Start+0x9e>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b10      	cmp	r3, #16
 8004726:	d109      	bne.n	800473c <HAL_TIM_OC_Start+0x8c>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b01      	cmp	r3, #1
 8004732:	bf14      	ite	ne
 8004734:	2301      	movne	r3, #1
 8004736:	2300      	moveq	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	e008      	b.n	800474e <HAL_TIM_OC_Start+0x9e>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	bf14      	ite	ne
 8004748:	2301      	movne	r3, #1
 800474a:	2300      	moveq	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e0a6      	b.n	80048a4 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d104      	bne.n	8004766 <HAL_TIM_OC_Start+0xb6>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004764:	e023      	b.n	80047ae <HAL_TIM_OC_Start+0xfe>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b04      	cmp	r3, #4
 800476a:	d104      	bne.n	8004776 <HAL_TIM_OC_Start+0xc6>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004774:	e01b      	b.n	80047ae <HAL_TIM_OC_Start+0xfe>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d104      	bne.n	8004786 <HAL_TIM_OC_Start+0xd6>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004784:	e013      	b.n	80047ae <HAL_TIM_OC_Start+0xfe>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b0c      	cmp	r3, #12
 800478a:	d104      	bne.n	8004796 <HAL_TIM_OC_Start+0xe6>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004794:	e00b      	b.n	80047ae <HAL_TIM_OC_Start+0xfe>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b10      	cmp	r3, #16
 800479a:	d104      	bne.n	80047a6 <HAL_TIM_OC_Start+0xf6>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047a4:	e003      	b.n	80047ae <HAL_TIM_OC_Start+0xfe>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2202      	movs	r2, #2
 80047aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2201      	movs	r2, #1
 80047b4:	6839      	ldr	r1, [r7, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f001 fa40 	bl	8005c3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a3a      	ldr	r2, [pc, #232]	@ (80048ac <HAL_TIM_OC_Start+0x1fc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d018      	beq.n	80047f8 <HAL_TIM_OC_Start+0x148>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a39      	ldr	r2, [pc, #228]	@ (80048b0 <HAL_TIM_OC_Start+0x200>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <HAL_TIM_OC_Start+0x148>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a37      	ldr	r2, [pc, #220]	@ (80048b4 <HAL_TIM_OC_Start+0x204>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00e      	beq.n	80047f8 <HAL_TIM_OC_Start+0x148>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a36      	ldr	r2, [pc, #216]	@ (80048b8 <HAL_TIM_OC_Start+0x208>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d009      	beq.n	80047f8 <HAL_TIM_OC_Start+0x148>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a34      	ldr	r2, [pc, #208]	@ (80048bc <HAL_TIM_OC_Start+0x20c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_TIM_OC_Start+0x148>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a33      	ldr	r2, [pc, #204]	@ (80048c0 <HAL_TIM_OC_Start+0x210>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d101      	bne.n	80047fc <HAL_TIM_OC_Start+0x14c>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <HAL_TIM_OC_Start+0x14e>
 80047fc:	2300      	movs	r3, #0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d007      	beq.n	8004812 <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004810:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a25      	ldr	r2, [pc, #148]	@ (80048ac <HAL_TIM_OC_Start+0x1fc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d022      	beq.n	8004862 <HAL_TIM_OC_Start+0x1b2>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004824:	d01d      	beq.n	8004862 <HAL_TIM_OC_Start+0x1b2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a26      	ldr	r2, [pc, #152]	@ (80048c4 <HAL_TIM_OC_Start+0x214>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d018      	beq.n	8004862 <HAL_TIM_OC_Start+0x1b2>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a24      	ldr	r2, [pc, #144]	@ (80048c8 <HAL_TIM_OC_Start+0x218>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d013      	beq.n	8004862 <HAL_TIM_OC_Start+0x1b2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a23      	ldr	r2, [pc, #140]	@ (80048cc <HAL_TIM_OC_Start+0x21c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00e      	beq.n	8004862 <HAL_TIM_OC_Start+0x1b2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a19      	ldr	r2, [pc, #100]	@ (80048b0 <HAL_TIM_OC_Start+0x200>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d009      	beq.n	8004862 <HAL_TIM_OC_Start+0x1b2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a18      	ldr	r2, [pc, #96]	@ (80048b4 <HAL_TIM_OC_Start+0x204>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d004      	beq.n	8004862 <HAL_TIM_OC_Start+0x1b2>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a18      	ldr	r2, [pc, #96]	@ (80048c0 <HAL_TIM_OC_Start+0x210>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d115      	bne.n	800488e <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	4b19      	ldr	r3, [pc, #100]	@ (80048d0 <HAL_TIM_OC_Start+0x220>)
 800486a:	4013      	ands	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b06      	cmp	r3, #6
 8004872:	d015      	beq.n	80048a0 <HAL_TIM_OC_Start+0x1f0>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800487a:	d011      	beq.n	80048a0 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488c:	e008      	b.n	80048a0 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0201 	orr.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e000      	b.n	80048a2 <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40012c00 	.word	0x40012c00
 80048b0:	40013400 	.word	0x40013400
 80048b4:	40014000 	.word	0x40014000
 80048b8:	40014400 	.word	0x40014400
 80048bc:	40014800 	.word	0x40014800
 80048c0:	40015000 	.word	0x40015000
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800
 80048cc:	40000c00 	.word	0x40000c00
 80048d0:	00010007 	.word	0x00010007

080048d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e049      	b.n	800497a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f841 	bl	8004982 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3304      	adds	r3, #4
 8004910:	4619      	mov	r1, r3
 8004912:	4610      	mov	r0, r2
 8004914:	f000 fc38 	bl	8005188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d109      	bne.n	80049bc <HAL_TIM_PWM_Start+0x24>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	bf14      	ite	ne
 80049b4:	2301      	movne	r3, #1
 80049b6:	2300      	moveq	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	e03c      	b.n	8004a36 <HAL_TIM_PWM_Start+0x9e>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d109      	bne.n	80049d6 <HAL_TIM_PWM_Start+0x3e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	bf14      	ite	ne
 80049ce:	2301      	movne	r3, #1
 80049d0:	2300      	moveq	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	e02f      	b.n	8004a36 <HAL_TIM_PWM_Start+0x9e>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d109      	bne.n	80049f0 <HAL_TIM_PWM_Start+0x58>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	bf14      	ite	ne
 80049e8:	2301      	movne	r3, #1
 80049ea:	2300      	moveq	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	e022      	b.n	8004a36 <HAL_TIM_PWM_Start+0x9e>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b0c      	cmp	r3, #12
 80049f4:	d109      	bne.n	8004a0a <HAL_TIM_PWM_Start+0x72>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	bf14      	ite	ne
 8004a02:	2301      	movne	r3, #1
 8004a04:	2300      	moveq	r3, #0
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	e015      	b.n	8004a36 <HAL_TIM_PWM_Start+0x9e>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b10      	cmp	r3, #16
 8004a0e:	d109      	bne.n	8004a24 <HAL_TIM_PWM_Start+0x8c>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	bf14      	ite	ne
 8004a1c:	2301      	movne	r3, #1
 8004a1e:	2300      	moveq	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	e008      	b.n	8004a36 <HAL_TIM_PWM_Start+0x9e>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	bf14      	ite	ne
 8004a30:	2301      	movne	r3, #1
 8004a32:	2300      	moveq	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e0a6      	b.n	8004b8c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <HAL_TIM_PWM_Start+0xb6>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a4c:	e023      	b.n	8004a96 <HAL_TIM_PWM_Start+0xfe>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d104      	bne.n	8004a5e <HAL_TIM_PWM_Start+0xc6>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a5c:	e01b      	b.n	8004a96 <HAL_TIM_PWM_Start+0xfe>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d104      	bne.n	8004a6e <HAL_TIM_PWM_Start+0xd6>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a6c:	e013      	b.n	8004a96 <HAL_TIM_PWM_Start+0xfe>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b0c      	cmp	r3, #12
 8004a72:	d104      	bne.n	8004a7e <HAL_TIM_PWM_Start+0xe6>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a7c:	e00b      	b.n	8004a96 <HAL_TIM_PWM_Start+0xfe>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b10      	cmp	r3, #16
 8004a82:	d104      	bne.n	8004a8e <HAL_TIM_PWM_Start+0xf6>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a8c:	e003      	b.n	8004a96 <HAL_TIM_PWM_Start+0xfe>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2202      	movs	r2, #2
 8004a92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	6839      	ldr	r1, [r7, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f001 f8cc 	bl	8005c3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a3a      	ldr	r2, [pc, #232]	@ (8004b94 <HAL_TIM_PWM_Start+0x1fc>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d018      	beq.n	8004ae0 <HAL_TIM_PWM_Start+0x148>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a39      	ldr	r2, [pc, #228]	@ (8004b98 <HAL_TIM_PWM_Start+0x200>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d013      	beq.n	8004ae0 <HAL_TIM_PWM_Start+0x148>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a37      	ldr	r2, [pc, #220]	@ (8004b9c <HAL_TIM_PWM_Start+0x204>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00e      	beq.n	8004ae0 <HAL_TIM_PWM_Start+0x148>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a36      	ldr	r2, [pc, #216]	@ (8004ba0 <HAL_TIM_PWM_Start+0x208>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d009      	beq.n	8004ae0 <HAL_TIM_PWM_Start+0x148>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a34      	ldr	r2, [pc, #208]	@ (8004ba4 <HAL_TIM_PWM_Start+0x20c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d004      	beq.n	8004ae0 <HAL_TIM_PWM_Start+0x148>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a33      	ldr	r2, [pc, #204]	@ (8004ba8 <HAL_TIM_PWM_Start+0x210>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d101      	bne.n	8004ae4 <HAL_TIM_PWM_Start+0x14c>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <HAL_TIM_PWM_Start+0x14e>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004af8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a25      	ldr	r2, [pc, #148]	@ (8004b94 <HAL_TIM_PWM_Start+0x1fc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d022      	beq.n	8004b4a <HAL_TIM_PWM_Start+0x1b2>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b0c:	d01d      	beq.n	8004b4a <HAL_TIM_PWM_Start+0x1b2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a26      	ldr	r2, [pc, #152]	@ (8004bac <HAL_TIM_PWM_Start+0x214>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d018      	beq.n	8004b4a <HAL_TIM_PWM_Start+0x1b2>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a24      	ldr	r2, [pc, #144]	@ (8004bb0 <HAL_TIM_PWM_Start+0x218>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d013      	beq.n	8004b4a <HAL_TIM_PWM_Start+0x1b2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a23      	ldr	r2, [pc, #140]	@ (8004bb4 <HAL_TIM_PWM_Start+0x21c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00e      	beq.n	8004b4a <HAL_TIM_PWM_Start+0x1b2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a19      	ldr	r2, [pc, #100]	@ (8004b98 <HAL_TIM_PWM_Start+0x200>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d009      	beq.n	8004b4a <HAL_TIM_PWM_Start+0x1b2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a18      	ldr	r2, [pc, #96]	@ (8004b9c <HAL_TIM_PWM_Start+0x204>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d004      	beq.n	8004b4a <HAL_TIM_PWM_Start+0x1b2>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a18      	ldr	r2, [pc, #96]	@ (8004ba8 <HAL_TIM_PWM_Start+0x210>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d115      	bne.n	8004b76 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	4b19      	ldr	r3, [pc, #100]	@ (8004bb8 <HAL_TIM_PWM_Start+0x220>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b06      	cmp	r3, #6
 8004b5a:	d015      	beq.n	8004b88 <HAL_TIM_PWM_Start+0x1f0>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b62:	d011      	beq.n	8004b88 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b74:	e008      	b.n	8004b88 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0201 	orr.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	e000      	b.n	8004b8a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	40013400 	.word	0x40013400
 8004b9c:	40014000 	.word	0x40014000
 8004ba0:	40014400 	.word	0x40014400
 8004ba4:	40014800 	.word	0x40014800
 8004ba8:	40015000 	.word	0x40015000
 8004bac:	40000400 	.word	0x40000400
 8004bb0:	40000800 	.word	0x40000800
 8004bb4:	40000c00 	.word	0x40000c00
 8004bb8:	00010007 	.word	0x00010007

08004bbc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <HAL_TIM_OC_ConfigChannel+0x1e>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e066      	b.n	8004ca8 <HAL_TIM_OC_ConfigChannel+0xec>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b14      	cmp	r3, #20
 8004be6:	d857      	bhi.n	8004c98 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004be8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bee:	bf00      	nop
 8004bf0:	08004c45 	.word	0x08004c45
 8004bf4:	08004c99 	.word	0x08004c99
 8004bf8:	08004c99 	.word	0x08004c99
 8004bfc:	08004c99 	.word	0x08004c99
 8004c00:	08004c53 	.word	0x08004c53
 8004c04:	08004c99 	.word	0x08004c99
 8004c08:	08004c99 	.word	0x08004c99
 8004c0c:	08004c99 	.word	0x08004c99
 8004c10:	08004c61 	.word	0x08004c61
 8004c14:	08004c99 	.word	0x08004c99
 8004c18:	08004c99 	.word	0x08004c99
 8004c1c:	08004c99 	.word	0x08004c99
 8004c20:	08004c6f 	.word	0x08004c6f
 8004c24:	08004c99 	.word	0x08004c99
 8004c28:	08004c99 	.word	0x08004c99
 8004c2c:	08004c99 	.word	0x08004c99
 8004c30:	08004c7d 	.word	0x08004c7d
 8004c34:	08004c99 	.word	0x08004c99
 8004c38:	08004c99 	.word	0x08004c99
 8004c3c:	08004c99 	.word	0x08004c99
 8004c40:	08004c8b 	.word	0x08004c8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fb50 	bl	80052f0 <TIM_OC1_SetConfig>
      break;
 8004c50:	e025      	b.n	8004c9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fbe3 	bl	8005424 <TIM_OC2_SetConfig>
      break;
 8004c5e:	e01e      	b.n	8004c9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fc70 	bl	800554c <TIM_OC3_SetConfig>
      break;
 8004c6c:	e017      	b.n	8004c9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 fcfb 	bl	8005670 <TIM_OC4_SetConfig>
      break;
 8004c7a:	e010      	b.n	8004c9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fd88 	bl	8005798 <TIM_OC5_SetConfig>
      break;
 8004c88:	e009      	b.n	8004c9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fdeb 	bl	800586c <TIM_OC6_SetConfig>
      break;
 8004c96:	e002      	b.n	8004c9e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e0ff      	b.n	8004ece <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b14      	cmp	r3, #20
 8004cda:	f200 80f0 	bhi.w	8004ebe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004cde:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce4:	08004d39 	.word	0x08004d39
 8004ce8:	08004ebf 	.word	0x08004ebf
 8004cec:	08004ebf 	.word	0x08004ebf
 8004cf0:	08004ebf 	.word	0x08004ebf
 8004cf4:	08004d79 	.word	0x08004d79
 8004cf8:	08004ebf 	.word	0x08004ebf
 8004cfc:	08004ebf 	.word	0x08004ebf
 8004d00:	08004ebf 	.word	0x08004ebf
 8004d04:	08004dbb 	.word	0x08004dbb
 8004d08:	08004ebf 	.word	0x08004ebf
 8004d0c:	08004ebf 	.word	0x08004ebf
 8004d10:	08004ebf 	.word	0x08004ebf
 8004d14:	08004dfb 	.word	0x08004dfb
 8004d18:	08004ebf 	.word	0x08004ebf
 8004d1c:	08004ebf 	.word	0x08004ebf
 8004d20:	08004ebf 	.word	0x08004ebf
 8004d24:	08004e3d 	.word	0x08004e3d
 8004d28:	08004ebf 	.word	0x08004ebf
 8004d2c:	08004ebf 	.word	0x08004ebf
 8004d30:	08004ebf 	.word	0x08004ebf
 8004d34:	08004e7d 	.word	0x08004e7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fad6 	bl	80052f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0208 	orr.w	r2, r2, #8
 8004d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0204 	bic.w	r2, r2, #4
 8004d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6999      	ldr	r1, [r3, #24]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	691a      	ldr	r2, [r3, #16]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	619a      	str	r2, [r3, #24]
      break;
 8004d76:	e0a5      	b.n	8004ec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fb50 	bl	8005424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6999      	ldr	r1, [r3, #24]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	021a      	lsls	r2, r3, #8
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	619a      	str	r2, [r3, #24]
      break;
 8004db8:	e084      	b.n	8004ec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68b9      	ldr	r1, [r7, #8]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fbc3 	bl	800554c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0208 	orr.w	r2, r2, #8
 8004dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69da      	ldr	r2, [r3, #28]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0204 	bic.w	r2, r2, #4
 8004de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69d9      	ldr	r1, [r3, #28]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	61da      	str	r2, [r3, #28]
      break;
 8004df8:	e064      	b.n	8004ec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fc35 	bl	8005670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69d9      	ldr	r1, [r3, #28]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	021a      	lsls	r2, r3, #8
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	61da      	str	r2, [r3, #28]
      break;
 8004e3a:	e043      	b.n	8004ec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68b9      	ldr	r1, [r7, #8]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fca8 	bl	8005798 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0208 	orr.w	r2, r2, #8
 8004e56:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0204 	bic.w	r2, r2, #4
 8004e66:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	691a      	ldr	r2, [r3, #16]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004e7a:	e023      	b.n	8004ec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fcf2 	bl	800586c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e96:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	021a      	lsls	r2, r3, #8
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004ebc:	e002      	b.n	8004ec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop

08004ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e0f6      	b.n	80050e2 <HAL_TIM_ConfigClockSource+0x20a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004f12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a6f      	ldr	r2, [pc, #444]	@ (80050ec <HAL_TIM_ConfigClockSource+0x214>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	f000 80c1 	beq.w	80050b6 <HAL_TIM_ConfigClockSource+0x1de>
 8004f34:	4a6d      	ldr	r2, [pc, #436]	@ (80050ec <HAL_TIM_ConfigClockSource+0x214>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	f200 80c6 	bhi.w	80050c8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f3c:	4a6c      	ldr	r2, [pc, #432]	@ (80050f0 <HAL_TIM_ConfigClockSource+0x218>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	f000 80b9 	beq.w	80050b6 <HAL_TIM_ConfigClockSource+0x1de>
 8004f44:	4a6a      	ldr	r2, [pc, #424]	@ (80050f0 <HAL_TIM_ConfigClockSource+0x218>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	f200 80be 	bhi.w	80050c8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f4c:	4a69      	ldr	r2, [pc, #420]	@ (80050f4 <HAL_TIM_ConfigClockSource+0x21c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	f000 80b1 	beq.w	80050b6 <HAL_TIM_ConfigClockSource+0x1de>
 8004f54:	4a67      	ldr	r2, [pc, #412]	@ (80050f4 <HAL_TIM_ConfigClockSource+0x21c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	f200 80b6 	bhi.w	80050c8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f5c:	4a66      	ldr	r2, [pc, #408]	@ (80050f8 <HAL_TIM_ConfigClockSource+0x220>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	f000 80a9 	beq.w	80050b6 <HAL_TIM_ConfigClockSource+0x1de>
 8004f64:	4a64      	ldr	r2, [pc, #400]	@ (80050f8 <HAL_TIM_ConfigClockSource+0x220>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	f200 80ae 	bhi.w	80050c8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f6c:	4a63      	ldr	r2, [pc, #396]	@ (80050fc <HAL_TIM_ConfigClockSource+0x224>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	f000 80a1 	beq.w	80050b6 <HAL_TIM_ConfigClockSource+0x1de>
 8004f74:	4a61      	ldr	r2, [pc, #388]	@ (80050fc <HAL_TIM_ConfigClockSource+0x224>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	f200 80a6 	bhi.w	80050c8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f7c:	4a60      	ldr	r2, [pc, #384]	@ (8005100 <HAL_TIM_ConfigClockSource+0x228>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	f000 8099 	beq.w	80050b6 <HAL_TIM_ConfigClockSource+0x1de>
 8004f84:	4a5e      	ldr	r2, [pc, #376]	@ (8005100 <HAL_TIM_ConfigClockSource+0x228>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	f200 809e 	bhi.w	80050c8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004f90:	f000 8091 	beq.w	80050b6 <HAL_TIM_ConfigClockSource+0x1de>
 8004f94:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004f98:	f200 8096 	bhi.w	80050c8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fa0:	f000 8089 	beq.w	80050b6 <HAL_TIM_ConfigClockSource+0x1de>
 8004fa4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fa8:	f200 808e 	bhi.w	80050c8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fb0:	d03e      	beq.n	8005030 <HAL_TIM_ConfigClockSource+0x158>
 8004fb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fb6:	f200 8087 	bhi.w	80050c8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fbe:	f000 8086 	beq.w	80050ce <HAL_TIM_ConfigClockSource+0x1f6>
 8004fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fc6:	d87f      	bhi.n	80050c8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fc8:	2b70      	cmp	r3, #112	@ 0x70
 8004fca:	d01a      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x12a>
 8004fcc:	2b70      	cmp	r3, #112	@ 0x70
 8004fce:	d87b      	bhi.n	80050c8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fd0:	2b60      	cmp	r3, #96	@ 0x60
 8004fd2:	d050      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x19e>
 8004fd4:	2b60      	cmp	r3, #96	@ 0x60
 8004fd6:	d877      	bhi.n	80050c8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fd8:	2b50      	cmp	r3, #80	@ 0x50
 8004fda:	d03c      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0x17e>
 8004fdc:	2b50      	cmp	r3, #80	@ 0x50
 8004fde:	d873      	bhi.n	80050c8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fe0:	2b40      	cmp	r3, #64	@ 0x40
 8004fe2:	d058      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0x1be>
 8004fe4:	2b40      	cmp	r3, #64	@ 0x40
 8004fe6:	d86f      	bhi.n	80050c8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fe8:	2b30      	cmp	r3, #48	@ 0x30
 8004fea:	d064      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x1de>
 8004fec:	2b30      	cmp	r3, #48	@ 0x30
 8004fee:	d86b      	bhi.n	80050c8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ff0:	2b20      	cmp	r3, #32
 8004ff2:	d060      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x1de>
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	d867      	bhi.n	80050c8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d05c      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x1de>
 8004ffc:	2b10      	cmp	r3, #16
 8004ffe:	d05a      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x1de>
 8005000:	e062      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005012:	f000 fdf3 	bl	8005bfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005024:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	609a      	str	r2, [r3, #8]
      break;
 800502e:	e04f      	b.n	80050d0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005040:	f000 fddc 	bl	8005bfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005052:	609a      	str	r2, [r3, #8]
      break;
 8005054:	e03c      	b.n	80050d0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005062:	461a      	mov	r2, r3
 8005064:	f000 fd4e 	bl	8005b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2150      	movs	r1, #80	@ 0x50
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fda7 	bl	8005bc2 <TIM_ITRx_SetConfig>
      break;
 8005074:	e02c      	b.n	80050d0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005082:	461a      	mov	r2, r3
 8005084:	f000 fd6d 	bl	8005b62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2160      	movs	r1, #96	@ 0x60
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fd97 	bl	8005bc2 <TIM_ITRx_SetConfig>
      break;
 8005094:	e01c      	b.n	80050d0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050a2:	461a      	mov	r2, r3
 80050a4:	f000 fd2e 	bl	8005b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2140      	movs	r1, #64	@ 0x40
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fd87 	bl	8005bc2 <TIM_ITRx_SetConfig>
      break;
 80050b4:	e00c      	b.n	80050d0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4619      	mov	r1, r3
 80050c0:	4610      	mov	r0, r2
 80050c2:	f000 fd7e 	bl	8005bc2 <TIM_ITRx_SetConfig>
      break;
 80050c6:	e003      	b.n	80050d0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	73fb      	strb	r3, [r7, #15]
      break;
 80050cc:	e000      	b.n	80050d0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80050ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	00100070 	.word	0x00100070
 80050f0:	00100060 	.word	0x00100060
 80050f4:	00100050 	.word	0x00100050
 80050f8:	00100040 	.word	0x00100040
 80050fc:	00100030 	.word	0x00100030
 8005100:	00100020 	.word	0x00100020

08005104 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005118:	2302      	movs	r3, #2
 800511a:	e031      	b.n	8005180 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fc08 	bl	8005944 <TIM_SlaveTimer_SetConfig>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d009      	beq.n	800514e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e018      	b.n	8005180 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800515c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800516c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a4c      	ldr	r2, [pc, #304]	@ (80052cc <TIM_Base_SetConfig+0x144>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d017      	beq.n	80051d0 <TIM_Base_SetConfig+0x48>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a6:	d013      	beq.n	80051d0 <TIM_Base_SetConfig+0x48>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a49      	ldr	r2, [pc, #292]	@ (80052d0 <TIM_Base_SetConfig+0x148>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d00f      	beq.n	80051d0 <TIM_Base_SetConfig+0x48>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a48      	ldr	r2, [pc, #288]	@ (80052d4 <TIM_Base_SetConfig+0x14c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00b      	beq.n	80051d0 <TIM_Base_SetConfig+0x48>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a47      	ldr	r2, [pc, #284]	@ (80052d8 <TIM_Base_SetConfig+0x150>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d007      	beq.n	80051d0 <TIM_Base_SetConfig+0x48>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a46      	ldr	r2, [pc, #280]	@ (80052dc <TIM_Base_SetConfig+0x154>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_Base_SetConfig+0x48>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a45      	ldr	r2, [pc, #276]	@ (80052e0 <TIM_Base_SetConfig+0x158>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d108      	bne.n	80051e2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a39      	ldr	r2, [pc, #228]	@ (80052cc <TIM_Base_SetConfig+0x144>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d023      	beq.n	8005232 <TIM_Base_SetConfig+0xaa>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f0:	d01f      	beq.n	8005232 <TIM_Base_SetConfig+0xaa>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a36      	ldr	r2, [pc, #216]	@ (80052d0 <TIM_Base_SetConfig+0x148>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d01b      	beq.n	8005232 <TIM_Base_SetConfig+0xaa>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a35      	ldr	r2, [pc, #212]	@ (80052d4 <TIM_Base_SetConfig+0x14c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d017      	beq.n	8005232 <TIM_Base_SetConfig+0xaa>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a34      	ldr	r2, [pc, #208]	@ (80052d8 <TIM_Base_SetConfig+0x150>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d013      	beq.n	8005232 <TIM_Base_SetConfig+0xaa>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a33      	ldr	r2, [pc, #204]	@ (80052dc <TIM_Base_SetConfig+0x154>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00f      	beq.n	8005232 <TIM_Base_SetConfig+0xaa>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a33      	ldr	r2, [pc, #204]	@ (80052e4 <TIM_Base_SetConfig+0x15c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00b      	beq.n	8005232 <TIM_Base_SetConfig+0xaa>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a32      	ldr	r2, [pc, #200]	@ (80052e8 <TIM_Base_SetConfig+0x160>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d007      	beq.n	8005232 <TIM_Base_SetConfig+0xaa>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a31      	ldr	r2, [pc, #196]	@ (80052ec <TIM_Base_SetConfig+0x164>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d003      	beq.n	8005232 <TIM_Base_SetConfig+0xaa>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2c      	ldr	r2, [pc, #176]	@ (80052e0 <TIM_Base_SetConfig+0x158>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d108      	bne.n	8005244 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a18      	ldr	r2, [pc, #96]	@ (80052cc <TIM_Base_SetConfig+0x144>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d013      	beq.n	8005298 <TIM_Base_SetConfig+0x110>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a1a      	ldr	r2, [pc, #104]	@ (80052dc <TIM_Base_SetConfig+0x154>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00f      	beq.n	8005298 <TIM_Base_SetConfig+0x110>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a1a      	ldr	r2, [pc, #104]	@ (80052e4 <TIM_Base_SetConfig+0x15c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00b      	beq.n	8005298 <TIM_Base_SetConfig+0x110>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a19      	ldr	r2, [pc, #100]	@ (80052e8 <TIM_Base_SetConfig+0x160>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d007      	beq.n	8005298 <TIM_Base_SetConfig+0x110>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a18      	ldr	r2, [pc, #96]	@ (80052ec <TIM_Base_SetConfig+0x164>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d003      	beq.n	8005298 <TIM_Base_SetConfig+0x110>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a13      	ldr	r2, [pc, #76]	@ (80052e0 <TIM_Base_SetConfig+0x158>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d103      	bne.n	80052a0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	691a      	ldr	r2, [r3, #16]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d105      	bne.n	80052be <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f023 0201 	bic.w	r2, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	611a      	str	r2, [r3, #16]
  }
}
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40012c00 	.word	0x40012c00
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40000800 	.word	0x40000800
 80052d8:	40000c00 	.word	0x40000c00
 80052dc:	40013400 	.word	0x40013400
 80052e0:	40015000 	.word	0x40015000
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40014400 	.word	0x40014400
 80052ec:	40014800 	.word	0x40014800

080052f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	f023 0201 	bic.w	r2, r3, #1
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800531e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0303 	bic.w	r3, r3, #3
 800532a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f023 0302 	bic.w	r3, r3, #2
 800533c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a30      	ldr	r2, [pc, #192]	@ (800540c <TIM_OC1_SetConfig+0x11c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d013      	beq.n	8005378 <TIM_OC1_SetConfig+0x88>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a2f      	ldr	r2, [pc, #188]	@ (8005410 <TIM_OC1_SetConfig+0x120>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00f      	beq.n	8005378 <TIM_OC1_SetConfig+0x88>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a2e      	ldr	r2, [pc, #184]	@ (8005414 <TIM_OC1_SetConfig+0x124>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00b      	beq.n	8005378 <TIM_OC1_SetConfig+0x88>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a2d      	ldr	r2, [pc, #180]	@ (8005418 <TIM_OC1_SetConfig+0x128>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d007      	beq.n	8005378 <TIM_OC1_SetConfig+0x88>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a2c      	ldr	r2, [pc, #176]	@ (800541c <TIM_OC1_SetConfig+0x12c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_OC1_SetConfig+0x88>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a2b      	ldr	r2, [pc, #172]	@ (8005420 <TIM_OC1_SetConfig+0x130>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d10c      	bne.n	8005392 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f023 0308 	bic.w	r3, r3, #8
 800537e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f023 0304 	bic.w	r3, r3, #4
 8005390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a1d      	ldr	r2, [pc, #116]	@ (800540c <TIM_OC1_SetConfig+0x11c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d013      	beq.n	80053c2 <TIM_OC1_SetConfig+0xd2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a1c      	ldr	r2, [pc, #112]	@ (8005410 <TIM_OC1_SetConfig+0x120>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00f      	beq.n	80053c2 <TIM_OC1_SetConfig+0xd2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005414 <TIM_OC1_SetConfig+0x124>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00b      	beq.n	80053c2 <TIM_OC1_SetConfig+0xd2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005418 <TIM_OC1_SetConfig+0x128>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d007      	beq.n	80053c2 <TIM_OC1_SetConfig+0xd2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a19      	ldr	r2, [pc, #100]	@ (800541c <TIM_OC1_SetConfig+0x12c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d003      	beq.n	80053c2 <TIM_OC1_SetConfig+0xd2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a18      	ldr	r2, [pc, #96]	@ (8005420 <TIM_OC1_SetConfig+0x130>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d111      	bne.n	80053e6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	621a      	str	r2, [r3, #32]
}
 8005400:	bf00      	nop
 8005402:	371c      	adds	r7, #28
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	40012c00 	.word	0x40012c00
 8005410:	40013400 	.word	0x40013400
 8005414:	40014000 	.word	0x40014000
 8005418:	40014400 	.word	0x40014400
 800541c:	40014800 	.word	0x40014800
 8005420:	40015000 	.word	0x40015000

08005424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	f023 0210 	bic.w	r2, r3, #16
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800545e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	021b      	lsls	r3, r3, #8
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f023 0320 	bic.w	r3, r3, #32
 8005472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a2c      	ldr	r2, [pc, #176]	@ (8005534 <TIM_OC2_SetConfig+0x110>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d007      	beq.n	8005498 <TIM_OC2_SetConfig+0x74>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a2b      	ldr	r2, [pc, #172]	@ (8005538 <TIM_OC2_SetConfig+0x114>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d003      	beq.n	8005498 <TIM_OC2_SetConfig+0x74>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a2a      	ldr	r2, [pc, #168]	@ (800553c <TIM_OC2_SetConfig+0x118>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d10d      	bne.n	80054b4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800549e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005534 <TIM_OC2_SetConfig+0x110>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d013      	beq.n	80054e4 <TIM_OC2_SetConfig+0xc0>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a1e      	ldr	r2, [pc, #120]	@ (8005538 <TIM_OC2_SetConfig+0x114>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00f      	beq.n	80054e4 <TIM_OC2_SetConfig+0xc0>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005540 <TIM_OC2_SetConfig+0x11c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00b      	beq.n	80054e4 <TIM_OC2_SetConfig+0xc0>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005544 <TIM_OC2_SetConfig+0x120>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d007      	beq.n	80054e4 <TIM_OC2_SetConfig+0xc0>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005548 <TIM_OC2_SetConfig+0x124>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC2_SetConfig+0xc0>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a17      	ldr	r2, [pc, #92]	@ (800553c <TIM_OC2_SetConfig+0x118>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d113      	bne.n	800550c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	621a      	str	r2, [r3, #32]
}
 8005526:	bf00      	nop
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40012c00 	.word	0x40012c00
 8005538:	40013400 	.word	0x40013400
 800553c:	40015000 	.word	0x40015000
 8005540:	40014000 	.word	0x40014000
 8005544:	40014400 	.word	0x40014400
 8005548:	40014800 	.word	0x40014800

0800554c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800557a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800557e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0303 	bic.w	r3, r3, #3
 8005586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	021b      	lsls	r3, r3, #8
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005658 <TIM_OC3_SetConfig+0x10c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d007      	beq.n	80055be <TIM_OC3_SetConfig+0x72>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a2a      	ldr	r2, [pc, #168]	@ (800565c <TIM_OC3_SetConfig+0x110>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d003      	beq.n	80055be <TIM_OC3_SetConfig+0x72>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a29      	ldr	r2, [pc, #164]	@ (8005660 <TIM_OC3_SetConfig+0x114>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d10d      	bne.n	80055da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	021b      	lsls	r3, r3, #8
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005658 <TIM_OC3_SetConfig+0x10c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d013      	beq.n	800560a <TIM_OC3_SetConfig+0xbe>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a1d      	ldr	r2, [pc, #116]	@ (800565c <TIM_OC3_SetConfig+0x110>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00f      	beq.n	800560a <TIM_OC3_SetConfig+0xbe>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005664 <TIM_OC3_SetConfig+0x118>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d00b      	beq.n	800560a <TIM_OC3_SetConfig+0xbe>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005668 <TIM_OC3_SetConfig+0x11c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d007      	beq.n	800560a <TIM_OC3_SetConfig+0xbe>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a1b      	ldr	r2, [pc, #108]	@ (800566c <TIM_OC3_SetConfig+0x120>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d003      	beq.n	800560a <TIM_OC3_SetConfig+0xbe>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a16      	ldr	r2, [pc, #88]	@ (8005660 <TIM_OC3_SetConfig+0x114>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d113      	bne.n	8005632 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	621a      	str	r2, [r3, #32]
}
 800564c:	bf00      	nop
 800564e:	371c      	adds	r7, #28
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	40012c00 	.word	0x40012c00
 800565c:	40013400 	.word	0x40013400
 8005660:	40015000 	.word	0x40015000
 8005664:	40014000 	.word	0x40014000
 8005668:	40014400 	.word	0x40014400
 800566c:	40014800 	.word	0x40014800

08005670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800569e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	031b      	lsls	r3, r3, #12
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005780 <TIM_OC4_SetConfig+0x110>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d007      	beq.n	80056e4 <TIM_OC4_SetConfig+0x74>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a2b      	ldr	r2, [pc, #172]	@ (8005784 <TIM_OC4_SetConfig+0x114>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d003      	beq.n	80056e4 <TIM_OC4_SetConfig+0x74>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a2a      	ldr	r2, [pc, #168]	@ (8005788 <TIM_OC4_SetConfig+0x118>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d10d      	bne.n	8005700 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80056ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	031b      	lsls	r3, r3, #12
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a1f      	ldr	r2, [pc, #124]	@ (8005780 <TIM_OC4_SetConfig+0x110>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d013      	beq.n	8005730 <TIM_OC4_SetConfig+0xc0>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a1e      	ldr	r2, [pc, #120]	@ (8005784 <TIM_OC4_SetConfig+0x114>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d00f      	beq.n	8005730 <TIM_OC4_SetConfig+0xc0>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a1e      	ldr	r2, [pc, #120]	@ (800578c <TIM_OC4_SetConfig+0x11c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00b      	beq.n	8005730 <TIM_OC4_SetConfig+0xc0>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a1d      	ldr	r2, [pc, #116]	@ (8005790 <TIM_OC4_SetConfig+0x120>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d007      	beq.n	8005730 <TIM_OC4_SetConfig+0xc0>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a1c      	ldr	r2, [pc, #112]	@ (8005794 <TIM_OC4_SetConfig+0x124>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d003      	beq.n	8005730 <TIM_OC4_SetConfig+0xc0>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a17      	ldr	r2, [pc, #92]	@ (8005788 <TIM_OC4_SetConfig+0x118>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d113      	bne.n	8005758 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005736:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800573e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	019b      	lsls	r3, r3, #6
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	4313      	orrs	r3, r2
 800574a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	019b      	lsls	r3, r3, #6
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	621a      	str	r2, [r3, #32]
}
 8005772:	bf00      	nop
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40012c00 	.word	0x40012c00
 8005784:	40013400 	.word	0x40013400
 8005788:	40015000 	.word	0x40015000
 800578c:	40014000 	.word	0x40014000
 8005790:	40014400 	.word	0x40014400
 8005794:	40014800 	.word	0x40014800

08005798 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80057dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a19      	ldr	r2, [pc, #100]	@ (8005854 <TIM_OC5_SetConfig+0xbc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d013      	beq.n	800581a <TIM_OC5_SetConfig+0x82>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a18      	ldr	r2, [pc, #96]	@ (8005858 <TIM_OC5_SetConfig+0xc0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00f      	beq.n	800581a <TIM_OC5_SetConfig+0x82>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a17      	ldr	r2, [pc, #92]	@ (800585c <TIM_OC5_SetConfig+0xc4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00b      	beq.n	800581a <TIM_OC5_SetConfig+0x82>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a16      	ldr	r2, [pc, #88]	@ (8005860 <TIM_OC5_SetConfig+0xc8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d007      	beq.n	800581a <TIM_OC5_SetConfig+0x82>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a15      	ldr	r2, [pc, #84]	@ (8005864 <TIM_OC5_SetConfig+0xcc>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d003      	beq.n	800581a <TIM_OC5_SetConfig+0x82>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a14      	ldr	r2, [pc, #80]	@ (8005868 <TIM_OC5_SetConfig+0xd0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d109      	bne.n	800582e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005820:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	021b      	lsls	r3, r3, #8
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	621a      	str	r2, [r3, #32]
}
 8005848:	bf00      	nop
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40013400 	.word	0x40013400
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800
 8005868:	40015000 	.word	0x40015000

0800586c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800589a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800589e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80058b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	051b      	lsls	r3, r3, #20
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	4313      	orrs	r3, r2
 80058be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a1a      	ldr	r2, [pc, #104]	@ (800592c <TIM_OC6_SetConfig+0xc0>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d013      	beq.n	80058f0 <TIM_OC6_SetConfig+0x84>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a19      	ldr	r2, [pc, #100]	@ (8005930 <TIM_OC6_SetConfig+0xc4>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00f      	beq.n	80058f0 <TIM_OC6_SetConfig+0x84>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a18      	ldr	r2, [pc, #96]	@ (8005934 <TIM_OC6_SetConfig+0xc8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00b      	beq.n	80058f0 <TIM_OC6_SetConfig+0x84>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a17      	ldr	r2, [pc, #92]	@ (8005938 <TIM_OC6_SetConfig+0xcc>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d007      	beq.n	80058f0 <TIM_OC6_SetConfig+0x84>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a16      	ldr	r2, [pc, #88]	@ (800593c <TIM_OC6_SetConfig+0xd0>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_OC6_SetConfig+0x84>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a15      	ldr	r2, [pc, #84]	@ (8005940 <TIM_OC6_SetConfig+0xd4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d109      	bne.n	8005904 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	029b      	lsls	r3, r3, #10
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	621a      	str	r2, [r3, #32]
}
 800591e:	bf00      	nop
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40012c00 	.word	0x40012c00
 8005930:	40013400 	.word	0x40013400
 8005934:	40014000 	.word	0x40014000
 8005938:	40014400 	.word	0x40014400
 800593c:	40014800 	.word	0x40014800
 8005940:	40015000 	.word	0x40015000

08005944 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005964:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005976:	f023 0307 	bic.w	r3, r3, #7
 800597a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	4313      	orrs	r3, r2
 8005984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	4a56      	ldr	r2, [pc, #344]	@ (8005aec <TIM_SlaveTimer_SetConfig+0x1a8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	f000 80a2 	beq.w	8005ade <TIM_SlaveTimer_SetConfig+0x19a>
 800599a:	4a54      	ldr	r2, [pc, #336]	@ (8005aec <TIM_SlaveTimer_SetConfig+0x1a8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	f200 809b 	bhi.w	8005ad8 <TIM_SlaveTimer_SetConfig+0x194>
 80059a2:	4a53      	ldr	r2, [pc, #332]	@ (8005af0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	f000 809a 	beq.w	8005ade <TIM_SlaveTimer_SetConfig+0x19a>
 80059aa:	4a51      	ldr	r2, [pc, #324]	@ (8005af0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	f200 8093 	bhi.w	8005ad8 <TIM_SlaveTimer_SetConfig+0x194>
 80059b2:	4a50      	ldr	r2, [pc, #320]	@ (8005af4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	f000 8092 	beq.w	8005ade <TIM_SlaveTimer_SetConfig+0x19a>
 80059ba:	4a4e      	ldr	r2, [pc, #312]	@ (8005af4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	f200 808b 	bhi.w	8005ad8 <TIM_SlaveTimer_SetConfig+0x194>
 80059c2:	4a4d      	ldr	r2, [pc, #308]	@ (8005af8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	f000 808a 	beq.w	8005ade <TIM_SlaveTimer_SetConfig+0x19a>
 80059ca:	4a4b      	ldr	r2, [pc, #300]	@ (8005af8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	f200 8083 	bhi.w	8005ad8 <TIM_SlaveTimer_SetConfig+0x194>
 80059d2:	4a4a      	ldr	r2, [pc, #296]	@ (8005afc <TIM_SlaveTimer_SetConfig+0x1b8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	f000 8082 	beq.w	8005ade <TIM_SlaveTimer_SetConfig+0x19a>
 80059da:	4a48      	ldr	r2, [pc, #288]	@ (8005afc <TIM_SlaveTimer_SetConfig+0x1b8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d87b      	bhi.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x194>
 80059e0:	4a47      	ldr	r2, [pc, #284]	@ (8005b00 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d07b      	beq.n	8005ade <TIM_SlaveTimer_SetConfig+0x19a>
 80059e6:	4a46      	ldr	r2, [pc, #280]	@ (8005b00 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d875      	bhi.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x194>
 80059ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80059f0:	d075      	beq.n	8005ade <TIM_SlaveTimer_SetConfig+0x19a>
 80059f2:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80059f6:	d86f      	bhi.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x194>
 80059f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059fc:	d06f      	beq.n	8005ade <TIM_SlaveTimer_SetConfig+0x19a>
 80059fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a02:	d869      	bhi.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x194>
 8005a04:	2b70      	cmp	r3, #112	@ 0x70
 8005a06:	d01a      	beq.n	8005a3e <TIM_SlaveTimer_SetConfig+0xfa>
 8005a08:	2b70      	cmp	r3, #112	@ 0x70
 8005a0a:	d865      	bhi.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x194>
 8005a0c:	2b60      	cmp	r3, #96	@ 0x60
 8005a0e:	d059      	beq.n	8005ac4 <TIM_SlaveTimer_SetConfig+0x180>
 8005a10:	2b60      	cmp	r3, #96	@ 0x60
 8005a12:	d861      	bhi.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x194>
 8005a14:	2b50      	cmp	r3, #80	@ 0x50
 8005a16:	d04b      	beq.n	8005ab0 <TIM_SlaveTimer_SetConfig+0x16c>
 8005a18:	2b50      	cmp	r3, #80	@ 0x50
 8005a1a:	d85d      	bhi.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x194>
 8005a1c:	2b40      	cmp	r3, #64	@ 0x40
 8005a1e:	d019      	beq.n	8005a54 <TIM_SlaveTimer_SetConfig+0x110>
 8005a20:	2b40      	cmp	r3, #64	@ 0x40
 8005a22:	d859      	bhi.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x194>
 8005a24:	2b30      	cmp	r3, #48	@ 0x30
 8005a26:	d05a      	beq.n	8005ade <TIM_SlaveTimer_SetConfig+0x19a>
 8005a28:	2b30      	cmp	r3, #48	@ 0x30
 8005a2a:	d855      	bhi.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x194>
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d056      	beq.n	8005ade <TIM_SlaveTimer_SetConfig+0x19a>
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d851      	bhi.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x194>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d052      	beq.n	8005ade <TIM_SlaveTimer_SetConfig+0x19a>
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d050      	beq.n	8005ade <TIM_SlaveTimer_SetConfig+0x19a>
 8005a3c:	e04c      	b.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005a4e:	f000 f8d5 	bl	8005bfc <TIM_ETR_SetConfig>
      break;
 8005a52:	e045      	b.n	8005ae0 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b05      	cmp	r3, #5
 8005a5a:	d004      	beq.n	8005a66 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005a60:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8005a64:	d101      	bne.n	8005a6a <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e03b      	b.n	8005ae2 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6a1a      	ldr	r2, [r3, #32]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0201 	bic.w	r2, r2, #1
 8005a80:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a90:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	621a      	str	r2, [r3, #32]
      break;
 8005aae:	e017      	b.n	8005ae0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005abc:	461a      	mov	r2, r3
 8005abe:	f000 f821 	bl	8005b04 <TIM_TI1_ConfigInputStage>
      break;
 8005ac2:	e00d      	b.n	8005ae0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f000 f846 	bl	8005b62 <TIM_TI2_ConfigInputStage>
      break;
 8005ad6:	e003      	b.n	8005ae0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	75fb      	strb	r3, [r7, #23]
      break;
 8005adc:	e000      	b.n	8005ae0 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8005ade:	bf00      	nop
  }

  return status;
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	00100070 	.word	0x00100070
 8005af0:	00100060 	.word	0x00100060
 8005af4:	00100050 	.word	0x00100050
 8005af8:	00100040 	.word	0x00100040
 8005afc:	00100030 	.word	0x00100030
 8005b00:	00100020 	.word	0x00100020

08005b04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f023 0201 	bic.w	r2, r3, #1
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f023 030a 	bic.w	r3, r3, #10
 8005b40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	621a      	str	r2, [r3, #32]
}
 8005b56:	bf00      	nop
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b087      	sub	sp, #28
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	f023 0210 	bic.w	r2, r3, #16
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	031b      	lsls	r3, r3, #12
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	621a      	str	r2, [r3, #32]
}
 8005bb6:	bf00      	nop
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b085      	sub	sp, #20
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
 8005bca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005bd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f043 0307 	orr.w	r3, r3, #7
 8005be8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	609a      	str	r2, [r3, #8]
}
 8005bf0:	bf00      	nop
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	021a      	lsls	r2, r3, #8
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	609a      	str	r2, [r3, #8]
}
 8005c30:	bf00      	nop
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f003 031f 	and.w	r3, r3, #31
 8005c4e:	2201      	movs	r2, #1
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a1a      	ldr	r2, [r3, #32]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	401a      	ands	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a1a      	ldr	r2, [r3, #32]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f003 031f 	and.w	r3, r3, #31
 8005c6e:	6879      	ldr	r1, [r7, #4]
 8005c70:	fa01 f303 	lsl.w	r3, r1, r3
 8005c74:	431a      	orrs	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	621a      	str	r2, [r3, #32]
}
 8005c7a:	bf00      	nop
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e074      	b.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a34      	ldr	r2, [pc, #208]	@ (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d009      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a33      	ldr	r2, [pc, #204]	@ (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d004      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a31      	ldr	r2, [pc, #196]	@ (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d108      	bne.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005ce4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a21      	ldr	r2, [pc, #132]	@ (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d022      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d20:	d01d      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a1f      	ldr	r2, [pc, #124]	@ (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d018      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a1d      	ldr	r2, [pc, #116]	@ (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d013      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8005dac <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00e      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a15      	ldr	r2, [pc, #84]	@ (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d009      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a18      	ldr	r2, [pc, #96]	@ (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d004      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a11      	ldr	r2, [pc, #68]	@ (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d10c      	bne.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40012c00 	.word	0x40012c00
 8005d9c:	40013400 	.word	0x40013400
 8005da0:	40015000 	.word	0x40015000
 8005da4:	40000400 	.word	0x40000400
 8005da8:	40000800 	.word	0x40000800
 8005dac:	40000c00 	.word	0x40000c00
 8005db0:	40014000 	.word	0x40014000

08005db4 <memset>:
 8005db4:	4402      	add	r2, r0
 8005db6:	4603      	mov	r3, r0
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d100      	bne.n	8005dbe <memset+0xa>
 8005dbc:	4770      	bx	lr
 8005dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005dc2:	e7f9      	b.n	8005db8 <memset+0x4>

08005dc4 <__libc_init_array>:
 8005dc4:	b570      	push	{r4, r5, r6, lr}
 8005dc6:	4d0d      	ldr	r5, [pc, #52]	@ (8005dfc <__libc_init_array+0x38>)
 8005dc8:	4c0d      	ldr	r4, [pc, #52]	@ (8005e00 <__libc_init_array+0x3c>)
 8005dca:	1b64      	subs	r4, r4, r5
 8005dcc:	10a4      	asrs	r4, r4, #2
 8005dce:	2600      	movs	r6, #0
 8005dd0:	42a6      	cmp	r6, r4
 8005dd2:	d109      	bne.n	8005de8 <__libc_init_array+0x24>
 8005dd4:	4d0b      	ldr	r5, [pc, #44]	@ (8005e04 <__libc_init_array+0x40>)
 8005dd6:	4c0c      	ldr	r4, [pc, #48]	@ (8005e08 <__libc_init_array+0x44>)
 8005dd8:	f000 f818 	bl	8005e0c <_init>
 8005ddc:	1b64      	subs	r4, r4, r5
 8005dde:	10a4      	asrs	r4, r4, #2
 8005de0:	2600      	movs	r6, #0
 8005de2:	42a6      	cmp	r6, r4
 8005de4:	d105      	bne.n	8005df2 <__libc_init_array+0x2e>
 8005de6:	bd70      	pop	{r4, r5, r6, pc}
 8005de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dec:	4798      	blx	r3
 8005dee:	3601      	adds	r6, #1
 8005df0:	e7ee      	b.n	8005dd0 <__libc_init_array+0xc>
 8005df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df6:	4798      	blx	r3
 8005df8:	3601      	adds	r6, #1
 8005dfa:	e7f2      	b.n	8005de2 <__libc_init_array+0x1e>
 8005dfc:	0800674c 	.word	0x0800674c
 8005e00:	0800674c 	.word	0x0800674c
 8005e04:	0800674c 	.word	0x0800674c
 8005e08:	08006750 	.word	0x08006750

08005e0c <_init>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	bf00      	nop
 8005e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e12:	bc08      	pop	{r3}
 8005e14:	469e      	mov	lr, r3
 8005e16:	4770      	bx	lr

08005e18 <_fini>:
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	bf00      	nop
 8005e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1e:	bc08      	pop	{r3}
 8005e20:	469e      	mov	lr, r3
 8005e22:	4770      	bx	lr
