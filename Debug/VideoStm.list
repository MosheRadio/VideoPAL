
VideoStm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .screen       00002760  20000000  20000000  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005d58  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001108  08005f30  08005f30  00006f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08007038  08007038  0005bc00  2**0
                  CONTENTS, READONLY
  5 .ARM          00000000  08007038  08007038  0005bc00  2**0
                  CONTENTS, READONLY
  6 .preinit_array 00000000  08007038  08007038  0005bc00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08007038  08007038  00008038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0800703c  0800703c  0000803c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00001518  20002760  08007040  00008760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000002c0  20003c78  08008558  00009c78  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003f38  08008558  00009f38  2**0
                  ALLOC
 12 .screenBB     0004ec00  22000000  22000000  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 00000030  00000000  00000000  0005bc00  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e441  00000000  00000000  0005bc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000258f  00000000  00000000  0006a071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f58  00000000  00000000  0006c600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026af5  00000000  00000000  0006d558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010987  00000000  00000000  0009404d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7e03  00000000  00000000  000a49d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019c7d7  2**0
                  CONTENTS, READONLY
 21 .debug_rnglists 00000b97  00000000  00000000  0019c81a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003e94  00000000  00000000  0019d3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004d  00000000  00000000  001a1248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20003c78 	.word	0x20003c78
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005f18 	.word	0x08005f18

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20003c7c 	.word	0x20003c7c
 8000214:	08005f18 	.word	0x08005f18

08000218 <gdiBitBlt>:
		h			Bitmap height, in pixels
		bm			Pointer to the bitmap start position

	return			none
*/
void gdiBitBlt(PGDI_RECT prc, int16_t x, int16_t y, int16_t w, int16_t h, pBMP bm) {
 8000218:	b490      	push	{r4, r7}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	4608      	mov	r0, r1
 8000222:	4611      	mov	r1, r2
 8000224:	461a      	mov	r2, r3
 8000226:	4603      	mov	r3, r0
 8000228:	817b      	strh	r3, [r7, #10]
 800022a:	460b      	mov	r3, r1
 800022c:	813b      	strh	r3, [r7, #8]
 800022e:	4613      	mov	r3, r2
 8000230:	80fb      	strh	r3, [r7, #6]
int16_t todo;
uint16_t alignment;

//	Calculate clipping region

	if (prc != NULL) {
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d00f      	beq.n	8000258 <gdiBitBlt+0x40>
		x += prc->x;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800023e:	b29a      	uxth	r2, r3
 8000240:	897b      	ldrh	r3, [r7, #10]
 8000242:	4413      	add	r3, r2
 8000244:	b29b      	uxth	r3, r3
 8000246:	817b      	strh	r3, [r7, #10]
		y += prc->y;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800024e:	b29a      	uxth	r2, r3
 8000250:	893b      	ldrh	r3, [r7, #8]
 8000252:	4413      	add	r3, r2
 8000254:	b29b      	uxth	r3, r3
 8000256:	813b      	strh	r3, [r7, #8]
//??		w = min(prc->w, VID_PIXELS_X-x);	// clip X
//??		h = min(prc->w, VID_PIXELS_Y-y);	// clip Y
	}
	alignment = x & 0b0000000000001111;
 8000258:	897b      	ldrh	r3, [r7, #10]
 800025a:	f003 030f 	and.w	r3, r3, #15
 800025e:	82bb      	strh	r3, [r7, #20]
	for(;--h >= 0; y++) {
 8000260:	e2cc      	b.n	80007fc <gdiBitBlt+0x5e4>
		for (todo = w; todo>0;) {
 8000262:	88fb      	ldrh	r3, [r7, #6]
 8000264:	82fb      	strh	r3, [r7, #22]
 8000266:	e2be      	b.n	80007e6 <gdiBitBlt+0x5ce>
			if (todo >= 9) {
 8000268:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800026c:	2b08      	cmp	r3, #8
 800026e:	dd2d      	ble.n	80002cc <gdiBitBlt+0xb4>
				bitmask.word = (todo >= 16) ?
									0xFFFF		<< (16-alignment):
 8000270:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000274:	2b0f      	cmp	r3, #15
 8000276:	dd08      	ble.n	800028a <gdiBitBlt+0x72>
 8000278:	8abb      	ldrh	r3, [r7, #20]
 800027a:	f1c3 0310 	rsb	r3, r3, #16
 800027e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000282:	fa02 f303 	lsl.w	r3, r2, r3
 8000286:	461a      	mov	r2, r3
 8000288:	e00c      	b.n	80002a4 <gdiBitBlt+0x8c>
						masktable[todo-1]		<< (16-alignment);
 800028a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800028e:	3b01      	subs	r3, #1
 8000290:	4a79      	ldr	r2, [pc, #484]	@ (8000478 <gdiBitBlt+0x260>)
 8000292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000296:	461a      	mov	r2, r3
 8000298:	8abb      	ldrh	r3, [r7, #20]
 800029a:	f1c3 0310 	rsb	r3, r3, #16
 800029e:	fa02 f303 	lsl.w	r3, r2, r3
									0xFFFF		<< (16-alignment):
 80002a2:	461a      	mov	r2, r3
				bitmask.word = (todo >= 16) ?
 80002a4:	4b75      	ldr	r3, [pc, #468]	@ (800047c <gdiBitBlt+0x264>)
 80002a6:	601a      	str	r2, [r3, #0]
				pattern.word = *bm.halfwords++	<< (16-alignment);
 80002a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002aa:	1c9a      	adds	r2, r3, #2
 80002ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80002ae:	881b      	ldrh	r3, [r3, #0]
 80002b0:	461a      	mov	r2, r3
 80002b2:	8abb      	ldrh	r3, [r7, #20]
 80002b4:	f1c3 0310 	rsb	r3, r3, #16
 80002b8:	fa02 f303 	lsl.w	r3, r2, r3
 80002bc:	461a      	mov	r2, r3
 80002be:	4b70      	ldr	r3, [pc, #448]	@ (8000480 <gdiBitBlt+0x268>)
 80002c0:	601a      	str	r2, [r3, #0]
				todo -= 16;
 80002c2:	8afb      	ldrh	r3, [r7, #22]
 80002c4:	3b10      	subs	r3, #16
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	82fb      	strh	r3, [r7, #22]
 80002ca:	e01f      	b.n	800030c <gdiBitBlt+0xf4>
			} else {
				bitmask.word = masktable[todo-1] << (16-alignment);
 80002cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80002d0:	3b01      	subs	r3, #1
 80002d2:	4a69      	ldr	r2, [pc, #420]	@ (8000478 <gdiBitBlt+0x260>)
 80002d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002d8:	461a      	mov	r2, r3
 80002da:	8abb      	ldrh	r3, [r7, #20]
 80002dc:	f1c3 0310 	rsb	r3, r3, #16
 80002e0:	fa02 f303 	lsl.w	r3, r2, r3
 80002e4:	461a      	mov	r2, r3
 80002e6:	4b65      	ldr	r3, [pc, #404]	@ (800047c <gdiBitBlt+0x264>)
 80002e8:	601a      	str	r2, [r3, #0]
				pattern.word = *bm.bytesinROM++  << (24-alignment);
 80002ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002ec:	1c5a      	adds	r2, r3, #1
 80002ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	461a      	mov	r2, r3
 80002f4:	8abb      	ldrh	r3, [r7, #20]
 80002f6:	f1c3 0318 	rsb	r3, r3, #24
 80002fa:	fa02 f303 	lsl.w	r3, r2, r3
 80002fe:	461a      	mov	r2, r3
 8000300:	4b5f      	ldr	r3, [pc, #380]	@ (8000480 <gdiBitBlt+0x268>)
 8000302:	601a      	str	r2, [r3, #0]
				todo -= 8;
 8000304:	8afb      	ldrh	r3, [r7, #22]
 8000306:	3b08      	subs	r3, #8
 8000308:	b29b      	uxth	r3, r3
 800030a:	82fb      	strh	r3, [r7, #22]
			}
			switch(rop) {
 800030c:	4b5d      	ldr	r3, [pc, #372]	@ (8000484 <gdiBitBlt+0x26c>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b04      	cmp	r3, #4
 8000312:	f200 8268 	bhi.w	80007e6 <gdiBitBlt+0x5ce>
 8000316:	a201      	add	r2, pc, #4	@ (adr r2, 800031c <gdiBitBlt+0x104>)
 8000318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031c:	08000331 	.word	0x08000331
 8000320:	0800048d 	.word	0x0800048d
 8000324:	08000715 	.word	0x08000715
 8000328:	080005d5 	.word	0x080005d5
 800032c:	08000675 	.word	0x08000675
				case GDI_ROP_COPY:
					screen[y][x>>4] &= ~bitmask.halfword[1];
 8000330:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000334:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000338:	111b      	asrs	r3, r3, #4
 800033a:	b21b      	sxth	r3, r3
 800033c:	4618      	mov	r0, r3
 800033e:	4952      	ldr	r1, [pc, #328]	@ (8000488 <gdiBitBlt+0x270>)
 8000340:	4613      	mov	r3, r2
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	4413      	add	r3, r2
 8000346:	00da      	lsls	r2, r3, #3
 8000348:	1ad2      	subs	r2, r2, r3
 800034a:	1813      	adds	r3, r2, r0
 800034c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000350:	b21a      	sxth	r2, r3
 8000352:	4b4a      	ldr	r3, [pc, #296]	@ (800047c <gdiBitBlt+0x264>)
 8000354:	885b      	ldrh	r3, [r3, #2]
 8000356:	b21b      	sxth	r3, r3
 8000358:	43db      	mvns	r3, r3
 800035a:	b21b      	sxth	r3, r3
 800035c:	4013      	ands	r3, r2
 800035e:	b219      	sxth	r1, r3
 8000360:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000364:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000368:	111b      	asrs	r3, r3, #4
 800036a:	b21b      	sxth	r3, r3
 800036c:	461c      	mov	r4, r3
 800036e:	b288      	uxth	r0, r1
 8000370:	4945      	ldr	r1, [pc, #276]	@ (8000488 <gdiBitBlt+0x270>)
 8000372:	4613      	mov	r3, r2
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	4413      	add	r3, r2
 8000378:	00da      	lsls	r2, r3, #3
 800037a:	1ad2      	subs	r2, r2, r3
 800037c:	1913      	adds	r3, r2, r4
 800037e:	4602      	mov	r2, r0
 8000380:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					screen[y][x>>4] |=  pattern.halfword[1];
 8000384:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000388:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800038c:	111b      	asrs	r3, r3, #4
 800038e:	b21b      	sxth	r3, r3
 8000390:	4618      	mov	r0, r3
 8000392:	493d      	ldr	r1, [pc, #244]	@ (8000488 <gdiBitBlt+0x270>)
 8000394:	4613      	mov	r3, r2
 8000396:	005b      	lsls	r3, r3, #1
 8000398:	4413      	add	r3, r2
 800039a:	00da      	lsls	r2, r3, #3
 800039c:	1ad2      	subs	r2, r2, r3
 800039e:	1813      	adds	r3, r2, r0
 80003a0:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80003a4:	4b36      	ldr	r3, [pc, #216]	@ (8000480 <gdiBitBlt+0x268>)
 80003a6:	885b      	ldrh	r3, [r3, #2]
 80003a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80003ac:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80003b0:	1100      	asrs	r0, r0, #4
 80003b2:	b200      	sxth	r0, r0
 80003b4:	4604      	mov	r4, r0
 80003b6:	430b      	orrs	r3, r1
 80003b8:	b298      	uxth	r0, r3
 80003ba:	4933      	ldr	r1, [pc, #204]	@ (8000488 <gdiBitBlt+0x270>)
 80003bc:	4613      	mov	r3, r2
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	4413      	add	r3, r2
 80003c2:	00da      	lsls	r2, r3, #3
 80003c4:	1ad2      	subs	r2, r2, r3
 80003c6:	1913      	adds	r3, r2, r4
 80003c8:	4602      	mov	r2, r0
 80003ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (bitmask.halfword[0] != 0) {
 80003ce:	4b2b      	ldr	r3, [pc, #172]	@ (800047c <gdiBitBlt+0x264>)
 80003d0:	881b      	ldrh	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	f000 81fe 	beq.w	80007d4 <gdiBitBlt+0x5bc>
						screen[y][(x>>4)+1] &= ~bitmask.halfword[0];
 80003d8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80003dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80003e0:	111b      	asrs	r3, r3, #4
 80003e2:	b21b      	sxth	r3, r3
 80003e4:	1c59      	adds	r1, r3, #1
 80003e6:	4828      	ldr	r0, [pc, #160]	@ (8000488 <gdiBitBlt+0x270>)
 80003e8:	4613      	mov	r3, r2
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	4413      	add	r3, r2
 80003ee:	00da      	lsls	r2, r3, #3
 80003f0:	1ad2      	subs	r2, r2, r3
 80003f2:	1853      	adds	r3, r2, r1
 80003f4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80003f8:	b21a      	sxth	r2, r3
 80003fa:	4b20      	ldr	r3, [pc, #128]	@ (800047c <gdiBitBlt+0x264>)
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	b21b      	sxth	r3, r3
 8000400:	43db      	mvns	r3, r3
 8000402:	b21b      	sxth	r3, r3
 8000404:	4013      	ands	r3, r2
 8000406:	b218      	sxth	r0, r3
 8000408:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800040c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000410:	111b      	asrs	r3, r3, #4
 8000412:	b21b      	sxth	r3, r3
 8000414:	1c59      	adds	r1, r3, #1
 8000416:	b284      	uxth	r4, r0
 8000418:	481b      	ldr	r0, [pc, #108]	@ (8000488 <gdiBitBlt+0x270>)
 800041a:	4613      	mov	r3, r2
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	4413      	add	r3, r2
 8000420:	00da      	lsls	r2, r3, #3
 8000422:	1ad2      	subs	r2, r2, r3
 8000424:	1853      	adds	r3, r2, r1
 8000426:	4622      	mov	r2, r4
 8000428:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						screen[y][(x>>4)+1] |=  pattern.halfword[0];
 800042c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000430:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000434:	111b      	asrs	r3, r3, #4
 8000436:	b21b      	sxth	r3, r3
 8000438:	1c59      	adds	r1, r3, #1
 800043a:	4813      	ldr	r0, [pc, #76]	@ (8000488 <gdiBitBlt+0x270>)
 800043c:	4613      	mov	r3, r2
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	4413      	add	r3, r2
 8000442:	00da      	lsls	r2, r3, #3
 8000444:	1ad2      	subs	r2, r2, r3
 8000446:	1853      	adds	r3, r2, r1
 8000448:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 800044c:	4b0c      	ldr	r3, [pc, #48]	@ (8000480 <gdiBitBlt+0x268>)
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000454:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000458:	1109      	asrs	r1, r1, #4
 800045a:	b209      	sxth	r1, r1
 800045c:	3101      	adds	r1, #1
 800045e:	4303      	orrs	r3, r0
 8000460:	b29c      	uxth	r4, r3
 8000462:	4809      	ldr	r0, [pc, #36]	@ (8000488 <gdiBitBlt+0x270>)
 8000464:	4613      	mov	r3, r2
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	4413      	add	r3, r2
 800046a:	00da      	lsls	r2, r3, #3
 800046c:	1ad2      	subs	r2, r2, r3
 800046e:	1853      	adds	r3, r2, r1
 8000470:	4622      	mov	r2, r4
 8000472:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					}
					break;
 8000476:	e1ad      	b.n	80007d4 <gdiBitBlt+0x5bc>
 8000478:	08006ae8 	.word	0x08006ae8
 800047c:	20003c98 	.word	0x20003c98
 8000480:	20003c94 	.word	0x20003c94
 8000484:	20002760 	.word	0x20002760
 8000488:	20000000 	.word	0x20000000
				case GDI_ROP_BONW:	// inverse video
					screen[y][x>>4] |=  bitmask.halfword[1];
 800048c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000490:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000494:	111b      	asrs	r3, r3, #4
 8000496:	b21b      	sxth	r3, r3
 8000498:	4618      	mov	r0, r3
 800049a:	49cb      	ldr	r1, [pc, #812]	@ (80007c8 <gdiBitBlt+0x5b0>)
 800049c:	4613      	mov	r3, r2
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	4413      	add	r3, r2
 80004a2:	00da      	lsls	r2, r3, #3
 80004a4:	1ad2      	subs	r2, r2, r3
 80004a6:	1813      	adds	r3, r2, r0
 80004a8:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80004ac:	4bc7      	ldr	r3, [pc, #796]	@ (80007cc <gdiBitBlt+0x5b4>)
 80004ae:	885b      	ldrh	r3, [r3, #2]
 80004b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004b4:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80004b8:	1100      	asrs	r0, r0, #4
 80004ba:	b200      	sxth	r0, r0
 80004bc:	4604      	mov	r4, r0
 80004be:	430b      	orrs	r3, r1
 80004c0:	b298      	uxth	r0, r3
 80004c2:	49c1      	ldr	r1, [pc, #772]	@ (80007c8 <gdiBitBlt+0x5b0>)
 80004c4:	4613      	mov	r3, r2
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	4413      	add	r3, r2
 80004ca:	00da      	lsls	r2, r3, #3
 80004cc:	1ad2      	subs	r2, r2, r3
 80004ce:	1913      	adds	r3, r2, r4
 80004d0:	4602      	mov	r2, r0
 80004d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					screen[y][x>>4] &= ~pattern.halfword[1];
 80004d6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004de:	111b      	asrs	r3, r3, #4
 80004e0:	b21b      	sxth	r3, r3
 80004e2:	4618      	mov	r0, r3
 80004e4:	49b8      	ldr	r1, [pc, #736]	@ (80007c8 <gdiBitBlt+0x5b0>)
 80004e6:	4613      	mov	r3, r2
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	4413      	add	r3, r2
 80004ec:	00da      	lsls	r2, r3, #3
 80004ee:	1ad2      	subs	r2, r2, r3
 80004f0:	1813      	adds	r3, r2, r0
 80004f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004f6:	b21a      	sxth	r2, r3
 80004f8:	4bb5      	ldr	r3, [pc, #724]	@ (80007d0 <gdiBitBlt+0x5b8>)
 80004fa:	885b      	ldrh	r3, [r3, #2]
 80004fc:	b21b      	sxth	r3, r3
 80004fe:	43db      	mvns	r3, r3
 8000500:	b21b      	sxth	r3, r3
 8000502:	4013      	ands	r3, r2
 8000504:	b219      	sxth	r1, r3
 8000506:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800050a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800050e:	111b      	asrs	r3, r3, #4
 8000510:	b21b      	sxth	r3, r3
 8000512:	461c      	mov	r4, r3
 8000514:	b288      	uxth	r0, r1
 8000516:	49ac      	ldr	r1, [pc, #688]	@ (80007c8 <gdiBitBlt+0x5b0>)
 8000518:	4613      	mov	r3, r2
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	4413      	add	r3, r2
 800051e:	00da      	lsls	r2, r3, #3
 8000520:	1ad2      	subs	r2, r2, r3
 8000522:	1913      	adds	r3, r2, r4
 8000524:	4602      	mov	r2, r0
 8000526:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (bitmask.halfword[0] != 0) {
 800052a:	4ba8      	ldr	r3, [pc, #672]	@ (80007cc <gdiBitBlt+0x5b4>)
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	f000 8152 	beq.w	80007d8 <gdiBitBlt+0x5c0>
						screen[y][(x>>4)+1] |=  bitmask.halfword[0];
 8000534:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000538:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800053c:	111b      	asrs	r3, r3, #4
 800053e:	b21b      	sxth	r3, r3
 8000540:	1c59      	adds	r1, r3, #1
 8000542:	48a1      	ldr	r0, [pc, #644]	@ (80007c8 <gdiBitBlt+0x5b0>)
 8000544:	4613      	mov	r3, r2
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	4413      	add	r3, r2
 800054a:	00da      	lsls	r2, r3, #3
 800054c:	1ad2      	subs	r2, r2, r3
 800054e:	1853      	adds	r3, r2, r1
 8000550:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000554:	4b9d      	ldr	r3, [pc, #628]	@ (80007cc <gdiBitBlt+0x5b4>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800055c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000560:	1109      	asrs	r1, r1, #4
 8000562:	b209      	sxth	r1, r1
 8000564:	3101      	adds	r1, #1
 8000566:	4303      	orrs	r3, r0
 8000568:	b29c      	uxth	r4, r3
 800056a:	4897      	ldr	r0, [pc, #604]	@ (80007c8 <gdiBitBlt+0x5b0>)
 800056c:	4613      	mov	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	4413      	add	r3, r2
 8000572:	00da      	lsls	r2, r3, #3
 8000574:	1ad2      	subs	r2, r2, r3
 8000576:	1853      	adds	r3, r2, r1
 8000578:	4622      	mov	r2, r4
 800057a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						screen[y][(x>>4)+1] &= ~pattern.halfword[0];
 800057e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000582:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000586:	111b      	asrs	r3, r3, #4
 8000588:	b21b      	sxth	r3, r3
 800058a:	1c59      	adds	r1, r3, #1
 800058c:	488e      	ldr	r0, [pc, #568]	@ (80007c8 <gdiBitBlt+0x5b0>)
 800058e:	4613      	mov	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	4413      	add	r3, r2
 8000594:	00da      	lsls	r2, r3, #3
 8000596:	1ad2      	subs	r2, r2, r3
 8000598:	1853      	adds	r3, r2, r1
 800059a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800059e:	b21a      	sxth	r2, r3
 80005a0:	4b8b      	ldr	r3, [pc, #556]	@ (80007d0 <gdiBitBlt+0x5b8>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	b21b      	sxth	r3, r3
 80005a6:	43db      	mvns	r3, r3
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	4013      	ands	r3, r2
 80005ac:	b218      	sxth	r0, r3
 80005ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005b6:	111b      	asrs	r3, r3, #4
 80005b8:	b21b      	sxth	r3, r3
 80005ba:	1c59      	adds	r1, r3, #1
 80005bc:	b284      	uxth	r4, r0
 80005be:	4882      	ldr	r0, [pc, #520]	@ (80007c8 <gdiBitBlt+0x5b0>)
 80005c0:	4613      	mov	r3, r2
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	4413      	add	r3, r2
 80005c6:	00da      	lsls	r2, r3, #3
 80005c8:	1ad2      	subs	r2, r2, r3
 80005ca:	1853      	adds	r3, r2, r1
 80005cc:	4622      	mov	r2, r4
 80005ce:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					}
					break;
 80005d2:	e101      	b.n	80007d8 <gdiBitBlt+0x5c0>
				case GDI_ROP_XOR:
					screen[y][x>>4] ^= pattern.halfword[1];
 80005d4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005dc:	111b      	asrs	r3, r3, #4
 80005de:	b21b      	sxth	r3, r3
 80005e0:	4618      	mov	r0, r3
 80005e2:	4979      	ldr	r1, [pc, #484]	@ (80007c8 <gdiBitBlt+0x5b0>)
 80005e4:	4613      	mov	r3, r2
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	4413      	add	r3, r2
 80005ea:	00da      	lsls	r2, r3, #3
 80005ec:	1ad2      	subs	r2, r2, r3
 80005ee:	1813      	adds	r3, r2, r0
 80005f0:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80005f4:	4b76      	ldr	r3, [pc, #472]	@ (80007d0 <gdiBitBlt+0x5b8>)
 80005f6:	885b      	ldrh	r3, [r3, #2]
 80005f8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005fc:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000600:	1100      	asrs	r0, r0, #4
 8000602:	b200      	sxth	r0, r0
 8000604:	4604      	mov	r4, r0
 8000606:	404b      	eors	r3, r1
 8000608:	b298      	uxth	r0, r3
 800060a:	496f      	ldr	r1, [pc, #444]	@ (80007c8 <gdiBitBlt+0x5b0>)
 800060c:	4613      	mov	r3, r2
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	4413      	add	r3, r2
 8000612:	00da      	lsls	r2, r3, #3
 8000614:	1ad2      	subs	r2, r2, r3
 8000616:	1913      	adds	r3, r2, r4
 8000618:	4602      	mov	r2, r0
 800061a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 800061e:	4b6c      	ldr	r3, [pc, #432]	@ (80007d0 <gdiBitBlt+0x5b8>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	f000 80da 	beq.w	80007dc <gdiBitBlt+0x5c4>
						screen[y][(x>>4)+1] ^= pattern.halfword[0];
 8000628:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800062c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000630:	111b      	asrs	r3, r3, #4
 8000632:	b21b      	sxth	r3, r3
 8000634:	1c59      	adds	r1, r3, #1
 8000636:	4864      	ldr	r0, [pc, #400]	@ (80007c8 <gdiBitBlt+0x5b0>)
 8000638:	4613      	mov	r3, r2
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	4413      	add	r3, r2
 800063e:	00da      	lsls	r2, r3, #3
 8000640:	1ad2      	subs	r2, r2, r3
 8000642:	1853      	adds	r3, r2, r1
 8000644:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000648:	4b61      	ldr	r3, [pc, #388]	@ (80007d0 <gdiBitBlt+0x5b8>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000650:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000654:	1109      	asrs	r1, r1, #4
 8000656:	b209      	sxth	r1, r1
 8000658:	3101      	adds	r1, #1
 800065a:	4043      	eors	r3, r0
 800065c:	b29c      	uxth	r4, r3
 800065e:	485a      	ldr	r0, [pc, #360]	@ (80007c8 <gdiBitBlt+0x5b0>)
 8000660:	4613      	mov	r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	00da      	lsls	r2, r3, #3
 8000668:	1ad2      	subs	r2, r2, r3
 800066a:	1853      	adds	r3, r2, r1
 800066c:	4622      	mov	r2, r4
 800066e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 8000672:	e0b3      	b.n	80007dc <gdiBitBlt+0x5c4>
				case GDI_ROP_OR:
					screen[y][x>>4] |= pattern.halfword[1];
 8000674:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000678:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800067c:	111b      	asrs	r3, r3, #4
 800067e:	b21b      	sxth	r3, r3
 8000680:	4618      	mov	r0, r3
 8000682:	4951      	ldr	r1, [pc, #324]	@ (80007c8 <gdiBitBlt+0x5b0>)
 8000684:	4613      	mov	r3, r2
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	4413      	add	r3, r2
 800068a:	00da      	lsls	r2, r3, #3
 800068c:	1ad2      	subs	r2, r2, r3
 800068e:	1813      	adds	r3, r2, r0
 8000690:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000694:	4b4e      	ldr	r3, [pc, #312]	@ (80007d0 <gdiBitBlt+0x5b8>)
 8000696:	885b      	ldrh	r3, [r3, #2]
 8000698:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800069c:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80006a0:	1100      	asrs	r0, r0, #4
 80006a2:	b200      	sxth	r0, r0
 80006a4:	4604      	mov	r4, r0
 80006a6:	430b      	orrs	r3, r1
 80006a8:	b298      	uxth	r0, r3
 80006aa:	4947      	ldr	r1, [pc, #284]	@ (80007c8 <gdiBitBlt+0x5b0>)
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	00da      	lsls	r2, r3, #3
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	1913      	adds	r3, r2, r4
 80006b8:	4602      	mov	r2, r0
 80006ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 80006be:	4b44      	ldr	r3, [pc, #272]	@ (80007d0 <gdiBitBlt+0x5b8>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	f000 808c 	beq.w	80007e0 <gdiBitBlt+0x5c8>
						screen[y][(x>>4)+1] |= pattern.halfword[0];
 80006c8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80006d0:	111b      	asrs	r3, r3, #4
 80006d2:	b21b      	sxth	r3, r3
 80006d4:	1c59      	adds	r1, r3, #1
 80006d6:	483c      	ldr	r0, [pc, #240]	@ (80007c8 <gdiBitBlt+0x5b0>)
 80006d8:	4613      	mov	r3, r2
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	4413      	add	r3, r2
 80006de:	00da      	lsls	r2, r3, #3
 80006e0:	1ad2      	subs	r2, r2, r3
 80006e2:	1853      	adds	r3, r2, r1
 80006e4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80006e8:	4b39      	ldr	r3, [pc, #228]	@ (80007d0 <gdiBitBlt+0x5b8>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006f0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80006f4:	1109      	asrs	r1, r1, #4
 80006f6:	b209      	sxth	r1, r1
 80006f8:	3101      	adds	r1, #1
 80006fa:	4303      	orrs	r3, r0
 80006fc:	b29c      	uxth	r4, r3
 80006fe:	4832      	ldr	r0, [pc, #200]	@ (80007c8 <gdiBitBlt+0x5b0>)
 8000700:	4613      	mov	r3, r2
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	4413      	add	r3, r2
 8000706:	00da      	lsls	r2, r3, #3
 8000708:	1ad2      	subs	r2, r2, r3
 800070a:	1853      	adds	r3, r2, r1
 800070c:	4622      	mov	r2, r4
 800070e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 8000712:	e065      	b.n	80007e0 <gdiBitBlt+0x5c8>
				case GDI_ROP_NAND:
					screen[y][x>>4] &= ~pattern.halfword[1];
 8000714:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000718:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800071c:	111b      	asrs	r3, r3, #4
 800071e:	b21b      	sxth	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	4929      	ldr	r1, [pc, #164]	@ (80007c8 <gdiBitBlt+0x5b0>)
 8000724:	4613      	mov	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	4413      	add	r3, r2
 800072a:	00da      	lsls	r2, r3, #3
 800072c:	1ad2      	subs	r2, r2, r3
 800072e:	1813      	adds	r3, r2, r0
 8000730:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000734:	b21a      	sxth	r2, r3
 8000736:	4b26      	ldr	r3, [pc, #152]	@ (80007d0 <gdiBitBlt+0x5b8>)
 8000738:	885b      	ldrh	r3, [r3, #2]
 800073a:	b21b      	sxth	r3, r3
 800073c:	43db      	mvns	r3, r3
 800073e:	b21b      	sxth	r3, r3
 8000740:	4013      	ands	r3, r2
 8000742:	b219      	sxth	r1, r3
 8000744:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000748:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800074c:	111b      	asrs	r3, r3, #4
 800074e:	b21b      	sxth	r3, r3
 8000750:	461c      	mov	r4, r3
 8000752:	b288      	uxth	r0, r1
 8000754:	491c      	ldr	r1, [pc, #112]	@ (80007c8 <gdiBitBlt+0x5b0>)
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	00da      	lsls	r2, r3, #3
 800075e:	1ad2      	subs	r2, r2, r3
 8000760:	1913      	adds	r3, r2, r4
 8000762:	4602      	mov	r2, r0
 8000764:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 8000768:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <gdiBitBlt+0x5b8>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d039      	beq.n	80007e4 <gdiBitBlt+0x5cc>
						screen[y][(x>>4)+1] &= ~pattern.halfword[0];
 8000770:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000774:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000778:	111b      	asrs	r3, r3, #4
 800077a:	b21b      	sxth	r3, r3
 800077c:	1c59      	adds	r1, r3, #1
 800077e:	4812      	ldr	r0, [pc, #72]	@ (80007c8 <gdiBitBlt+0x5b0>)
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	00da      	lsls	r2, r3, #3
 8000788:	1ad2      	subs	r2, r2, r3
 800078a:	1853      	adds	r3, r2, r1
 800078c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000790:	b21a      	sxth	r2, r3
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <gdiBitBlt+0x5b8>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	b21b      	sxth	r3, r3
 8000798:	43db      	mvns	r3, r3
 800079a:	b21b      	sxth	r3, r3
 800079c:	4013      	ands	r3, r2
 800079e:	b218      	sxth	r0, r3
 80007a0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80007a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007a8:	111b      	asrs	r3, r3, #4
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	1c59      	adds	r1, r3, #1
 80007ae:	b284      	uxth	r4, r0
 80007b0:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <gdiBitBlt+0x5b0>)
 80007b2:	4613      	mov	r3, r2
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	4413      	add	r3, r2
 80007b8:	00da      	lsls	r2, r3, #3
 80007ba:	1ad2      	subs	r2, r2, r3
 80007bc:	1853      	adds	r3, r2, r1
 80007be:	4622      	mov	r2, r4
 80007c0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 80007c4:	e00e      	b.n	80007e4 <gdiBitBlt+0x5cc>
 80007c6:	bf00      	nop
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20003c98 	.word	0x20003c98
 80007d0:	20003c94 	.word	0x20003c94
					break;
 80007d4:	bf00      	nop
 80007d6:	e006      	b.n	80007e6 <gdiBitBlt+0x5ce>
					break;
 80007d8:	bf00      	nop
 80007da:	e004      	b.n	80007e6 <gdiBitBlt+0x5ce>
					break;
 80007dc:	bf00      	nop
 80007de:	e002      	b.n	80007e6 <gdiBitBlt+0x5ce>
					break;
 80007e0:	bf00      	nop
 80007e2:	e000      	b.n	80007e6 <gdiBitBlt+0x5ce>
					break;
 80007e4:	bf00      	nop
		for (todo = w; todo>0;) {
 80007e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	f73f ad3c 	bgt.w	8000268 <gdiBitBlt+0x50>
	for(;--h >= 0; y++) {
 80007f0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	3301      	adds	r3, #1
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	813b      	strh	r3, [r7, #8]
 80007fc:	8c3b      	ldrh	r3, [r7, #32]
 80007fe:	3b01      	subs	r3, #1
 8000800:	b29b      	uxth	r3, r3
 8000802:	843b      	strh	r3, [r7, #32]
 8000804:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000808:	2b00      	cmp	r3, #0
 800080a:	f6bf ad2a 	bge.w	8000262 <gdiBitBlt+0x4a>
			}
		}
	}
}
 800080e:	bf00      	nop
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bc90      	pop	{r4, r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop

0800081c <gdiDrawTextEx>:
		ptext		Pointer to text

	return			none
*/
void gdiDrawTextEx(int16_t x, int16_t y, char *ptext)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af02      	add	r7, sp, #8
 8000822:	4603      	mov	r3, r0
 8000824:	603a      	str	r2, [r7, #0]
 8000826:	80fb      	strh	r3, [r7, #6]
 8000828:	460b      	mov	r3, r1
 800082a:	80bb      	strh	r3, [r7, #4]

	char		c;

	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH)
 800082c:	e01a      	b.n	8000864 <gdiDrawTextEx+0x48>
		if (c >= GDI_SYSFONT_OFFSET)
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	2b1f      	cmp	r3, #31
 8000832:	d913      	bls.n	800085c <gdiDrawTextEx+0x40>
			gdiBitBlt(NULL, x, y, GDI_SYSFONT_WIDTH, GDI_SYSFONT_HEIGHT, (pBMP) gdiSystemFont[c-GDI_SYSFONT_OFFSET]);
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	f1a3 0220 	sub.w	r2, r3, #32
 800083a:	4613      	mov	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4413      	add	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	4a0f      	ldr	r2, [pc, #60]	@ (8000880 <gdiDrawTextEx+0x64>)
 8000844:	4413      	add	r3, r2
 8000846:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800084a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	230a      	movs	r3, #10
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2306      	movs	r3, #6
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff fcde 	bl	8000218 <gdiBitBlt>
	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH)
 800085c:	88fb      	ldrh	r3, [r7, #6]
 800085e:	3306      	adds	r3, #6
 8000860:	b29b      	uxth	r3, r3
 8000862:	80fb      	strh	r3, [r7, #6]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	603a      	str	r2, [r7, #0]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	73fb      	strb	r3, [r7, #15]
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d1dc      	bne.n	800082e <gdiDrawTextEx+0x12>
//	clip here if		if (x >= VID_PIXELS_X - GDI_SYSFONT_WIDTH)
		// else control character handling ...

}
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	080061e8 	.word	0x080061e8

08000884 <gdiDrawSmallTextEx>:
void gdiDrawSmallTextEx(int16_t x, int16_t y, char *ptext)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af02      	add	r7, sp, #8
 800088a:	4603      	mov	r3, r0
 800088c:	603a      	str	r2, [r7, #0]
 800088e:	80fb      	strh	r3, [r7, #6]
 8000890:	460b      	mov	r3, r1
 8000892:	80bb      	strh	r3, [r7, #4]

	char		c;

	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH_SMALL)
 8000894:	e019      	b.n	80008ca <gdiDrawSmallTextEx+0x46>
		if (c >= GDI_SYSFONT_OFFSET)
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	2b1f      	cmp	r3, #31
 800089a:	d912      	bls.n	80008c2 <gdiDrawSmallTextEx+0x3e>
			gdiBitBlt(NULL, x, y, GDI_SYSFONT_WIDTH_SMALL, GDI_SYSFONT_HEIGHT_SMALL, (pBMP) gdiSystemSmallFont[c-GDI_SYSFONT_OFFSET]);
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	f1a3 0220 	sub.w	r2, r3, #32
 80008a2:	4613      	mov	r3, r2
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	1a9b      	subs	r3, r3, r2
 80008a8:	4a0e      	ldr	r2, [pc, #56]	@ (80008e4 <gdiDrawSmallTextEx+0x60>)
 80008aa:	4413      	add	r3, r2
 80008ac:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80008b0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	2307      	movs	r3, #7
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2305      	movs	r3, #5
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fcab 	bl	8000218 <gdiBitBlt>
	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH_SMALL)
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	3305      	adds	r3, #5
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	80fb      	strh	r3, [r7, #6]
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	1c5a      	adds	r2, r3, #1
 80008ce:	603a      	str	r2, [r7, #0]
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	73fb      	strb	r3, [r7, #15]
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1dd      	bne.n	8000896 <gdiDrawSmallTextEx+0x12>
//	clip here if		if (x >= VID_PIXELS_X - GDI_SYSFONT_WIDTH)
		// else control character handling ...

}
 80008da:	bf00      	nop
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	08005f48 	.word	0x08005f48

080008e8 <gdiDrawBigTextEx>:

void gdiDrawBigTextEx(int16_t x, int16_t y, char *ptext)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	4603      	mov	r3, r0
 80008f0:	603a      	str	r2, [r7, #0]
 80008f2:	80fb      	strh	r3, [r7, #6]
 80008f4:	460b      	mov	r3, r1
 80008f6:	80bb      	strh	r3, [r7, #4]

	char		c;

	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH_BIG)
 80008f8:	e01a      	b.n	8000930 <gdiDrawBigTextEx+0x48>
		if (c >= GDI_SYSFONT_OFFSET)
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	2b1f      	cmp	r3, #31
 80008fe:	d913      	bls.n	8000928 <gdiDrawBigTextEx+0x40>
			gdiBitBlt(NULL, x, y, GDI_SYSFONT_WIDTH_BIG, GDI_SYSFONT_HEIGHT_BIG, (pBMP) gdiSystemBigFont[c-GDI_SYSFONT_OFFSET]);
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	f1a3 0220 	sub.w	r2, r3, #32
 8000906:	4613      	mov	r3, r2
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	1a9b      	subs	r3, r3, r2
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	4a0f      	ldr	r2, [pc, #60]	@ (800094c <gdiDrawBigTextEx+0x64>)
 8000910:	4413      	add	r3, r2
 8000912:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000916:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800091a:	9301      	str	r3, [sp, #4]
 800091c:	230e      	movs	r3, #14
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2307      	movs	r3, #7
 8000922:	2000      	movs	r0, #0
 8000924:	f7ff fc78 	bl	8000218 <gdiBitBlt>
	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH_BIG)
 8000928:	88fb      	ldrh	r3, [r7, #6]
 800092a:	3307      	adds	r3, #7
 800092c:	b29b      	uxth	r3, r3
 800092e:	80fb      	strh	r3, [r7, #6]
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	603a      	str	r2, [r7, #0]
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	73fb      	strb	r3, [r7, #15]
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1dc      	bne.n	80008fa <gdiDrawBigTextEx+0x12>
//	clip here if		if (x >= VID_PIXELS_X - GDI_SYSFONT_WIDTH)
		// else control character handling ...

}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	080065a8 	.word	0x080065a8

08000950 <Gpio_deinit>:
{
  TimingDelay = nTime;
  while((TimingDelay != 0));
  while(Paused);
}
void Gpio_deinit(GPIO_TypeDef  *GPIOx){
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
		for(int i =0; i<15;i++){
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	e008      	b.n	8000970 <Gpio_deinit+0x20>
			HAL_GPIO_DeInit(GPIOA, i);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	4619      	mov	r1, r3
 8000962:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000966:	f001 fd29 	bl	80023bc <HAL_GPIO_DeInit>
		for(int i =0; i<15;i++){
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	3301      	adds	r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2b0e      	cmp	r3, #14
 8000974:	ddf3      	ble.n	800095e <Gpio_deinit+0xe>
		}
	}
 8000976:	bf00      	nop
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <TIMER_SET>:


void TIMER_SET(uint32_t sys){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]


	if (sys == 16000000){
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a33      	ldr	r2, [pc, #204]	@ (8000a58 <TIMER_SET+0xd8>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d113      	bne.n	80009b8 <TIMER_SET+0x38>
		  __HAL_I2S_DISABLE(&hi2s2);
 8000990:	4b32      	ldr	r3, [pc, #200]	@ (8000a5c <TIMER_SET+0xdc>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	69da      	ldr	r2, [r3, #28]
 8000996:	4b31      	ldr	r3, [pc, #196]	@ (8000a5c <TIMER_SET+0xdc>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800099e:	61da      	str	r2, [r3, #28]
		   SPI2->I2SPR = 1;
 80009a0:	4b2f      	ldr	r3, [pc, #188]	@ (8000a60 <TIMER_SET+0xe0>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	621a      	str	r2, [r3, #32]
		   __HAL_I2S_ENABLE(&hi2s2);
 80009a6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a5c <TIMER_SET+0xdc>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	69da      	ldr	r2, [r3, #28]
 80009ac:	4b2b      	ldr	r3, [pc, #172]	@ (8000a5c <TIMER_SET+0xdc>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80009b4:	61da      	str	r2, [r3, #28]
	else if(sys == 120000000){
		__HAL_I2S_DISABLE(&hi2s2);
		SPI2->I2SPR = (7 << SPI_I2SPR_I2SDIV_Pos) | (1 << SPI_I2SPR_ODD_Pos);
		__HAL_I2S_ENABLE(&hi2s2);
	}
}
 80009b6:	e04a      	b.n	8000a4e <TIMER_SET+0xce>
	else if(sys == 48000000){
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a2a      	ldr	r2, [pc, #168]	@ (8000a64 <TIMER_SET+0xe4>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d113      	bne.n	80009e8 <TIMER_SET+0x68>
		  __HAL_I2S_DISABLE(&hi2s2);
 80009c0:	4b26      	ldr	r3, [pc, #152]	@ (8000a5c <TIMER_SET+0xdc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	69da      	ldr	r2, [r3, #28]
 80009c6:	4b25      	ldr	r3, [pc, #148]	@ (8000a5c <TIMER_SET+0xdc>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80009ce:	61da      	str	r2, [r3, #28]
		  SPI2->I2SPR = (3 << SPI_I2SPR_I2SDIV_Pos)
 80009d0:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <TIMER_SET+0xe0>)
 80009d2:	2203      	movs	r2, #3
 80009d4:	621a      	str	r2, [r3, #32]
		   __HAL_I2S_ENABLE(&hi2s2);
 80009d6:	4b21      	ldr	r3, [pc, #132]	@ (8000a5c <TIMER_SET+0xdc>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	69da      	ldr	r2, [r3, #28]
 80009dc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a5c <TIMER_SET+0xdc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80009e4:	61da      	str	r2, [r3, #28]
}
 80009e6:	e032      	b.n	8000a4e <TIMER_SET+0xce>
	else if (sys == 96000000){
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000a68 <TIMER_SET+0xe8>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d116      	bne.n	8000a1e <TIMER_SET+0x9e>
		  __HAL_I2S_DISABLE(&hi2s2);
 80009f0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <TIMER_SET+0xdc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	69da      	ldr	r2, [r3, #28]
 80009f6:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <TIMER_SET+0xdc>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80009fe:	61da      	str	r2, [r3, #28]
		  SPI2->I2SPR = (6 << SPI_I2SPR_I2SDIV_Pos)
 8000a00:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <TIMER_SET+0xe0>)
 8000a02:	2206      	movs	r2, #6
 8000a04:	621a      	str	r2, [r3, #32]
		   __HAL_I2S_ENABLE(&hi2s2);
 8000a06:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <TIMER_SET+0xdc>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	69da      	ldr	r2, [r3, #28]
 8000a0c:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <TIMER_SET+0xdc>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a14:	61da      	str	r2, [r3, #28]
		   HAL_Delay(1);
 8000a16:	2001      	movs	r0, #1
 8000a18:	f000 fed0 	bl	80017bc <HAL_Delay>
}
 8000a1c:	e017      	b.n	8000a4e <TIMER_SET+0xce>
	else if(sys == 120000000){
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a12      	ldr	r2, [pc, #72]	@ (8000a6c <TIMER_SET+0xec>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d113      	bne.n	8000a4e <TIMER_SET+0xce>
		__HAL_I2S_DISABLE(&hi2s2);
 8000a26:	4b0d      	ldr	r3, [pc, #52]	@ (8000a5c <TIMER_SET+0xdc>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	69da      	ldr	r2, [r3, #28]
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <TIMER_SET+0xdc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000a34:	61da      	str	r2, [r3, #28]
		SPI2->I2SPR = (7 << SPI_I2SPR_I2SDIV_Pos) | (1 << SPI_I2SPR_ODD_Pos);
 8000a36:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <TIMER_SET+0xe0>)
 8000a38:	f240 1207 	movw	r2, #263	@ 0x107
 8000a3c:	621a      	str	r2, [r3, #32]
		__HAL_I2S_ENABLE(&hi2s2);
 8000a3e:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <TIMER_SET+0xdc>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	69da      	ldr	r2, [r3, #28]
 8000a44:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <TIMER_SET+0xdc>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a4c:	61da      	str	r2, [r3, #28]
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	00f42400 	.word	0x00f42400
 8000a5c:	20003c9c 	.word	0x20003c9c
 8000a60:	40003800 	.word	0x40003800
 8000a64:	02dc6c00 	.word	0x02dc6c00
 8000a68:	05b8d800 	.word	0x05b8d800
 8000a6c:	07270e00 	.word	0x07270e00

08000a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_I2S_DeInit(&hi2s2);
 8000a76:	4878      	ldr	r0, [pc, #480]	@ (8000c58 <main+0x1e8>)
 8000a78:	f001 fe62 	bl	8002740 <HAL_I2S_DeInit>
	HAL_TIM_OC_DeInit(&htim2);
 8000a7c:	4877      	ldr	r0, [pc, #476]	@ (8000c5c <main+0x1ec>)
 8000a7e:	f003 fe2c 	bl	80046da <HAL_TIM_OC_DeInit>
	HAL_TIM_OC_DeInit(&htim3);
 8000a82:	4877      	ldr	r0, [pc, #476]	@ (8000c60 <main+0x1f0>)
 8000a84:	f003 fe29 	bl	80046da <HAL_TIM_OC_DeInit>
	Gpio_deinit(GPIOA);
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8c:	f7ff ff60 	bl	8000950 <Gpio_deinit>
	Gpio_deinit(GPIOB);
 8000a90:	4874      	ldr	r0, [pc, #464]	@ (8000c64 <main+0x1f4>)
 8000a92:	f7ff ff5d 	bl	8000950 <Gpio_deinit>
	Gpio_deinit(GPIOC);
 8000a96:	4874      	ldr	r0, [pc, #464]	@ (8000c68 <main+0x1f8>)
 8000a98:	f7ff ff5a 	bl	8000950 <Gpio_deinit>
	HAL_DMA_DeInit(&hdma_tim3_ch1);
 8000a9c:	4873      	ldr	r0, [pc, #460]	@ (8000c6c <main+0x1fc>)
 8000a9e:	f001 f867 	bl	8001b70 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_tim3_ch3);
 8000aa2:	4873      	ldr	r0, [pc, #460]	@ (8000c70 <main+0x200>)
 8000aa4:	f001 f864 	bl	8001b70 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_spi2_tx);
 8000aa8:	4872      	ldr	r0, [pc, #456]	@ (8000c74 <main+0x204>)
 8000aaa:	f001 f861 	bl	8001b70 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_tim3_ch4);
 8000aae:	4872      	ldr	r0, [pc, #456]	@ (8000c78 <main+0x208>)
 8000ab0:	f001 f85e 	bl	8001b70 <HAL_DMA_DeInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab4:	f000 fe11 	bl	80016da <HAL_Init>

  /* USER CODE BEGIN Init */

  /* --- Enable Flash prefetch and caches before changing SYSCLK --- */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b70      	ldr	r3, [pc, #448]	@ (8000c7c <main+0x20c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a6f      	ldr	r2, [pc, #444]	@ (8000c7c <main+0x20c>)
 8000abe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ac2:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac4:	4b6d      	ldr	r3, [pc, #436]	@ (8000c7c <main+0x20c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a6c      	ldr	r2, [pc, #432]	@ (8000c7c <main+0x20c>)
 8000aca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ace:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad0:	4b6a      	ldr	r3, [pc, #424]	@ (8000c7c <main+0x20c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a69      	ldr	r2, [pc, #420]	@ (8000c7c <main+0x20c>)
 8000ad6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ada:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000adc:	f000 f8e4 	bl	8000ca8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae0:	f000 fb00 	bl	80010e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ae4:	f000 fabc 	bl	8001060 <MX_DMA_Init>
  MX_TIM2_Init();
 8000ae8:	f000 f950 	bl	8000d8c <MX_TIM2_Init>
  MX_I2S2_Init();
 8000aec:	f000 f926 	bl	8000d3c <MX_I2S2_Init>
  TIMER_SET(HAL_RCC_GetSysClockFreq());
 8000af0:	f002 fc68 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff42 	bl	8000980 <TIMER_SET>
  MX_TIM3_Init();
 8000afc:	f000 f9da 	bl	8000eb4 <MX_TIM3_Init>
  //Video_SetupTiming();
  // 1) How many timer ticks per half-word at your clock?


  //do know if it is necessary
  HAL_TIM_Base_Start(&htim2); // start the timer for the video sync
 8000b00:	4856      	ldr	r0, [pc, #344]	@ (8000c5c <main+0x1ec>)
 8000b02:	f003 fd23 	bl	800454c <HAL_TIM_Base_Start>

  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);  // OC4Ref → TRGO
 8000b06:	210c      	movs	r1, #12
 8000b08:	4854      	ldr	r0, [pc, #336]	@ (8000c5c <main+0x1ec>)
 8000b0a:	f003 fe57 	bl	80047bc <HAL_TIM_OC_Start>


  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4853      	ldr	r0, [pc, #332]	@ (8000c60 <main+0x1f0>)
 8000b12:	f003 fe53 	bl	80047bc <HAL_TIM_OC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // this the same
 8000b16:	2104      	movs	r1, #4
 8000b18:	4851      	ldr	r0, [pc, #324]	@ (8000c60 <main+0x1f0>)
 8000b1a:	f003 ffc3 	bl	8004aa4 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3);
 8000b1e:	2108      	movs	r1, #8
 8000b20:	484f      	ldr	r0, [pc, #316]	@ (8000c60 <main+0x1f0>)
 8000b22:	f003 fe4b 	bl	80047bc <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_4);
 8000b26:	210c      	movs	r1, #12
 8000b28:	484d      	ldr	r0, [pc, #308]	@ (8000c60 <main+0x1f0>)
 8000b2a:	f003 fe47 	bl	80047bc <HAL_TIM_OC_Start>



  HAL_DMA_Start(
 8000b2e:	4954      	ldr	r1, [pc, #336]	@ (8000c80 <main+0x210>)
 8000b30:	f240 1345 	movw	r3, #325	@ 0x145
 8000b34:	4a53      	ldr	r2, [pc, #332]	@ (8000c84 <main+0x214>)
 8000b36:	484d      	ldr	r0, [pc, #308]	@ (8000c6c <main+0x1fc>)
 8000b38:	f001 f8b0 	bl	8001c9c <HAL_DMA_Start>
    &hdma_tim3_ch1,
    (uint32_t)SyncTable,                // memory: array of CCR1 timings
    (uint32_t)&TIM3->CCR1,              // peripheral: CCR1 register
    325                           // one entry per visible line
  );
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);  // also enable CC1DE for VSync
 8000b3c:	4b48      	ldr	r3, [pc, #288]	@ (8000c60 <main+0x1f0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	4b47      	ldr	r3, [pc, #284]	@ (8000c60 <main+0x1f0>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b4a:	60da      	str	r2, [r3, #12]

  // 2) LINE BUFFERS → I2S DMA CMAR at back porch (CC3)
  HAL_DMA_Start(
 8000b4c:	494e      	ldr	r1, [pc, #312]	@ (8000c88 <main+0x218>)
    &hdma_tim3_ch3,
    (uint32_t)lineptrs,                 // memory: array of line-buffer addresses
    (uint32_t)&hdma_spi2_tx.Instance->CMAR,
 8000b4e:	4b49      	ldr	r3, [pc, #292]	@ (8000c74 <main+0x204>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	330c      	adds	r3, #12
  HAL_DMA_Start(
 8000b54:	461a      	mov	r2, r3
 8000b56:	f240 1339 	movw	r3, #313	@ 0x139
 8000b5a:	4845      	ldr	r0, [pc, #276]	@ (8000c70 <main+0x200>)
 8000b5c:	f001 f89e 	bl	8001c9c <HAL_DMA_Start>
	313//VID_VSIZE
  );

  // 3) BLACK-PORCH → I2S DMA CMAR at front porch (CC4)
  HAL_DMA_Start(
 8000b60:	494a      	ldr	r1, [pc, #296]	@ (8000c8c <main+0x21c>)
    &hdma_tim3_ch4,
    (uint32_t)borders,                  // memory: single-entry blank-line buffer
    (uint32_t)&hdma_spi2_tx.Instance->CMAR,
 8000b62:	4b44      	ldr	r3, [pc, #272]	@ (8000c74 <main+0x204>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	330c      	adds	r3, #12
  HAL_DMA_Start(
 8000b68:	461a      	mov	r2, r3
 8000b6a:	f240 1339 	movw	r3, #313	@ 0x139
 8000b6e:	4842      	ldr	r0, [pc, #264]	@ (8000c78 <main+0x208>)
 8000b70:	f001 f894 	bl	8001c9c <HAL_DMA_Start>
    313// one entry per line
  );

  // 4) Kick off the I2S DMA stream once
  HAL_I2S_Transmit_DMA(
 8000b74:	2220      	movs	r2, #32
 8000b76:	4946      	ldr	r1, [pc, #280]	@ (8000c90 <main+0x220>)
 8000b78:	4837      	ldr	r0, [pc, #220]	@ (8000c58 <main+0x1e8>)
 8000b7a:	f001 fe09 	bl	8002790 <HAL_I2S_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vidClearScreen();
 8000b7e:	f000 fd77 	bl	8001670 <vidClearScreen>
  //gdiDrawTextEx(140, 90, "IDAN");
//  gdiDrawTextEx(150, 80, "RUBEN");
//  gdiDrawTextEx(160, 100, "a");
  while (1)
  {
		for (int i=50, j=50; i < 160 && j < 150; i++ && j++) {
 8000b82:	2332      	movs	r3, #50	@ 0x32
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	2332      	movs	r3, #50	@ 0x32
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	e012      	b.n	8000bb2 <main+0x142>
            gdiDrawSmallTextEx(i, j, "IDAN");
 8000b8c:	4a41      	ldr	r2, [pc, #260]	@ (8000c94 <main+0x224>)
 8000b8e:	6939      	ldr	r1, [r7, #16]
 8000b90:	6978      	ldr	r0, [r7, #20]
 8000b92:	f7ff fe77 	bl	8000884 <gdiDrawSmallTextEx>
//			if (i == 160 && j == 150) {
//				i = 50;
//				j = 50;
//			}
        	HAL_Delay(50);
 8000b96:	2032      	movs	r0, #50	@ 0x32
 8000b98:	f000 fe10 	bl	80017bc <HAL_Delay>
        	vidClearScreen();
 8000b9c:	f000 fd68 	bl	8001670 <vidClearScreen>
		for (int i=50, j=50; i < 160 && j < 150; i++ && j++) {
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	617a      	str	r2, [r7, #20]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <main+0x142>
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	1c5a      	adds	r2, r3, #1
 8000bae:	613a      	str	r2, [r7, #16]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2b9f      	cmp	r3, #159	@ 0x9f
 8000bb6:	dc02      	bgt.n	8000bbe <main+0x14e>
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	2b95      	cmp	r3, #149	@ 0x95
 8000bbc:	dde6      	ble.n	8000b8c <main+0x11c>
		}
		vidClearScreen();
 8000bbe:	f000 fd57 	bl	8001670 <vidClearScreen>

		for (int k=0; k < 100; k++) {
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	e021      	b.n	8000c0c <main+0x19c>
			gdiDrawTextEx((100+k), 50, "I");
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	3364      	adds	r3, #100	@ 0x64
 8000bcc:	4a32      	ldr	r2, [pc, #200]	@ (8000c98 <main+0x228>)
 8000bce:	2132      	movs	r1, #50	@ 0x32
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fe23 	bl	800081c <gdiDrawTextEx>
			gdiDrawTextEx((105+k), 50, "D");
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	3369      	adds	r3, #105	@ 0x69
 8000bda:	4a30      	ldr	r2, [pc, #192]	@ (8000c9c <main+0x22c>)
 8000bdc:	2132      	movs	r1, #50	@ 0x32
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fe1c 	bl	800081c <gdiDrawTextEx>
			gdiDrawTextEx((110+k), 50, "A");
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	336e      	adds	r3, #110	@ 0x6e
 8000be8:	4a2d      	ldr	r2, [pc, #180]	@ (8000ca0 <main+0x230>)
 8000bea:	2132      	movs	r1, #50	@ 0x32
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fe15 	bl	800081c <gdiDrawTextEx>
			gdiDrawTextEx((115+k), 50, "N");
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3373      	adds	r3, #115	@ 0x73
 8000bf6:	4a2b      	ldr	r2, [pc, #172]	@ (8000ca4 <main+0x234>)
 8000bf8:	2132      	movs	r1, #50	@ 0x32
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fe0e 	bl	800081c <gdiDrawTextEx>
			HAL_Delay(50);
 8000c00:	2032      	movs	r0, #50	@ 0x32
 8000c02:	f000 fddb 	bl	80017bc <HAL_Delay>
		for (int k=0; k < 100; k++) {
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2b63      	cmp	r3, #99	@ 0x63
 8000c10:	ddda      	ble.n	8000bc8 <main+0x158>
		}
		vidClearScreen();
 8000c12:	f000 fd2d 	bl	8001670 <vidClearScreen>

		for (int i=50, j=50; i < 160 && j < 150; i++ && j++) {
 8000c16:	2332      	movs	r3, #50	@ 0x32
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	2332      	movs	r3, #50	@ 0x32
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	e012      	b.n	8000c46 <main+0x1d6>
            gdiDrawBigTextEx(i, j, "IDAN");
 8000c20:	4a1c      	ldr	r2, [pc, #112]	@ (8000c94 <main+0x224>)
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	68b8      	ldr	r0, [r7, #8]
 8000c26:	f7ff fe5f 	bl	80008e8 <gdiDrawBigTextEx>
//			if (i == 160 && j == 150) {
//				i = 50;
//				j = 50;
//			}
        	HAL_Delay(50);
 8000c2a:	2032      	movs	r0, #50	@ 0x32
 8000c2c:	f000 fdc6 	bl	80017bc <HAL_Delay>
        	vidClearScreen();
 8000c30:	f000 fd1e 	bl	8001670 <vidClearScreen>
		for (int i=50, j=50; i < 160 && j < 150; i++ && j++) {
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	60ba      	str	r2, [r7, #8]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <main+0x1d6>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	1c5a      	adds	r2, r3, #1
 8000c42:	607a      	str	r2, [r7, #4]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	2b9f      	cmp	r3, #159	@ 0x9f
 8000c4a:	dc02      	bgt.n	8000c52 <main+0x1e2>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b95      	cmp	r3, #149	@ 0x95
 8000c50:	dde6      	ble.n	8000c20 <main+0x1b0>
		}
		vidClearScreen();
 8000c52:	f000 fd0d 	bl	8001670 <vidClearScreen>
		for (int i=50, j=50; i < 160 && j < 150; i++ && j++) {
 8000c56:	e794      	b.n	8000b82 <main+0x112>
 8000c58:	20003c9c 	.word	0x20003c9c
 8000c5c:	20003d38 	.word	0x20003d38
 8000c60:	20003d84 	.word	0x20003d84
 8000c64:	48000400 	.word	0x48000400
 8000c68:	48000800 	.word	0x48000800
 8000c6c:	20003dd0 	.word	0x20003dd0
 8000c70:	20003e30 	.word	0x20003e30
 8000c74:	20003cd8 	.word	0x20003cd8
 8000c78:	20003e90 	.word	0x20003e90
 8000c7c:	40022000 	.word	0x40022000
 8000c80:	08006b20 	.word	0x08006b20
 8000c84:	40000434 	.word	0x40000434
 8000c88:	200028e8 	.word	0x200028e8
 8000c8c:	200032ac 	.word	0x200032ac
 8000c90:	20003ef4 	.word	0x20003ef4
 8000c94:	08005f30 	.word	0x08005f30
 8000c98:	08005f38 	.word	0x08005f38
 8000c9c:	08005f3c 	.word	0x08005f3c
 8000ca0:	08005f40 	.word	0x08005f40
 8000ca4:	08005f44 	.word	0x08005f44

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b094      	sub	sp, #80	@ 0x50
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	2238      	movs	r2, #56	@ 0x38
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f005 f902 	bl	8005ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cce:	f001 fe77 	bl	80029c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cd6:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000cda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000ce8:	231e      	movs	r3, #30
 8000cea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV10;
 8000cec:	230a      	movs	r3, #10
 8000cee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf8:	f107 0318 	add.w	r3, r7, #24
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 ff13 	bl	8002b28 <HAL_RCC_OscConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000d08:	f000 fa1c 	bl	8001144 <Error_Handler>

  // 8mhz *12 / 2

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d10:	2303      	movs	r3, #3
 8000d12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]



  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2105      	movs	r1, #5
 8000d24:	4618      	mov	r0, r3
 8000d26:	f002 fa11 	bl	800314c <HAL_RCC_ClockConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d30:	f000 fa08 	bl	8001144 <Error_Handler>
  }
}
 8000d34:	bf00      	nop
 8000d36:	3750      	adds	r7, #80	@ 0x50
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2S2_Init 1 */
	//hi2s2.Init.CPOL = I2S_CPOL_HIGH;

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000d40:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <MX_I2S2_Init+0x48>)
 8000d42:	4a11      	ldr	r2, [pc, #68]	@ (8000d88 <MX_I2S2_Init+0x4c>)
 8000d44:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000d46:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <MX_I2S2_Init+0x48>)
 8000d48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d4c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d84 <MX_I2S2_Init+0x48>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d54:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <MX_I2S2_Init+0x48>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <MX_I2S2_Init+0x48>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000d60:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <MX_I2S2_Init+0x48>)
 8000d62:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000d66:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <MX_I2S2_Init+0x48>)
 8000d6a:	2208      	movs	r2, #8
 8000d6c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_I2S2_Init+0x48>)
 8000d70:	f001 fc06 	bl	8002580 <HAL_I2S_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8000d7a:	f000 f9e3 	bl	8001144 <Error_Handler>
//   SPI2->I2SPR = 1;   // I2SDIV = 1, ODD = 0
//   __HAL_I2S_ENABLE(&hi2s2);

  /* USER CODE END I2S2_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20003c9c 	.word	0x20003c9c
 8000d88:	40003800 	.word	0x40003800

08000d8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b094      	sub	sp, #80	@ 0x50
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d92:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000da0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	f107 0320 	add.w	r3, r7, #32
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]
 8000dca:	615a      	str	r2, [r3, #20]
 8000dcc:	619a      	str	r2, [r3, #24]
  //htim2.Init.Prescaler         = VID_HSIZE/4 - 1; // 32/4 -1 = 7
  //htim2.Init.Period            = 2*VID_VSIZE - 1; // 2*625-1 = 1249
  //sConfigOC.Pulse      = VID_VSIZE - 1;

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dce:	4b38      	ldr	r3, [pc, #224]	@ (8000eb0 <MX_TIM2_Init+0x124>)
 8000dd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VID_HSIZE/4 - 1; // 32/4 -1 = 7
 8000dd6:	4b36      	ldr	r3, [pc, #216]	@ (8000eb0 <MX_TIM2_Init+0x124>)
 8000dd8:	2207      	movs	r2, #7
 8000dda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ddc:	4b34      	ldr	r3, [pc, #208]	@ (8000eb0 <MX_TIM2_Init+0x124>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2*VID_VSIZE - 1; // 2*625-1 = 1249
 8000de2:	4b33      	ldr	r3, [pc, #204]	@ (8000eb0 <MX_TIM2_Init+0x124>)
 8000de4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8000de8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000dea:	4b31      	ldr	r3, [pc, #196]	@ (8000eb0 <MX_TIM2_Init+0x124>)
 8000dec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000df0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df2:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb0 <MX_TIM2_Init+0x124>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000df8:	482d      	ldr	r0, [pc, #180]	@ (8000eb0 <MX_TIM2_Init+0x124>)
 8000dfa:	f003 fb4f 	bl	800449c <HAL_TIM_Base_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000e04:	f000 f99e 	bl	8001144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE1;
 8000e08:	2370      	movs	r3, #112	@ 0x70
 8000e0a:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e0c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e10:	4619      	mov	r1, r3
 8000e12:	4827      	ldr	r0, [pc, #156]	@ (8000eb0 <MX_TIM2_Init+0x124>)
 8000e14:	f004 f8e6 	bl	8004fe4 <HAL_TIM_ConfigClockSource>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000e1e:	f000 f991 	bl	8001144 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e22:	4823      	ldr	r0, [pc, #140]	@ (8000eb0 <MX_TIM2_Init+0x124>)
 8000e24:	f003 fddc 	bl	80049e0 <HAL_TIM_PWM_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 8000e2e:	f000 f989 	bl	8001144 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;//NEEDS TO BE CHECK WITH EXTERNAL1
 8000e32:	2306      	movs	r3, #6
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000e36:	2370      	movs	r3, #112	@ 0x70
 8000e38:	633b      	str	r3, [r7, #48]	@ 0x30
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	637b      	str	r3, [r7, #52]	@ 0x34
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	63bb      	str	r3, [r7, #56]	@ 0x38
  sSlaveConfig.TriggerFilter = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000e46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4818      	ldr	r0, [pc, #96]	@ (8000eb0 <MX_TIM2_Init+0x124>)
 8000e4e:	f004 f9df 	bl	8005210 <HAL_TIM_SlaveConfigSynchro>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8000e58:	f000 f974 	bl	8001144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF; // OC4Ref → TRGO;
 8000e5c:	2370      	movs	r3, #112	@ 0x70
 8000e5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000e60:	2380      	movs	r3, #128	@ 0x80
 8000e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4811      	ldr	r0, [pc, #68]	@ (8000eb0 <MX_TIM2_Init+0x124>)
 8000e6c:	f004 ff92 	bl	8005d94 <HAL_TIMEx_MasterConfigSynchronization>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000e76:	f000 f965 	bl	8001144 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7a:	2360      	movs	r3, #96	@ 0x60
 8000e7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse =  VID_VSIZE - 1;
 8000e7e:	f44f 731c 	mov.w	r3, #624	@ 0x270
 8000e82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000e84:	2302      	movs	r3, #2
 8000e86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	220c      	movs	r2, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	4807      	ldr	r0, [pc, #28]	@ (8000eb0 <MX_TIM2_Init+0x124>)
 8000e94:	f003 ff92 	bl	8004dbc <HAL_TIM_PWM_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM2_Init+0x116>
  {
    Error_Handler();
 8000e9e:	f000 f951 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ea2:	4803      	ldr	r0, [pc, #12]	@ (8000eb0 <MX_TIM2_Init+0x124>)
 8000ea4:	f000 fb0c 	bl	80014c0 <HAL_TIM_MspPostInit>

}
 8000ea8:	bf00      	nop
 8000eaa:	3750      	adds	r7, #80	@ 0x50
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20003d38 	.word	0x20003d38

08000eb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b094      	sub	sp, #80	@ 0x50
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ec8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed8:	f107 0320 	add.w	r3, r7, #32
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]
 8000ef2:	615a      	str	r2, [r3, #20]
 8000ef4:	619a      	str	r2, [r3, #24]

  //FOR CHANNEL 2:
  //sConfigOC.Pulse = HSYNCCOUNTS;

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ef6:	4b58      	ldr	r3, [pc, #352]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8000ef8:	4a58      	ldr	r2, [pc, #352]	@ (800105c <MX_TIM3_Init+0x1a8>)
 8000efa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000efc:	4b56      	ldr	r3, [pc, #344]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f02:	4b55      	ldr	r3, [pc, #340]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIMERCOUNTS - 1;
 8000f08:	4b53      	ldr	r3, [pc, #332]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8000f0a:	f641 52ff 	movw	r2, #7679	@ 0x1dff
 8000f0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f10:	4b51      	ldr	r3, [pc, #324]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f16:	4b50      	ldr	r3, [pc, #320]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f1c:	484e      	ldr	r0, [pc, #312]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8000f1e:	f003 fabd 	bl	800449c <HAL_TIM_Base_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f28:	f000 f90c 	bl	8001144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f30:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f32:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f36:	4619      	mov	r1, r3
 8000f38:	4847      	ldr	r0, [pc, #284]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8000f3a:	f004 f853 	bl	8004fe4 <HAL_TIM_ConfigClockSource>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f44:	f000 f8fe 	bl	8001144 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000f48:	4843      	ldr	r0, [pc, #268]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8000f4a:	f003 fb6f 	bl	800462c <HAL_TIM_OC_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8000f54:	f000 f8f6 	bl	8001144 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f58:	483f      	ldr	r0, [pc, #252]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8000f5a:	f003 fd41 	bl	80049e0 <HAL_TIM_PWM_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000f64:	f000 f8ee 	bl	8001144 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000f68:	2306      	movs	r3, #6
 8000f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000f70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f74:	4619      	mov	r1, r3
 8000f76:	4838      	ldr	r0, [pc, #224]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8000f78:	f004 f94a 	bl	8005210 <HAL_TIM_SlaveConfigSynchro>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000f82:	f000 f8df 	bl	8001144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000f8a:	2380      	movs	r3, #128	@ 0x80
 8000f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f8e:	f107 0320 	add.w	r3, r7, #32
 8000f92:	4619      	mov	r1, r3
 8000f94:	4830      	ldr	r0, [pc, #192]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8000f96:	f004 fefd 	bl	8005d94 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000fa0:	f000 f8d0 	bl	8001144 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000fa4:	2330      	movs	r3, #48	@ 0x30
 8000fa6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = NO_TOG;
 8000fa8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4826      	ldr	r0, [pc, #152]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8000fbe:	f003 fe83 	bl	8004cc8 <HAL_TIM_OC_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000fc8:	f000 f8bc 	bl	8001144 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fcc:	2360      	movs	r3, #96	@ 0x60
 8000fce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = HSYNCCOUNTS;//HSYNCCOUNTS;
 8000fd0:	f44f 730d 	mov.w	r3, #564	@ 0x234
 8000fd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2204      	movs	r2, #4
 8000fda:	4619      	mov	r1, r3
 8000fdc:	481e      	ldr	r0, [pc, #120]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8000fde:	f003 feed 	bl	8004dbc <HAL_TIM_PWM_ConfigChannel>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM3_Init+0x138>
  {
    Error_Handler();
 8000fe8:	f000 f8ac 	bl	8001144 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;//208;
 8000ff0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ff4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2208      	movs	r2, #8
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4816      	ldr	r0, [pc, #88]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8000ffe:	f003 fe63 	bl	8004cc8 <HAL_TIM_OC_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM3_Init+0x158>
  {
    Error_Handler();
 8001008:	f000 f89c 	bl	8001144 <Error_Handler>
  }
  sConfigOC.Pulse = 8000;//(672+208);//(672+208);
 800100c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001010:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	220c      	movs	r2, #12
 8001016:	4619      	mov	r1, r3
 8001018:	480f      	ldr	r0, [pc, #60]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 800101a:	f003 fe55 	bl	8004cc8 <HAL_TIM_OC_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM3_Init+0x174>
  {
    Error_Handler();
 8001024:	f000 f88e 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  //TIM_DMACmd(TIM3, TIM_DMA_CC1|TIM_DMA_CC3, ENABLE);
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001028:	480b      	ldr	r0, [pc, #44]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 800102a:	f000 fa49 	bl	80014c0 <HAL_TIM_MspPostInit>
  /* Allow TIM3 Compare-3 (CC3) and Compare-4 (CC4) events to generate DMA requests */
  //__HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC2);
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC3);   // CC3DE bit → DMA request on CC3
 800102e:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800103c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC4);   // CC4DE bit → DMA request on CC4
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	68da      	ldr	r2, [r3, #12]
 8001044:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <MX_TIM3_Init+0x1a4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800104c:	60da      	str	r2, [r3, #12]
  //__HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
  //__HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);


}
 800104e:	bf00      	nop
 8001050:	3750      	adds	r7, #80	@ 0x50
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20003d84 	.word	0x20003d84
 800105c:	40000400 	.word	0x40000400

08001060 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001066:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <MX_DMA_Init+0x80>)
 8001068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800106a:	4a1d      	ldr	r2, [pc, #116]	@ (80010e0 <MX_DMA_Init+0x80>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	6493      	str	r3, [r2, #72]	@ 0x48
 8001072:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <MX_DMA_Init+0x80>)
 8001074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <MX_DMA_Init+0x80>)
 8001080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001082:	4a17      	ldr	r2, [pc, #92]	@ (80010e0 <MX_DMA_Init+0x80>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6493      	str	r3, [r2, #72]	@ 0x48
 800108a:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <MX_DMA_Init+0x80>)
 800108c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	200c      	movs	r0, #12
 800109c:	f000 fc8b 	bl	80019b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010a0:	200c      	movs	r0, #12
 80010a2:	f000 fca2 	bl	80019ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	200d      	movs	r0, #13
 80010ac:	f000 fc83 	bl	80019b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010b0:	200d      	movs	r0, #13
 80010b2:	f000 fc9a 	bl	80019ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	200f      	movs	r0, #15
 80010bc:	f000 fc7b 	bl	80019b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010c0:	200f      	movs	r0, #15
 80010c2:	f000 fc92 	bl	80019ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	2010      	movs	r0, #16
 80010cc:	f000 fc73 	bl	80019b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80010d0:	2010      	movs	r0, #16
 80010d2:	f000 fc8a 	bl	80019ea <HAL_NVIC_EnableIRQ>

}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000

080010e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <MX_GPIO_Init+0x5c>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ee:	4a14      	ldr	r2, [pc, #80]	@ (8001140 <MX_GPIO_Init+0x5c>)
 80010f0:	f043 0320 	orr.w	r3, r3, #32
 80010f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f6:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <MX_GPIO_Init+0x5c>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fa:	f003 0320 	and.w	r3, r3, #32
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <MX_GPIO_Init+0x5c>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001106:	4a0e      	ldr	r2, [pc, #56]	@ (8001140 <MX_GPIO_Init+0x5c>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110e:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <MX_GPIO_Init+0x5c>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <MX_GPIO_Init+0x5c>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4a08      	ldr	r2, [pc, #32]	@ (8001140 <MX_GPIO_Init+0x5c>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <MX_GPIO_Init+0x5c>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */


  /* USER CODE END MX_GPIO_Init_2 */
}
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
}
 800114a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <Error_Handler+0x8>

08001150 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <HAL_MspInit+0x44>)
 8001158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800115a:	4a0e      	ldr	r2, [pc, #56]	@ (8001194 <HAL_MspInit+0x44>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6613      	str	r3, [r2, #96]	@ 0x60
 8001162:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <HAL_MspInit+0x44>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <HAL_MspInit+0x44>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001172:	4a08      	ldr	r2, [pc, #32]	@ (8001194 <HAL_MspInit+0x44>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001178:	6593      	str	r3, [r2, #88]	@ 0x58
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_MspInit+0x44>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001186:	f001 fcbf 	bl	8002b08 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000

08001198 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b09e      	sub	sp, #120	@ 0x78
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	2254      	movs	r2, #84	@ 0x54
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f004 fe81 	bl	8005ec0 <memset>
  if(hi2s->Instance==SPI2)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a35      	ldr	r2, [pc, #212]	@ (8001298 <HAL_I2S_MspInit+0x100>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d163      	bne.n	8001290 <HAL_I2S_MspInit+0xf8>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80011c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011cc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 f9d4 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 80011e2:	f7ff ffaf 	bl	8001144 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011e6:	4b2d      	ldr	r3, [pc, #180]	@ (800129c <HAL_I2S_MspInit+0x104>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ea:	4a2c      	ldr	r2, [pc, #176]	@ (800129c <HAL_I2S_MspInit+0x104>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011f2:	4b2a      	ldr	r3, [pc, #168]	@ (800129c <HAL_I2S_MspInit+0x104>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	4b27      	ldr	r3, [pc, #156]	@ (800129c <HAL_I2S_MspInit+0x104>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	4a26      	ldr	r2, [pc, #152]	@ (800129c <HAL_I2S_MspInit+0x104>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120a:	4b24      	ldr	r3, [pc, #144]	@ (800129c <HAL_I2S_MspInit+0x104>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001216:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800121a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001228:	2305      	movs	r3, #5
 800122a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001230:	4619      	mov	r1, r3
 8001232:	481b      	ldr	r0, [pc, #108]	@ (80012a0 <HAL_I2S_MspInit+0x108>)
 8001234:	f000 ff40 	bl	80020b8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001238:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <HAL_I2S_MspInit+0x10c>)
 800123a:	4a1b      	ldr	r2, [pc, #108]	@ (80012a8 <HAL_I2S_MspInit+0x110>)
 800123c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800123e:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_I2S_MspInit+0x10c>)
 8001240:	220d      	movs	r2, #13
 8001242:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001244:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <HAL_I2S_MspInit+0x10c>)
 8001246:	2210      	movs	r2, #16
 8001248:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800124a:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <HAL_I2S_MspInit+0x10c>)
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001250:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <HAL_I2S_MspInit+0x10c>)
 8001252:	2280      	movs	r2, #128	@ 0x80
 8001254:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <HAL_I2S_MspInit+0x10c>)
 8001258:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800125c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <HAL_I2S_MspInit+0x10c>)
 8001260:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001264:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001266:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <HAL_I2S_MspInit+0x10c>)
 8001268:	2220      	movs	r2, #32
 800126a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800126c:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <HAL_I2S_MspInit+0x10c>)
 800126e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001272:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001274:	480b      	ldr	r0, [pc, #44]	@ (80012a4 <HAL_I2S_MspInit+0x10c>)
 8001276:	f000 fbd3 	bl	8001a20 <HAL_DMA_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_I2S_MspInit+0xec>
    {
      Error_Handler();
 8001280:	f7ff ff60 	bl	8001144 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <HAL_I2S_MspInit+0x10c>)
 8001288:	62da      	str	r2, [r3, #44]	@ 0x2c
 800128a:	4a06      	ldr	r2, [pc, #24]	@ (80012a4 <HAL_I2S_MspInit+0x10c>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001290:	bf00      	nop
 8001292:	3778      	adds	r7, #120	@ 0x78
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40003800 	.word	0x40003800
 800129c:	40021000 	.word	0x40021000
 80012a0:	48000400 	.word	0x48000400
 80012a4:	20003cd8 	.word	0x20003cd8
 80012a8:	40020058 	.word	0x40020058

080012ac <HAL_I2S_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspDeInit(I2S_HandleTypeDef* hi2s)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance==SPI2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0b      	ldr	r2, [pc, #44]	@ (80012e8 <HAL_I2S_MspDeInit+0x3c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d10f      	bne.n	80012de <HAL_I2S_MspDeInit+0x32>
  {
    /* USER CODE BEGIN SPI2_MspDeInit 0 */

    /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 80012be:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <HAL_I2S_MspDeInit+0x40>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c2:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <HAL_I2S_MspDeInit+0x40>)
 80012c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80012c8:	6593      	str	r3, [r2, #88]	@ 0x58
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 80012ca:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 80012ce:	4808      	ldr	r0, [pc, #32]	@ (80012f0 <HAL_I2S_MspDeInit+0x44>)
 80012d0:	f001 f874 	bl	80023bc <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(hi2s->hdmatx);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fc49 	bl	8001b70 <HAL_DMA_DeInit>
    /* USER CODE BEGIN SPI2_MspDeInit 1 */

    /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40003800 	.word	0x40003800
 80012ec:	40021000 	.word	0x40021000
 80012f0:	48000400 	.word	0x48000400

080012f4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	@ 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001314:	d129      	bne.n	800136a <HAL_TIM_Base_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001316:	4b62      	ldr	r3, [pc, #392]	@ (80014a0 <HAL_TIM_Base_MspInit+0x1ac>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131a:	4a61      	ldr	r2, [pc, #388]	@ (80014a0 <HAL_TIM_Base_MspInit+0x1ac>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6593      	str	r3, [r2, #88]	@ 0x58
 8001322:	4b5f      	ldr	r3, [pc, #380]	@ (80014a0 <HAL_TIM_Base_MspInit+0x1ac>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4b5c      	ldr	r3, [pc, #368]	@ (80014a0 <HAL_TIM_Base_MspInit+0x1ac>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	4a5b      	ldr	r2, [pc, #364]	@ (80014a0 <HAL_TIM_Base_MspInit+0x1ac>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133a:	4b59      	ldr	r3, [pc, #356]	@ (80014a0 <HAL_TIM_Base_MspInit+0x1ac>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001346:	2301      	movs	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8001356:	230e      	movs	r3, #14
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001364:	f000 fea8 	bl	80020b8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001368:	e095      	b.n	8001496 <HAL_TIM_Base_MspInit+0x1a2>
  else if(htim_base->Instance==TIM3)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a4d      	ldr	r2, [pc, #308]	@ (80014a4 <HAL_TIM_Base_MspInit+0x1b0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	f040 8090 	bne.w	8001496 <HAL_TIM_Base_MspInit+0x1a2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001376:	4b4a      	ldr	r3, [pc, #296]	@ (80014a0 <HAL_TIM_Base_MspInit+0x1ac>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137a:	4a49      	ldr	r2, [pc, #292]	@ (80014a0 <HAL_TIM_Base_MspInit+0x1ac>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	6593      	str	r3, [r2, #88]	@ 0x58
 8001382:	4b47      	ldr	r3, [pc, #284]	@ (80014a0 <HAL_TIM_Base_MspInit+0x1ac>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Channel6;
 800138e:	4b46      	ldr	r3, [pc, #280]	@ (80014a8 <HAL_TIM_Base_MspInit+0x1b4>)
 8001390:	4a46      	ldr	r2, [pc, #280]	@ (80014ac <HAL_TIM_Base_MspInit+0x1b8>)
 8001392:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001394:	4b44      	ldr	r3, [pc, #272]	@ (80014a8 <HAL_TIM_Base_MspInit+0x1b4>)
 8001396:	223d      	movs	r2, #61	@ 0x3d
 8001398:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800139a:	4b43      	ldr	r3, [pc, #268]	@ (80014a8 <HAL_TIM_Base_MspInit+0x1b4>)
 800139c:	2210      	movs	r2, #16
 800139e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a0:	4b41      	ldr	r3, [pc, #260]	@ (80014a8 <HAL_TIM_Base_MspInit+0x1b4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80013a6:	4b40      	ldr	r3, [pc, #256]	@ (80014a8 <HAL_TIM_Base_MspInit+0x1b4>)
 80013a8:	2280      	movs	r2, #128	@ 0x80
 80013aa:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ac:	4b3e      	ldr	r3, [pc, #248]	@ (80014a8 <HAL_TIM_Base_MspInit+0x1b4>)
 80013ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013b2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013b4:	4b3c      	ldr	r3, [pc, #240]	@ (80014a8 <HAL_TIM_Base_MspInit+0x1b4>)
 80013b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ba:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_CIRCULAR;
 80013bc:	4b3a      	ldr	r3, [pc, #232]	@ (80014a8 <HAL_TIM_Base_MspInit+0x1b4>)
 80013be:	2220      	movs	r2, #32
 80013c0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013c2:	4b39      	ldr	r3, [pc, #228]	@ (80014a8 <HAL_TIM_Base_MspInit+0x1b4>)
 80013c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80013ca:	4837      	ldr	r0, [pc, #220]	@ (80014a8 <HAL_TIM_Base_MspInit+0x1b4>)
 80013cc:	f000 fb28 	bl	8001a20 <HAL_DMA_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_TIM_Base_MspInit+0xe6>
      Error_Handler();
 80013d6:	f7ff feb5 	bl	8001144 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a32      	ldr	r2, [pc, #200]	@ (80014a8 <HAL_TIM_Base_MspInit+0x1b4>)
 80013de:	625a      	str	r2, [r3, #36]	@ 0x24
 80013e0:	4a31      	ldr	r2, [pc, #196]	@ (80014a8 <HAL_TIM_Base_MspInit+0x1b4>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 80013e6:	4b32      	ldr	r3, [pc, #200]	@ (80014b0 <HAL_TIM_Base_MspInit+0x1bc>)
 80013e8:	4a32      	ldr	r2, [pc, #200]	@ (80014b4 <HAL_TIM_Base_MspInit+0x1c0>)
 80013ea:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 80013ec:	4b30      	ldr	r3, [pc, #192]	@ (80014b0 <HAL_TIM_Base_MspInit+0x1bc>)
 80013ee:	223f      	movs	r2, #63	@ 0x3f
 80013f0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013f2:	4b2f      	ldr	r3, [pc, #188]	@ (80014b0 <HAL_TIM_Base_MspInit+0x1bc>)
 80013f4:	2210      	movs	r2, #16
 80013f6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f8:	4b2d      	ldr	r3, [pc, #180]	@ (80014b0 <HAL_TIM_Base_MspInit+0x1bc>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80013fe:	4b2c      	ldr	r3, [pc, #176]	@ (80014b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8001400:	2280      	movs	r2, #128	@ 0x80
 8001402:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001404:	4b2a      	ldr	r3, [pc, #168]	@ (80014b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8001406:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800140a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800140c:	4b28      	ldr	r3, [pc, #160]	@ (80014b0 <HAL_TIM_Base_MspInit+0x1bc>)
 800140e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001412:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8001414:	4b26      	ldr	r3, [pc, #152]	@ (80014b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8001416:	2220      	movs	r2, #32
 8001418:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 800141a:	4b25      	ldr	r3, [pc, #148]	@ (80014b0 <HAL_TIM_Base_MspInit+0x1bc>)
 800141c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001420:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8001422:	4823      	ldr	r0, [pc, #140]	@ (80014b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8001424:	f000 fafc 	bl	8001a20 <HAL_DMA_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_TIM_Base_MspInit+0x13e>
      Error_Handler();
 800142e:	f7ff fe89 	bl	8001144 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a1e      	ldr	r2, [pc, #120]	@ (80014b0 <HAL_TIM_Base_MspInit+0x1bc>)
 8001436:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001438:	4a1d      	ldr	r2, [pc, #116]	@ (80014b0 <HAL_TIM_Base_MspInit+0x1bc>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim3_ch4.Instance = DMA1_Channel3;
 800143e:	4b1e      	ldr	r3, [pc, #120]	@ (80014b8 <HAL_TIM_Base_MspInit+0x1c4>)
 8001440:	4a1e      	ldr	r2, [pc, #120]	@ (80014bc <HAL_TIM_Base_MspInit+0x1c8>)
 8001442:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 8001444:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <HAL_TIM_Base_MspInit+0x1c4>)
 8001446:	2240      	movs	r2, #64	@ 0x40
 8001448:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800144a:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <HAL_TIM_Base_MspInit+0x1c4>)
 800144c:	2210      	movs	r2, #16
 800144e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001450:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <HAL_TIM_Base_MspInit+0x1c4>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001456:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <HAL_TIM_Base_MspInit+0x1c4>)
 8001458:	2280      	movs	r2, #128	@ 0x80
 800145a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800145c:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <HAL_TIM_Base_MspInit+0x1c4>)
 800145e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001462:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <HAL_TIM_Base_MspInit+0x1c4>)
 8001466:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800146a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_CIRCULAR;
 800146c:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <HAL_TIM_Base_MspInit+0x1c4>)
 800146e:	2220      	movs	r2, #32
 8001470:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <HAL_TIM_Base_MspInit+0x1c4>)
 8001474:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001478:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 800147a:	480f      	ldr	r0, [pc, #60]	@ (80014b8 <HAL_TIM_Base_MspInit+0x1c4>)
 800147c:	f000 fad0 	bl	8001a20 <HAL_DMA_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_TIM_Base_MspInit+0x196>
      Error_Handler();
 8001486:	f7ff fe5d 	bl	8001144 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <HAL_TIM_Base_MspInit+0x1c4>)
 800148e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001490:	4a09      	ldr	r2, [pc, #36]	@ (80014b8 <HAL_TIM_Base_MspInit+0x1c4>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	@ 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40000400 	.word	0x40000400
 80014a8:	20003dd0 	.word	0x20003dd0
 80014ac:	4002006c 	.word	0x4002006c
 80014b0:	20003e30 	.word	0x20003e30
 80014b4:	4002001c 	.word	0x4002001c
 80014b8:	20003e90 	.word	0x20003e90
 80014bc:	40020030 	.word	0x40020030

080014c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	@ 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014e0:	d11d      	bne.n	800151e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b22      	ldr	r3, [pc, #136]	@ (800156c <HAL_TIM_MspPostInit+0xac>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e6:	4a21      	ldr	r2, [pc, #132]	@ (800156c <HAL_TIM_MspPostInit+0xac>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ee:	4b1f      	ldr	r3, [pc, #124]	@ (800156c <HAL_TIM_MspPostInit+0xac>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014fa:	2308      	movs	r3, #8
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800150a:	2301      	movs	r3, #1
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001518:	f000 fdce 	bl	80020b8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800151c:	e021      	b.n	8001562 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a13      	ldr	r2, [pc, #76]	@ (8001570 <HAL_TIM_MspPostInit+0xb0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d11c      	bne.n	8001562 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b10      	ldr	r3, [pc, #64]	@ (800156c <HAL_TIM_MspPostInit+0xac>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152c:	4a0f      	ldr	r2, [pc, #60]	@ (800156c <HAL_TIM_MspPostInit+0xac>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001534:	4b0d      	ldr	r3, [pc, #52]	@ (800156c <HAL_TIM_MspPostInit+0xac>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001540:	2350      	movs	r3, #80	@ 0x50
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001544:	2312      	movs	r3, #18
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001550:	2302      	movs	r3, #2
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800155e:	f000 fdab 	bl	80020b8 <HAL_GPIO_Init>
}
 8001562:	bf00      	nop
 8001564:	3728      	adds	r7, #40	@ 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000
 8001570:	40000400 	.word	0x40000400

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <NMI_Handler+0x4>

0800157c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <HardFault_Handler+0x4>

08001584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <MemManage_Handler+0x4>

0800158c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <BusFault_Handler+0x4>

08001594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <UsageFault_Handler+0x4>

0800159c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015cc:	f000 f8d8 	bl	8001780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (TimingDelay != 0) {
 80015d0:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <SysTick_Handler+0x20>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d004      	beq.n	80015e2 <SysTick_Handler+0x1a>
    --TimingDelay;
 80015d8:	4b03      	ldr	r3, [pc, #12]	@ (80015e8 <SysTick_Handler+0x20>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	3b01      	subs	r3, #1
 80015de:	4a02      	ldr	r2, [pc, #8]	@ (80015e8 <SysTick_Handler+0x20>)
 80015e0:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20003ef0 	.word	0x20003ef0

080015ec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 80015f0:	4802      	ldr	r0, [pc, #8]	@ (80015fc <DMA1_Channel2_IRQHandler+0x10>)
 80015f2:	f000 fc11 	bl	8001e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20003e30 	.word	0x20003e30

08001600 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 8001604:	4802      	ldr	r0, [pc, #8]	@ (8001610 <DMA1_Channel3_IRQHandler+0x10>)
 8001606:	f000 fc07 	bl	8001e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20003e90 	.word	0x20003e90

08001614 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <DMA1_Channel5_IRQHandler+0x10>)
 800161a:	f000 fbfd 	bl	8001e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20003cd8 	.word	0x20003cd8

08001628 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 800162c:	4802      	ldr	r0, [pc, #8]	@ (8001638 <DMA1_Channel6_IRQHandler+0x10>)
 800162e:	f000 fbf3 	bl	8001e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20003dd0 	.word	0x20003dd0

0800163c <TIM3_IRQHandler>:
//  }
//}


void TIM3_IRQHandler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
//		TIM3->SR = TIM_IT_CC4;// ~TIM_IT_CC1;		// clear all but Update
//	// scope output on high
//	} else
//		TIM3->SR = 0;					// other interrupts not of interest
	  //HAL_TIM_IRQHandler(&htim3);
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <SystemInit+0x20>)
 8001652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001656:	4a05      	ldr	r2, [pc, #20]	@ (800166c <SystemInit+0x20>)
 8001658:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800165c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <vidClearScreen>:
/* Private functions ---------------------------------------------------------*/



void vidClearScreen(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	{
		fb[line]				[0] = 0b1111111111111110;
		fb[line]  [XFERS_PERLINE-1] = 0b1111111111111110;
	}
#else
	memset(screen,0xFF,sizeof(screen));
 8001674:	f242 7260 	movw	r2, #10080	@ 0x2760
 8001678:	21ff      	movs	r1, #255	@ 0xff
 800167a:	4802      	ldr	r0, [pc, #8]	@ (8001684 <vidClearScreen+0x14>)
 800167c:	f004 fc20 	bl	8005ec0 <memset>
#endif

}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000000 	.word	0x20000000

08001688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001688:	480d      	ldr	r0, [pc, #52]	@ (80016c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800168a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800168c:	f7ff ffde 	bl	800164c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001690:	480c      	ldr	r0, [pc, #48]	@ (80016c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001692:	490d      	ldr	r1, [pc, #52]	@ (80016c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001694:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <LoopForever+0xe>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016a8:	4c0a      	ldr	r4, [pc, #40]	@ (80016d4 <LoopForever+0x16>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b6:	f004 fc0b 	bl	8005ed0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ba:	f7ff f9d9 	bl	8000a70 <main>

080016be <LoopForever>:

LoopForever:
    b LoopForever
 80016be:	e7fe      	b.n	80016be <LoopForever>
  ldr   r0, =_estack
 80016c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016c4:	20002760 	.word	0x20002760
  ldr r1, =_edata
 80016c8:	20003c78 	.word	0x20003c78
  ldr r2, =_sidata
 80016cc:	08007040 	.word	0x08007040
  ldr r2, =_sbss
 80016d0:	20003c78 	.word	0x20003c78
  ldr r4, =_ebss
 80016d4:	20003f38 	.word	0x20003f38

080016d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC1_2_IRQHandler>

080016da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e4:	2003      	movs	r0, #3
 80016e6:	f000 f95b 	bl	80019a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ea:	200f      	movs	r0, #15
 80016ec:	f000 f80e 	bl	800170c <HAL_InitTick>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	71fb      	strb	r3, [r7, #7]
 80016fa:	e001      	b.n	8001700 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016fc:	f7ff fd28 	bl	8001150 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001700:	79fb      	ldrb	r3, [r7, #7]

}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001718:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <HAL_InitTick+0x68>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d022      	beq.n	8001766 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001720:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <HAL_InitTick+0x6c>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <HAL_InitTick+0x68>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800172c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001730:	fbb2 f3f3 	udiv	r3, r2, r3
 8001734:	4618      	mov	r0, r3
 8001736:	f000 f966 	bl	8001a06 <HAL_SYSTICK_Config>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10f      	bne.n	8001760 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b0f      	cmp	r3, #15
 8001744:	d809      	bhi.n	800175a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001746:	2200      	movs	r2, #0
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800174e:	f000 f932 	bl	80019b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001752:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <HAL_InitTick+0x70>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	e007      	b.n	800176a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	73fb      	strb	r3, [r7, #15]
 800175e:	e004      	b.n	800176a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e001      	b.n	800176a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20003c74 	.word	0x20003c74
 8001778:	20002764 	.word	0x20002764
 800177c:	20003c70 	.word	0x20003c70

08001780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001784:	4b05      	ldr	r3, [pc, #20]	@ (800179c <HAL_IncTick+0x1c>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b05      	ldr	r3, [pc, #20]	@ (80017a0 <HAL_IncTick+0x20>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4413      	add	r3, r2
 800178e:	4a03      	ldr	r2, [pc, #12]	@ (800179c <HAL_IncTick+0x1c>)
 8001790:	6013      	str	r3, [r2, #0]
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	20003f34 	.word	0x20003f34
 80017a0:	20003c74 	.word	0x20003c74

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b03      	ldr	r3, [pc, #12]	@ (80017b8 <HAL_GetTick+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20003f34 	.word	0x20003f34

080017bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff ffee 	bl	80017a4 <HAL_GetTick>
 80017c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017d4:	d004      	beq.n	80017e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d6:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <HAL_Delay+0x40>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4413      	add	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e0:	bf00      	nop
 80017e2:	f7ff ffdf 	bl	80017a4 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d8f7      	bhi.n	80017e2 <HAL_Delay+0x26>
  {
  }
}
 80017f2:	bf00      	nop
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20003c74 	.word	0x20003c74

08001800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001810:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800181c:	4013      	ands	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001828:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800182c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001832:	4a04      	ldr	r2, [pc, #16]	@ (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	60d3      	str	r3, [r2, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800184c:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <__NVIC_GetPriorityGrouping+0x18>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	f003 0307 	and.w	r3, r3, #7
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	2b00      	cmp	r3, #0
 8001874:	db0b      	blt.n	800188e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	4907      	ldr	r1, [pc, #28]	@ (800189c <__NVIC_EnableIRQ+0x38>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	2001      	movs	r0, #1
 8001886:	fa00 f202 	lsl.w	r2, r0, r2
 800188a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000e100 	.word	0xe000e100

080018a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db0a      	blt.n	80018ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	490c      	ldr	r1, [pc, #48]	@ (80018ec <__NVIC_SetPriority+0x4c>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c8:	e00a      	b.n	80018e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	@ (80018f0 <__NVIC_SetPriority+0x50>)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	3b04      	subs	r3, #4
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	440b      	add	r3, r1
 80018de:	761a      	strb	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	@ 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f1c3 0307 	rsb	r3, r3, #7
 800190e:	2b04      	cmp	r3, #4
 8001910:	bf28      	it	cs
 8001912:	2304      	movcs	r3, #4
 8001914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3304      	adds	r3, #4
 800191a:	2b06      	cmp	r3, #6
 800191c:	d902      	bls.n	8001924 <NVIC_EncodePriority+0x30>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3b03      	subs	r3, #3
 8001922:	e000      	b.n	8001926 <NVIC_EncodePriority+0x32>
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43da      	mvns	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	401a      	ands	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800193c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	43d9      	mvns	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	4313      	orrs	r3, r2
         );
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	@ 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800196c:	d301      	bcc.n	8001972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196e:	2301      	movs	r3, #1
 8001970:	e00f      	b.n	8001992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001972:	4a0a      	ldr	r2, [pc, #40]	@ (800199c <SysTick_Config+0x40>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197a:	210f      	movs	r1, #15
 800197c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001980:	f7ff ff8e 	bl	80018a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001984:	4b05      	ldr	r3, [pc, #20]	@ (800199c <SysTick_Config+0x40>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198a:	4b04      	ldr	r3, [pc, #16]	@ (800199c <SysTick_Config+0x40>)
 800198c:	2207      	movs	r2, #7
 800198e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	e000e010 	.word	0xe000e010

080019a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ff29 	bl	8001800 <__NVIC_SetPriorityGrouping>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff40 	bl	8001848 <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ff90 	bl	80018f4 <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff5f 	bl	80018a0 <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff33 	bl	8001864 <__NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffa4 	bl	800195c <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e08d      	b.n	8001b4e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b47      	ldr	r3, [pc, #284]	@ (8001b58 <HAL_DMA_Init+0x138>)
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d80f      	bhi.n	8001a5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b45      	ldr	r3, [pc, #276]	@ (8001b5c <HAL_DMA_Init+0x13c>)
 8001a46:	4413      	add	r3, r2
 8001a48:	4a45      	ldr	r2, [pc, #276]	@ (8001b60 <HAL_DMA_Init+0x140>)
 8001a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4e:	091b      	lsrs	r3, r3, #4
 8001a50:	009a      	lsls	r2, r3, #2
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a42      	ldr	r2, [pc, #264]	@ (8001b64 <HAL_DMA_Init+0x144>)
 8001a5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a5c:	e00e      	b.n	8001a7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b40      	ldr	r3, [pc, #256]	@ (8001b68 <HAL_DMA_Init+0x148>)
 8001a66:	4413      	add	r3, r2
 8001a68:	4a3d      	ldr	r2, [pc, #244]	@ (8001b60 <HAL_DMA_Init+0x140>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	009a      	lsls	r2, r3, #2
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a3c      	ldr	r2, [pc, #240]	@ (8001b6c <HAL_DMA_Init+0x14c>)
 8001a7a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fa90 	bl	8001ff4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001adc:	d102      	bne.n	8001ae4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001af8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d010      	beq.n	8001b24 <HAL_DMA_Init+0x104>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d80c      	bhi.n	8001b24 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 fab0 	bl	8002070 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	e008      	b.n	8001b36 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40020407 	.word	0x40020407
 8001b5c:	bffdfff8 	.word	0xbffdfff8
 8001b60:	cccccccd 	.word	0xcccccccd
 8001b64:	40020000 	.word	0x40020000
 8001b68:	bffdfbf8 	.word	0xbffdfbf8
 8001b6c:	40020400 	.word	0x40020400

08001b70 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e07b      	b.n	8001c7a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0201 	bic.w	r2, r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b3a      	ldr	r3, [pc, #232]	@ (8001c84 <HAL_DMA_DeInit+0x114>)
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d80f      	bhi.n	8001bbe <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4b38      	ldr	r3, [pc, #224]	@ (8001c88 <HAL_DMA_DeInit+0x118>)
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a38      	ldr	r2, [pc, #224]	@ (8001c8c <HAL_DMA_DeInit+0x11c>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	009a      	lsls	r2, r3, #2
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a35      	ldr	r2, [pc, #212]	@ (8001c90 <HAL_DMA_DeInit+0x120>)
 8001bba:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bbc:	e00e      	b.n	8001bdc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b33      	ldr	r3, [pc, #204]	@ (8001c94 <HAL_DMA_DeInit+0x124>)
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a30      	ldr	r2, [pc, #192]	@ (8001c8c <HAL_DMA_DeInit+0x11c>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	009a      	lsls	r2, r3, #2
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a2f      	ldr	r2, [pc, #188]	@ (8001c98 <HAL_DMA_DeInit+0x128>)
 8001bda:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be8:	f003 021f 	and.w	r2, r3, #31
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f9fb 	bl	8001ff4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c0e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00f      	beq.n	8001c38 <HAL_DMA_DeInit+0xc8>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d80b      	bhi.n	8001c38 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fa25 	bl	8002070 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c36:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40020407 	.word	0x40020407
 8001c88:	bffdfff8 	.word	0xbffdfff8
 8001c8c:	cccccccd 	.word	0xcccccccd
 8001c90:	40020000 	.word	0x40020000
 8001c94:	bffdfbf8 	.word	0xbffdfbf8
 8001c98:	40020400 	.word	0x40020400

08001c9c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_DMA_Start+0x20>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e02e      	b.n	8001d1a <HAL_DMA_Start+0x7e>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d11d      	bne.n	8001d0c <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0201 	bic.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	68b9      	ldr	r1, [r7, #8]
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 f93e 	bl	8001f76 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 0201 	orr.w	r2, r2, #1
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	e005      	b.n	8001d18 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    status = HAL_BUSY;
 8001d14:	2302      	movs	r3, #2
 8001d16:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_DMA_Start_IT+0x20>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e066      	b.n	8001e10 <HAL_DMA_Start_IT+0xee>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d155      	bne.n	8001e02 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2202      	movs	r2, #2
 8001d5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f8fb 	bl	8001f76 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 020e 	orr.w	r2, r2, #14
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	e00f      	b.n	8001dba <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0204 	bic.w	r2, r2, #4
 8001da8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 020a 	orr.w	r2, r2, #10
 8001db8:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dd6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d007      	beq.n	8001df0 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dee:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e005      	b.n	8001e0e <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	2204      	movs	r2, #4
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d026      	beq.n	8001e92 <HAL_DMA_IRQHandler+0x7a>
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d021      	beq.n	8001e92 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d107      	bne.n	8001e6c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0204 	bic.w	r2, r2, #4
 8001e6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e70:	f003 021f 	and.w	r2, r3, #31
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e78:	2104      	movs	r1, #4
 8001e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d071      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001e90:	e06c      	b.n	8001f6c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d02e      	beq.n	8001f04 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d029      	beq.n	8001f04 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0320 	and.w	r3, r3, #32
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10b      	bne.n	8001ed6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 020a 	bic.w	r2, r2, #10
 8001ecc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eda:	f003 021f 	and.w	r2, r3, #31
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d038      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001f02:	e033      	b.n	8001f6c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d02a      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d025      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 020e 	bic.w	r2, r2, #14
 8001f30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	f003 021f 	and.w	r2, r3, #31
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	2101      	movs	r1, #1
 8001f40:	fa01 f202 	lsl.w	r2, r1, r2
 8001f44:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d004      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
}
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b085      	sub	sp, #20
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f8c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d004      	beq.n	8001fa0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f9e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fac:	2101      	movs	r1, #1
 8001fae:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b10      	cmp	r3, #16
 8001fc2:	d108      	bne.n	8001fd6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fd4:	e007      	b.n	8001fe6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	60da      	str	r2, [r3, #12]
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	4b16      	ldr	r3, [pc, #88]	@ (800205c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002004:	429a      	cmp	r2, r3
 8002006:	d802      	bhi.n	800200e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002008:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	e001      	b.n	8002012 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800200e:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002010:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	3b08      	subs	r3, #8
 800201e:	4a12      	ldr	r2, [pc, #72]	@ (8002068 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	009a      	lsls	r2, r3, #2
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	461a      	mov	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a0b      	ldr	r2, [pc, #44]	@ (800206c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800203e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	2201      	movs	r2, #1
 8002048:	409a      	lsls	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800204e:	bf00      	nop
 8002050:	371c      	adds	r7, #28
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40020407 	.word	0x40020407
 8002060:	40020800 	.word	0x40020800
 8002064:	40020820 	.word	0x40020820
 8002068:	cccccccd 	.word	0xcccccccd
 800206c:	40020880 	.word	0x40020880

08002070 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4b0b      	ldr	r3, [pc, #44]	@ (80020b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	461a      	mov	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a08      	ldr	r2, [pc, #32]	@ (80020b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002092:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3b01      	subs	r3, #1
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	2201      	movs	r2, #1
 800209e:	409a      	lsls	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	1000823f 	.word	0x1000823f
 80020b4:	40020940 	.word	0x40020940

080020b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020c6:	e15a      	b.n	800237e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2101      	movs	r1, #1
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	4013      	ands	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 814c 	beq.w	8002378 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d005      	beq.n	80020f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d130      	bne.n	800215a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800212e:	2201      	movs	r2, #1
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	f003 0201 	and.w	r2, r3, #1
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b03      	cmp	r3, #3
 8002164:	d017      	beq.n	8002196 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	2203      	movs	r2, #3
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d123      	bne.n	80021ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	08da      	lsrs	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3208      	adds	r2, #8
 80021aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	220f      	movs	r2, #15
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	08da      	lsrs	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3208      	adds	r2, #8
 80021e4:	6939      	ldr	r1, [r7, #16]
 80021e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	2203      	movs	r2, #3
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0203 	and.w	r2, r3, #3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 80a6 	beq.w	8002378 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222c:	4b5b      	ldr	r3, [pc, #364]	@ (800239c <HAL_GPIO_Init+0x2e4>)
 800222e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002230:	4a5a      	ldr	r2, [pc, #360]	@ (800239c <HAL_GPIO_Init+0x2e4>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6613      	str	r3, [r2, #96]	@ 0x60
 8002238:	4b58      	ldr	r3, [pc, #352]	@ (800239c <HAL_GPIO_Init+0x2e4>)
 800223a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002244:	4a56      	ldr	r2, [pc, #344]	@ (80023a0 <HAL_GPIO_Init+0x2e8>)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	3302      	adds	r3, #2
 800224c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	220f      	movs	r2, #15
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800226e:	d01f      	beq.n	80022b0 <HAL_GPIO_Init+0x1f8>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a4c      	ldr	r2, [pc, #304]	@ (80023a4 <HAL_GPIO_Init+0x2ec>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d019      	beq.n	80022ac <HAL_GPIO_Init+0x1f4>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a4b      	ldr	r2, [pc, #300]	@ (80023a8 <HAL_GPIO_Init+0x2f0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d013      	beq.n	80022a8 <HAL_GPIO_Init+0x1f0>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a4a      	ldr	r2, [pc, #296]	@ (80023ac <HAL_GPIO_Init+0x2f4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d00d      	beq.n	80022a4 <HAL_GPIO_Init+0x1ec>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a49      	ldr	r2, [pc, #292]	@ (80023b0 <HAL_GPIO_Init+0x2f8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d007      	beq.n	80022a0 <HAL_GPIO_Init+0x1e8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a48      	ldr	r2, [pc, #288]	@ (80023b4 <HAL_GPIO_Init+0x2fc>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d101      	bne.n	800229c <HAL_GPIO_Init+0x1e4>
 8002298:	2305      	movs	r3, #5
 800229a:	e00a      	b.n	80022b2 <HAL_GPIO_Init+0x1fa>
 800229c:	2306      	movs	r3, #6
 800229e:	e008      	b.n	80022b2 <HAL_GPIO_Init+0x1fa>
 80022a0:	2304      	movs	r3, #4
 80022a2:	e006      	b.n	80022b2 <HAL_GPIO_Init+0x1fa>
 80022a4:	2303      	movs	r3, #3
 80022a6:	e004      	b.n	80022b2 <HAL_GPIO_Init+0x1fa>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e002      	b.n	80022b2 <HAL_GPIO_Init+0x1fa>
 80022ac:	2301      	movs	r3, #1
 80022ae:	e000      	b.n	80022b2 <HAL_GPIO_Init+0x1fa>
 80022b0:	2300      	movs	r3, #0
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	f002 0203 	and.w	r2, r2, #3
 80022b8:	0092      	lsls	r2, r2, #2
 80022ba:	4093      	lsls	r3, r2
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c2:	4937      	ldr	r1, [pc, #220]	@ (80023a0 <HAL_GPIO_Init+0x2e8>)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	3302      	adds	r3, #2
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022d0:	4b39      	ldr	r3, [pc, #228]	@ (80023b8 <HAL_GPIO_Init+0x300>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022f4:	4a30      	ldr	r2, [pc, #192]	@ (80023b8 <HAL_GPIO_Init+0x300>)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022fa:	4b2f      	ldr	r3, [pc, #188]	@ (80023b8 <HAL_GPIO_Init+0x300>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800231e:	4a26      	ldr	r2, [pc, #152]	@ (80023b8 <HAL_GPIO_Init+0x300>)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002324:	4b24      	ldr	r3, [pc, #144]	@ (80023b8 <HAL_GPIO_Init+0x300>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	43db      	mvns	r3, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002348:	4a1b      	ldr	r2, [pc, #108]	@ (80023b8 <HAL_GPIO_Init+0x300>)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800234e:	4b1a      	ldr	r3, [pc, #104]	@ (80023b8 <HAL_GPIO_Init+0x300>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002372:	4a11      	ldr	r2, [pc, #68]	@ (80023b8 <HAL_GPIO_Init+0x300>)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3301      	adds	r3, #1
 800237c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	f47f ae9d 	bne.w	80020c8 <HAL_GPIO_Init+0x10>
  }
}
 800238e:	bf00      	nop
 8002390:	bf00      	nop
 8002392:	371c      	adds	r7, #28
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	40021000 	.word	0x40021000
 80023a0:	40010000 	.word	0x40010000
 80023a4:	48000400 	.word	0x48000400
 80023a8:	48000800 	.word	0x48000800
 80023ac:	48000c00 	.word	0x48000c00
 80023b0:	48001000 	.word	0x48001000
 80023b4:	48001400 	.word	0x48001400
 80023b8:	40010400 	.word	0x40010400

080023bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80023ca:	e0bd      	b.n	8002548 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80023cc:	2201      	movs	r2, #1
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80b0 	beq.w	8002542 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80023e2:	4a60      	ldr	r2, [pc, #384]	@ (8002564 <HAL_GPIO_DeInit+0x1a8>)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	3302      	adds	r3, #2
 80023ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ee:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	220f      	movs	r2, #15
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800240a:	d01f      	beq.n	800244c <HAL_GPIO_DeInit+0x90>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a56      	ldr	r2, [pc, #344]	@ (8002568 <HAL_GPIO_DeInit+0x1ac>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d019      	beq.n	8002448 <HAL_GPIO_DeInit+0x8c>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a55      	ldr	r2, [pc, #340]	@ (800256c <HAL_GPIO_DeInit+0x1b0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d013      	beq.n	8002444 <HAL_GPIO_DeInit+0x88>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a54      	ldr	r2, [pc, #336]	@ (8002570 <HAL_GPIO_DeInit+0x1b4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d00d      	beq.n	8002440 <HAL_GPIO_DeInit+0x84>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a53      	ldr	r2, [pc, #332]	@ (8002574 <HAL_GPIO_DeInit+0x1b8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d007      	beq.n	800243c <HAL_GPIO_DeInit+0x80>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a52      	ldr	r2, [pc, #328]	@ (8002578 <HAL_GPIO_DeInit+0x1bc>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d101      	bne.n	8002438 <HAL_GPIO_DeInit+0x7c>
 8002434:	2305      	movs	r3, #5
 8002436:	e00a      	b.n	800244e <HAL_GPIO_DeInit+0x92>
 8002438:	2306      	movs	r3, #6
 800243a:	e008      	b.n	800244e <HAL_GPIO_DeInit+0x92>
 800243c:	2304      	movs	r3, #4
 800243e:	e006      	b.n	800244e <HAL_GPIO_DeInit+0x92>
 8002440:	2303      	movs	r3, #3
 8002442:	e004      	b.n	800244e <HAL_GPIO_DeInit+0x92>
 8002444:	2302      	movs	r3, #2
 8002446:	e002      	b.n	800244e <HAL_GPIO_DeInit+0x92>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <HAL_GPIO_DeInit+0x92>
 800244c:	2300      	movs	r3, #0
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	f002 0203 	and.w	r2, r2, #3
 8002454:	0092      	lsls	r2, r2, #2
 8002456:	4093      	lsls	r3, r2
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	429a      	cmp	r2, r3
 800245c:	d132      	bne.n	80024c4 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800245e:	4b47      	ldr	r3, [pc, #284]	@ (800257c <HAL_GPIO_DeInit+0x1c0>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	43db      	mvns	r3, r3
 8002466:	4945      	ldr	r1, [pc, #276]	@ (800257c <HAL_GPIO_DeInit+0x1c0>)
 8002468:	4013      	ands	r3, r2
 800246a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800246c:	4b43      	ldr	r3, [pc, #268]	@ (800257c <HAL_GPIO_DeInit+0x1c0>)
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43db      	mvns	r3, r3
 8002474:	4941      	ldr	r1, [pc, #260]	@ (800257c <HAL_GPIO_DeInit+0x1c0>)
 8002476:	4013      	ands	r3, r2
 8002478:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800247a:	4b40      	ldr	r3, [pc, #256]	@ (800257c <HAL_GPIO_DeInit+0x1c0>)
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	43db      	mvns	r3, r3
 8002482:	493e      	ldr	r1, [pc, #248]	@ (800257c <HAL_GPIO_DeInit+0x1c0>)
 8002484:	4013      	ands	r3, r2
 8002486:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002488:	4b3c      	ldr	r3, [pc, #240]	@ (800257c <HAL_GPIO_DeInit+0x1c0>)
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	493a      	ldr	r1, [pc, #232]	@ (800257c <HAL_GPIO_DeInit+0x1c0>)
 8002492:	4013      	ands	r3, r2
 8002494:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	220f      	movs	r2, #15
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80024a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002564 <HAL_GPIO_DeInit+0x1a8>)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	3302      	adds	r3, #2
 80024ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	43da      	mvns	r2, r3
 80024b6:	482b      	ldr	r0, [pc, #172]	@ (8002564 <HAL_GPIO_DeInit+0x1a8>)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	400a      	ands	r2, r1
 80024be:	3302      	adds	r3, #2
 80024c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	2103      	movs	r1, #3
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	08da      	lsrs	r2, r3, #3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3208      	adds	r2, #8
 80024e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	220f      	movs	r2, #15
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	08d2      	lsrs	r2, r2, #3
 80024f8:	4019      	ands	r1, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3208      	adds	r2, #8
 80024fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2103      	movs	r1, #3
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	401a      	ands	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	2101      	movs	r1, #1
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	401a      	ands	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	2103      	movs	r1, #3
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	401a      	ands	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	3301      	adds	r3, #1
 8002546:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	fa22 f303 	lsr.w	r3, r2, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	f47f af3b 	bne.w	80023cc <HAL_GPIO_DeInit+0x10>
  }
}
 8002556:	bf00      	nop
 8002558:	bf00      	nop
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	40010000 	.word	0x40010000
 8002568:	48000400 	.word	0x48000400
 800256c:	48000800 	.word	0x48000800
 8002570:	48000c00 	.word	0x48000c00
 8002574:	48001000 	.word	0x48001000
 8002578:	48001400 	.word	0x48001400
 800257c:	40010400 	.word	0x40010400

08002580 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0d0      	b.n	8002734 <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fe fdf6 	bl	8001198 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80025c2:	f023 030f 	bic.w	r3, r3, #15
 80025c6:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2202      	movs	r2, #2
 80025ce:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d061      	beq.n	800269c <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d102      	bne.n	80025e6 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80025e0:	2310      	movs	r3, #16
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	e001      	b.n	80025ea <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80025e6:	2320      	movs	r3, #32
 80025e8:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b20      	cmp	r3, #32
 80025f0:	d802      	bhi.n	80025f8 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80025f8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80025fc:	f001 fa10 	bl	8003a20 <HAL_RCCEx_GetPeriphCLKFreq>
 8002600:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800260a:	d125      	bne.n	8002658 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d010      	beq.n	8002636 <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	fbb2 f2f3 	udiv	r2, r2, r3
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	461a      	mov	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	3305      	adds	r3, #5
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	e01f      	b.n	8002676 <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	461a      	mov	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002652:	3305      	adds	r3, #5
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	e00e      	b.n	8002676 <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	461a      	mov	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	3305      	adds	r3, #5
 8002674:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4a30      	ldr	r2, [pc, #192]	@ (800273c <HAL_I2S_Init+0x1bc>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	08db      	lsrs	r3, r3, #3
 8002680:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	085b      	lsrs	r3, r3, #1
 8002692:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	e003      	b.n	80026a4 <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800269c:	2302      	movs	r3, #2
 800269e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d902      	bls.n	80026b0 <HAL_I2S_Init+0x130>
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	2bff      	cmp	r3, #255	@ 0xff
 80026ae:	d907      	bls.n	80026c0 <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b4:	f043 0210 	orr.w	r2, r3, #16
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e039      	b.n	8002734 <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	ea42 0103 	orr.w	r1, r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80026de:	f023 030f 	bic.w	r3, r3, #15
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6851      	ldr	r1, [r2, #4]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6892      	ldr	r2, [r2, #8]
 80026ea:	4311      	orrs	r1, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	68d2      	ldr	r2, [r2, #12]
 80026f0:	4311      	orrs	r1, r2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6992      	ldr	r2, [r2, #24]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002702:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b30      	cmp	r3, #48	@ 0x30
 800270a:	d003      	beq.n	8002714 <HAL_I2S_Init+0x194>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2bb0      	cmp	r3, #176	@ 0xb0
 8002712:	d107      	bne.n	8002724 <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002722:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3720      	adds	r7, #32
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	cccccccd 	.word	0xcccccccd

08002740 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e01a      	b.n	8002788 <HAL_I2S_DeInit+0x48>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2202      	movs	r2, #2
 8002756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002768:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7fe fd9e 	bl	80012ac <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	4613      	mov	r3, r2
 800279c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <HAL_I2S_Transmit_DMA+0x1a>
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e08a      	b.n	80028c4 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d001      	beq.n	80027be <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80027ba:	2302      	movs	r3, #2
 80027bc:	e082      	b.n	80028c4 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_I2S_Transmit_DMA+0x3e>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e07a      	b.n	80028c4 <HAL_I2S_Transmit_DMA+0x134>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2203      	movs	r2, #3
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d002      	beq.n	8002802 <HAL_I2S_Transmit_DMA+0x72>
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2b05      	cmp	r3, #5
 8002800:	d10a      	bne.n	8002818 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	845a      	strh	r2, [r3, #34]	@ 0x22
 8002816:	e005      	b.n	8002824 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	88fa      	ldrh	r2, [r7, #6]
 800281c:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	88fa      	ldrh	r2, [r7, #6]
 8002822:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002828:	4a28      	ldr	r2, [pc, #160]	@ (80028cc <HAL_I2S_Transmit_DMA+0x13c>)
 800282a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002830:	4a27      	ldr	r2, [pc, #156]	@ (80028d0 <HAL_I2S_Transmit_DMA+0x140>)
 8002832:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002838:	4a26      	ldr	r2, [pc, #152]	@ (80028d4 <HAL_I2S_Transmit_DMA+0x144>)
 800283a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002844:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800284c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8c1b      	ldrh	r3, [r3, #32]
 8002852:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002854:	f7ff fa65 	bl	8001d22 <HAL_DMA_Start_IT>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00f      	beq.n	800287e <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002862:	f043 0208 	orr.w	r2, r3, #8
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    __HAL_UNLOCK(hi2s);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e022      	b.n	80028c4 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d107      	bne.n	80028a4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0202 	orr.w	r2, r2, #2
 80028a2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d107      	bne.n	80028c2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	69da      	ldr	r2, [r3, #28]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028c0:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	08002957 	.word	0x08002957
 80028d0:	08002915 	.word	0x08002915
 80028d4:	08002973 	.word	0x08002973

080028d8 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002920:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10e      	bne.n	8002948 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0202 	bic.w	r2, r2, #2
 8002938:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	845a      	strh	r2, [r3, #34]	@ 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f7ff ffcf 	bl	80028ec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002962:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff ffb7 	bl	80028d8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0203 	bic.w	r2, r2, #3
 800298e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a8:	f043 0208 	orr.w	r2, r3, #8
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f7ff ffa5 	bl	8002900 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d141      	bne.n	8002a52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029ce:	4b4b      	ldr	r3, [pc, #300]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029da:	d131      	bne.n	8002a40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029dc:	4b47      	ldr	r3, [pc, #284]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029e2:	4a46      	ldr	r2, [pc, #280]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ec:	4b43      	ldr	r3, [pc, #268]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029f4:	4a41      	ldr	r2, [pc, #260]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029fc:	4b40      	ldr	r3, [pc, #256]	@ (8002b00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2232      	movs	r2, #50	@ 0x32
 8002a02:	fb02 f303 	mul.w	r3, r2, r3
 8002a06:	4a3f      	ldr	r2, [pc, #252]	@ (8002b04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	0c9b      	lsrs	r3, r3, #18
 8002a0e:	3301      	adds	r3, #1
 8002a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a12:	e002      	b.n	8002a1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a1a:	4b38      	ldr	r3, [pc, #224]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a26:	d102      	bne.n	8002a2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f2      	bne.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a2e:	4b33      	ldr	r3, [pc, #204]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a3a:	d158      	bne.n	8002aee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e057      	b.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a40:	4b2e      	ldr	r3, [pc, #184]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a46:	4a2d      	ldr	r2, [pc, #180]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a50:	e04d      	b.n	8002aee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a58:	d141      	bne.n	8002ade <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a5a:	4b28      	ldr	r3, [pc, #160]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a66:	d131      	bne.n	8002acc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a68:	4b24      	ldr	r3, [pc, #144]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a6e:	4a23      	ldr	r2, [pc, #140]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a78:	4b20      	ldr	r3, [pc, #128]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a80:	4a1e      	ldr	r2, [pc, #120]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a88:	4b1d      	ldr	r3, [pc, #116]	@ (8002b00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2232      	movs	r2, #50	@ 0x32
 8002a8e:	fb02 f303 	mul.w	r3, r2, r3
 8002a92:	4a1c      	ldr	r2, [pc, #112]	@ (8002b04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a94:	fba2 2303 	umull	r2, r3, r2, r3
 8002a98:	0c9b      	lsrs	r3, r3, #18
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a9e:	e002      	b.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aa6:	4b15      	ldr	r3, [pc, #84]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ab2:	d102      	bne.n	8002aba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f2      	bne.n	8002aa0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aba:	4b10      	ldr	r3, [pc, #64]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ac6:	d112      	bne.n	8002aee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e011      	b.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002acc:	4b0b      	ldr	r3, [pc, #44]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002adc:	e007      	b.n	8002aee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ade:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ae6:	4a05      	ldr	r2, [pc, #20]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002aec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	40007000 	.word	0x40007000
 8002b00:	20002764 	.word	0x20002764
 8002b04:	431bde83 	.word	0x431bde83

08002b08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b0c:	4b05      	ldr	r3, [pc, #20]	@ (8002b24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4a04      	ldr	r2, [pc, #16]	@ (8002b24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b16:	6093      	str	r3, [r2, #8]
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40007000 	.word	0x40007000

08002b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e2fe      	b.n	8003138 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d075      	beq.n	8002c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b46:	4b97      	ldr	r3, [pc, #604]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b50:	4b94      	ldr	r3, [pc, #592]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b0c      	cmp	r3, #12
 8002b5e:	d102      	bne.n	8002b66 <HAL_RCC_OscConfig+0x3e>
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d002      	beq.n	8002b6c <HAL_RCC_OscConfig+0x44>
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d10b      	bne.n	8002b84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6c:	4b8d      	ldr	r3, [pc, #564]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d05b      	beq.n	8002c30 <HAL_RCC_OscConfig+0x108>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d157      	bne.n	8002c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e2d9      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b8c:	d106      	bne.n	8002b9c <HAL_RCC_OscConfig+0x74>
 8002b8e:	4b85      	ldr	r3, [pc, #532]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a84      	ldr	r2, [pc, #528]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	e01d      	b.n	8002bd8 <HAL_RCC_OscConfig+0xb0>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x98>
 8002ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a7e      	ldr	r2, [pc, #504]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	4b7c      	ldr	r3, [pc, #496]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a7b      	ldr	r2, [pc, #492]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	e00b      	b.n	8002bd8 <HAL_RCC_OscConfig+0xb0>
 8002bc0:	4b78      	ldr	r3, [pc, #480]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a77      	ldr	r2, [pc, #476]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	4b75      	ldr	r3, [pc, #468]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a74      	ldr	r2, [pc, #464]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d013      	beq.n	8002c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe fde0 	bl	80017a4 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be8:	f7fe fddc 	bl	80017a4 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	@ 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e29e      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfa:	4b6a      	ldr	r3, [pc, #424]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0xc0>
 8002c06:	e014      	b.n	8002c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fdcc 	bl	80017a4 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c10:	f7fe fdc8 	bl	80017a4 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	@ 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e28a      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c22:	4b60      	ldr	r3, [pc, #384]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0xe8>
 8002c2e:	e000      	b.n	8002c32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d075      	beq.n	8002d2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c3e:	4b59      	ldr	r3, [pc, #356]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c48:	4b56      	ldr	r3, [pc, #344]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2b0c      	cmp	r3, #12
 8002c56:	d102      	bne.n	8002c5e <HAL_RCC_OscConfig+0x136>
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d002      	beq.n	8002c64 <HAL_RCC_OscConfig+0x13c>
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d11f      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c64:	4b4f      	ldr	r3, [pc, #316]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_OscConfig+0x154>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e25d      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7c:	4b49      	ldr	r3, [pc, #292]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	061b      	lsls	r3, r3, #24
 8002c8a:	4946      	ldr	r1, [pc, #280]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c90:	4b45      	ldr	r3, [pc, #276]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe fd39 	bl	800170c <HAL_InitTick>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d043      	beq.n	8002d28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e249      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d023      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cac:	4b3d      	ldr	r3, [pc, #244]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a3c      	ldr	r2, [pc, #240]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fd74 	bl	80017a4 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc0:	f7fe fd70 	bl	80017a4 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e232      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cd2:	4b34      	ldr	r3, [pc, #208]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cde:	4b31      	ldr	r3, [pc, #196]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	061b      	lsls	r3, r3, #24
 8002cec:	492d      	ldr	r1, [pc, #180]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
 8002cf2:	e01a      	b.n	8002d2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002cfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe fd50 	bl	80017a4 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d08:	f7fe fd4c 	bl	80017a4 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e20e      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d1a:	4b22      	ldr	r3, [pc, #136]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x1e0>
 8002d26:	e000      	b.n	8002d2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d041      	beq.n	8002dba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01c      	beq.n	8002d78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d3e:	4b19      	ldr	r3, [pc, #100]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d44:	4a17      	ldr	r2, [pc, #92]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fd29 	bl	80017a4 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d56:	f7fe fd25 	bl	80017a4 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e1e7      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d68:	4b0e      	ldr	r3, [pc, #56]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0ef      	beq.n	8002d56 <HAL_RCC_OscConfig+0x22e>
 8002d76:	e020      	b.n	8002dba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d78:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d7e:	4a09      	ldr	r2, [pc, #36]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d88:	f7fe fd0c 	bl	80017a4 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d8e:	e00d      	b.n	8002dac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d90:	f7fe fd08 	bl	80017a4 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d906      	bls.n	8002dac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1ca      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	20003c70 	.word	0x20003c70
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dac:	4b8c      	ldr	r3, [pc, #560]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1ea      	bne.n	8002d90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80a6 	beq.w	8002f14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dcc:	4b84      	ldr	r3, [pc, #528]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_OscConfig+0x2b4>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x2b6>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00d      	beq.n	8002dfe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de2:	4b7f      	ldr	r3, [pc, #508]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de6:	4a7e      	ldr	r2, [pc, #504]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dec:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dee:	4b7c      	ldr	r3, [pc, #496]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dfe:	4b79      	ldr	r3, [pc, #484]	@ (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d118      	bne.n	8002e3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e0a:	4b76      	ldr	r3, [pc, #472]	@ (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a75      	ldr	r2, [pc, #468]	@ (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e16:	f7fe fcc5 	bl	80017a4 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1e:	f7fe fcc1 	bl	80017a4 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e183      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e30:	4b6c      	ldr	r3, [pc, #432]	@ (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d108      	bne.n	8002e56 <HAL_RCC_OscConfig+0x32e>
 8002e44:	4b66      	ldr	r3, [pc, #408]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4a:	4a65      	ldr	r2, [pc, #404]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e54:	e024      	b.n	8002ea0 <HAL_RCC_OscConfig+0x378>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b05      	cmp	r3, #5
 8002e5c:	d110      	bne.n	8002e80 <HAL_RCC_OscConfig+0x358>
 8002e5e:	4b60      	ldr	r3, [pc, #384]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e64:	4a5e      	ldr	r2, [pc, #376]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e66:	f043 0304 	orr.w	r3, r3, #4
 8002e6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e6e:	4b5c      	ldr	r3, [pc, #368]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e74:	4a5a      	ldr	r2, [pc, #360]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e7e:	e00f      	b.n	8002ea0 <HAL_RCC_OscConfig+0x378>
 8002e80:	4b57      	ldr	r3, [pc, #348]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e86:	4a56      	ldr	r2, [pc, #344]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e88:	f023 0301 	bic.w	r3, r3, #1
 8002e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e90:	4b53      	ldr	r3, [pc, #332]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e96:	4a52      	ldr	r2, [pc, #328]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e98:	f023 0304 	bic.w	r3, r3, #4
 8002e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d016      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fe fc7c 	bl	80017a4 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb0:	f7fe fc78 	bl	80017a4 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e138      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec6:	4b46      	ldr	r3, [pc, #280]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0ed      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x388>
 8002ed4:	e015      	b.n	8002f02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed6:	f7fe fc65 	bl	80017a4 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ede:	f7fe fc61 	bl	80017a4 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e121      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ef4:	4b3a      	ldr	r3, [pc, #232]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1ed      	bne.n	8002ede <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f02:	7ffb      	ldrb	r3, [r7, #31]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d105      	bne.n	8002f14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f08:	4b35      	ldr	r3, [pc, #212]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0c:	4a34      	ldr	r2, [pc, #208]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002f0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f12:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d03c      	beq.n	8002f9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01c      	beq.n	8002f62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f28:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f38:	f7fe fc34 	bl	80017a4 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f40:	f7fe fc30 	bl	80017a4 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e0f2      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f52:	4b23      	ldr	r3, [pc, #140]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002f54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0ef      	beq.n	8002f40 <HAL_RCC_OscConfig+0x418>
 8002f60:	e01b      	b.n	8002f9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f62:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002f64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f68:	4a1d      	ldr	r2, [pc, #116]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f72:	f7fe fc17 	bl	80017a4 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f7a:	f7fe fc13 	bl	80017a4 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e0d5      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f8c:	4b14      	ldr	r3, [pc, #80]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1ef      	bne.n	8002f7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 80c9 	beq.w	8003136 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 030c 	and.w	r3, r3, #12
 8002fac:	2b0c      	cmp	r3, #12
 8002fae:	f000 8083 	beq.w	80030b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d15e      	bne.n	8003078 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fba:	4b09      	ldr	r3, [pc, #36]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a08      	ldr	r2, [pc, #32]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002fc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7fe fbed 	bl	80017a4 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fcc:	e00c      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fce:	f7fe fbe9 	bl	80017a4 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d905      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e0ab      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe8:	4b55      	ldr	r3, [pc, #340]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1ec      	bne.n	8002fce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff4:	4b52      	ldr	r3, [pc, #328]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	4b52      	ldr	r3, [pc, #328]	@ (8003144 <HAL_RCC_OscConfig+0x61c>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6a11      	ldr	r1, [r2, #32]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003004:	3a01      	subs	r2, #1
 8003006:	0112      	lsls	r2, r2, #4
 8003008:	4311      	orrs	r1, r2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800300e:	0212      	lsls	r2, r2, #8
 8003010:	4311      	orrs	r1, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003016:	0852      	lsrs	r2, r2, #1
 8003018:	3a01      	subs	r2, #1
 800301a:	0552      	lsls	r2, r2, #21
 800301c:	4311      	orrs	r1, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003022:	0852      	lsrs	r2, r2, #1
 8003024:	3a01      	subs	r2, #1
 8003026:	0652      	lsls	r2, r2, #25
 8003028:	4311      	orrs	r1, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800302e:	06d2      	lsls	r2, r2, #27
 8003030:	430a      	orrs	r2, r1
 8003032:	4943      	ldr	r1, [pc, #268]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 8003034:	4313      	orrs	r3, r2
 8003036:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003038:	4b41      	ldr	r3, [pc, #260]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a40      	ldr	r2, [pc, #256]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 800303e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003042:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003044:	4b3e      	ldr	r3, [pc, #248]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4a3d      	ldr	r2, [pc, #244]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 800304a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800304e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe fba8 	bl	80017a4 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003058:	f7fe fba4 	bl	80017a4 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e066      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306a:	4b35      	ldr	r3, [pc, #212]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x530>
 8003076:	e05e      	b.n	8003136 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003078:	4b31      	ldr	r3, [pc, #196]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a30      	ldr	r2, [pc, #192]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 800307e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7fe fb8e 	bl	80017a4 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe fb8a 	bl	80017a4 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e04c      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800309e:	4b28      	ldr	r3, [pc, #160]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030aa:	4b25      	ldr	r3, [pc, #148]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	4924      	ldr	r1, [pc, #144]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 80030b0:	4b25      	ldr	r3, [pc, #148]	@ (8003148 <HAL_RCC_OscConfig+0x620>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	60cb      	str	r3, [r1, #12]
 80030b6:	e03e      	b.n	8003136 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e039      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80030c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f003 0203 	and.w	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d12c      	bne.n	8003132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	3b01      	subs	r3, #1
 80030e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d123      	bne.n	8003132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d11b      	bne.n	8003132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003106:	429a      	cmp	r2, r3
 8003108:	d113      	bne.n	8003132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	3b01      	subs	r3, #1
 8003118:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d109      	bne.n	8003132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003128:	085b      	lsrs	r3, r3, #1
 800312a:	3b01      	subs	r3, #1
 800312c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d001      	beq.n	8003136 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3720      	adds	r7, #32
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40021000 	.word	0x40021000
 8003144:	019f800c 	.word	0x019f800c
 8003148:	feeefffc 	.word	0xfeeefffc

0800314c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e11e      	b.n	80033a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003164:	4b91      	ldr	r3, [pc, #580]	@ (80033ac <HAL_RCC_ClockConfig+0x260>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d910      	bls.n	8003194 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b8e      	ldr	r3, [pc, #568]	@ (80033ac <HAL_RCC_ClockConfig+0x260>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 020f 	bic.w	r2, r3, #15
 800317a:	498c      	ldr	r1, [pc, #560]	@ (80033ac <HAL_RCC_ClockConfig+0x260>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b8a      	ldr	r3, [pc, #552]	@ (80033ac <HAL_RCC_ClockConfig+0x260>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e106      	b.n	80033a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d073      	beq.n	8003288 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d129      	bne.n	80031fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a8:	4b81      	ldr	r3, [pc, #516]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0f4      	b.n	80033a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80031b8:	f000 f99e 	bl	80034f8 <RCC_GetSysClockFreqFromPLLSource>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4a7c      	ldr	r2, [pc, #496]	@ (80033b4 <HAL_RCC_ClockConfig+0x268>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d93f      	bls.n	8003246 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031c6:	4b7a      	ldr	r3, [pc, #488]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d033      	beq.n	8003246 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d12f      	bne.n	8003246 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031e6:	4b72      	ldr	r3, [pc, #456]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031ee:	4a70      	ldr	r2, [pc, #448]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80031f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80031f6:	2380      	movs	r3, #128	@ 0x80
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	e024      	b.n	8003246 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d107      	bne.n	8003214 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003204:	4b6a      	ldr	r3, [pc, #424]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d109      	bne.n	8003224 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0c6      	b.n	80033a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003214:	4b66      	ldr	r3, [pc, #408]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0be      	b.n	80033a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003224:	f000 f8ce 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003228:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4a61      	ldr	r2, [pc, #388]	@ (80033b4 <HAL_RCC_ClockConfig+0x268>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d909      	bls.n	8003246 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003232:	4b5f      	ldr	r3, [pc, #380]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800323a:	4a5d      	ldr	r2, [pc, #372]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 800323c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003240:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003242:	2380      	movs	r3, #128	@ 0x80
 8003244:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003246:	4b5a      	ldr	r3, [pc, #360]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f023 0203 	bic.w	r2, r3, #3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	4957      	ldr	r1, [pc, #348]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003254:	4313      	orrs	r3, r2
 8003256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003258:	f7fe faa4 	bl	80017a4 <HAL_GetTick>
 800325c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325e:	e00a      	b.n	8003276 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003260:	f7fe faa0 	bl	80017a4 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800326e:	4293      	cmp	r3, r2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e095      	b.n	80033a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003276:	4b4e      	ldr	r3, [pc, #312]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 020c 	and.w	r2, r3, #12
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	429a      	cmp	r2, r3
 8003286:	d1eb      	bne.n	8003260 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d023      	beq.n	80032dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a0:	4b43      	ldr	r3, [pc, #268]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4a42      	ldr	r2, [pc, #264]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80032a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80032b8:	4b3d      	ldr	r3, [pc, #244]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80032c0:	4a3b      	ldr	r2, [pc, #236]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80032c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c8:	4b39      	ldr	r3, [pc, #228]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	4936      	ldr	r1, [pc, #216]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
 80032da:	e008      	b.n	80032ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2b80      	cmp	r3, #128	@ 0x80
 80032e0:	d105      	bne.n	80032ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80032e2:	4b33      	ldr	r3, [pc, #204]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	4a32      	ldr	r2, [pc, #200]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80032e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032ee:	4b2f      	ldr	r3, [pc, #188]	@ (80033ac <HAL_RCC_ClockConfig+0x260>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d21d      	bcs.n	8003338 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fc:	4b2b      	ldr	r3, [pc, #172]	@ (80033ac <HAL_RCC_ClockConfig+0x260>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f023 020f 	bic.w	r2, r3, #15
 8003304:	4929      	ldr	r1, [pc, #164]	@ (80033ac <HAL_RCC_ClockConfig+0x260>)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	4313      	orrs	r3, r2
 800330a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800330c:	f7fe fa4a 	bl	80017a4 <HAL_GetTick>
 8003310:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	e00a      	b.n	800332a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003314:	f7fe fa46 	bl	80017a4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e03b      	b.n	80033a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b20      	ldr	r3, [pc, #128]	@ (80033ac <HAL_RCC_ClockConfig+0x260>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d1ed      	bne.n	8003314 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003344:	4b1a      	ldr	r3, [pc, #104]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4917      	ldr	r1, [pc, #92]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003362:	4b13      	ldr	r3, [pc, #76]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	490f      	ldr	r1, [pc, #60]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003372:	4313      	orrs	r3, r2
 8003374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003376:	f000 f825 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 800337a:	4602      	mov	r2, r0
 800337c:	4b0c      	ldr	r3, [pc, #48]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	490c      	ldr	r1, [pc, #48]	@ (80033b8 <HAL_RCC_ClockConfig+0x26c>)
 8003388:	5ccb      	ldrb	r3, [r1, r3]
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	4a0a      	ldr	r2, [pc, #40]	@ (80033bc <HAL_RCC_ClockConfig+0x270>)
 8003394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003396:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <HAL_RCC_ClockConfig+0x274>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe f9b6 	bl	800170c <HAL_InitTick>
 80033a0:	4603      	mov	r3, r0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40022000 	.word	0x40022000
 80033b0:	40021000 	.word	0x40021000
 80033b4:	04c4b400 	.word	0x04c4b400
 80033b8:	08006b08 	.word	0x08006b08
 80033bc:	20002764 	.word	0x20002764
 80033c0:	20003c70 	.word	0x20003c70

080033c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033ca:	4b2c      	ldr	r3, [pc, #176]	@ (800347c <HAL_RCC_GetSysClockFreq+0xb8>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d102      	bne.n	80033dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003480 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	e047      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80033dc:	4b27      	ldr	r3, [pc, #156]	@ (800347c <HAL_RCC_GetSysClockFreq+0xb8>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d102      	bne.n	80033ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033e8:	4b26      	ldr	r3, [pc, #152]	@ (8003484 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	e03e      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80033ee:	4b23      	ldr	r3, [pc, #140]	@ (800347c <HAL_RCC_GetSysClockFreq+0xb8>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	d136      	bne.n	8003468 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033fa:	4b20      	ldr	r3, [pc, #128]	@ (800347c <HAL_RCC_GetSysClockFreq+0xb8>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003404:	4b1d      	ldr	r3, [pc, #116]	@ (800347c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	3301      	adds	r3, #1
 8003410:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d10c      	bne.n	8003432 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003418:	4a1a      	ldr	r2, [pc, #104]	@ (8003484 <HAL_RCC_GetSysClockFreq+0xc0>)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003420:	4a16      	ldr	r2, [pc, #88]	@ (800347c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003422:	68d2      	ldr	r2, [r2, #12]
 8003424:	0a12      	lsrs	r2, r2, #8
 8003426:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800342a:	fb02 f303 	mul.w	r3, r2, r3
 800342e:	617b      	str	r3, [r7, #20]
      break;
 8003430:	e00c      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003432:	4a13      	ldr	r2, [pc, #76]	@ (8003480 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	fbb2 f3f3 	udiv	r3, r2, r3
 800343a:	4a10      	ldr	r2, [pc, #64]	@ (800347c <HAL_RCC_GetSysClockFreq+0xb8>)
 800343c:	68d2      	ldr	r2, [r2, #12]
 800343e:	0a12      	lsrs	r2, r2, #8
 8003440:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003444:	fb02 f303 	mul.w	r3, r2, r3
 8003448:	617b      	str	r3, [r7, #20]
      break;
 800344a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800344c:	4b0b      	ldr	r3, [pc, #44]	@ (800347c <HAL_RCC_GetSysClockFreq+0xb8>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	0e5b      	lsrs	r3, r3, #25
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	3301      	adds	r3, #1
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	e001      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800346c:	693b      	ldr	r3, [r7, #16]
}
 800346e:	4618      	mov	r0, r3
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000
 8003480:	00f42400 	.word	0x00f42400
 8003484:	007a1200 	.word	0x007a1200

08003488 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800348c:	4b03      	ldr	r3, [pc, #12]	@ (800349c <HAL_RCC_GetHCLKFreq+0x14>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20002764 	.word	0x20002764

080034a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034a4:	f7ff fff0 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4904      	ldr	r1, [pc, #16]	@ (80034c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	08006b18 	.word	0x08006b18

080034cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034d0:	f7ff ffda 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034d4:	4602      	mov	r2, r0
 80034d6:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	0adb      	lsrs	r3, r3, #11
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	4904      	ldr	r1, [pc, #16]	@ (80034f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034e2:	5ccb      	ldrb	r3, [r1, r3]
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	08006b18 	.word	0x08006b18

080034f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003578 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003508:	4b1b      	ldr	r3, [pc, #108]	@ (8003578 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	3301      	adds	r3, #1
 8003514:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b03      	cmp	r3, #3
 800351a:	d10c      	bne.n	8003536 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800351c:	4a17      	ldr	r2, [pc, #92]	@ (800357c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	fbb2 f3f3 	udiv	r3, r2, r3
 8003524:	4a14      	ldr	r2, [pc, #80]	@ (8003578 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003526:	68d2      	ldr	r2, [r2, #12]
 8003528:	0a12      	lsrs	r2, r2, #8
 800352a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800352e:	fb02 f303 	mul.w	r3, r2, r3
 8003532:	617b      	str	r3, [r7, #20]
    break;
 8003534:	e00c      	b.n	8003550 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003536:	4a12      	ldr	r2, [pc, #72]	@ (8003580 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	fbb2 f3f3 	udiv	r3, r2, r3
 800353e:	4a0e      	ldr	r2, [pc, #56]	@ (8003578 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003540:	68d2      	ldr	r2, [r2, #12]
 8003542:	0a12      	lsrs	r2, r2, #8
 8003544:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003548:	fb02 f303 	mul.w	r3, r2, r3
 800354c:	617b      	str	r3, [r7, #20]
    break;
 800354e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003550:	4b09      	ldr	r3, [pc, #36]	@ (8003578 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	0e5b      	lsrs	r3, r3, #25
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	3301      	adds	r3, #1
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800356a:	687b      	ldr	r3, [r7, #4]
}
 800356c:	4618      	mov	r0, r3
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40021000 	.word	0x40021000
 800357c:	007a1200 	.word	0x007a1200
 8003580:	00f42400 	.word	0x00f42400

08003584 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800358c:	2300      	movs	r3, #0
 800358e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003590:	2300      	movs	r3, #0
 8003592:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8098 	beq.w	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a2:	2300      	movs	r3, #0
 80035a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a6:	4b43      	ldr	r3, [pc, #268]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10d      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b2:	4b40      	ldr	r3, [pc, #256]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b6:	4a3f      	ldr	r2, [pc, #252]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80035be:	4b3d      	ldr	r3, [pc, #244]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ca:	2301      	movs	r3, #1
 80035cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035ce:	4b3a      	ldr	r3, [pc, #232]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a39      	ldr	r2, [pc, #228]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035da:	f7fe f8e3 	bl	80017a4 <HAL_GetTick>
 80035de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035e0:	e009      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e2:	f7fe f8df 	bl	80017a4 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d902      	bls.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	74fb      	strb	r3, [r7, #19]
        break;
 80035f4:	e005      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035f6:	4b30      	ldr	r3, [pc, #192]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0ef      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003602:	7cfb      	ldrb	r3, [r7, #19]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d159      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003608:	4b2a      	ldr	r3, [pc, #168]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003612:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d01e      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	429a      	cmp	r2, r3
 8003622:	d019      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003624:	4b23      	ldr	r3, [pc, #140]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800362e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003630:	4b20      	ldr	r3, [pc, #128]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003636:	4a1f      	ldr	r2, [pc, #124]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800363c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003640:	4b1c      	ldr	r3, [pc, #112]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003646:	4a1b      	ldr	r2, [pc, #108]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800364c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003650:	4a18      	ldr	r2, [pc, #96]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d016      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003662:	f7fe f89f 	bl	80017a4 <HAL_GetTick>
 8003666:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003668:	e00b      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366a:	f7fe f89b 	bl	80017a4 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003678:	4293      	cmp	r3, r2
 800367a:	d902      	bls.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	74fb      	strb	r3, [r7, #19]
            break;
 8003680:	e006      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003682:	4b0c      	ldr	r3, [pc, #48]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ec      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003690:	7cfb      	ldrb	r3, [r7, #19]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10b      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003696:	4b07      	ldr	r3, [pc, #28]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036a4:	4903      	ldr	r1, [pc, #12]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80036ac:	e008      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	74bb      	strb	r3, [r7, #18]
 80036b2:	e005      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036bc:	7cfb      	ldrb	r3, [r7, #19]
 80036be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036c0:	7c7b      	ldrb	r3, [r7, #17]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d105      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c6:	4ba7      	ldr	r3, [pc, #668]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ca:	4aa6      	ldr	r2, [pc, #664]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036de:	4ba1      	ldr	r3, [pc, #644]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e4:	f023 0203 	bic.w	r2, r3, #3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	499d      	ldr	r1, [pc, #628]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003700:	4b98      	ldr	r3, [pc, #608]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003706:	f023 020c 	bic.w	r2, r3, #12
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	4995      	ldr	r1, [pc, #596]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003722:	4b90      	ldr	r3, [pc, #576]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003728:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	498c      	ldr	r1, [pc, #560]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003744:	4b87      	ldr	r3, [pc, #540]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800374a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	4984      	ldr	r1, [pc, #528]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003766:	4b7f      	ldr	r3, [pc, #508]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	497b      	ldr	r1, [pc, #492]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003788:	4b76      	ldr	r3, [pc, #472]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	4973      	ldr	r1, [pc, #460]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037aa:	4b6e      	ldr	r3, [pc, #440]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	496a      	ldr	r1, [pc, #424]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037cc:	4b65      	ldr	r3, [pc, #404]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	4962      	ldr	r1, [pc, #392]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fc:	4959      	ldr	r1, [pc, #356]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003810:	4b54      	ldr	r3, [pc, #336]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003812:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003816:	f023 0203 	bic.w	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381e:	4951      	ldr	r1, [pc, #324]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003832:	4b4c      	ldr	r3, [pc, #304]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003838:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003840:	4948      	ldr	r1, [pc, #288]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003850:	2b00      	cmp	r3, #0
 8003852:	d015      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003854:	4b43      	ldr	r3, [pc, #268]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	4940      	ldr	r1, [pc, #256]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003872:	d105      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003874:	4b3b      	ldr	r3, [pc, #236]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4a3a      	ldr	r2, [pc, #232]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800387a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800387e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003888:	2b00      	cmp	r3, #0
 800388a:	d015      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800388c:	4b35      	ldr	r3, [pc, #212]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003892:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800389a:	4932      	ldr	r1, [pc, #200]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038aa:	d105      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038b6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d015      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038c4:	4b27      	ldr	r3, [pc, #156]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d2:	4924      	ldr	r1, [pc, #144]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038e2:	d105      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d015      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038fc:	4b19      	ldr	r3, [pc, #100]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003902:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390a:	4916      	ldr	r1, [pc, #88]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003916:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800391a:	d105      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800391c:	4b11      	ldr	r3, [pc, #68]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4a10      	ldr	r2, [pc, #64]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003922:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003926:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d019      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003934:	4b0b      	ldr	r3, [pc, #44]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	4908      	ldr	r1, [pc, #32]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003952:	d109      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003954:	4b03      	ldr	r3, [pc, #12]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4a02      	ldr	r2, [pc, #8]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800395e:	60d3      	str	r3, [r2, #12]
 8003960:	e002      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003962:	bf00      	nop
 8003964:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d015      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003974:	4b29      	ldr	r3, [pc, #164]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003982:	4926      	ldr	r1, [pc, #152]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003992:	d105      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003994:	4b21      	ldr	r3, [pc, #132]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4a20      	ldr	r2, [pc, #128]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800399a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800399e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d015      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80039ac:	4b1b      	ldr	r3, [pc, #108]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ba:	4918      	ldr	r1, [pc, #96]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ca:	d105      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039cc:	4b13      	ldr	r3, [pc, #76]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4a12      	ldr	r2, [pc, #72]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d015      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039e4:	4b0d      	ldr	r3, [pc, #52]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f2:	490a      	ldr	r1, [pc, #40]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a02:	d105      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a04:	4b05      	ldr	r3, [pc, #20]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a04      	ldr	r2, [pc, #16]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a10:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000

08003a20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a32:	d136      	bne.n	8003aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003a34:	4bb1      	ldr	r3, [pc, #708]	@ (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a3e:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003a40:	4bae      	ldr	r3, [pc, #696]	@ (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d108      	bne.n	8003a60 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a54:	d104      	bne.n	8003a60 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8003a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a5a:	61fb      	str	r3, [r7, #28]
 8003a5c:	f000 bd12 	b.w	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003a60:	4ba6      	ldr	r3, [pc, #664]	@ (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d108      	bne.n	8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a74:	d104      	bne.n	8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 8003a76:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003a7a:	61fb      	str	r3, [r7, #28]
 8003a7c:	f000 bd02 	b.w	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003a80:	4b9e      	ldr	r3, [pc, #632]	@ (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a8c:	f040 84fa 	bne.w	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a96:	f040 84f5 	bne.w	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = HSE_VALUE / 32U;
 8003a9a:	4b99      	ldr	r3, [pc, #612]	@ (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003a9c:	61fb      	str	r3, [r7, #28]
 8003a9e:	f000 bcf1 	b.w	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 8003aa2:	4b96      	ldr	r3, [pc, #600]	@ (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d10c      	bne.n	8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003aae:	4b93      	ldr	r3, [pc, #588]	@ (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aba:	d102      	bne.n	8003ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 8003abc:	4b91      	ldr	r3, [pc, #580]	@ (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	e017      	b.n	8003af2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	e014      	b.n	8003af2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 8003ac8:	4b8c      	ldr	r3, [pc, #560]	@ (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d10c      	bne.n	8003aee <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003ad4:	4b89      	ldr	r3, [pc, #548]	@ (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003adc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ae0:	d102      	bne.n	8003ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 8003ae2:	4b89      	ldr	r3, [pc, #548]	@ (8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	e004      	b.n	8003af2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	e001      	b.n	8003af2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003af2:	4b82      	ldr	r3, [pc, #520]	@ (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	091b      	lsrs	r3, r3, #4
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	3301      	adds	r3, #1
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b0c:	f000 8466 	beq.w	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b16:	f200 848e 	bhi.w	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b20:	f000 8263 	beq.w	8003fea <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b2a:	f200 8484 	bhi.w	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b34:	f000 8417 	beq.w	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b3e:	f200 847a 	bhi.w	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b48:	f000 83d0 	beq.w	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b52:	f200 8470 	bhi.w	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b5c:	f000 8398 	beq.w	8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b66:	f200 8466 	bhi.w	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b70:	f000 8360 	beq.w	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b7a:	f200 845c 	bhi.w	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b84:	f000 8318 	beq.w	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b8e:	f200 8452 	bhi.w	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b98:	f000 82ca 	beq.w	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ba2:	f200 8448 	bhi.w	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bac:	f000 827c 	beq.w	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb6:	f200 843e 	bhi.w	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc0:	f000 8236 	beq.w	8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bca:	f200 8434 	bhi.w	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bd4:	f000 81e4 	beq.w	8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bde:	f200 842a 	bhi.w	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b80      	cmp	r3, #128	@ 0x80
 8003be6:	f000 81b1 	beq.w	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b80      	cmp	r3, #128	@ 0x80
 8003bee:	f200 8422 	bhi.w	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d84b      	bhi.n	8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 841b 	beq.w	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	2b1f      	cmp	r3, #31
 8003c06:	f200 8416 	bhi.w	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>)
 8003c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c10:	08003c9b 	.word	0x08003c9b
 8003c14:	08003d0d 	.word	0x08003d0d
 8003c18:	08004437 	.word	0x08004437
 8003c1c:	08003d6f 	.word	0x08003d6f
 8003c20:	08004437 	.word	0x08004437
 8003c24:	08004437 	.word	0x08004437
 8003c28:	08004437 	.word	0x08004437
 8003c2c:	08003dd1 	.word	0x08003dd1
 8003c30:	08004437 	.word	0x08004437
 8003c34:	08004437 	.word	0x08004437
 8003c38:	08004437 	.word	0x08004437
 8003c3c:	08004437 	.word	0x08004437
 8003c40:	08004437 	.word	0x08004437
 8003c44:	08004437 	.word	0x08004437
 8003c48:	08004437 	.word	0x08004437
 8003c4c:	08003e33 	.word	0x08003e33
 8003c50:	08004437 	.word	0x08004437
 8003c54:	08004437 	.word	0x08004437
 8003c58:	08004437 	.word	0x08004437
 8003c5c:	08004437 	.word	0x08004437
 8003c60:	08004437 	.word	0x08004437
 8003c64:	08004437 	.word	0x08004437
 8003c68:	08004437 	.word	0x08004437
 8003c6c:	08004437 	.word	0x08004437
 8003c70:	08004437 	.word	0x08004437
 8003c74:	08004437 	.word	0x08004437
 8003c78:	08004437 	.word	0x08004437
 8003c7c:	08004437 	.word	0x08004437
 8003c80:	08004437 	.word	0x08004437
 8003c84:	08004437 	.word	0x08004437
 8003c88:	08004437 	.word	0x08004437
 8003c8c:	08003e9b 	.word	0x08003e9b
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b40      	cmp	r3, #64	@ 0x40
 8003c94:	f000 8135 	beq.w	8003f02 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
      break;

#endif /* QUADSPI */

    default:
      break;
 8003c98:	e3cd      	b.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003c9a:	4b18      	ldr	r3, [pc, #96]	@ (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d103      	bne.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        frequency = HAL_RCC_GetPCLK2Freq();
 8003cac:	f7ff fc0e 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 8003cb0:	61f8      	str	r0, [r7, #28]
      break;
 8003cb2:	e3c2      	b.n	800443a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d103      	bne.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
        frequency = HAL_RCC_GetSysClockFreq();
 8003cba:	f7ff fb83 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003cbe:	61f8      	str	r0, [r7, #28]
      break;
 8003cc0:	e3bb      	b.n	800443a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 8003cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cce:	d105      	bne.n	8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d102      	bne.n	8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HSI_VALUE;
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003cd8:	61fb      	str	r3, [r7, #28]
      break;
 8003cda:	e3ae      	b.n	800443a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003cdc:	4b07      	ldr	r3, [pc, #28]	@ (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	f040 83a7 	bne.w	800443a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	f040 83a3 	bne.w	800443a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
        frequency = LSE_VALUE;
 8003cf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cf8:	61fb      	str	r3, [r7, #28]
      break;
 8003cfa:	e39e      	b.n	800443a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	0003d090 	.word	0x0003d090
 8003d04:	00f42400 	.word	0x00f42400
 8003d08:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003d0c:	4ba2      	ldr	r3, [pc, #648]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d103      	bne.n	8003d26 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003d1e:	f7ff fbbf 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8003d22:	61f8      	str	r0, [r7, #28]
      break;
 8003d24:	e38b      	b.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d103      	bne.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
        frequency = HAL_RCC_GetSysClockFreq();
 8003d2c:	f7ff fb4a 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003d30:	61f8      	str	r0, [r7, #28]
      break;
 8003d32:	e384      	b.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003d34:	4b98      	ldr	r3, [pc, #608]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d40:	d105      	bne.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d102      	bne.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
        frequency = HSI_VALUE;
 8003d48:	4b94      	ldr	r3, [pc, #592]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003d4a:	61fb      	str	r3, [r7, #28]
      break;
 8003d4c:	e377      	b.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003d4e:	4b92      	ldr	r3, [pc, #584]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	f040 8370 	bne.w	800443e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b0c      	cmp	r3, #12
 8003d62:	f040 836c 	bne.w	800443e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
        frequency = LSE_VALUE;
 8003d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d6a:	61fb      	str	r3, [r7, #28]
      break;
 8003d6c:	e367      	b.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003d6e:	4b8a      	ldr	r3, [pc, #552]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d74:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d78:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d103      	bne.n	8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003d80:	f7ff fb8e 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8003d84:	61f8      	str	r0, [r7, #28]
      break;
 8003d86:	e35c      	b.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	2b10      	cmp	r3, #16
 8003d8c:	d103      	bne.n	8003d96 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
        frequency = HAL_RCC_GetSysClockFreq();
 8003d8e:	f7ff fb19 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003d92:	61f8      	str	r0, [r7, #28]
      break;
 8003d94:	e355      	b.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003d96:	4b80      	ldr	r3, [pc, #512]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003da2:	d105      	bne.n	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d102      	bne.n	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
        frequency = HSI_VALUE;
 8003daa:	4b7c      	ldr	r3, [pc, #496]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003dac:	61fb      	str	r3, [r7, #28]
      break;
 8003dae:	e348      	b.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003db0:	4b79      	ldr	r3, [pc, #484]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	f040 8341 	bne.w	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b30      	cmp	r3, #48	@ 0x30
 8003dc4:	f040 833d 	bne.w	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        frequency = LSE_VALUE;
 8003dc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dcc:	61fb      	str	r3, [r7, #28]
      break;
 8003dce:	e338      	b.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003dd0:	4b71      	ldr	r3, [pc, #452]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003dda:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d103      	bne.n	8003dea <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003de2:	f7ff fb5d 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8003de6:	61f8      	str	r0, [r7, #28]
      break;
 8003de8:	e32d      	b.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b40      	cmp	r3, #64	@ 0x40
 8003dee:	d103      	bne.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        frequency = HAL_RCC_GetSysClockFreq();
 8003df0:	f7ff fae8 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003df4:	61f8      	str	r0, [r7, #28]
      break;
 8003df6:	e326      	b.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8003df8:	4b67      	ldr	r3, [pc, #412]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e04:	d105      	bne.n	8003e12 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b80      	cmp	r3, #128	@ 0x80
 8003e0a:	d102      	bne.n	8003e12 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
        frequency = HSI_VALUE;
 8003e0c:	4b63      	ldr	r3, [pc, #396]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003e0e:	61fb      	str	r3, [r7, #28]
      break;
 8003e10:	e319      	b.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8003e12:	4b61      	ldr	r3, [pc, #388]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	f040 8312 	bne.w	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e26:	f040 830e 	bne.w	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
        frequency = LSE_VALUE;
 8003e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e2e:	61fb      	str	r3, [r7, #28]
      break;
 8003e30:	e309      	b.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003e32:	4b59      	ldr	r3, [pc, #356]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e3c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d103      	bne.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003e44:	f7ff fb2c 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8003e48:	61f8      	str	r0, [r7, #28]
      break;
 8003e4a:	e2fe      	b.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e52:	d103      	bne.n	8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
        frequency = HAL_RCC_GetSysClockFreq();
 8003e54:	f7ff fab6 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003e58:	61f8      	str	r0, [r7, #28]
      break;
 8003e5a:	e2f6      	b.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8003e5c:	4b4e      	ldr	r3, [pc, #312]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e68:	d106      	bne.n	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e70:	d102      	bne.n	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
        frequency = HSI_VALUE;
 8003e72:	4b4a      	ldr	r3, [pc, #296]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003e74:	61fb      	str	r3, [r7, #28]
      break;
 8003e76:	e2e8      	b.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8003e78:	4b47      	ldr	r3, [pc, #284]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	f040 82e1 	bne.w	800444a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e8e:	f040 82dc 	bne.w	800444a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
        frequency = LSE_VALUE;
 8003e92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e96:	61fb      	str	r3, [r7, #28]
      break;
 8003e98:	e2d7      	b.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003e9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ea4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003eac:	f7ff faf8 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8003eb0:	61f8      	str	r0, [r7, #28]
      break;
 8003eb2:	e2cc      	b.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eba:	d103      	bne.n	8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
        frequency = HAL_RCC_GetSysClockFreq();
 8003ebc:	f7ff fa82 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003ec0:	61f8      	str	r0, [r7, #28]
      break;
 8003ec2:	e2c4      	b.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003ec4:	4b34      	ldr	r3, [pc, #208]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ecc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed0:	d106      	bne.n	8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ed8:	d102      	bne.n	8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
        frequency = HSI_VALUE;
 8003eda:	4b30      	ldr	r3, [pc, #192]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003edc:	61fb      	str	r3, [r7, #28]
      break;
 8003ede:	e2b6      	b.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8003ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	f040 82af 	bne.w	800444e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ef6:	f040 82aa 	bne.w	800444e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
        frequency = LSE_VALUE;
 8003efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003efe:	61fb      	str	r3, [r7, #28]
      break;
 8003f00:	e2a5      	b.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003f02:	4b25      	ldr	r3, [pc, #148]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f08:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f0c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d103      	bne.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003f14:	f7ff fac4 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8003f18:	61f8      	str	r0, [r7, #28]
      break;
 8003f1a:	e29a      	b.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f22:	d103      	bne.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        frequency = HAL_RCC_GetSysClockFreq();
 8003f24:	f7ff fa4e 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003f28:	61f8      	str	r0, [r7, #28]
      break;
 8003f2a:	e292      	b.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8003f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f38:	f040 828b 	bne.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f42:	f040 8286 	bne.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
        frequency = HSI_VALUE;
 8003f46:	4b15      	ldr	r3, [pc, #84]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003f48:	61fb      	str	r3, [r7, #28]
      break;
 8003f4a:	e282      	b.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003f4c:	4b12      	ldr	r3, [pc, #72]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f52:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003f56:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d103      	bne.n	8003f66 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003f5e:	f7ff fa9f 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8003f62:	61f8      	str	r0, [r7, #28]
      break;
 8003f64:	e277      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f6c:	d103      	bne.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
        frequency = HAL_RCC_GetSysClockFreq();
 8003f6e:	f7ff fa29 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003f72:	61f8      	str	r0, [r7, #28]
      break;
 8003f74:	e26f      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8003f76:	4b08      	ldr	r3, [pc, #32]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f82:	f040 8268 	bne.w	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f8c:	f040 8263 	bne.w	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
        frequency = HSI_VALUE;
 8003f90:	4b02      	ldr	r3, [pc, #8]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003f92:	61fb      	str	r3, [r7, #28]
      break;
 8003f94:	e25f      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8003f96:	bf00      	nop
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	00f42400 	.word	0x00f42400
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003fa0:	4ba0      	ldr	r3, [pc, #640]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003faa:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d103      	bne.n	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003fb2:	f7ff fa75 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8003fb6:	61f8      	str	r0, [r7, #28]
      break;
 8003fb8:	e24f      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc0:	d103      	bne.n	8003fca <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
        frequency = HAL_RCC_GetSysClockFreq();
 8003fc2:	f7ff f9ff 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003fc6:	61f8      	str	r0, [r7, #28]
      break;
 8003fc8:	e247      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8003fca:	4b96      	ldr	r3, [pc, #600]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd6:	f040 8240 	bne.w	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fe0:	f040 823b 	bne.w	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        frequency = HSI_VALUE;
 8003fe4:	4b90      	ldr	r3, [pc, #576]	@ (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8003fe6:	61fb      	str	r3, [r7, #28]
      break;
 8003fe8:	e237      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8003fea:	4b8e      	ldr	r3, [pc, #568]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003fec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ff0:	f003 0303 	and.w	r3, r3, #3
 8003ff4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d103      	bne.n	8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003ffc:	f7ff fa50 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8004000:	61f8      	str	r0, [r7, #28]
      break;
 8004002:	e22c      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if(srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d103      	bne.n	8004012 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        frequency = HAL_RCC_GetSysClockFreq();
 800400a:	f7ff f9db 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 800400e:	61f8      	str	r0, [r7, #28]
      break;
 8004010:	e225      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004012:	4b84      	ldr	r3, [pc, #528]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800401a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800401e:	f040 821e 	bne.w	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b02      	cmp	r3, #2
 8004026:	f040 821a 	bne.w	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
        frequency = HSI_VALUE;
 800402a:	4b7f      	ldr	r3, [pc, #508]	@ (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800402c:	61fb      	str	r3, [r7, #28]
      break;
 800402e:	e216      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004030:	4b7c      	ldr	r3, [pc, #496]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004036:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800403a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d103      	bne.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004042:	f7ff fa2d 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8004046:	61f8      	str	r0, [r7, #28]
      break;
 8004048:	e20b      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800404a:	4b76      	ldr	r3, [pc, #472]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800404c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b02      	cmp	r3, #2
 8004056:	d107      	bne.n	8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800405e:	d103      	bne.n	8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
        frequency = LSI_VALUE;
 8004060:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004064:	61fb      	str	r3, [r7, #28]
 8004066:	e01e      	b.n	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004068:	4b6e      	ldr	r3, [pc, #440]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004074:	d106      	bne.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800407c:	d102      	bne.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        frequency = HSI_VALUE;
 800407e:	4b6a      	ldr	r3, [pc, #424]	@ (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	e010      	b.n	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004084:	4b67      	ldr	r3, [pc, #412]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b02      	cmp	r3, #2
 8004090:	f040 81e7 	bne.w	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800409a:	f040 81e2 	bne.w	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
        frequency = LSE_VALUE;
 800409e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040a2:	61fb      	str	r3, [r7, #28]
      break;
 80040a4:	e1dd      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80040a6:	e1dc      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80040a8:	4b5e      	ldr	r3, [pc, #376]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ae:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80040b2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d103      	bne.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
        frequency = HAL_RCC_GetSysClockFreq();
 80040ba:	f7ff f983 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 80040be:	61f8      	str	r0, [r7, #28]
      break;
 80040c0:	e1d1      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040c8:	d11b      	bne.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80040ca:	4b56      	ldr	r3, [pc, #344]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 81c7 	beq.w	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80040d8:	4b52      	ldr	r3, [pc, #328]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	0a1b      	lsrs	r3, r3, #8
 80040de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040e2:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	fb03 f202 	mul.w	r2, r3, r2
 80040ec:	4b4d      	ldr	r3, [pc, #308]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	0d5b      	lsrs	r3, r3, #21
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	3301      	adds	r3, #1
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fe:	61fb      	str	r3, [r7, #28]
      break;
 8004100:	e1b1      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004108:	d102      	bne.n	8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        frequency = EXTERNAL_CLOCK_VALUE;
 800410a:	4b48      	ldr	r3, [pc, #288]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800410c:	61fb      	str	r3, [r7, #28]
      break;
 800410e:	e1aa      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 8004110:	4b44      	ldr	r3, [pc, #272]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004118:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800411c:	f040 81a3 	bne.w	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004126:	f040 819e 	bne.w	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
        frequency = HSI_VALUE;
 800412a:	4b3f      	ldr	r3, [pc, #252]	@ (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800412c:	61fb      	str	r3, [r7, #28]
      break;
 800412e:	e19a      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004130:	4b3c      	ldr	r3, [pc, #240]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004136:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800413a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d103      	bne.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
        frequency = HAL_RCC_GetSysClockFreq();
 8004142:	f7ff f93f 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8004146:	61f8      	str	r0, [r7, #28]
      break;
 8004148:	e18f      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004150:	d11b      	bne.n	800418a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8004152:	4b34      	ldr	r3, [pc, #208]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8185 	beq.w	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004160:	4b30      	ldr	r3, [pc, #192]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	0a1b      	lsrs	r3, r3, #8
 8004166:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800416a:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	fb03 f202 	mul.w	r2, r3, r2
 8004174:	4b2b      	ldr	r3, [pc, #172]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	0d5b      	lsrs	r3, r3, #21
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	3301      	adds	r3, #1
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	fbb2 f3f3 	udiv	r3, r2, r3
 8004186:	61fb      	str	r3, [r7, #28]
      break;
 8004188:	e16f      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004190:	d102      	bne.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004192:	4b26      	ldr	r3, [pc, #152]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004194:	61fb      	str	r3, [r7, #28]
      break;
 8004196:	e168      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 8004198:	4b22      	ldr	r3, [pc, #136]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041a4:	f040 8161 	bne.w	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80041ae:	f040 815c 	bne.w	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
        frequency = HSI_VALUE;
 80041b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80041b4:	61fb      	str	r3, [r7, #28]
      break;
 80041b6:	e158      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80041b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041be:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80041c2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041ca:	d103      	bne.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
        frequency = HAL_RCC_GetPCLK1Freq();
 80041cc:	f7ff f968 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 80041d0:	61f8      	str	r0, [r7, #28]
      break;
 80041d2:	e14c      	b.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d102      	bne.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
        frequency = HSE_VALUE;
 80041da:	4b15      	ldr	r3, [pc, #84]	@ (8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80041dc:	61fb      	str	r3, [r7, #28]
      break;
 80041de:	e146      	b.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041e6:	f040 8142 	bne.w	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80041ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 813b 	beq.w	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80041f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	0a1b      	lsrs	r3, r3, #8
 80041fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004202:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	fb03 f202 	mul.w	r2, r3, r2
 800420c:	4b05      	ldr	r3, [pc, #20]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	0d5b      	lsrs	r3, r3, #21
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	3301      	adds	r3, #1
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	fbb2 f3f3 	udiv	r3, r2, r3
 800421e:	61fb      	str	r3, [r7, #28]
      break;
 8004220:	e125      	b.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8004222:	bf00      	nop
 8004224:	40021000 	.word	0x40021000
 8004228:	00f42400 	.word	0x00f42400
 800422c:	00bb8000 	.word	0x00bb8000
 8004230:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004234:	4b96      	ldr	r3, [pc, #600]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800423e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004246:	d114      	bne.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004248:	4b91      	ldr	r3, [pc, #580]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	0a1b      	lsrs	r3, r3, #8
 800424e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004252:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	fb03 f202 	mul.w	r2, r3, r2
 800425c:	4b8c      	ldr	r3, [pc, #560]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	0d5b      	lsrs	r3, r3, #21
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	3301      	adds	r3, #1
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	fbb2 f3f3 	udiv	r3, r2, r3
 800426e:	61fb      	str	r3, [r7, #28]
      break;
 8004270:	e0ff      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 8004272:	4b87      	ldr	r3, [pc, #540]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004274:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b02      	cmp	r3, #2
 800427e:	f040 80f8 	bne.w	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	f040 80f4 	bne.w	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
        frequency = HSI48_VALUE;
 800428a:	4b82      	ldr	r3, [pc, #520]	@ (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800428c:	61fb      	str	r3, [r7, #28]
      break;
 800428e:	e0f0      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004290:	4b7f      	ldr	r3, [pc, #508]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004296:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800429a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042a2:	d114      	bne.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80042a4:	4b7a      	ldr	r3, [pc, #488]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ae:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	fb03 f202 	mul.w	r2, r3, r2
 80042b8:	4b75      	ldr	r3, [pc, #468]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	0d5b      	lsrs	r3, r3, #21
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	3301      	adds	r3, #1
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ca:	61fb      	str	r3, [r7, #28]
      break;
 80042cc:	e0d3      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 80042ce:	4b70      	ldr	r3, [pc, #448]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80042d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b02      	cmp	r3, #2
 80042da:	f040 80cc 	bne.w	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f040 80c8 	bne.w	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
        frequency = HSI48_VALUE;
 80042e6:	4b6b      	ldr	r3, [pc, #428]	@ (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80042e8:	61fb      	str	r3, [r7, #28]
      break;
 80042ea:	e0c4      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 80042ec:	4b68      	ldr	r3, [pc, #416]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80042f6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042fe:	d129      	bne.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8004300:	4b63      	ldr	r3, [pc, #396]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 80b6 	beq.w	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800430e:	4b60      	ldr	r3, [pc, #384]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	0a1b      	lsrs	r3, r3, #8
 8004314:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004318:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800431a:	4b5d      	ldr	r3, [pc, #372]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	0edb      	lsrs	r3, r3, #27
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10a      	bne.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800432c:	4b58      	ldr	r3, [pc, #352]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
              pllp = 17U;
 8004338:	2311      	movs	r3, #17
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	e001      	b.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
              pllp = 7U;
 800433e:	2307      	movs	r3, #7
 8004340:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	fb03 f202 	mul.w	r2, r3, r2
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004350:	61fb      	str	r3, [r7, #28]
      break;
 8004352:	e092      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800435a:	f040 808e 	bne.w	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
        frequency = HAL_RCC_GetSysClockFreq();
 800435e:	f7ff f831 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8004362:	61f8      	str	r0, [r7, #28]
      break;
 8004364:	e089      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 8004366:	4b4a      	ldr	r3, [pc, #296]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004370:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004378:	d128      	bne.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 800437a:	4b45      	ldr	r3, [pc, #276]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d07b      	beq.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004386:	4b42      	ldr	r3, [pc, #264]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	0a1b      	lsrs	r3, r3, #8
 800438c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004390:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004392:	4b3f      	ldr	r3, [pc, #252]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	0edb      	lsrs	r3, r3, #27
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10a      	bne.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80043a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
              pllp = 17U;
 80043b0:	2311      	movs	r3, #17
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	e001      	b.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
              pllp = 7U;
 80043b6:	2307      	movs	r3, #7
 80043b8:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	fb03 f202 	mul.w	r2, r3, r2
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	61fb      	str	r3, [r7, #28]
      break;
 80043ca:	e058      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043d2:	d154      	bne.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
        frequency = HAL_RCC_GetSysClockFreq();
 80043d4:	f7fe fff6 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 80043d8:	61f8      	str	r0, [r7, #28]
      break;
 80043da:	e050      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 80043dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80043de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043e2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80043e6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043ee:	d114      	bne.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80043f0:	4b27      	ldr	r3, [pc, #156]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	0a1b      	lsrs	r3, r3, #8
 80043f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043fa:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	fb03 f202 	mul.w	r2, r3, r2
 8004404:	4b22      	ldr	r3, [pc, #136]	@ (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	0d5b      	lsrs	r3, r3, #21
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	3301      	adds	r3, #1
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	fbb2 f3f3 	udiv	r3, r2, r3
 8004416:	61fb      	str	r3, [r7, #28]
      break;
 8004418:	e033      	b.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004420:	d102      	bne.n	8004428 <HAL_RCCEx_GetPeriphCLKFreq+0xa08>
        frequency = HSI_VALUE;
 8004422:	4b1d      	ldr	r3, [pc, #116]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8004424:	61fb      	str	r3, [r7, #28]
      break;
 8004426:	e02c      	b.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d129      	bne.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
        frequency = HAL_RCC_GetSysClockFreq();
 800442e:	f7fe ffc9 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8004432:	61f8      	str	r0, [r7, #28]
      break;
 8004434:	e025      	b.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      break;
 8004436:	bf00      	nop
 8004438:	e024      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800443a:	bf00      	nop
 800443c:	e022      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800443e:	bf00      	nop
 8004440:	e020      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004442:	bf00      	nop
 8004444:	e01e      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004446:	bf00      	nop
 8004448:	e01c      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800444a:	bf00      	nop
 800444c:	e01a      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800444e:	bf00      	nop
 8004450:	e018      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004452:	bf00      	nop
 8004454:	e016      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004456:	bf00      	nop
 8004458:	e014      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800445a:	bf00      	nop
 800445c:	e012      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800445e:	bf00      	nop
 8004460:	e010      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004462:	bf00      	nop
 8004464:	e00e      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004466:	bf00      	nop
 8004468:	e00c      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800446a:	bf00      	nop
 800446c:	e00a      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800446e:	bf00      	nop
 8004470:	e008      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004472:	bf00      	nop
 8004474:	e006      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004476:	bf00      	nop
 8004478:	e004      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800447a:	bf00      	nop
 800447c:	e002      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800447e:	bf00      	nop
 8004480:	e000      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004482:	bf00      	nop
    }
  }

  return(frequency);
 8004484:	69fb      	ldr	r3, [r7, #28]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3720      	adds	r7, #32
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40021000 	.word	0x40021000
 8004494:	02dc6c00 	.word	0x02dc6c00
 8004498:	00f42400 	.word	0x00f42400

0800449c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e049      	b.n	8004542 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fc ff16 	bl	80012f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3304      	adds	r3, #4
 80044d8:	4619      	mov	r1, r3
 80044da:	4610      	mov	r0, r2
 80044dc:	f000 feda 	bl	8005294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b01      	cmp	r3, #1
 800455e:	d001      	beq.n	8004564 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e04c      	b.n	80045fe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a26      	ldr	r2, [pc, #152]	@ (800460c <HAL_TIM_Base_Start+0xc0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d022      	beq.n	80045bc <HAL_TIM_Base_Start+0x70>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800457e:	d01d      	beq.n	80045bc <HAL_TIM_Base_Start+0x70>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a22      	ldr	r2, [pc, #136]	@ (8004610 <HAL_TIM_Base_Start+0xc4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d018      	beq.n	80045bc <HAL_TIM_Base_Start+0x70>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a21      	ldr	r2, [pc, #132]	@ (8004614 <HAL_TIM_Base_Start+0xc8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d013      	beq.n	80045bc <HAL_TIM_Base_Start+0x70>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a1f      	ldr	r2, [pc, #124]	@ (8004618 <HAL_TIM_Base_Start+0xcc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00e      	beq.n	80045bc <HAL_TIM_Base_Start+0x70>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a1e      	ldr	r2, [pc, #120]	@ (800461c <HAL_TIM_Base_Start+0xd0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d009      	beq.n	80045bc <HAL_TIM_Base_Start+0x70>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004620 <HAL_TIM_Base_Start+0xd4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d004      	beq.n	80045bc <HAL_TIM_Base_Start+0x70>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004624 <HAL_TIM_Base_Start+0xd8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d115      	bne.n	80045e8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	4b19      	ldr	r3, [pc, #100]	@ (8004628 <HAL_TIM_Base_Start+0xdc>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b06      	cmp	r3, #6
 80045cc:	d015      	beq.n	80045fa <HAL_TIM_Base_Start+0xae>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d4:	d011      	beq.n	80045fa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f042 0201 	orr.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e6:	e008      	b.n	80045fa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	e000      	b.n	80045fc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40012c00 	.word	0x40012c00
 8004610:	40000400 	.word	0x40000400
 8004614:	40000800 	.word	0x40000800
 8004618:	40000c00 	.word	0x40000c00
 800461c:	40013400 	.word	0x40013400
 8004620:	40014000 	.word	0x40014000
 8004624:	40015000 	.word	0x40015000
 8004628:	00010007 	.word	0x00010007

0800462c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e049      	b.n	80046d2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f89d 	bl	8004792 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3304      	adds	r3, #4
 8004668:	4619      	mov	r1, r3
 800466a:	4610      	mov	r0, r2
 800466c:	f000 fe12 	bl	8005294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2202      	movs	r2, #2
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6a1a      	ldr	r2, [r3, #32]
 80046f0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80046f4:	4013      	ands	r3, r2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10f      	bne.n	800471a <HAL_TIM_OC_DeInit+0x40>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a1a      	ldr	r2, [r3, #32]
 8004700:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004704:	4013      	ands	r3, r2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d107      	bne.n	800471a <HAL_TIM_OC_DeInit+0x40>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0201 	bic.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f843 	bl	80047a6 <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d109      	bne.n	80047e0 <HAL_TIM_OC_Start+0x24>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	bf14      	ite	ne
 80047d8:	2301      	movne	r3, #1
 80047da:	2300      	moveq	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	e03c      	b.n	800485a <HAL_TIM_OC_Start+0x9e>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d109      	bne.n	80047fa <HAL_TIM_OC_Start+0x3e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	bf14      	ite	ne
 80047f2:	2301      	movne	r3, #1
 80047f4:	2300      	moveq	r3, #0
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	e02f      	b.n	800485a <HAL_TIM_OC_Start+0x9e>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d109      	bne.n	8004814 <HAL_TIM_OC_Start+0x58>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b01      	cmp	r3, #1
 800480a:	bf14      	ite	ne
 800480c:	2301      	movne	r3, #1
 800480e:	2300      	moveq	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	e022      	b.n	800485a <HAL_TIM_OC_Start+0x9e>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b0c      	cmp	r3, #12
 8004818:	d109      	bne.n	800482e <HAL_TIM_OC_Start+0x72>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b01      	cmp	r3, #1
 8004824:	bf14      	ite	ne
 8004826:	2301      	movne	r3, #1
 8004828:	2300      	moveq	r3, #0
 800482a:	b2db      	uxtb	r3, r3
 800482c:	e015      	b.n	800485a <HAL_TIM_OC_Start+0x9e>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b10      	cmp	r3, #16
 8004832:	d109      	bne.n	8004848 <HAL_TIM_OC_Start+0x8c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	bf14      	ite	ne
 8004840:	2301      	movne	r3, #1
 8004842:	2300      	moveq	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	e008      	b.n	800485a <HAL_TIM_OC_Start+0x9e>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b01      	cmp	r3, #1
 8004852:	bf14      	ite	ne
 8004854:	2301      	movne	r3, #1
 8004856:	2300      	moveq	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e0a6      	b.n	80049b0 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d104      	bne.n	8004872 <HAL_TIM_OC_Start+0xb6>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004870:	e023      	b.n	80048ba <HAL_TIM_OC_Start+0xfe>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b04      	cmp	r3, #4
 8004876:	d104      	bne.n	8004882 <HAL_TIM_OC_Start+0xc6>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004880:	e01b      	b.n	80048ba <HAL_TIM_OC_Start+0xfe>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d104      	bne.n	8004892 <HAL_TIM_OC_Start+0xd6>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004890:	e013      	b.n	80048ba <HAL_TIM_OC_Start+0xfe>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b0c      	cmp	r3, #12
 8004896:	d104      	bne.n	80048a2 <HAL_TIM_OC_Start+0xe6>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048a0:	e00b      	b.n	80048ba <HAL_TIM_OC_Start+0xfe>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d104      	bne.n	80048b2 <HAL_TIM_OC_Start+0xf6>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048b0:	e003      	b.n	80048ba <HAL_TIM_OC_Start+0xfe>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2202      	movs	r2, #2
 80048b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2201      	movs	r2, #1
 80048c0:	6839      	ldr	r1, [r7, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 fa40 	bl	8005d48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a3a      	ldr	r2, [pc, #232]	@ (80049b8 <HAL_TIM_OC_Start+0x1fc>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d018      	beq.n	8004904 <HAL_TIM_OC_Start+0x148>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a39      	ldr	r2, [pc, #228]	@ (80049bc <HAL_TIM_OC_Start+0x200>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d013      	beq.n	8004904 <HAL_TIM_OC_Start+0x148>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a37      	ldr	r2, [pc, #220]	@ (80049c0 <HAL_TIM_OC_Start+0x204>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00e      	beq.n	8004904 <HAL_TIM_OC_Start+0x148>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a36      	ldr	r2, [pc, #216]	@ (80049c4 <HAL_TIM_OC_Start+0x208>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d009      	beq.n	8004904 <HAL_TIM_OC_Start+0x148>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a34      	ldr	r2, [pc, #208]	@ (80049c8 <HAL_TIM_OC_Start+0x20c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <HAL_TIM_OC_Start+0x148>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a33      	ldr	r2, [pc, #204]	@ (80049cc <HAL_TIM_OC_Start+0x210>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d101      	bne.n	8004908 <HAL_TIM_OC_Start+0x14c>
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <HAL_TIM_OC_Start+0x14e>
 8004908:	2300      	movs	r3, #0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d007      	beq.n	800491e <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800491c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a25      	ldr	r2, [pc, #148]	@ (80049b8 <HAL_TIM_OC_Start+0x1fc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d022      	beq.n	800496e <HAL_TIM_OC_Start+0x1b2>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004930:	d01d      	beq.n	800496e <HAL_TIM_OC_Start+0x1b2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a26      	ldr	r2, [pc, #152]	@ (80049d0 <HAL_TIM_OC_Start+0x214>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d018      	beq.n	800496e <HAL_TIM_OC_Start+0x1b2>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a24      	ldr	r2, [pc, #144]	@ (80049d4 <HAL_TIM_OC_Start+0x218>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <HAL_TIM_OC_Start+0x1b2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a23      	ldr	r2, [pc, #140]	@ (80049d8 <HAL_TIM_OC_Start+0x21c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00e      	beq.n	800496e <HAL_TIM_OC_Start+0x1b2>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a19      	ldr	r2, [pc, #100]	@ (80049bc <HAL_TIM_OC_Start+0x200>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d009      	beq.n	800496e <HAL_TIM_OC_Start+0x1b2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a18      	ldr	r2, [pc, #96]	@ (80049c0 <HAL_TIM_OC_Start+0x204>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_TIM_OC_Start+0x1b2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a18      	ldr	r2, [pc, #96]	@ (80049cc <HAL_TIM_OC_Start+0x210>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d115      	bne.n	800499a <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	4b19      	ldr	r3, [pc, #100]	@ (80049dc <HAL_TIM_OC_Start+0x220>)
 8004976:	4013      	ands	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b06      	cmp	r3, #6
 800497e:	d015      	beq.n	80049ac <HAL_TIM_OC_Start+0x1f0>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004986:	d011      	beq.n	80049ac <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004998:	e008      	b.n	80049ac <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0201 	orr.w	r2, r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e000      	b.n	80049ae <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40012c00 	.word	0x40012c00
 80049bc:	40013400 	.word	0x40013400
 80049c0:	40014000 	.word	0x40014000
 80049c4:	40014400 	.word	0x40014400
 80049c8:	40014800 	.word	0x40014800
 80049cc:	40015000 	.word	0x40015000
 80049d0:	40000400 	.word	0x40000400
 80049d4:	40000800 	.word	0x40000800
 80049d8:	40000c00 	.word	0x40000c00
 80049dc:	00010007 	.word	0x00010007

080049e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e049      	b.n	8004a86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f841 	bl	8004a8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f000 fc38 	bl	8005294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d109      	bne.n	8004ac8 <HAL_TIM_PWM_Start+0x24>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	bf14      	ite	ne
 8004ac0:	2301      	movne	r3, #1
 8004ac2:	2300      	moveq	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	e03c      	b.n	8004b42 <HAL_TIM_PWM_Start+0x9e>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d109      	bne.n	8004ae2 <HAL_TIM_PWM_Start+0x3e>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	bf14      	ite	ne
 8004ada:	2301      	movne	r3, #1
 8004adc:	2300      	moveq	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	e02f      	b.n	8004b42 <HAL_TIM_PWM_Start+0x9e>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d109      	bne.n	8004afc <HAL_TIM_PWM_Start+0x58>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	bf14      	ite	ne
 8004af4:	2301      	movne	r3, #1
 8004af6:	2300      	moveq	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	e022      	b.n	8004b42 <HAL_TIM_PWM_Start+0x9e>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b0c      	cmp	r3, #12
 8004b00:	d109      	bne.n	8004b16 <HAL_TIM_PWM_Start+0x72>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	bf14      	ite	ne
 8004b0e:	2301      	movne	r3, #1
 8004b10:	2300      	moveq	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	e015      	b.n	8004b42 <HAL_TIM_PWM_Start+0x9e>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b10      	cmp	r3, #16
 8004b1a:	d109      	bne.n	8004b30 <HAL_TIM_PWM_Start+0x8c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	bf14      	ite	ne
 8004b28:	2301      	movne	r3, #1
 8004b2a:	2300      	moveq	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e008      	b.n	8004b42 <HAL_TIM_PWM_Start+0x9e>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	bf14      	ite	ne
 8004b3c:	2301      	movne	r3, #1
 8004b3e:	2300      	moveq	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e0a6      	b.n	8004c98 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d104      	bne.n	8004b5a <HAL_TIM_PWM_Start+0xb6>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b58:	e023      	b.n	8004ba2 <HAL_TIM_PWM_Start+0xfe>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d104      	bne.n	8004b6a <HAL_TIM_PWM_Start+0xc6>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b68:	e01b      	b.n	8004ba2 <HAL_TIM_PWM_Start+0xfe>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d104      	bne.n	8004b7a <HAL_TIM_PWM_Start+0xd6>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b78:	e013      	b.n	8004ba2 <HAL_TIM_PWM_Start+0xfe>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b0c      	cmp	r3, #12
 8004b7e:	d104      	bne.n	8004b8a <HAL_TIM_PWM_Start+0xe6>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b88:	e00b      	b.n	8004ba2 <HAL_TIM_PWM_Start+0xfe>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b10      	cmp	r3, #16
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_PWM_Start+0xf6>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b98:	e003      	b.n	8004ba2 <HAL_TIM_PWM_Start+0xfe>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	6839      	ldr	r1, [r7, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f001 f8cc 	bl	8005d48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a3a      	ldr	r2, [pc, #232]	@ (8004ca0 <HAL_TIM_PWM_Start+0x1fc>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d018      	beq.n	8004bec <HAL_TIM_PWM_Start+0x148>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a39      	ldr	r2, [pc, #228]	@ (8004ca4 <HAL_TIM_PWM_Start+0x200>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d013      	beq.n	8004bec <HAL_TIM_PWM_Start+0x148>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a37      	ldr	r2, [pc, #220]	@ (8004ca8 <HAL_TIM_PWM_Start+0x204>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00e      	beq.n	8004bec <HAL_TIM_PWM_Start+0x148>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a36      	ldr	r2, [pc, #216]	@ (8004cac <HAL_TIM_PWM_Start+0x208>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d009      	beq.n	8004bec <HAL_TIM_PWM_Start+0x148>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a34      	ldr	r2, [pc, #208]	@ (8004cb0 <HAL_TIM_PWM_Start+0x20c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <HAL_TIM_PWM_Start+0x148>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a33      	ldr	r2, [pc, #204]	@ (8004cb4 <HAL_TIM_PWM_Start+0x210>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d101      	bne.n	8004bf0 <HAL_TIM_PWM_Start+0x14c>
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <HAL_TIM_PWM_Start+0x14e>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a25      	ldr	r2, [pc, #148]	@ (8004ca0 <HAL_TIM_PWM_Start+0x1fc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d022      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x1b2>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c18:	d01d      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x1b2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a26      	ldr	r2, [pc, #152]	@ (8004cb8 <HAL_TIM_PWM_Start+0x214>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d018      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x1b2>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a24      	ldr	r2, [pc, #144]	@ (8004cbc <HAL_TIM_PWM_Start+0x218>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d013      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x1b2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a23      	ldr	r2, [pc, #140]	@ (8004cc0 <HAL_TIM_PWM_Start+0x21c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00e      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x1b2>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a19      	ldr	r2, [pc, #100]	@ (8004ca4 <HAL_TIM_PWM_Start+0x200>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d009      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x1b2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a18      	ldr	r2, [pc, #96]	@ (8004ca8 <HAL_TIM_PWM_Start+0x204>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d004      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x1b2>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a18      	ldr	r2, [pc, #96]	@ (8004cb4 <HAL_TIM_PWM_Start+0x210>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d115      	bne.n	8004c82 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	4b19      	ldr	r3, [pc, #100]	@ (8004cc4 <HAL_TIM_PWM_Start+0x220>)
 8004c5e:	4013      	ands	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b06      	cmp	r3, #6
 8004c66:	d015      	beq.n	8004c94 <HAL_TIM_PWM_Start+0x1f0>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c6e:	d011      	beq.n	8004c94 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c80:	e008      	b.n	8004c94 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0201 	orr.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	e000      	b.n	8004c96 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40012c00 	.word	0x40012c00
 8004ca4:	40013400 	.word	0x40013400
 8004ca8:	40014000 	.word	0x40014000
 8004cac:	40014400 	.word	0x40014400
 8004cb0:	40014800 	.word	0x40014800
 8004cb4:	40015000 	.word	0x40015000
 8004cb8:	40000400 	.word	0x40000400
 8004cbc:	40000800 	.word	0x40000800
 8004cc0:	40000c00 	.word	0x40000c00
 8004cc4:	00010007 	.word	0x00010007

08004cc8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e066      	b.n	8004db4 <HAL_TIM_OC_ConfigChannel+0xec>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b14      	cmp	r3, #20
 8004cf2:	d857      	bhi.n	8004da4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cfc <HAL_TIM_OC_ConfigChannel+0x34>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d51 	.word	0x08004d51
 8004d00:	08004da5 	.word	0x08004da5
 8004d04:	08004da5 	.word	0x08004da5
 8004d08:	08004da5 	.word	0x08004da5
 8004d0c:	08004d5f 	.word	0x08004d5f
 8004d10:	08004da5 	.word	0x08004da5
 8004d14:	08004da5 	.word	0x08004da5
 8004d18:	08004da5 	.word	0x08004da5
 8004d1c:	08004d6d 	.word	0x08004d6d
 8004d20:	08004da5 	.word	0x08004da5
 8004d24:	08004da5 	.word	0x08004da5
 8004d28:	08004da5 	.word	0x08004da5
 8004d2c:	08004d7b 	.word	0x08004d7b
 8004d30:	08004da5 	.word	0x08004da5
 8004d34:	08004da5 	.word	0x08004da5
 8004d38:	08004da5 	.word	0x08004da5
 8004d3c:	08004d89 	.word	0x08004d89
 8004d40:	08004da5 	.word	0x08004da5
 8004d44:	08004da5 	.word	0x08004da5
 8004d48:	08004da5 	.word	0x08004da5
 8004d4c:	08004d97 	.word	0x08004d97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fb50 	bl	80053fc <TIM_OC1_SetConfig>
      break;
 8004d5c:	e025      	b.n	8004daa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 fbe3 	bl	8005530 <TIM_OC2_SetConfig>
      break;
 8004d6a:	e01e      	b.n	8004daa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fc70 	bl	8005658 <TIM_OC3_SetConfig>
      break;
 8004d78:	e017      	b.n	8004daa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68b9      	ldr	r1, [r7, #8]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 fcfb 	bl	800577c <TIM_OC4_SetConfig>
      break;
 8004d86:	e010      	b.n	8004daa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68b9      	ldr	r1, [r7, #8]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fd88 	bl	80058a4 <TIM_OC5_SetConfig>
      break;
 8004d94:	e009      	b.n	8004daa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68b9      	ldr	r1, [r7, #8]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fdeb 	bl	8005978 <TIM_OC6_SetConfig>
      break;
 8004da2:	e002      	b.n	8004daa <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	75fb      	strb	r3, [r7, #23]
      break;
 8004da8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e0ff      	b.n	8004fda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b14      	cmp	r3, #20
 8004de6:	f200 80f0 	bhi.w	8004fca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004dea:	a201      	add	r2, pc, #4	@ (adr r2, 8004df0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e45 	.word	0x08004e45
 8004df4:	08004fcb 	.word	0x08004fcb
 8004df8:	08004fcb 	.word	0x08004fcb
 8004dfc:	08004fcb 	.word	0x08004fcb
 8004e00:	08004e85 	.word	0x08004e85
 8004e04:	08004fcb 	.word	0x08004fcb
 8004e08:	08004fcb 	.word	0x08004fcb
 8004e0c:	08004fcb 	.word	0x08004fcb
 8004e10:	08004ec7 	.word	0x08004ec7
 8004e14:	08004fcb 	.word	0x08004fcb
 8004e18:	08004fcb 	.word	0x08004fcb
 8004e1c:	08004fcb 	.word	0x08004fcb
 8004e20:	08004f07 	.word	0x08004f07
 8004e24:	08004fcb 	.word	0x08004fcb
 8004e28:	08004fcb 	.word	0x08004fcb
 8004e2c:	08004fcb 	.word	0x08004fcb
 8004e30:	08004f49 	.word	0x08004f49
 8004e34:	08004fcb 	.word	0x08004fcb
 8004e38:	08004fcb 	.word	0x08004fcb
 8004e3c:	08004fcb 	.word	0x08004fcb
 8004e40:	08004f89 	.word	0x08004f89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68b9      	ldr	r1, [r7, #8]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fad6 	bl	80053fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0208 	orr.w	r2, r2, #8
 8004e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0204 	bic.w	r2, r2, #4
 8004e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6999      	ldr	r1, [r3, #24]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	619a      	str	r2, [r3, #24]
      break;
 8004e82:	e0a5      	b.n	8004fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68b9      	ldr	r1, [r7, #8]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fb50 	bl	8005530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6999      	ldr	r1, [r3, #24]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	021a      	lsls	r2, r3, #8
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	619a      	str	r2, [r3, #24]
      break;
 8004ec4:	e084      	b.n	8004fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68b9      	ldr	r1, [r7, #8]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 fbc3 	bl	8005658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f042 0208 	orr.w	r2, r2, #8
 8004ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69da      	ldr	r2, [r3, #28]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0204 	bic.w	r2, r2, #4
 8004ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69d9      	ldr	r1, [r3, #28]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	61da      	str	r2, [r3, #28]
      break;
 8004f04:	e064      	b.n	8004fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 fc35 	bl	800577c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69d9      	ldr	r1, [r3, #28]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	021a      	lsls	r2, r3, #8
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	61da      	str	r2, [r3, #28]
      break;
 8004f46:	e043      	b.n	8004fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68b9      	ldr	r1, [r7, #8]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fca8 	bl	80058a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0208 	orr.w	r2, r2, #8
 8004f62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0204 	bic.w	r2, r2, #4
 8004f72:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004f86:	e023      	b.n	8004fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fcf2 	bl	8005978 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fa2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fb2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	021a      	lsls	r2, r3, #8
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004fc8:	e002      	b.n	8004fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8004fce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop

08004fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_TIM_ConfigClockSource+0x1c>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e0f6      	b.n	80051ee <HAL_TIM_ConfigClockSource+0x20a>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800501e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800502a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a6f      	ldr	r2, [pc, #444]	@ (80051f8 <HAL_TIM_ConfigClockSource+0x214>)
 800503a:	4293      	cmp	r3, r2
 800503c:	f000 80c1 	beq.w	80051c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005040:	4a6d      	ldr	r2, [pc, #436]	@ (80051f8 <HAL_TIM_ConfigClockSource+0x214>)
 8005042:	4293      	cmp	r3, r2
 8005044:	f200 80c6 	bhi.w	80051d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005048:	4a6c      	ldr	r2, [pc, #432]	@ (80051fc <HAL_TIM_ConfigClockSource+0x218>)
 800504a:	4293      	cmp	r3, r2
 800504c:	f000 80b9 	beq.w	80051c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005050:	4a6a      	ldr	r2, [pc, #424]	@ (80051fc <HAL_TIM_ConfigClockSource+0x218>)
 8005052:	4293      	cmp	r3, r2
 8005054:	f200 80be 	bhi.w	80051d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005058:	4a69      	ldr	r2, [pc, #420]	@ (8005200 <HAL_TIM_ConfigClockSource+0x21c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	f000 80b1 	beq.w	80051c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005060:	4a67      	ldr	r2, [pc, #412]	@ (8005200 <HAL_TIM_ConfigClockSource+0x21c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	f200 80b6 	bhi.w	80051d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005068:	4a66      	ldr	r2, [pc, #408]	@ (8005204 <HAL_TIM_ConfigClockSource+0x220>)
 800506a:	4293      	cmp	r3, r2
 800506c:	f000 80a9 	beq.w	80051c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005070:	4a64      	ldr	r2, [pc, #400]	@ (8005204 <HAL_TIM_ConfigClockSource+0x220>)
 8005072:	4293      	cmp	r3, r2
 8005074:	f200 80ae 	bhi.w	80051d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005078:	4a63      	ldr	r2, [pc, #396]	@ (8005208 <HAL_TIM_ConfigClockSource+0x224>)
 800507a:	4293      	cmp	r3, r2
 800507c:	f000 80a1 	beq.w	80051c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005080:	4a61      	ldr	r2, [pc, #388]	@ (8005208 <HAL_TIM_ConfigClockSource+0x224>)
 8005082:	4293      	cmp	r3, r2
 8005084:	f200 80a6 	bhi.w	80051d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005088:	4a60      	ldr	r2, [pc, #384]	@ (800520c <HAL_TIM_ConfigClockSource+0x228>)
 800508a:	4293      	cmp	r3, r2
 800508c:	f000 8099 	beq.w	80051c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005090:	4a5e      	ldr	r2, [pc, #376]	@ (800520c <HAL_TIM_ConfigClockSource+0x228>)
 8005092:	4293      	cmp	r3, r2
 8005094:	f200 809e 	bhi.w	80051d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005098:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800509c:	f000 8091 	beq.w	80051c2 <HAL_TIM_ConfigClockSource+0x1de>
 80050a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80050a4:	f200 8096 	bhi.w	80051d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80050a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050ac:	f000 8089 	beq.w	80051c2 <HAL_TIM_ConfigClockSource+0x1de>
 80050b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050b4:	f200 808e 	bhi.w	80051d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80050b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050bc:	d03e      	beq.n	800513c <HAL_TIM_ConfigClockSource+0x158>
 80050be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050c2:	f200 8087 	bhi.w	80051d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80050c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ca:	f000 8086 	beq.w	80051da <HAL_TIM_ConfigClockSource+0x1f6>
 80050ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050d2:	d87f      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80050d4:	2b70      	cmp	r3, #112	@ 0x70
 80050d6:	d01a      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x12a>
 80050d8:	2b70      	cmp	r3, #112	@ 0x70
 80050da:	d87b      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80050dc:	2b60      	cmp	r3, #96	@ 0x60
 80050de:	d050      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0x19e>
 80050e0:	2b60      	cmp	r3, #96	@ 0x60
 80050e2:	d877      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80050e4:	2b50      	cmp	r3, #80	@ 0x50
 80050e6:	d03c      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x17e>
 80050e8:	2b50      	cmp	r3, #80	@ 0x50
 80050ea:	d873      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80050ec:	2b40      	cmp	r3, #64	@ 0x40
 80050ee:	d058      	beq.n	80051a2 <HAL_TIM_ConfigClockSource+0x1be>
 80050f0:	2b40      	cmp	r3, #64	@ 0x40
 80050f2:	d86f      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80050f4:	2b30      	cmp	r3, #48	@ 0x30
 80050f6:	d064      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0x1de>
 80050f8:	2b30      	cmp	r3, #48	@ 0x30
 80050fa:	d86b      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d060      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005100:	2b20      	cmp	r3, #32
 8005102:	d867      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005104:	2b00      	cmp	r3, #0
 8005106:	d05c      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005108:	2b10      	cmp	r3, #16
 800510a:	d05a      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0x1de>
 800510c:	e062      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800511e:	f000 fdf3 	bl	8005d08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	609a      	str	r2, [r3, #8]
      break;
 800513a:	e04f      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800514c:	f000 fddc 	bl	8005d08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800515e:	609a      	str	r2, [r3, #8]
      break;
 8005160:	e03c      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800516e:	461a      	mov	r2, r3
 8005170:	f000 fd4e 	bl	8005c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2150      	movs	r1, #80	@ 0x50
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fda7 	bl	8005cce <TIM_ITRx_SetConfig>
      break;
 8005180:	e02c      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800518e:	461a      	mov	r2, r3
 8005190:	f000 fd6d 	bl	8005c6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2160      	movs	r1, #96	@ 0x60
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fd97 	bl	8005cce <TIM_ITRx_SetConfig>
      break;
 80051a0:	e01c      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ae:	461a      	mov	r2, r3
 80051b0:	f000 fd2e 	bl	8005c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2140      	movs	r1, #64	@ 0x40
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fd87 	bl	8005cce <TIM_ITRx_SetConfig>
      break;
 80051c0:	e00c      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4619      	mov	r1, r3
 80051cc:	4610      	mov	r0, r2
 80051ce:	f000 fd7e 	bl	8005cce <TIM_ITRx_SetConfig>
      break;
 80051d2:	e003      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
      break;
 80051d8:	e000      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80051da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	00100070 	.word	0x00100070
 80051fc:	00100060 	.word	0x00100060
 8005200:	00100050 	.word	0x00100050
 8005204:	00100040 	.word	0x00100040
 8005208:	00100030 	.word	0x00100030
 800520c:	00100020 	.word	0x00100020

08005210 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005220:	2b01      	cmp	r3, #1
 8005222:	d101      	bne.n	8005228 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005224:	2302      	movs	r3, #2
 8005226:	e031      	b.n	800528c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005238:	6839      	ldr	r1, [r7, #0]
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fc08 	bl	8005a50 <TIM_SlaveTimer_SetConfig>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d009      	beq.n	800525a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e018      	b.n	800528c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005268:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005278:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a4c      	ldr	r2, [pc, #304]	@ (80053d8 <TIM_Base_SetConfig+0x144>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d017      	beq.n	80052dc <TIM_Base_SetConfig+0x48>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052b2:	d013      	beq.n	80052dc <TIM_Base_SetConfig+0x48>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a49      	ldr	r2, [pc, #292]	@ (80053dc <TIM_Base_SetConfig+0x148>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00f      	beq.n	80052dc <TIM_Base_SetConfig+0x48>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a48      	ldr	r2, [pc, #288]	@ (80053e0 <TIM_Base_SetConfig+0x14c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d00b      	beq.n	80052dc <TIM_Base_SetConfig+0x48>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a47      	ldr	r2, [pc, #284]	@ (80053e4 <TIM_Base_SetConfig+0x150>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d007      	beq.n	80052dc <TIM_Base_SetConfig+0x48>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a46      	ldr	r2, [pc, #280]	@ (80053e8 <TIM_Base_SetConfig+0x154>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d003      	beq.n	80052dc <TIM_Base_SetConfig+0x48>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a45      	ldr	r2, [pc, #276]	@ (80053ec <TIM_Base_SetConfig+0x158>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d108      	bne.n	80052ee <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a39      	ldr	r2, [pc, #228]	@ (80053d8 <TIM_Base_SetConfig+0x144>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d023      	beq.n	800533e <TIM_Base_SetConfig+0xaa>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052fc:	d01f      	beq.n	800533e <TIM_Base_SetConfig+0xaa>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a36      	ldr	r2, [pc, #216]	@ (80053dc <TIM_Base_SetConfig+0x148>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d01b      	beq.n	800533e <TIM_Base_SetConfig+0xaa>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a35      	ldr	r2, [pc, #212]	@ (80053e0 <TIM_Base_SetConfig+0x14c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d017      	beq.n	800533e <TIM_Base_SetConfig+0xaa>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a34      	ldr	r2, [pc, #208]	@ (80053e4 <TIM_Base_SetConfig+0x150>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d013      	beq.n	800533e <TIM_Base_SetConfig+0xaa>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a33      	ldr	r2, [pc, #204]	@ (80053e8 <TIM_Base_SetConfig+0x154>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00f      	beq.n	800533e <TIM_Base_SetConfig+0xaa>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a33      	ldr	r2, [pc, #204]	@ (80053f0 <TIM_Base_SetConfig+0x15c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00b      	beq.n	800533e <TIM_Base_SetConfig+0xaa>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a32      	ldr	r2, [pc, #200]	@ (80053f4 <TIM_Base_SetConfig+0x160>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d007      	beq.n	800533e <TIM_Base_SetConfig+0xaa>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a31      	ldr	r2, [pc, #196]	@ (80053f8 <TIM_Base_SetConfig+0x164>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d003      	beq.n	800533e <TIM_Base_SetConfig+0xaa>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a2c      	ldr	r2, [pc, #176]	@ (80053ec <TIM_Base_SetConfig+0x158>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d108      	bne.n	8005350 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a18      	ldr	r2, [pc, #96]	@ (80053d8 <TIM_Base_SetConfig+0x144>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d013      	beq.n	80053a4 <TIM_Base_SetConfig+0x110>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a1a      	ldr	r2, [pc, #104]	@ (80053e8 <TIM_Base_SetConfig+0x154>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00f      	beq.n	80053a4 <TIM_Base_SetConfig+0x110>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a1a      	ldr	r2, [pc, #104]	@ (80053f0 <TIM_Base_SetConfig+0x15c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00b      	beq.n	80053a4 <TIM_Base_SetConfig+0x110>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a19      	ldr	r2, [pc, #100]	@ (80053f4 <TIM_Base_SetConfig+0x160>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d007      	beq.n	80053a4 <TIM_Base_SetConfig+0x110>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a18      	ldr	r2, [pc, #96]	@ (80053f8 <TIM_Base_SetConfig+0x164>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d003      	beq.n	80053a4 <TIM_Base_SetConfig+0x110>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a13      	ldr	r2, [pc, #76]	@ (80053ec <TIM_Base_SetConfig+0x158>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d103      	bne.n	80053ac <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d105      	bne.n	80053ca <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f023 0201 	bic.w	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	611a      	str	r2, [r3, #16]
  }
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40012c00 	.word	0x40012c00
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40013400 	.word	0x40013400
 80053ec:	40015000 	.word	0x40015000
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40014400 	.word	0x40014400
 80053f8:	40014800 	.word	0x40014800

080053fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	f023 0201 	bic.w	r2, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800542a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0303 	bic.w	r3, r3, #3
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f023 0302 	bic.w	r3, r3, #2
 8005448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a30      	ldr	r2, [pc, #192]	@ (8005518 <TIM_OC1_SetConfig+0x11c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d013      	beq.n	8005484 <TIM_OC1_SetConfig+0x88>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a2f      	ldr	r2, [pc, #188]	@ (800551c <TIM_OC1_SetConfig+0x120>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00f      	beq.n	8005484 <TIM_OC1_SetConfig+0x88>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a2e      	ldr	r2, [pc, #184]	@ (8005520 <TIM_OC1_SetConfig+0x124>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00b      	beq.n	8005484 <TIM_OC1_SetConfig+0x88>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a2d      	ldr	r2, [pc, #180]	@ (8005524 <TIM_OC1_SetConfig+0x128>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d007      	beq.n	8005484 <TIM_OC1_SetConfig+0x88>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a2c      	ldr	r2, [pc, #176]	@ (8005528 <TIM_OC1_SetConfig+0x12c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_OC1_SetConfig+0x88>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a2b      	ldr	r2, [pc, #172]	@ (800552c <TIM_OC1_SetConfig+0x130>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d10c      	bne.n	800549e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f023 0308 	bic.w	r3, r3, #8
 800548a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f023 0304 	bic.w	r3, r3, #4
 800549c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005518 <TIM_OC1_SetConfig+0x11c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <TIM_OC1_SetConfig+0xd2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a1c      	ldr	r2, [pc, #112]	@ (800551c <TIM_OC1_SetConfig+0x120>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00f      	beq.n	80054ce <TIM_OC1_SetConfig+0xd2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005520 <TIM_OC1_SetConfig+0x124>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00b      	beq.n	80054ce <TIM_OC1_SetConfig+0xd2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005524 <TIM_OC1_SetConfig+0x128>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d007      	beq.n	80054ce <TIM_OC1_SetConfig+0xd2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a19      	ldr	r2, [pc, #100]	@ (8005528 <TIM_OC1_SetConfig+0x12c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d003      	beq.n	80054ce <TIM_OC1_SetConfig+0xd2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a18      	ldr	r2, [pc, #96]	@ (800552c <TIM_OC1_SetConfig+0x130>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d111      	bne.n	80054f2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	621a      	str	r2, [r3, #32]
}
 800550c:	bf00      	nop
 800550e:	371c      	adds	r7, #28
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	40012c00 	.word	0x40012c00
 800551c:	40013400 	.word	0x40013400
 8005520:	40014000 	.word	0x40014000
 8005524:	40014400 	.word	0x40014400
 8005528:	40014800 	.word	0x40014800
 800552c:	40015000 	.word	0x40015000

08005530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	f023 0210 	bic.w	r2, r3, #16
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800555e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800556a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	021b      	lsls	r3, r3, #8
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f023 0320 	bic.w	r3, r3, #32
 800557e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a2c      	ldr	r2, [pc, #176]	@ (8005640 <TIM_OC2_SetConfig+0x110>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d007      	beq.n	80055a4 <TIM_OC2_SetConfig+0x74>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a2b      	ldr	r2, [pc, #172]	@ (8005644 <TIM_OC2_SetConfig+0x114>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d003      	beq.n	80055a4 <TIM_OC2_SetConfig+0x74>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a2a      	ldr	r2, [pc, #168]	@ (8005648 <TIM_OC2_SetConfig+0x118>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d10d      	bne.n	80055c0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005640 <TIM_OC2_SetConfig+0x110>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d013      	beq.n	80055f0 <TIM_OC2_SetConfig+0xc0>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005644 <TIM_OC2_SetConfig+0x114>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00f      	beq.n	80055f0 <TIM_OC2_SetConfig+0xc0>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a1e      	ldr	r2, [pc, #120]	@ (800564c <TIM_OC2_SetConfig+0x11c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00b      	beq.n	80055f0 <TIM_OC2_SetConfig+0xc0>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a1d      	ldr	r2, [pc, #116]	@ (8005650 <TIM_OC2_SetConfig+0x120>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d007      	beq.n	80055f0 <TIM_OC2_SetConfig+0xc0>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005654 <TIM_OC2_SetConfig+0x124>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d003      	beq.n	80055f0 <TIM_OC2_SetConfig+0xc0>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a17      	ldr	r2, [pc, #92]	@ (8005648 <TIM_OC2_SetConfig+0x118>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d113      	bne.n	8005618 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	621a      	str	r2, [r3, #32]
}
 8005632:	bf00      	nop
 8005634:	371c      	adds	r7, #28
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	40012c00 	.word	0x40012c00
 8005644:	40013400 	.word	0x40013400
 8005648:	40015000 	.word	0x40015000
 800564c:	40014000 	.word	0x40014000
 8005650:	40014400 	.word	0x40014400
 8005654:	40014800 	.word	0x40014800

08005658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800568a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0303 	bic.w	r3, r3, #3
 8005692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	021b      	lsls	r3, r3, #8
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005764 <TIM_OC3_SetConfig+0x10c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d007      	beq.n	80056ca <TIM_OC3_SetConfig+0x72>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005768 <TIM_OC3_SetConfig+0x110>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d003      	beq.n	80056ca <TIM_OC3_SetConfig+0x72>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a29      	ldr	r2, [pc, #164]	@ (800576c <TIM_OC3_SetConfig+0x114>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d10d      	bne.n	80056e6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	021b      	lsls	r3, r3, #8
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a1e      	ldr	r2, [pc, #120]	@ (8005764 <TIM_OC3_SetConfig+0x10c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d013      	beq.n	8005716 <TIM_OC3_SetConfig+0xbe>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005768 <TIM_OC3_SetConfig+0x110>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00f      	beq.n	8005716 <TIM_OC3_SetConfig+0xbe>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005770 <TIM_OC3_SetConfig+0x118>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00b      	beq.n	8005716 <TIM_OC3_SetConfig+0xbe>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a1c      	ldr	r2, [pc, #112]	@ (8005774 <TIM_OC3_SetConfig+0x11c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d007      	beq.n	8005716 <TIM_OC3_SetConfig+0xbe>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a1b      	ldr	r2, [pc, #108]	@ (8005778 <TIM_OC3_SetConfig+0x120>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d003      	beq.n	8005716 <TIM_OC3_SetConfig+0xbe>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a16      	ldr	r2, [pc, #88]	@ (800576c <TIM_OC3_SetConfig+0x114>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d113      	bne.n	800573e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800571c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	621a      	str	r2, [r3, #32]
}
 8005758:	bf00      	nop
 800575a:	371c      	adds	r7, #28
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	40012c00 	.word	0x40012c00
 8005768:	40013400 	.word	0x40013400
 800576c:	40015000 	.word	0x40015000
 8005770:	40014000 	.word	0x40014000
 8005774:	40014400 	.word	0x40014400
 8005778:	40014800 	.word	0x40014800

0800577c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	031b      	lsls	r3, r3, #12
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a2c      	ldr	r2, [pc, #176]	@ (800588c <TIM_OC4_SetConfig+0x110>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d007      	beq.n	80057f0 <TIM_OC4_SetConfig+0x74>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a2b      	ldr	r2, [pc, #172]	@ (8005890 <TIM_OC4_SetConfig+0x114>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d003      	beq.n	80057f0 <TIM_OC4_SetConfig+0x74>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005894 <TIM_OC4_SetConfig+0x118>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d10d      	bne.n	800580c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80057f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	031b      	lsls	r3, r3, #12
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800580a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a1f      	ldr	r2, [pc, #124]	@ (800588c <TIM_OC4_SetConfig+0x110>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d013      	beq.n	800583c <TIM_OC4_SetConfig+0xc0>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a1e      	ldr	r2, [pc, #120]	@ (8005890 <TIM_OC4_SetConfig+0x114>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00f      	beq.n	800583c <TIM_OC4_SetConfig+0xc0>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a1e      	ldr	r2, [pc, #120]	@ (8005898 <TIM_OC4_SetConfig+0x11c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00b      	beq.n	800583c <TIM_OC4_SetConfig+0xc0>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a1d      	ldr	r2, [pc, #116]	@ (800589c <TIM_OC4_SetConfig+0x120>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d007      	beq.n	800583c <TIM_OC4_SetConfig+0xc0>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a1c      	ldr	r2, [pc, #112]	@ (80058a0 <TIM_OC4_SetConfig+0x124>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d003      	beq.n	800583c <TIM_OC4_SetConfig+0xc0>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a17      	ldr	r2, [pc, #92]	@ (8005894 <TIM_OC4_SetConfig+0x118>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d113      	bne.n	8005864 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005842:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800584a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	019b      	lsls	r3, r3, #6
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	019b      	lsls	r3, r3, #6
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40012c00 	.word	0x40012c00
 8005890:	40013400 	.word	0x40013400
 8005894:	40015000 	.word	0x40015000
 8005898:	40014000 	.word	0x40014000
 800589c:	40014400 	.word	0x40014400
 80058a0:	40014800 	.word	0x40014800

080058a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80058e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	041b      	lsls	r3, r3, #16
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a19      	ldr	r2, [pc, #100]	@ (8005960 <TIM_OC5_SetConfig+0xbc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <TIM_OC5_SetConfig+0x82>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a18      	ldr	r2, [pc, #96]	@ (8005964 <TIM_OC5_SetConfig+0xc0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00f      	beq.n	8005926 <TIM_OC5_SetConfig+0x82>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a17      	ldr	r2, [pc, #92]	@ (8005968 <TIM_OC5_SetConfig+0xc4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00b      	beq.n	8005926 <TIM_OC5_SetConfig+0x82>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a16      	ldr	r2, [pc, #88]	@ (800596c <TIM_OC5_SetConfig+0xc8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d007      	beq.n	8005926 <TIM_OC5_SetConfig+0x82>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a15      	ldr	r2, [pc, #84]	@ (8005970 <TIM_OC5_SetConfig+0xcc>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d003      	beq.n	8005926 <TIM_OC5_SetConfig+0x82>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a14      	ldr	r2, [pc, #80]	@ (8005974 <TIM_OC5_SetConfig+0xd0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d109      	bne.n	800593a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800592c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	021b      	lsls	r3, r3, #8
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	621a      	str	r2, [r3, #32]
}
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	40012c00 	.word	0x40012c00
 8005964:	40013400 	.word	0x40013400
 8005968:	40014000 	.word	0x40014000
 800596c:	40014400 	.word	0x40014400
 8005970:	40014800 	.word	0x40014800
 8005974:	40015000 	.word	0x40015000

08005978 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800599e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	021b      	lsls	r3, r3, #8
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	051b      	lsls	r3, r3, #20
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005a38 <TIM_OC6_SetConfig+0xc0>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d013      	beq.n	80059fc <TIM_OC6_SetConfig+0x84>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a19      	ldr	r2, [pc, #100]	@ (8005a3c <TIM_OC6_SetConfig+0xc4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00f      	beq.n	80059fc <TIM_OC6_SetConfig+0x84>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a18      	ldr	r2, [pc, #96]	@ (8005a40 <TIM_OC6_SetConfig+0xc8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00b      	beq.n	80059fc <TIM_OC6_SetConfig+0x84>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a17      	ldr	r2, [pc, #92]	@ (8005a44 <TIM_OC6_SetConfig+0xcc>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d007      	beq.n	80059fc <TIM_OC6_SetConfig+0x84>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a16      	ldr	r2, [pc, #88]	@ (8005a48 <TIM_OC6_SetConfig+0xd0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d003      	beq.n	80059fc <TIM_OC6_SetConfig+0x84>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a15      	ldr	r2, [pc, #84]	@ (8005a4c <TIM_OC6_SetConfig+0xd4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d109      	bne.n	8005a10 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	029b      	lsls	r3, r3, #10
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40012c00 	.word	0x40012c00
 8005a3c:	40013400 	.word	0x40013400
 8005a40:	40014000 	.word	0x40014000
 8005a44:	40014400 	.word	0x40014400
 8005a48:	40014800 	.word	0x40014800
 8005a4c:	40015000 	.word	0x40015000

08005a50 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005a6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a70:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a82:	f023 0307 	bic.w	r3, r3, #7
 8005a86:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	4a56      	ldr	r2, [pc, #344]	@ (8005bf8 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	f000 80a2 	beq.w	8005bea <TIM_SlaveTimer_SetConfig+0x19a>
 8005aa6:	4a54      	ldr	r2, [pc, #336]	@ (8005bf8 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	f200 809b 	bhi.w	8005be4 <TIM_SlaveTimer_SetConfig+0x194>
 8005aae:	4a53      	ldr	r2, [pc, #332]	@ (8005bfc <TIM_SlaveTimer_SetConfig+0x1ac>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	f000 809a 	beq.w	8005bea <TIM_SlaveTimer_SetConfig+0x19a>
 8005ab6:	4a51      	ldr	r2, [pc, #324]	@ (8005bfc <TIM_SlaveTimer_SetConfig+0x1ac>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	f200 8093 	bhi.w	8005be4 <TIM_SlaveTimer_SetConfig+0x194>
 8005abe:	4a50      	ldr	r2, [pc, #320]	@ (8005c00 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	f000 8092 	beq.w	8005bea <TIM_SlaveTimer_SetConfig+0x19a>
 8005ac6:	4a4e      	ldr	r2, [pc, #312]	@ (8005c00 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	f200 808b 	bhi.w	8005be4 <TIM_SlaveTimer_SetConfig+0x194>
 8005ace:	4a4d      	ldr	r2, [pc, #308]	@ (8005c04 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	f000 808a 	beq.w	8005bea <TIM_SlaveTimer_SetConfig+0x19a>
 8005ad6:	4a4b      	ldr	r2, [pc, #300]	@ (8005c04 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	f200 8083 	bhi.w	8005be4 <TIM_SlaveTimer_SetConfig+0x194>
 8005ade:	4a4a      	ldr	r2, [pc, #296]	@ (8005c08 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	f000 8082 	beq.w	8005bea <TIM_SlaveTimer_SetConfig+0x19a>
 8005ae6:	4a48      	ldr	r2, [pc, #288]	@ (8005c08 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d87b      	bhi.n	8005be4 <TIM_SlaveTimer_SetConfig+0x194>
 8005aec:	4a47      	ldr	r2, [pc, #284]	@ (8005c0c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d07b      	beq.n	8005bea <TIM_SlaveTimer_SetConfig+0x19a>
 8005af2:	4a46      	ldr	r2, [pc, #280]	@ (8005c0c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d875      	bhi.n	8005be4 <TIM_SlaveTimer_SetConfig+0x194>
 8005af8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005afc:	d075      	beq.n	8005bea <TIM_SlaveTimer_SetConfig+0x19a>
 8005afe:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b02:	d86f      	bhi.n	8005be4 <TIM_SlaveTimer_SetConfig+0x194>
 8005b04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b08:	d06f      	beq.n	8005bea <TIM_SlaveTimer_SetConfig+0x19a>
 8005b0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b0e:	d869      	bhi.n	8005be4 <TIM_SlaveTimer_SetConfig+0x194>
 8005b10:	2b70      	cmp	r3, #112	@ 0x70
 8005b12:	d01a      	beq.n	8005b4a <TIM_SlaveTimer_SetConfig+0xfa>
 8005b14:	2b70      	cmp	r3, #112	@ 0x70
 8005b16:	d865      	bhi.n	8005be4 <TIM_SlaveTimer_SetConfig+0x194>
 8005b18:	2b60      	cmp	r3, #96	@ 0x60
 8005b1a:	d059      	beq.n	8005bd0 <TIM_SlaveTimer_SetConfig+0x180>
 8005b1c:	2b60      	cmp	r3, #96	@ 0x60
 8005b1e:	d861      	bhi.n	8005be4 <TIM_SlaveTimer_SetConfig+0x194>
 8005b20:	2b50      	cmp	r3, #80	@ 0x50
 8005b22:	d04b      	beq.n	8005bbc <TIM_SlaveTimer_SetConfig+0x16c>
 8005b24:	2b50      	cmp	r3, #80	@ 0x50
 8005b26:	d85d      	bhi.n	8005be4 <TIM_SlaveTimer_SetConfig+0x194>
 8005b28:	2b40      	cmp	r3, #64	@ 0x40
 8005b2a:	d019      	beq.n	8005b60 <TIM_SlaveTimer_SetConfig+0x110>
 8005b2c:	2b40      	cmp	r3, #64	@ 0x40
 8005b2e:	d859      	bhi.n	8005be4 <TIM_SlaveTimer_SetConfig+0x194>
 8005b30:	2b30      	cmp	r3, #48	@ 0x30
 8005b32:	d05a      	beq.n	8005bea <TIM_SlaveTimer_SetConfig+0x19a>
 8005b34:	2b30      	cmp	r3, #48	@ 0x30
 8005b36:	d855      	bhi.n	8005be4 <TIM_SlaveTimer_SetConfig+0x194>
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d056      	beq.n	8005bea <TIM_SlaveTimer_SetConfig+0x19a>
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d851      	bhi.n	8005be4 <TIM_SlaveTimer_SetConfig+0x194>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d052      	beq.n	8005bea <TIM_SlaveTimer_SetConfig+0x19a>
 8005b44:	2b10      	cmp	r3, #16
 8005b46:	d050      	beq.n	8005bea <TIM_SlaveTimer_SetConfig+0x19a>
 8005b48:	e04c      	b.n	8005be4 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005b5a:	f000 f8d5 	bl	8005d08 <TIM_ETR_SetConfig>
      break;
 8005b5e:	e045      	b.n	8005bec <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b05      	cmp	r3, #5
 8005b66:	d004      	beq.n	8005b72 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005b6c:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8005b70:	d101      	bne.n	8005b76 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e03b      	b.n	8005bee <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6a1a      	ldr	r2, [r3, #32]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0201 	bic.w	r2, r2, #1
 8005b8c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b9c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	621a      	str	r2, [r3, #32]
      break;
 8005bba:	e017      	b.n	8005bec <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f000 f821 	bl	8005c10 <TIM_TI1_ConfigInputStage>
      break;
 8005bce:	e00d      	b.n	8005bec <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bdc:	461a      	mov	r2, r3
 8005bde:	f000 f846 	bl	8005c6e <TIM_TI2_ConfigInputStage>
      break;
 8005be2:	e003      	b.n	8005bec <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	75fb      	strb	r3, [r7, #23]
      break;
 8005be8:	e000      	b.n	8005bec <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8005bea:	bf00      	nop
  }

  return status;
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	00100070 	.word	0x00100070
 8005bfc:	00100060 	.word	0x00100060
 8005c00:	00100050 	.word	0x00100050
 8005c04:	00100040 	.word	0x00100040
 8005c08:	00100030 	.word	0x00100030
 8005c0c:	00100020 	.word	0x00100020

08005c10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	f023 0201 	bic.w	r2, r3, #1
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f023 030a 	bic.w	r3, r3, #10
 8005c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	621a      	str	r2, [r3, #32]
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b087      	sub	sp, #28
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	f023 0210 	bic.w	r2, r3, #16
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	031b      	lsls	r3, r3, #12
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005caa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	621a      	str	r2, [r3, #32]
}
 8005cc2:	bf00      	nop
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b085      	sub	sp, #20
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f043 0307 	orr.w	r3, r3, #7
 8005cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	609a      	str	r2, [r3, #8]
}
 8005cfc:	bf00      	nop
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	021a      	lsls	r2, r3, #8
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	609a      	str	r2, [r3, #8]
}
 8005d3c:	bf00      	nop
 8005d3e:	371c      	adds	r7, #28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f003 031f 	and.w	r3, r3, #31
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6a1a      	ldr	r2, [r3, #32]
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	401a      	ands	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6a1a      	ldr	r2, [r3, #32]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f003 031f 	and.w	r3, r3, #31
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d80:	431a      	orrs	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	621a      	str	r2, [r3, #32]
}
 8005d86:	bf00      	nop
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
	...

08005d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d101      	bne.n	8005dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005da8:	2302      	movs	r3, #2
 8005daa:	e074      	b.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a34      	ldr	r2, [pc, #208]	@ (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d009      	beq.n	8005dea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a33      	ldr	r2, [pc, #204]	@ (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d004      	beq.n	8005dea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a31      	ldr	r2, [pc, #196]	@ (8005eac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d108      	bne.n	8005dfc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005df0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a21      	ldr	r2, [pc, #132]	@ (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d022      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e2c:	d01d      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a1f      	ldr	r2, [pc, #124]	@ (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d018      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d013      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00e      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a15      	ldr	r2, [pc, #84]	@ (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d009      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a18      	ldr	r2, [pc, #96]	@ (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d004      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a11      	ldr	r2, [pc, #68]	@ (8005eac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d10c      	bne.n	8005e84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40012c00 	.word	0x40012c00
 8005ea8:	40013400 	.word	0x40013400
 8005eac:	40015000 	.word	0x40015000
 8005eb0:	40000400 	.word	0x40000400
 8005eb4:	40000800 	.word	0x40000800
 8005eb8:	40000c00 	.word	0x40000c00
 8005ebc:	40014000 	.word	0x40014000

08005ec0 <memset>:
 8005ec0:	4402      	add	r2, r0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d100      	bne.n	8005eca <memset+0xa>
 8005ec8:	4770      	bx	lr
 8005eca:	f803 1b01 	strb.w	r1, [r3], #1
 8005ece:	e7f9      	b.n	8005ec4 <memset+0x4>

08005ed0 <__libc_init_array>:
 8005ed0:	b570      	push	{r4, r5, r6, lr}
 8005ed2:	4d0d      	ldr	r5, [pc, #52]	@ (8005f08 <__libc_init_array+0x38>)
 8005ed4:	4c0d      	ldr	r4, [pc, #52]	@ (8005f0c <__libc_init_array+0x3c>)
 8005ed6:	1b64      	subs	r4, r4, r5
 8005ed8:	10a4      	asrs	r4, r4, #2
 8005eda:	2600      	movs	r6, #0
 8005edc:	42a6      	cmp	r6, r4
 8005ede:	d109      	bne.n	8005ef4 <__libc_init_array+0x24>
 8005ee0:	4d0b      	ldr	r5, [pc, #44]	@ (8005f10 <__libc_init_array+0x40>)
 8005ee2:	4c0c      	ldr	r4, [pc, #48]	@ (8005f14 <__libc_init_array+0x44>)
 8005ee4:	f000 f818 	bl	8005f18 <_init>
 8005ee8:	1b64      	subs	r4, r4, r5
 8005eea:	10a4      	asrs	r4, r4, #2
 8005eec:	2600      	movs	r6, #0
 8005eee:	42a6      	cmp	r6, r4
 8005ef0:	d105      	bne.n	8005efe <__libc_init_array+0x2e>
 8005ef2:	bd70      	pop	{r4, r5, r6, pc}
 8005ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef8:	4798      	blx	r3
 8005efa:	3601      	adds	r6, #1
 8005efc:	e7ee      	b.n	8005edc <__libc_init_array+0xc>
 8005efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f02:	4798      	blx	r3
 8005f04:	3601      	adds	r6, #1
 8005f06:	e7f2      	b.n	8005eee <__libc_init_array+0x1e>
 8005f08:	08007038 	.word	0x08007038
 8005f0c:	08007038 	.word	0x08007038
 8005f10:	08007038 	.word	0x08007038
 8005f14:	0800703c 	.word	0x0800703c

08005f18 <_init>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	bf00      	nop
 8005f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1e:	bc08      	pop	{r3}
 8005f20:	469e      	mov	lr, r3
 8005f22:	4770      	bx	lr

08005f24 <_fini>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	bf00      	nop
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr
