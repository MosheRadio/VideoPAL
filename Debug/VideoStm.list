
VideoStm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .screen       00002760  20000000  20000000  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005d68  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000940  08005f40  08005f40  00006f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08006880  08006880  0005bc00  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  08006880  08006880  00007880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08006888  08006888  0005bc00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08006888  08006888  00007888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0800688c  0800688c  0000788c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000b54  20002760  08006890  00008760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000002c8  200032b4  080073e4  000092b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000357c  080073e4  0000957c  2**0
                  ALLOC
 12 .screenBB     0004ec00  22000000  22000000  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 00000030  00000000  00000000  0005bc00  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e87f  00000000  00000000  0005bc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000273a  00000000  00000000  0006a4af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fb8  00000000  00000000  0006cbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002563d  00000000  00000000  0006dba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ddb  00000000  00000000  000931e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7f2e  00000000  00000000  000a3fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019beee  2**0
                  CONTENTS, READONLY
 21 .debug_rnglists 00000c33  00000000  00000000  0019bf31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000405c  00000000  00000000  0019cb64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004d  00000000  00000000  001a0bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200032b4 	.word	0x200032b4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005f28 	.word	0x08005f28

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200032b8 	.word	0x200032b8
 8000214:	08005f28 	.word	0x08005f28

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <gdiBitBlt>:
		h			Bitmap height, in pixels
		bm			Pointer to the bitmap start position

	return			none
*/
void gdiBitBlt(PGDI_RECT prc, int16_t x, int16_t y, int16_t w, int16_t h, pBMP bm) {
 8000228:	b490      	push	{r4, r7}
 800022a:	b086      	sub	sp, #24
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	4608      	mov	r0, r1
 8000232:	4611      	mov	r1, r2
 8000234:	461a      	mov	r2, r3
 8000236:	4603      	mov	r3, r0
 8000238:	817b      	strh	r3, [r7, #10]
 800023a:	460b      	mov	r3, r1
 800023c:	813b      	strh	r3, [r7, #8]
 800023e:	4613      	mov	r3, r2
 8000240:	80fb      	strh	r3, [r7, #6]
int16_t todo;
uint16_t alignment;

//	Calculate clipping region

	if (prc != NULL) {
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d00f      	beq.n	8000268 <gdiBitBlt+0x40>
		x += prc->x;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800024e:	b29a      	uxth	r2, r3
 8000250:	897b      	ldrh	r3, [r7, #10]
 8000252:	4413      	add	r3, r2
 8000254:	b29b      	uxth	r3, r3
 8000256:	817b      	strh	r3, [r7, #10]
		y += prc->y;
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800025e:	b29a      	uxth	r2, r3
 8000260:	893b      	ldrh	r3, [r7, #8]
 8000262:	4413      	add	r3, r2
 8000264:	b29b      	uxth	r3, r3
 8000266:	813b      	strh	r3, [r7, #8]
//??		w = min(prc->w, VID_PIXELS_X-x);	// clip X
//??		h = min(prc->w, VID_PIXELS_Y-y);	// clip Y
	}
	alignment = x & 0b0000000000001111;
 8000268:	897b      	ldrh	r3, [r7, #10]
 800026a:	f003 030f 	and.w	r3, r3, #15
 800026e:	82bb      	strh	r3, [r7, #20]
	for(;--h >= 0; y++) {
 8000270:	e2cc      	b.n	800080c <gdiBitBlt+0x5e4>
		for (todo = w; todo>0;) {
 8000272:	88fb      	ldrh	r3, [r7, #6]
 8000274:	82fb      	strh	r3, [r7, #22]
 8000276:	e2be      	b.n	80007f6 <gdiBitBlt+0x5ce>
			if (todo >= 9) {
 8000278:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800027c:	2b08      	cmp	r3, #8
 800027e:	dd2d      	ble.n	80002dc <gdiBitBlt+0xb4>
				bitmask.word = (todo >= 16) ?
									0xFFFF		<< (16-alignment):
 8000280:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000284:	2b0f      	cmp	r3, #15
 8000286:	dd08      	ble.n	800029a <gdiBitBlt+0x72>
 8000288:	8abb      	ldrh	r3, [r7, #20]
 800028a:	f1c3 0310 	rsb	r3, r3, #16
 800028e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000292:	fa02 f303 	lsl.w	r3, r2, r3
 8000296:	461a      	mov	r2, r3
 8000298:	e00c      	b.n	80002b4 <gdiBitBlt+0x8c>
						masktable[todo-1]		<< (16-alignment);
 800029a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800029e:	3b01      	subs	r3, #1
 80002a0:	4a79      	ldr	r2, [pc, #484]	@ (8000488 <gdiBitBlt+0x260>)
 80002a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002a6:	461a      	mov	r2, r3
 80002a8:	8abb      	ldrh	r3, [r7, #20]
 80002aa:	f1c3 0310 	rsb	r3, r3, #16
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
									0xFFFF		<< (16-alignment):
 80002b2:	461a      	mov	r2, r3
				bitmask.word = (todo >= 16) ?
 80002b4:	4b75      	ldr	r3, [pc, #468]	@ (800048c <gdiBitBlt+0x264>)
 80002b6:	601a      	str	r2, [r3, #0]
				pattern.word = *bm.halfwords++	<< (16-alignment);
 80002b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002ba:	1c9a      	adds	r2, r3, #2
 80002bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80002be:	881b      	ldrh	r3, [r3, #0]
 80002c0:	461a      	mov	r2, r3
 80002c2:	8abb      	ldrh	r3, [r7, #20]
 80002c4:	f1c3 0310 	rsb	r3, r3, #16
 80002c8:	fa02 f303 	lsl.w	r3, r2, r3
 80002cc:	461a      	mov	r2, r3
 80002ce:	4b70      	ldr	r3, [pc, #448]	@ (8000490 <gdiBitBlt+0x268>)
 80002d0:	601a      	str	r2, [r3, #0]
				todo -= 16;
 80002d2:	8afb      	ldrh	r3, [r7, #22]
 80002d4:	3b10      	subs	r3, #16
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	82fb      	strh	r3, [r7, #22]
 80002da:	e01f      	b.n	800031c <gdiBitBlt+0xf4>
			} else {
				bitmask.word = masktable[todo-1] << (16-alignment);
 80002dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	4a69      	ldr	r2, [pc, #420]	@ (8000488 <gdiBitBlt+0x260>)
 80002e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002e8:	461a      	mov	r2, r3
 80002ea:	8abb      	ldrh	r3, [r7, #20]
 80002ec:	f1c3 0310 	rsb	r3, r3, #16
 80002f0:	fa02 f303 	lsl.w	r3, r2, r3
 80002f4:	461a      	mov	r2, r3
 80002f6:	4b65      	ldr	r3, [pc, #404]	@ (800048c <gdiBitBlt+0x264>)
 80002f8:	601a      	str	r2, [r3, #0]
				pattern.word = *bm.bytesinROM++  << (24-alignment);
 80002fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002fc:	1c5a      	adds	r2, r3, #1
 80002fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	461a      	mov	r2, r3
 8000304:	8abb      	ldrh	r3, [r7, #20]
 8000306:	f1c3 0318 	rsb	r3, r3, #24
 800030a:	fa02 f303 	lsl.w	r3, r2, r3
 800030e:	461a      	mov	r2, r3
 8000310:	4b5f      	ldr	r3, [pc, #380]	@ (8000490 <gdiBitBlt+0x268>)
 8000312:	601a      	str	r2, [r3, #0]
				todo -= 8;
 8000314:	8afb      	ldrh	r3, [r7, #22]
 8000316:	3b08      	subs	r3, #8
 8000318:	b29b      	uxth	r3, r3
 800031a:	82fb      	strh	r3, [r7, #22]
			}
			switch(rop) {
 800031c:	4b5d      	ldr	r3, [pc, #372]	@ (8000494 <gdiBitBlt+0x26c>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b04      	cmp	r3, #4
 8000322:	f200 8268 	bhi.w	80007f6 <gdiBitBlt+0x5ce>
 8000326:	a201      	add	r2, pc, #4	@ (adr r2, 800032c <gdiBitBlt+0x104>)
 8000328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800032c:	08000341 	.word	0x08000341
 8000330:	0800049d 	.word	0x0800049d
 8000334:	08000725 	.word	0x08000725
 8000338:	080005e5 	.word	0x080005e5
 800033c:	08000685 	.word	0x08000685
				case GDI_ROP_COPY:
					screen[y][x>>4] &= ~bitmask.halfword[1];
 8000340:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000344:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000348:	111b      	asrs	r3, r3, #4
 800034a:	b21b      	sxth	r3, r3
 800034c:	4618      	mov	r0, r3
 800034e:	4952      	ldr	r1, [pc, #328]	@ (8000498 <gdiBitBlt+0x270>)
 8000350:	4613      	mov	r3, r2
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	4413      	add	r3, r2
 8000356:	00da      	lsls	r2, r3, #3
 8000358:	1ad2      	subs	r2, r2, r3
 800035a:	1813      	adds	r3, r2, r0
 800035c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000360:	b21a      	sxth	r2, r3
 8000362:	4b4a      	ldr	r3, [pc, #296]	@ (800048c <gdiBitBlt+0x264>)
 8000364:	885b      	ldrh	r3, [r3, #2]
 8000366:	b21b      	sxth	r3, r3
 8000368:	43db      	mvns	r3, r3
 800036a:	b21b      	sxth	r3, r3
 800036c:	4013      	ands	r3, r2
 800036e:	b219      	sxth	r1, r3
 8000370:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000374:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000378:	111b      	asrs	r3, r3, #4
 800037a:	b21b      	sxth	r3, r3
 800037c:	461c      	mov	r4, r3
 800037e:	b288      	uxth	r0, r1
 8000380:	4945      	ldr	r1, [pc, #276]	@ (8000498 <gdiBitBlt+0x270>)
 8000382:	4613      	mov	r3, r2
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	4413      	add	r3, r2
 8000388:	00da      	lsls	r2, r3, #3
 800038a:	1ad2      	subs	r2, r2, r3
 800038c:	1913      	adds	r3, r2, r4
 800038e:	4602      	mov	r2, r0
 8000390:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					screen[y][x>>4] |=  pattern.halfword[1];
 8000394:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000398:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800039c:	111b      	asrs	r3, r3, #4
 800039e:	b21b      	sxth	r3, r3
 80003a0:	4618      	mov	r0, r3
 80003a2:	493d      	ldr	r1, [pc, #244]	@ (8000498 <gdiBitBlt+0x270>)
 80003a4:	4613      	mov	r3, r2
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	4413      	add	r3, r2
 80003aa:	00da      	lsls	r2, r3, #3
 80003ac:	1ad2      	subs	r2, r2, r3
 80003ae:	1813      	adds	r3, r2, r0
 80003b0:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80003b4:	4b36      	ldr	r3, [pc, #216]	@ (8000490 <gdiBitBlt+0x268>)
 80003b6:	885b      	ldrh	r3, [r3, #2]
 80003b8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80003bc:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80003c0:	1100      	asrs	r0, r0, #4
 80003c2:	b200      	sxth	r0, r0
 80003c4:	4604      	mov	r4, r0
 80003c6:	430b      	orrs	r3, r1
 80003c8:	b298      	uxth	r0, r3
 80003ca:	4933      	ldr	r1, [pc, #204]	@ (8000498 <gdiBitBlt+0x270>)
 80003cc:	4613      	mov	r3, r2
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	4413      	add	r3, r2
 80003d2:	00da      	lsls	r2, r3, #3
 80003d4:	1ad2      	subs	r2, r2, r3
 80003d6:	1913      	adds	r3, r2, r4
 80003d8:	4602      	mov	r2, r0
 80003da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (bitmask.halfword[0] != 0) {
 80003de:	4b2b      	ldr	r3, [pc, #172]	@ (800048c <gdiBitBlt+0x264>)
 80003e0:	881b      	ldrh	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	f000 81fe 	beq.w	80007e4 <gdiBitBlt+0x5bc>
						screen[y][(x>>4)+1] &= ~bitmask.halfword[0];
 80003e8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80003ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80003f0:	111b      	asrs	r3, r3, #4
 80003f2:	b21b      	sxth	r3, r3
 80003f4:	1c59      	adds	r1, r3, #1
 80003f6:	4828      	ldr	r0, [pc, #160]	@ (8000498 <gdiBitBlt+0x270>)
 80003f8:	4613      	mov	r3, r2
 80003fa:	005b      	lsls	r3, r3, #1
 80003fc:	4413      	add	r3, r2
 80003fe:	00da      	lsls	r2, r3, #3
 8000400:	1ad2      	subs	r2, r2, r3
 8000402:	1853      	adds	r3, r2, r1
 8000404:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000408:	b21a      	sxth	r2, r3
 800040a:	4b20      	ldr	r3, [pc, #128]	@ (800048c <gdiBitBlt+0x264>)
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	b21b      	sxth	r3, r3
 8000410:	43db      	mvns	r3, r3
 8000412:	b21b      	sxth	r3, r3
 8000414:	4013      	ands	r3, r2
 8000416:	b218      	sxth	r0, r3
 8000418:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800041c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000420:	111b      	asrs	r3, r3, #4
 8000422:	b21b      	sxth	r3, r3
 8000424:	1c59      	adds	r1, r3, #1
 8000426:	b284      	uxth	r4, r0
 8000428:	481b      	ldr	r0, [pc, #108]	@ (8000498 <gdiBitBlt+0x270>)
 800042a:	4613      	mov	r3, r2
 800042c:	005b      	lsls	r3, r3, #1
 800042e:	4413      	add	r3, r2
 8000430:	00da      	lsls	r2, r3, #3
 8000432:	1ad2      	subs	r2, r2, r3
 8000434:	1853      	adds	r3, r2, r1
 8000436:	4622      	mov	r2, r4
 8000438:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						screen[y][(x>>4)+1] |=  pattern.halfword[0];
 800043c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000440:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000444:	111b      	asrs	r3, r3, #4
 8000446:	b21b      	sxth	r3, r3
 8000448:	1c59      	adds	r1, r3, #1
 800044a:	4813      	ldr	r0, [pc, #76]	@ (8000498 <gdiBitBlt+0x270>)
 800044c:	4613      	mov	r3, r2
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	4413      	add	r3, r2
 8000452:	00da      	lsls	r2, r3, #3
 8000454:	1ad2      	subs	r2, r2, r3
 8000456:	1853      	adds	r3, r2, r1
 8000458:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 800045c:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <gdiBitBlt+0x268>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000464:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000468:	1109      	asrs	r1, r1, #4
 800046a:	b209      	sxth	r1, r1
 800046c:	3101      	adds	r1, #1
 800046e:	4303      	orrs	r3, r0
 8000470:	b29c      	uxth	r4, r3
 8000472:	4809      	ldr	r0, [pc, #36]	@ (8000498 <gdiBitBlt+0x270>)
 8000474:	4613      	mov	r3, r2
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	4413      	add	r3, r2
 800047a:	00da      	lsls	r2, r3, #3
 800047c:	1ad2      	subs	r2, r2, r3
 800047e:	1853      	adds	r3, r2, r1
 8000480:	4622      	mov	r2, r4
 8000482:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					}
					break;
 8000486:	e1ad      	b.n	80007e4 <gdiBitBlt+0x5bc>
 8000488:	08006330 	.word	0x08006330
 800048c:	200032d4 	.word	0x200032d4
 8000490:	200032d0 	.word	0x200032d0
 8000494:	20002760 	.word	0x20002760
 8000498:	20000000 	.word	0x20000000
				case GDI_ROP_BONW:	// inverse video
					screen[y][x>>4] |=  bitmask.halfword[1];
 800049c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004a4:	111b      	asrs	r3, r3, #4
 80004a6:	b21b      	sxth	r3, r3
 80004a8:	4618      	mov	r0, r3
 80004aa:	49cb      	ldr	r1, [pc, #812]	@ (80007d8 <gdiBitBlt+0x5b0>)
 80004ac:	4613      	mov	r3, r2
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	4413      	add	r3, r2
 80004b2:	00da      	lsls	r2, r3, #3
 80004b4:	1ad2      	subs	r2, r2, r3
 80004b6:	1813      	adds	r3, r2, r0
 80004b8:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80004bc:	4bc7      	ldr	r3, [pc, #796]	@ (80007dc <gdiBitBlt+0x5b4>)
 80004be:	885b      	ldrh	r3, [r3, #2]
 80004c0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004c4:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80004c8:	1100      	asrs	r0, r0, #4
 80004ca:	b200      	sxth	r0, r0
 80004cc:	4604      	mov	r4, r0
 80004ce:	430b      	orrs	r3, r1
 80004d0:	b298      	uxth	r0, r3
 80004d2:	49c1      	ldr	r1, [pc, #772]	@ (80007d8 <gdiBitBlt+0x5b0>)
 80004d4:	4613      	mov	r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	4413      	add	r3, r2
 80004da:	00da      	lsls	r2, r3, #3
 80004dc:	1ad2      	subs	r2, r2, r3
 80004de:	1913      	adds	r3, r2, r4
 80004e0:	4602      	mov	r2, r0
 80004e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					screen[y][x>>4] &= ~pattern.halfword[1];
 80004e6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004ee:	111b      	asrs	r3, r3, #4
 80004f0:	b21b      	sxth	r3, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	49b8      	ldr	r1, [pc, #736]	@ (80007d8 <gdiBitBlt+0x5b0>)
 80004f6:	4613      	mov	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	4413      	add	r3, r2
 80004fc:	00da      	lsls	r2, r3, #3
 80004fe:	1ad2      	subs	r2, r2, r3
 8000500:	1813      	adds	r3, r2, r0
 8000502:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000506:	b21a      	sxth	r2, r3
 8000508:	4bb5      	ldr	r3, [pc, #724]	@ (80007e0 <gdiBitBlt+0x5b8>)
 800050a:	885b      	ldrh	r3, [r3, #2]
 800050c:	b21b      	sxth	r3, r3
 800050e:	43db      	mvns	r3, r3
 8000510:	b21b      	sxth	r3, r3
 8000512:	4013      	ands	r3, r2
 8000514:	b219      	sxth	r1, r3
 8000516:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800051a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800051e:	111b      	asrs	r3, r3, #4
 8000520:	b21b      	sxth	r3, r3
 8000522:	461c      	mov	r4, r3
 8000524:	b288      	uxth	r0, r1
 8000526:	49ac      	ldr	r1, [pc, #688]	@ (80007d8 <gdiBitBlt+0x5b0>)
 8000528:	4613      	mov	r3, r2
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	4413      	add	r3, r2
 800052e:	00da      	lsls	r2, r3, #3
 8000530:	1ad2      	subs	r2, r2, r3
 8000532:	1913      	adds	r3, r2, r4
 8000534:	4602      	mov	r2, r0
 8000536:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (bitmask.halfword[0] != 0) {
 800053a:	4ba8      	ldr	r3, [pc, #672]	@ (80007dc <gdiBitBlt+0x5b4>)
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	f000 8152 	beq.w	80007e8 <gdiBitBlt+0x5c0>
						screen[y][(x>>4)+1] |=  bitmask.halfword[0];
 8000544:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000548:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800054c:	111b      	asrs	r3, r3, #4
 800054e:	b21b      	sxth	r3, r3
 8000550:	1c59      	adds	r1, r3, #1
 8000552:	48a1      	ldr	r0, [pc, #644]	@ (80007d8 <gdiBitBlt+0x5b0>)
 8000554:	4613      	mov	r3, r2
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	4413      	add	r3, r2
 800055a:	00da      	lsls	r2, r3, #3
 800055c:	1ad2      	subs	r2, r2, r3
 800055e:	1853      	adds	r3, r2, r1
 8000560:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000564:	4b9d      	ldr	r3, [pc, #628]	@ (80007dc <gdiBitBlt+0x5b4>)
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800056c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000570:	1109      	asrs	r1, r1, #4
 8000572:	b209      	sxth	r1, r1
 8000574:	3101      	adds	r1, #1
 8000576:	4303      	orrs	r3, r0
 8000578:	b29c      	uxth	r4, r3
 800057a:	4897      	ldr	r0, [pc, #604]	@ (80007d8 <gdiBitBlt+0x5b0>)
 800057c:	4613      	mov	r3, r2
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	4413      	add	r3, r2
 8000582:	00da      	lsls	r2, r3, #3
 8000584:	1ad2      	subs	r2, r2, r3
 8000586:	1853      	adds	r3, r2, r1
 8000588:	4622      	mov	r2, r4
 800058a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						screen[y][(x>>4)+1] &= ~pattern.halfword[0];
 800058e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000592:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000596:	111b      	asrs	r3, r3, #4
 8000598:	b21b      	sxth	r3, r3
 800059a:	1c59      	adds	r1, r3, #1
 800059c:	488e      	ldr	r0, [pc, #568]	@ (80007d8 <gdiBitBlt+0x5b0>)
 800059e:	4613      	mov	r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4413      	add	r3, r2
 80005a4:	00da      	lsls	r2, r3, #3
 80005a6:	1ad2      	subs	r2, r2, r3
 80005a8:	1853      	adds	r3, r2, r1
 80005aa:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	4b8b      	ldr	r3, [pc, #556]	@ (80007e0 <gdiBitBlt+0x5b8>)
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	43db      	mvns	r3, r3
 80005b8:	b21b      	sxth	r3, r3
 80005ba:	4013      	ands	r3, r2
 80005bc:	b218      	sxth	r0, r3
 80005be:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005c6:	111b      	asrs	r3, r3, #4
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	1c59      	adds	r1, r3, #1
 80005cc:	b284      	uxth	r4, r0
 80005ce:	4882      	ldr	r0, [pc, #520]	@ (80007d8 <gdiBitBlt+0x5b0>)
 80005d0:	4613      	mov	r3, r2
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	4413      	add	r3, r2
 80005d6:	00da      	lsls	r2, r3, #3
 80005d8:	1ad2      	subs	r2, r2, r3
 80005da:	1853      	adds	r3, r2, r1
 80005dc:	4622      	mov	r2, r4
 80005de:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					}
					break;
 80005e2:	e101      	b.n	80007e8 <gdiBitBlt+0x5c0>
				case GDI_ROP_XOR:
					screen[y][x>>4] ^= pattern.halfword[1];
 80005e4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005ec:	111b      	asrs	r3, r3, #4
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	4979      	ldr	r1, [pc, #484]	@ (80007d8 <gdiBitBlt+0x5b0>)
 80005f4:	4613      	mov	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	00da      	lsls	r2, r3, #3
 80005fc:	1ad2      	subs	r2, r2, r3
 80005fe:	1813      	adds	r3, r2, r0
 8000600:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000604:	4b76      	ldr	r3, [pc, #472]	@ (80007e0 <gdiBitBlt+0x5b8>)
 8000606:	885b      	ldrh	r3, [r3, #2]
 8000608:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800060c:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000610:	1100      	asrs	r0, r0, #4
 8000612:	b200      	sxth	r0, r0
 8000614:	4604      	mov	r4, r0
 8000616:	404b      	eors	r3, r1
 8000618:	b298      	uxth	r0, r3
 800061a:	496f      	ldr	r1, [pc, #444]	@ (80007d8 <gdiBitBlt+0x5b0>)
 800061c:	4613      	mov	r3, r2
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	4413      	add	r3, r2
 8000622:	00da      	lsls	r2, r3, #3
 8000624:	1ad2      	subs	r2, r2, r3
 8000626:	1913      	adds	r3, r2, r4
 8000628:	4602      	mov	r2, r0
 800062a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 800062e:	4b6c      	ldr	r3, [pc, #432]	@ (80007e0 <gdiBitBlt+0x5b8>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	f000 80da 	beq.w	80007ec <gdiBitBlt+0x5c4>
						screen[y][(x>>4)+1] ^= pattern.halfword[0];
 8000638:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800063c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000640:	111b      	asrs	r3, r3, #4
 8000642:	b21b      	sxth	r3, r3
 8000644:	1c59      	adds	r1, r3, #1
 8000646:	4864      	ldr	r0, [pc, #400]	@ (80007d8 <gdiBitBlt+0x5b0>)
 8000648:	4613      	mov	r3, r2
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	4413      	add	r3, r2
 800064e:	00da      	lsls	r2, r3, #3
 8000650:	1ad2      	subs	r2, r2, r3
 8000652:	1853      	adds	r3, r2, r1
 8000654:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000658:	4b61      	ldr	r3, [pc, #388]	@ (80007e0 <gdiBitBlt+0x5b8>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000660:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000664:	1109      	asrs	r1, r1, #4
 8000666:	b209      	sxth	r1, r1
 8000668:	3101      	adds	r1, #1
 800066a:	4043      	eors	r3, r0
 800066c:	b29c      	uxth	r4, r3
 800066e:	485a      	ldr	r0, [pc, #360]	@ (80007d8 <gdiBitBlt+0x5b0>)
 8000670:	4613      	mov	r3, r2
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	4413      	add	r3, r2
 8000676:	00da      	lsls	r2, r3, #3
 8000678:	1ad2      	subs	r2, r2, r3
 800067a:	1853      	adds	r3, r2, r1
 800067c:	4622      	mov	r2, r4
 800067e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 8000682:	e0b3      	b.n	80007ec <gdiBitBlt+0x5c4>
				case GDI_ROP_OR:
					screen[y][x>>4] |= pattern.halfword[1];
 8000684:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000688:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800068c:	111b      	asrs	r3, r3, #4
 800068e:	b21b      	sxth	r3, r3
 8000690:	4618      	mov	r0, r3
 8000692:	4951      	ldr	r1, [pc, #324]	@ (80007d8 <gdiBitBlt+0x5b0>)
 8000694:	4613      	mov	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4413      	add	r3, r2
 800069a:	00da      	lsls	r2, r3, #3
 800069c:	1ad2      	subs	r2, r2, r3
 800069e:	1813      	adds	r3, r2, r0
 80006a0:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80006a4:	4b4e      	ldr	r3, [pc, #312]	@ (80007e0 <gdiBitBlt+0x5b8>)
 80006a6:	885b      	ldrh	r3, [r3, #2]
 80006a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006ac:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80006b0:	1100      	asrs	r0, r0, #4
 80006b2:	b200      	sxth	r0, r0
 80006b4:	4604      	mov	r4, r0
 80006b6:	430b      	orrs	r3, r1
 80006b8:	b298      	uxth	r0, r3
 80006ba:	4947      	ldr	r1, [pc, #284]	@ (80007d8 <gdiBitBlt+0x5b0>)
 80006bc:	4613      	mov	r3, r2
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	4413      	add	r3, r2
 80006c2:	00da      	lsls	r2, r3, #3
 80006c4:	1ad2      	subs	r2, r2, r3
 80006c6:	1913      	adds	r3, r2, r4
 80006c8:	4602      	mov	r2, r0
 80006ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 80006ce:	4b44      	ldr	r3, [pc, #272]	@ (80007e0 <gdiBitBlt+0x5b8>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	f000 808c 	beq.w	80007f0 <gdiBitBlt+0x5c8>
						screen[y][(x>>4)+1] |= pattern.halfword[0];
 80006d8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80006e0:	111b      	asrs	r3, r3, #4
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	1c59      	adds	r1, r3, #1
 80006e6:	483c      	ldr	r0, [pc, #240]	@ (80007d8 <gdiBitBlt+0x5b0>)
 80006e8:	4613      	mov	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	4413      	add	r3, r2
 80006ee:	00da      	lsls	r2, r3, #3
 80006f0:	1ad2      	subs	r2, r2, r3
 80006f2:	1853      	adds	r3, r2, r1
 80006f4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80006f8:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <gdiBitBlt+0x5b8>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000700:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000704:	1109      	asrs	r1, r1, #4
 8000706:	b209      	sxth	r1, r1
 8000708:	3101      	adds	r1, #1
 800070a:	4303      	orrs	r3, r0
 800070c:	b29c      	uxth	r4, r3
 800070e:	4832      	ldr	r0, [pc, #200]	@ (80007d8 <gdiBitBlt+0x5b0>)
 8000710:	4613      	mov	r3, r2
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	4413      	add	r3, r2
 8000716:	00da      	lsls	r2, r3, #3
 8000718:	1ad2      	subs	r2, r2, r3
 800071a:	1853      	adds	r3, r2, r1
 800071c:	4622      	mov	r2, r4
 800071e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 8000722:	e065      	b.n	80007f0 <gdiBitBlt+0x5c8>
				case GDI_ROP_NAND:
					screen[y][x>>4] &= ~pattern.halfword[1];
 8000724:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000728:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800072c:	111b      	asrs	r3, r3, #4
 800072e:	b21b      	sxth	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	4929      	ldr	r1, [pc, #164]	@ (80007d8 <gdiBitBlt+0x5b0>)
 8000734:	4613      	mov	r3, r2
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	4413      	add	r3, r2
 800073a:	00da      	lsls	r2, r3, #3
 800073c:	1ad2      	subs	r2, r2, r3
 800073e:	1813      	adds	r3, r2, r0
 8000740:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000744:	b21a      	sxth	r2, r3
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <gdiBitBlt+0x5b8>)
 8000748:	885b      	ldrh	r3, [r3, #2]
 800074a:	b21b      	sxth	r3, r3
 800074c:	43db      	mvns	r3, r3
 800074e:	b21b      	sxth	r3, r3
 8000750:	4013      	ands	r3, r2
 8000752:	b219      	sxth	r1, r3
 8000754:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000758:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800075c:	111b      	asrs	r3, r3, #4
 800075e:	b21b      	sxth	r3, r3
 8000760:	461c      	mov	r4, r3
 8000762:	b288      	uxth	r0, r1
 8000764:	491c      	ldr	r1, [pc, #112]	@ (80007d8 <gdiBitBlt+0x5b0>)
 8000766:	4613      	mov	r3, r2
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	4413      	add	r3, r2
 800076c:	00da      	lsls	r2, r3, #3
 800076e:	1ad2      	subs	r2, r2, r3
 8000770:	1913      	adds	r3, r2, r4
 8000772:	4602      	mov	r2, r0
 8000774:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 8000778:	4b19      	ldr	r3, [pc, #100]	@ (80007e0 <gdiBitBlt+0x5b8>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d039      	beq.n	80007f4 <gdiBitBlt+0x5cc>
						screen[y][(x>>4)+1] &= ~pattern.halfword[0];
 8000780:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000784:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000788:	111b      	asrs	r3, r3, #4
 800078a:	b21b      	sxth	r3, r3
 800078c:	1c59      	adds	r1, r3, #1
 800078e:	4812      	ldr	r0, [pc, #72]	@ (80007d8 <gdiBitBlt+0x5b0>)
 8000790:	4613      	mov	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4413      	add	r3, r2
 8000796:	00da      	lsls	r2, r3, #3
 8000798:	1ad2      	subs	r2, r2, r3
 800079a:	1853      	adds	r3, r2, r1
 800079c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80007a0:	b21a      	sxth	r2, r3
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <gdiBitBlt+0x5b8>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	b21b      	sxth	r3, r3
 80007a8:	43db      	mvns	r3, r3
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	4013      	ands	r3, r2
 80007ae:	b218      	sxth	r0, r3
 80007b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80007b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007b8:	111b      	asrs	r3, r3, #4
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	1c59      	adds	r1, r3, #1
 80007be:	b284      	uxth	r4, r0
 80007c0:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <gdiBitBlt+0x5b0>)
 80007c2:	4613      	mov	r3, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	4413      	add	r3, r2
 80007c8:	00da      	lsls	r2, r3, #3
 80007ca:	1ad2      	subs	r2, r2, r3
 80007cc:	1853      	adds	r3, r2, r1
 80007ce:	4622      	mov	r2, r4
 80007d0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 80007d4:	e00e      	b.n	80007f4 <gdiBitBlt+0x5cc>
 80007d6:	bf00      	nop
 80007d8:	20000000 	.word	0x20000000
 80007dc:	200032d4 	.word	0x200032d4
 80007e0:	200032d0 	.word	0x200032d0
					break;
 80007e4:	bf00      	nop
 80007e6:	e006      	b.n	80007f6 <gdiBitBlt+0x5ce>
					break;
 80007e8:	bf00      	nop
 80007ea:	e004      	b.n	80007f6 <gdiBitBlt+0x5ce>
					break;
 80007ec:	bf00      	nop
 80007ee:	e002      	b.n	80007f6 <gdiBitBlt+0x5ce>
					break;
 80007f0:	bf00      	nop
 80007f2:	e000      	b.n	80007f6 <gdiBitBlt+0x5ce>
					break;
 80007f4:	bf00      	nop
		for (todo = w; todo>0;) {
 80007f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f73f ad3c 	bgt.w	8000278 <gdiBitBlt+0x50>
	for(;--h >= 0; y++) {
 8000800:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000804:	b29b      	uxth	r3, r3
 8000806:	3301      	adds	r3, #1
 8000808:	b29b      	uxth	r3, r3
 800080a:	813b      	strh	r3, [r7, #8]
 800080c:	8c3b      	ldrh	r3, [r7, #32]
 800080e:	3b01      	subs	r3, #1
 8000810:	b29b      	uxth	r3, r3
 8000812:	843b      	strh	r3, [r7, #32]
 8000814:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000818:	2b00      	cmp	r3, #0
 800081a:	f6bf ad2a 	bge.w	8000272 <gdiBitBlt+0x4a>
			}
		}
	}
}
 800081e:	bf00      	nop
 8000820:	bf00      	nop
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bc90      	pop	{r4, r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop

0800082c <gdiDrawTextEx>:
		ptext		Pointer to text

	return			none
*/
void gdiDrawTextEx(int16_t x, int16_t y, char *ptext)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af02      	add	r7, sp, #8
 8000832:	4603      	mov	r3, r0
 8000834:	603a      	str	r2, [r7, #0]
 8000836:	80fb      	strh	r3, [r7, #6]
 8000838:	460b      	mov	r3, r1
 800083a:	80bb      	strh	r3, [r7, #4]

	char		c;

	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH)
 800083c:	e01a      	b.n	8000874 <gdiDrawTextEx+0x48>
		if (c >= GDI_SYSFONT_OFFSET)
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	2b1f      	cmp	r3, #31
 8000842:	d913      	bls.n	800086c <gdiDrawTextEx+0x40>
			gdiBitBlt(NULL, x, y, GDI_SYSFONT_WIDTH, GDI_SYSFONT_HEIGHT, (pBMP) gdiSystemFont[c-GDI_SYSFONT_OFFSET]);
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	f1a3 0220 	sub.w	r2, r3, #32
 800084a:	4613      	mov	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4413      	add	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	4a0f      	ldr	r2, [pc, #60]	@ (8000890 <gdiDrawTextEx+0x64>)
 8000854:	4413      	add	r3, r2
 8000856:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800085a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	230a      	movs	r3, #10
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2306      	movs	r3, #6
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff fcde 	bl	8000228 <gdiBitBlt>
	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH)
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	3306      	adds	r3, #6
 8000870:	b29b      	uxth	r3, r3
 8000872:	80fb      	strh	r3, [r7, #6]
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	603a      	str	r2, [r7, #0]
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	73fb      	strb	r3, [r7, #15]
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1dc      	bne.n	800083e <gdiDrawTextEx+0x12>
//	clip here if		if (x >= VID_PIXELS_X - GDI_SYSFONT_WIDTH)
		// else control character handling ...

}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	08005f70 	.word	0x08005f70

08000894 <gdiSetCursor>:
static int cursor_x = 0;
static int cursor_y = 0;

/* Set the pixel cursor position. */
void gdiSetCursor(int x, int y)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
    /* Clamp to the visible area */
    if (x < 0) x = 0;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	da01      	bge.n	80008a8 <gdiSetCursor+0x14>
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
    if (y < 0) y = 0;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	da01      	bge.n	80008b2 <gdiSetCursor+0x1e>
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
    if (x >= VID_PIXELS_X) x = VID_PIXELS_X - GDI_SYSFONT_WIDTH;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 80008b8:	d302      	bcc.n	80008c0 <gdiSetCursor+0x2c>
 80008ba:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80008be:	607b      	str	r3, [r7, #4]
    if (y >= VID_PIXELS_Y) y = VID_PIXELS_Y - GDI_SYSFONT_HEIGHT;
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	2bef      	cmp	r3, #239	@ 0xef
 80008c4:	dd01      	ble.n	80008ca <gdiSetCursor+0x36>
 80008c6:	23e6      	movs	r3, #230	@ 0xe6
 80008c8:	603b      	str	r3, [r7, #0]
    cursor_x = x;
 80008ca:	4a06      	ldr	r2, [pc, #24]	@ (80008e4 <gdiSetCursor+0x50>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6013      	str	r3, [r2, #0]
    cursor_y = y;
 80008d0:	4a05      	ldr	r2, [pc, #20]	@ (80008e8 <gdiSetCursor+0x54>)
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	6013      	str	r3, [r2, #0]
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	200032d8 	.word	0x200032d8
 80008e8:	200032dc 	.word	0x200032dc

080008ec <gdiClearScreen>:
    if (y) *y = cursor_y;
}

/* Clear the entire screen and reset the cursor to the top left. */
void gdiClearScreen(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
    /* Use the provided video function to clear the frame buffer. */
    vidClearScreen();
 80008f0:	f000 fec0 	bl	8001674 <vidClearScreen>
    cursor_x = 0;
 80008f4:	4b03      	ldr	r3, [pc, #12]	@ (8000904 <gdiClearScreen+0x18>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
    cursor_y = 0;
 80008fa:	4b03      	ldr	r3, [pc, #12]	@ (8000908 <gdiClearScreen+0x1c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200032d8 	.word	0x200032d8
 8000908:	200032dc 	.word	0x200032dc

0800090c <gdiPutChar>:

/* Output a single character at the current cursor position.  Handles
 * carriage return and newline automatically. */
void gdiPutChar(uint8_t ch)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
    switch (ch) {
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b0a      	cmp	r3, #10
 800091a:	d005      	beq.n	8000928 <gdiPutChar+0x1c>
 800091c:	2b0d      	cmp	r3, #13
 800091e:	d113      	bne.n	8000948 <gdiPutChar+0x3c>
    case '\r':
        /* Carriage return: move to column 0. */
        cursor_x = 0;
 8000920:	4b20      	ldr	r3, [pc, #128]	@ (80009a4 <gdiPutChar+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
        return;
 8000926:	e03a      	b.n	800099e <gdiPutChar+0x92>
    case '\n':
        /* Newline: move to next line and column 0. */
        cursor_x = 0;
 8000928:	4b1e      	ldr	r3, [pc, #120]	@ (80009a4 <gdiPutChar+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
        cursor_y += GDI_SYSFONT_HEIGHT;
 800092e:	4b1e      	ldr	r3, [pc, #120]	@ (80009a8 <gdiPutChar+0x9c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	330a      	adds	r3, #10
 8000934:	4a1c      	ldr	r2, [pc, #112]	@ (80009a8 <gdiPutChar+0x9c>)
 8000936:	6013      	str	r3, [r2, #0]
        if (cursor_y >= VID_PIXELS_Y) {
 8000938:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <gdiPutChar+0x9c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2bef      	cmp	r3, #239	@ 0xef
 800093e:	dd2d      	ble.n	800099c <gdiPutChar+0x90>
            /* Simple scroll-wrap: start at top when bottom is exceeded. */
            cursor_y = 0;
 8000940:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <gdiPutChar+0x9c>)
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
        }
        return;
 8000946:	e029      	b.n	800099c <gdiPutChar+0x90>
    default:
        break;
 8000948:	bf00      	nop
    }
    /* Draw the character using the existing GDI function. */
    char buf[2] = { (char)ch, '\0' };
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	733b      	strb	r3, [r7, #12]
 800094e:	2300      	movs	r3, #0
 8000950:	737b      	strb	r3, [r7, #13]
    gdiDrawTextEx(cursor_x, cursor_y, buf);
 8000952:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <gdiPutChar+0x98>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	b21b      	sxth	r3, r3
 8000958:	4a13      	ldr	r2, [pc, #76]	@ (80009a8 <gdiPutChar+0x9c>)
 800095a:	6812      	ldr	r2, [r2, #0]
 800095c:	b211      	sxth	r1, r2
 800095e:	f107 020c 	add.w	r2, r7, #12
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ff62 	bl	800082c <gdiDrawTextEx>
    /* Advance the cursor.  Wrap to the next line if we exceed the width. */
    cursor_x += GDI_SYSFONT_WIDTH;
 8000968:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <gdiPutChar+0x98>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	3306      	adds	r3, #6
 800096e:	4a0d      	ldr	r2, [pc, #52]	@ (80009a4 <gdiPutChar+0x98>)
 8000970:	6013      	str	r3, [r2, #0]
    if (cursor_x >= VID_PIXELS_X) {
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <gdiPutChar+0x98>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 800097a:	d310      	bcc.n	800099e <gdiPutChar+0x92>
        cursor_x = 0;
 800097c:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <gdiPutChar+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
        cursor_y += GDI_SYSFONT_HEIGHT;
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <gdiPutChar+0x9c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	330a      	adds	r3, #10
 8000988:	4a07      	ldr	r2, [pc, #28]	@ (80009a8 <gdiPutChar+0x9c>)
 800098a:	6013      	str	r3, [r2, #0]
        if (cursor_y >= VID_PIXELS_Y) {
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <gdiPutChar+0x9c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2bef      	cmp	r3, #239	@ 0xef
 8000992:	dd04      	ble.n	800099e <gdiPutChar+0x92>
            cursor_y = 0;
 8000994:	4b04      	ldr	r3, [pc, #16]	@ (80009a8 <gdiPutChar+0x9c>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	e000      	b.n	800099e <gdiPutChar+0x92>
        return;
 800099c:	bf00      	nop
        }
    }
}
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200032d8 	.word	0x200032d8
 80009a8:	200032dc 	.word	0x200032dc

080009ac <Gpio_deinit>:
{
  TimingDelay = nTime;
  while((TimingDelay != 0));
  while(Paused);
}
void Gpio_deinit(GPIO_TypeDef  *GPIOx){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
		for(int i =0; i<15;i++){
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	e008      	b.n	80009cc <Gpio_deinit+0x20>
			HAL_GPIO_DeInit(GPIOA, i);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	4619      	mov	r1, r3
 80009be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c2:	f001 fd03 	bl	80023cc <HAL_GPIO_DeInit>
		for(int i =0; i<15;i++){
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	3301      	adds	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2b0e      	cmp	r3, #14
 80009d0:	ddf3      	ble.n	80009ba <Gpio_deinit+0xe>
		}
	}
 80009d2:	bf00      	nop
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <TIMER_SET>:


void TIMER_SET(uint32_t sys){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]


	if (sys == 16000000){
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a33      	ldr	r2, [pc, #204]	@ (8000ab4 <TIMER_SET+0xd8>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d113      	bne.n	8000a14 <TIMER_SET+0x38>
		  __HAL_I2S_DISABLE(&hi2s2);
 80009ec:	4b32      	ldr	r3, [pc, #200]	@ (8000ab8 <TIMER_SET+0xdc>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	69da      	ldr	r2, [r3, #28]
 80009f2:	4b31      	ldr	r3, [pc, #196]	@ (8000ab8 <TIMER_SET+0xdc>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80009fa:	61da      	str	r2, [r3, #28]
		   SPI2->I2SPR = 1;
 80009fc:	4b2f      	ldr	r3, [pc, #188]	@ (8000abc <TIMER_SET+0xe0>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	621a      	str	r2, [r3, #32]
		   __HAL_I2S_ENABLE(&hi2s2);
 8000a02:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab8 <TIMER_SET+0xdc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	69da      	ldr	r2, [r3, #28]
 8000a08:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab8 <TIMER_SET+0xdc>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a10:	61da      	str	r2, [r3, #28]
	else if(sys == 120000000){
		__HAL_I2S_DISABLE(&hi2s2);
		SPI2->I2SPR = (7 << SPI_I2SPR_I2SDIV_Pos) | (1 << SPI_I2SPR_ODD_Pos);
		__HAL_I2S_ENABLE(&hi2s2);
	}
}
 8000a12:	e04a      	b.n	8000aaa <TIMER_SET+0xce>
	else if(sys == 48000000){
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a2a      	ldr	r2, [pc, #168]	@ (8000ac0 <TIMER_SET+0xe4>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d113      	bne.n	8000a44 <TIMER_SET+0x68>
		  __HAL_I2S_DISABLE(&hi2s2);
 8000a1c:	4b26      	ldr	r3, [pc, #152]	@ (8000ab8 <TIMER_SET+0xdc>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	69da      	ldr	r2, [r3, #28]
 8000a22:	4b25      	ldr	r3, [pc, #148]	@ (8000ab8 <TIMER_SET+0xdc>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000a2a:	61da      	str	r2, [r3, #28]
		  SPI2->I2SPR = (3 << SPI_I2SPR_I2SDIV_Pos)
 8000a2c:	4b23      	ldr	r3, [pc, #140]	@ (8000abc <TIMER_SET+0xe0>)
 8000a2e:	2203      	movs	r2, #3
 8000a30:	621a      	str	r2, [r3, #32]
		   __HAL_I2S_ENABLE(&hi2s2);
 8000a32:	4b21      	ldr	r3, [pc, #132]	@ (8000ab8 <TIMER_SET+0xdc>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	69da      	ldr	r2, [r3, #28]
 8000a38:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <TIMER_SET+0xdc>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a40:	61da      	str	r2, [r3, #28]
}
 8000a42:	e032      	b.n	8000aaa <TIMER_SET+0xce>
	else if (sys == 96000000){
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac4 <TIMER_SET+0xe8>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d116      	bne.n	8000a7a <TIMER_SET+0x9e>
		  __HAL_I2S_DISABLE(&hi2s2);
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <TIMER_SET+0xdc>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	69da      	ldr	r2, [r3, #28]
 8000a52:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <TIMER_SET+0xdc>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000a5a:	61da      	str	r2, [r3, #28]
		  SPI2->I2SPR = (6 << SPI_I2SPR_I2SDIV_Pos)
 8000a5c:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <TIMER_SET+0xe0>)
 8000a5e:	2206      	movs	r2, #6
 8000a60:	621a      	str	r2, [r3, #32]
		   __HAL_I2S_ENABLE(&hi2s2);
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <TIMER_SET+0xdc>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	69da      	ldr	r2, [r3, #28]
 8000a68:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <TIMER_SET+0xdc>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a70:	61da      	str	r2, [r3, #28]
		   HAL_Delay(1);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f000 feaa 	bl	80017cc <HAL_Delay>
}
 8000a78:	e017      	b.n	8000aaa <TIMER_SET+0xce>
	else if(sys == 120000000){
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a12      	ldr	r2, [pc, #72]	@ (8000ac8 <TIMER_SET+0xec>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d113      	bne.n	8000aaa <TIMER_SET+0xce>
		__HAL_I2S_DISABLE(&hi2s2);
 8000a82:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <TIMER_SET+0xdc>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	69da      	ldr	r2, [r3, #28]
 8000a88:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <TIMER_SET+0xdc>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000a90:	61da      	str	r2, [r3, #28]
		SPI2->I2SPR = (7 << SPI_I2SPR_I2SDIV_Pos) | (1 << SPI_I2SPR_ODD_Pos);
 8000a92:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <TIMER_SET+0xe0>)
 8000a94:	f240 1207 	movw	r2, #263	@ 0x107
 8000a98:	621a      	str	r2, [r3, #32]
		__HAL_I2S_ENABLE(&hi2s2);
 8000a9a:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <TIMER_SET+0xdc>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	69da      	ldr	r2, [r3, #28]
 8000aa0:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <TIMER_SET+0xdc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000aa8:	61da      	str	r2, [r3, #28]
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	00f42400 	.word	0x00f42400
 8000ab8:	200032e0 	.word	0x200032e0
 8000abc:	40003800 	.word	0x40003800
 8000ac0:	02dc6c00 	.word	0x02dc6c00
 8000ac4:	05b8d800 	.word	0x05b8d800
 8000ac8:	07270e00 	.word	0x07270e00

08000acc <demo_no_uart_run>:

void demo_no_uart_run(void)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b08b      	sub	sp, #44	@ 0x2c
 8000ad0:	af00      	add	r7, sp, #0
    /* Clear the screen and reset the cursor to the top left. */
    gdiClearScreen();
 8000ad2:	f7ff ff0b 	bl	80008ec <gdiClearScreen>

    /* List of names to display. */
    const char *names[] = { "Moshe", "Idan", "Lior", "Reut" };
 8000ad6:	4b25      	ldr	r3, [pc, #148]	@ (8000b6c <demo_no_uart_run+0xa0>)
 8000ad8:	463c      	mov	r4, r7
 8000ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000adc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const int count = sizeof(names) / sizeof(names[0]);
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	61fb      	str	r3, [r7, #28]

    /* For each name, compute the x coordinate such that the text
     * appears flush to the right edge of the display.  Then set
     * the cursor and print the characters one by one.  After each
     * name, wait for a second. */
    for (int i = 0; i < count; ++i) {
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ae8:	e037      	b.n	8000b5a <demo_no_uart_run+0x8e>
        int len = strlen(names[i]);
 8000aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	3328      	adds	r3, #40	@ 0x28
 8000af0:	443b      	add	r3, r7
 8000af2:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fb8e 	bl	8000218 <strlen>
 8000afc:	4603      	mov	r3, r0
 8000afe:	61bb      	str	r3, [r7, #24]
        int x = VID_PIXELS_X - len * GDI_SYSFONT_WIDTH;
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	4613      	mov	r3, r2
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	4413      	add	r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	f5c3 73a8 	rsb	r3, r3, #336	@ 0x150
 8000b0e:	617b      	str	r3, [r7, #20]
        int y = i * GDI_SYSFONT_HEIGHT;
 8000b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b12:	4613      	mov	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
        gdiSetCursor(x, y);
 8000b1c:	6939      	ldr	r1, [r7, #16]
 8000b1e:	6978      	ldr	r0, [r7, #20]
 8000b20:	f7ff feb8 	bl	8000894 <gdiSetCursor>
        for (const char *p = names[i]; *p; ++p) {
 8000b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	3328      	adds	r3, #40	@ 0x28
 8000b2a:	443b      	add	r3, r7
 8000b2c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000b30:	623b      	str	r3, [r7, #32]
 8000b32:	e007      	b.n	8000b44 <demo_no_uart_run+0x78>
            gdiPutChar((uint8_t)*p);
 8000b34:	6a3b      	ldr	r3, [r7, #32]
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fee7 	bl	800090c <gdiPutChar>
        for (const char *p = names[i]; *p; ++p) {
 8000b3e:	6a3b      	ldr	r3, [r7, #32]
 8000b40:	3301      	adds	r3, #1
 8000b42:	623b      	str	r3, [r7, #32]
 8000b44:	6a3b      	ldr	r3, [r7, #32]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1f3      	bne.n	8000b34 <demo_no_uart_run+0x68>
        }
        /* Delay 1 second (1000 ms) */
        HAL_Delay(1000);
 8000b4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b50:	f000 fe3c 	bl	80017cc <HAL_Delay>
    for (int i = 0; i < count; ++i) {
 8000b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b56:	3301      	adds	r3, #1
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	dbc3      	blt.n	8000aea <demo_no_uart_run+0x1e>
    }
}
 8000b62:	bf00      	nop
 8000b64:	bf00      	nop
 8000b66:	372c      	adds	r7, #44	@ 0x2c
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd90      	pop	{r4, r7, pc}
 8000b6c:	08005f60 	.word	0x08005f60

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_I2S_DeInit(&hi2s2);
 8000b74:	483f      	ldr	r0, [pc, #252]	@ (8000c74 <main+0x104>)
 8000b76:	f001 fdeb 	bl	8002750 <HAL_I2S_DeInit>
	HAL_TIM_OC_DeInit(&htim2);
 8000b7a:	483f      	ldr	r0, [pc, #252]	@ (8000c78 <main+0x108>)
 8000b7c:	f003 fdb5 	bl	80046ea <HAL_TIM_OC_DeInit>
	HAL_TIM_OC_DeInit(&htim3);
 8000b80:	483e      	ldr	r0, [pc, #248]	@ (8000c7c <main+0x10c>)
 8000b82:	f003 fdb2 	bl	80046ea <HAL_TIM_OC_DeInit>
	Gpio_deinit(GPIOA);
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8a:	f7ff ff0f 	bl	80009ac <Gpio_deinit>
	Gpio_deinit(GPIOB);
 8000b8e:	483c      	ldr	r0, [pc, #240]	@ (8000c80 <main+0x110>)
 8000b90:	f7ff ff0c 	bl	80009ac <Gpio_deinit>
	Gpio_deinit(GPIOC);
 8000b94:	483b      	ldr	r0, [pc, #236]	@ (8000c84 <main+0x114>)
 8000b96:	f7ff ff09 	bl	80009ac <Gpio_deinit>
	HAL_DMA_DeInit(&hdma_tim3_ch1);
 8000b9a:	483b      	ldr	r0, [pc, #236]	@ (8000c88 <main+0x118>)
 8000b9c:	f000 fff0 	bl	8001b80 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_tim3_ch3);
 8000ba0:	483a      	ldr	r0, [pc, #232]	@ (8000c8c <main+0x11c>)
 8000ba2:	f000 ffed 	bl	8001b80 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_spi2_tx);
 8000ba6:	483a      	ldr	r0, [pc, #232]	@ (8000c90 <main+0x120>)
 8000ba8:	f000 ffea 	bl	8001b80 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_tim3_ch4);
 8000bac:	4839      	ldr	r0, [pc, #228]	@ (8000c94 <main+0x124>)
 8000bae:	f000 ffe7 	bl	8001b80 <HAL_DMA_DeInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb2:	f000 fd9a 	bl	80016ea <HAL_Init>

  /* USER CODE BEGIN Init */

  /* --- Enable Flash prefetch and caches before changing SYSCLK --- */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb6:	4b38      	ldr	r3, [pc, #224]	@ (8000c98 <main+0x128>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a37      	ldr	r2, [pc, #220]	@ (8000c98 <main+0x128>)
 8000bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bc0:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc2:	4b35      	ldr	r3, [pc, #212]	@ (8000c98 <main+0x128>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a34      	ldr	r2, [pc, #208]	@ (8000c98 <main+0x128>)
 8000bc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bcc:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bce:	4b32      	ldr	r3, [pc, #200]	@ (8000c98 <main+0x128>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a31      	ldr	r2, [pc, #196]	@ (8000c98 <main+0x128>)
 8000bd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bd8:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bda:	f000 f867 	bl	8000cac <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bde:	f000 fa83 	bl	80010e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000be2:	f000 fa3f 	bl	8001064 <MX_DMA_Init>
  MX_TIM2_Init();
 8000be6:	f000 f8d3 	bl	8000d90 <MX_TIM2_Init>
  MX_I2S2_Init();
 8000bea:	f000 f8a9 	bl	8000d40 <MX_I2S2_Init>
  TIMER_SET(HAL_RCC_GetSysClockFreq());
 8000bee:	f002 fbf1 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fef1 	bl	80009dc <TIMER_SET>
  MX_TIM3_Init();
 8000bfa:	f000 f95d 	bl	8000eb8 <MX_TIM3_Init>
  //Video_SetupTiming();
  // 1) How many timer ticks per half-word at your clock?


  //do know if it is necessary
  HAL_TIM_Base_Start(&htim2); // start the timer for the video sync
 8000bfe:	481e      	ldr	r0, [pc, #120]	@ (8000c78 <main+0x108>)
 8000c00:	f003 fcac 	bl	800455c <HAL_TIM_Base_Start>

  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);  // OC4Ref → TRGO
 8000c04:	210c      	movs	r1, #12
 8000c06:	481c      	ldr	r0, [pc, #112]	@ (8000c78 <main+0x108>)
 8000c08:	f003 fde0 	bl	80047cc <HAL_TIM_OC_Start>


  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	481b      	ldr	r0, [pc, #108]	@ (8000c7c <main+0x10c>)
 8000c10:	f003 fddc 	bl	80047cc <HAL_TIM_OC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // this the same
 8000c14:	2104      	movs	r1, #4
 8000c16:	4819      	ldr	r0, [pc, #100]	@ (8000c7c <main+0x10c>)
 8000c18:	f003 ff4c 	bl	8004ab4 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3);
 8000c1c:	2108      	movs	r1, #8
 8000c1e:	4817      	ldr	r0, [pc, #92]	@ (8000c7c <main+0x10c>)
 8000c20:	f003 fdd4 	bl	80047cc <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_4);
 8000c24:	210c      	movs	r1, #12
 8000c26:	4815      	ldr	r0, [pc, #84]	@ (8000c7c <main+0x10c>)
 8000c28:	f003 fdd0 	bl	80047cc <HAL_TIM_OC_Start>


  HAL_DMA_Start(
 8000c2c:	491b      	ldr	r1, [pc, #108]	@ (8000c9c <main+0x12c>)
 8000c2e:	f44f 7323 	mov.w	r3, #652	@ 0x28c
 8000c32:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca0 <main+0x130>)
 8000c34:	4814      	ldr	r0, [pc, #80]	@ (8000c88 <main+0x118>)
 8000c36:	f001 f839 	bl	8001cac <HAL_DMA_Start>
    &hdma_tim3_ch1,
    (uint32_t)SyncTable,                // memory: array of CCR1 timings
    (uint32_t)&TIM3->CCR1,              // peripheral: CCR1 register
	VID_VSIZE+27                           // one entry per visible line
  );
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC1);  // also enable CC1DE for VSync
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <main+0x10c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <main+0x10c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c48:	60da      	str	r2, [r3, #12]

  // 2) LINE BUFFERS → I2S DMA CMAR at back porch (CC3)
  HAL_DMA_Start(
 8000c4a:	4916      	ldr	r1, [pc, #88]	@ (8000ca4 <main+0x134>)
    &hdma_tim3_ch3,
    (uint32_t)lineptrs,                 // memory: array of line-buffer addresses
    (uint32_t)&hdma_spi2_tx.Instance->CMAR,
 8000c4c:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <main+0x120>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	330c      	adds	r3, #12
  HAL_DMA_Start(
 8000c52:	461a      	mov	r2, r3
 8000c54:	f240 2371 	movw	r3, #625	@ 0x271
 8000c58:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <main+0x11c>)
 8000c5a:	f001 f827 	bl	8001cac <HAL_DMA_Start>
//    (uint32_t)&hdma_spi2_tx.Instance->CMAR,
//    VID_VSIZE-1// one entry per line
//  );

  // 4) Kick off the I2S DMA stream once
  HAL_I2S_Transmit_DMA(
 8000c5e:	2220      	movs	r2, #32
 8000c60:	4911      	ldr	r1, [pc, #68]	@ (8000ca8 <main+0x138>)
 8000c62:	4804      	ldr	r0, [pc, #16]	@ (8000c74 <main+0x104>)
 8000c64:	f001 fd9c 	bl	80027a0 <HAL_I2S_Transmit_DMA>
  //gdiDrawTextEx(140, 90, "IDAN");
//  gdiDrawTextEx(150, 80, "RUBEN");
//  gdiDrawTextEx(160, 100, "a");

  //static uint8_t rx_byte;
  vt100_init();
 8000c68:	f000 fd10 	bl	800168c <vt100_init>

  while (1)
  {
	  demo_no_uart_run();
 8000c6c:	f7ff ff2e 	bl	8000acc <demo_no_uart_run>
 8000c70:	e7fc      	b.n	8000c6c <main+0xfc>
 8000c72:	bf00      	nop
 8000c74:	200032e0 	.word	0x200032e0
 8000c78:	2000337c 	.word	0x2000337c
 8000c7c:	200033c8 	.word	0x200033c8
 8000c80:	48000400 	.word	0x48000400
 8000c84:	48000800 	.word	0x48000800
 8000c88:	20003414 	.word	0x20003414
 8000c8c:	20003474 	.word	0x20003474
 8000c90:	2000331c 	.word	0x2000331c
 8000c94:	200034d4 	.word	0x200034d4
 8000c98:	40022000 	.word	0x40022000
 8000c9c:	08006368 	.word	0x08006368
 8000ca0:	40000434 	.word	0x40000434
 8000ca4:	200028e8 	.word	0x200028e8
 8000ca8:	20003538 	.word	0x20003538

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b094      	sub	sp, #80	@ 0x50
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0318 	add.w	r3, r7, #24
 8000cb6:	2238      	movs	r2, #56	@ 0x38
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f005 f908 	bl	8005ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cd2:	f001 fe7d 	bl	80029d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cda:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000cde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000cec:	231e      	movs	r3, #30
 8000cee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV10;
 8000cf0:	230a      	movs	r3, #10
 8000cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfc:	f107 0318 	add.w	r3, r7, #24
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 ff19 	bl	8002b38 <HAL_RCC_OscConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000d0c:	f000 fa1c 	bl	8001148 <Error_Handler>

  // 8mhz *12 / 2

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d10:	230f      	movs	r3, #15
 8000d12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d14:	2303      	movs	r3, #3
 8000d16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]



  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2105      	movs	r1, #5
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 fa17 	bl	800315c <HAL_RCC_ClockConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d34:	f000 fa08 	bl	8001148 <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3750      	adds	r7, #80	@ 0x50
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2S2_Init 1 */
	//hi2s2.Init.CPOL = I2S_CPOL_HIGH;

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000d44:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <MX_I2S2_Init+0x48>)
 8000d46:	4a11      	ldr	r2, [pc, #68]	@ (8000d8c <MX_I2S2_Init+0x4c>)
 8000d48:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <MX_I2S2_Init+0x48>)
 8000d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d50:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d52:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <MX_I2S2_Init+0x48>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d58:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <MX_I2S2_Init+0x48>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <MX_I2S2_Init+0x48>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000d64:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <MX_I2S2_Init+0x48>)
 8000d66:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000d6a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <MX_I2S2_Init+0x48>)
 8000d6e:	2208      	movs	r2, #8
 8000d70:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000d72:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <MX_I2S2_Init+0x48>)
 8000d74:	f001 fc0c 	bl	8002590 <HAL_I2S_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8000d7e:	f000 f9e3 	bl	8001148 <Error_Handler>
//   SPI2->I2SPR = 1;   // I2SDIV = 1, ODD = 0
//   __HAL_I2S_ENABLE(&hi2s2);

  /* USER CODE END I2S2_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200032e0 	.word	0x200032e0
 8000d8c:	40003800 	.word	0x40003800

08000d90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b094      	sub	sp, #80	@ 0x50
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d96:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000da4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db4:	f107 0320 	add.w	r3, r7, #32
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]
 8000dce:	615a      	str	r2, [r3, #20]
 8000dd0:	619a      	str	r2, [r3, #24]
  //htim2.Init.Prescaler         = VID_HSIZE/4 - 1; // 32/4 -1 = 7
  //htim2.Init.Period            = 2*VID_VSIZE - 1; // 2*625-1 = 1249
  //sConfigOC.Pulse      = VID_VSIZE - 1;

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dd2:	4b38      	ldr	r3, [pc, #224]	@ (8000eb4 <MX_TIM2_Init+0x124>)
 8000dd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VID_HSIZE/4 - 1; // 32/4 -1 = 7
 8000dda:	4b36      	ldr	r3, [pc, #216]	@ (8000eb4 <MX_TIM2_Init+0x124>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de0:	4b34      	ldr	r3, [pc, #208]	@ (8000eb4 <MX_TIM2_Init+0x124>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2*VID_VSIZE - 1; // 2*625-1 = 1249
 8000de6:	4b33      	ldr	r3, [pc, #204]	@ (8000eb4 <MX_TIM2_Init+0x124>)
 8000de8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8000dec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000dee:	4b31      	ldr	r3, [pc, #196]	@ (8000eb4 <MX_TIM2_Init+0x124>)
 8000df0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000df4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb4 <MX_TIM2_Init+0x124>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dfc:	482d      	ldr	r0, [pc, #180]	@ (8000eb4 <MX_TIM2_Init+0x124>)
 8000dfe:	f003 fb55 	bl	80044ac <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000e08:	f000 f99e 	bl	8001148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE1;
 8000e0c:	2370      	movs	r3, #112	@ 0x70
 8000e0e:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e10:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e14:	4619      	mov	r1, r3
 8000e16:	4827      	ldr	r0, [pc, #156]	@ (8000eb4 <MX_TIM2_Init+0x124>)
 8000e18:	f004 f8ec 	bl	8004ff4 <HAL_TIM_ConfigClockSource>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000e22:	f000 f991 	bl	8001148 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e26:	4823      	ldr	r0, [pc, #140]	@ (8000eb4 <MX_TIM2_Init+0x124>)
 8000e28:	f003 fde2 	bl	80049f0 <HAL_TIM_PWM_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 8000e32:	f000 f989 	bl	8001148 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;//NEEDS TO BE CHECK WITH EXTERNAL1
 8000e36:	2306      	movs	r3, #6
 8000e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000e3a:	2370      	movs	r3, #112	@ 0x70
 8000e3c:	633b      	str	r3, [r7, #48]	@ 0x30
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	637b      	str	r3, [r7, #52]	@ 0x34
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	63bb      	str	r3, [r7, #56]	@ 0x38
  sSlaveConfig.TriggerFilter = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000e4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4818      	ldr	r0, [pc, #96]	@ (8000eb4 <MX_TIM2_Init+0x124>)
 8000e52:	f004 f9e5 	bl	8005220 <HAL_TIM_SlaveConfigSynchro>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8000e5c:	f000 f974 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF; // OC4Ref → TRGO;
 8000e60:	2370      	movs	r3, #112	@ 0x70
 8000e62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000e64:	2380      	movs	r3, #128	@ 0x80
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4811      	ldr	r0, [pc, #68]	@ (8000eb4 <MX_TIM2_Init+0x124>)
 8000e70:	f004 ff98 	bl	8005da4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000e7a:	f000 f965 	bl	8001148 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7e:	2360      	movs	r3, #96	@ 0x60
 8000e80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse =  VID_VSIZE - 1;
 8000e82:	f44f 731c 	mov.w	r3, #624	@ 0x270
 8000e86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	220c      	movs	r2, #12
 8000e94:	4619      	mov	r1, r3
 8000e96:	4807      	ldr	r0, [pc, #28]	@ (8000eb4 <MX_TIM2_Init+0x124>)
 8000e98:	f003 ff98 	bl	8004dcc <HAL_TIM_PWM_ConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM2_Init+0x116>
  {
    Error_Handler();
 8000ea2:	f000 f951 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ea6:	4803      	ldr	r0, [pc, #12]	@ (8000eb4 <MX_TIM2_Init+0x124>)
 8000ea8:	f000 fb0c 	bl	80014c4 <HAL_TIM_MspPostInit>

}
 8000eac:	bf00      	nop
 8000eae:	3750      	adds	r7, #80	@ 0x50
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	2000337c 	.word	0x2000337c

08000eb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b094      	sub	sp, #80	@ 0x50
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ebe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ecc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000edc:	f107 0320 	add.w	r3, r7, #32
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]
 8000ef6:	615a      	str	r2, [r3, #20]
 8000ef8:	619a      	str	r2, [r3, #24]

  //FOR CHANNEL 2:
  //sConfigOC.Pulse = HSYNCCOUNTS;

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000efa:	4b58      	ldr	r3, [pc, #352]	@ (800105c <MX_TIM3_Init+0x1a4>)
 8000efc:	4a58      	ldr	r2, [pc, #352]	@ (8001060 <MX_TIM3_Init+0x1a8>)
 8000efe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f00:	4b56      	ldr	r3, [pc, #344]	@ (800105c <MX_TIM3_Init+0x1a4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f06:	4b55      	ldr	r3, [pc, #340]	@ (800105c <MX_TIM3_Init+0x1a4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIMERCOUNTS - 1;
 8000f0c:	4b53      	ldr	r3, [pc, #332]	@ (800105c <MX_TIM3_Init+0x1a4>)
 8000f0e:	f641 52ff 	movw	r2, #7679	@ 0x1dff
 8000f12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f14:	4b51      	ldr	r3, [pc, #324]	@ (800105c <MX_TIM3_Init+0x1a4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1a:	4b50      	ldr	r3, [pc, #320]	@ (800105c <MX_TIM3_Init+0x1a4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f20:	484e      	ldr	r0, [pc, #312]	@ (800105c <MX_TIM3_Init+0x1a4>)
 8000f22:	f003 fac3 	bl	80044ac <HAL_TIM_Base_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f2c:	f000 f90c 	bl	8001148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f34:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f36:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4847      	ldr	r0, [pc, #284]	@ (800105c <MX_TIM3_Init+0x1a4>)
 8000f3e:	f004 f859 	bl	8004ff4 <HAL_TIM_ConfigClockSource>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f48:	f000 f8fe 	bl	8001148 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000f4c:	4843      	ldr	r0, [pc, #268]	@ (800105c <MX_TIM3_Init+0x1a4>)
 8000f4e:	f003 fb75 	bl	800463c <HAL_TIM_OC_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8000f58:	f000 f8f6 	bl	8001148 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f5c:	483f      	ldr	r0, [pc, #252]	@ (800105c <MX_TIM3_Init+0x1a4>)
 8000f5e:	f003 fd47 	bl	80049f0 <HAL_TIM_PWM_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000f68:	f000 f8ee 	bl	8001148 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000f6c:	2306      	movs	r3, #6
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000f70:	2310      	movs	r3, #16
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000f74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4838      	ldr	r0, [pc, #224]	@ (800105c <MX_TIM3_Init+0x1a4>)
 8000f7c:	f004 f950 	bl	8005220 <HAL_TIM_SlaveConfigSynchro>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000f86:	f000 f8df 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000f8e:	2380      	movs	r3, #128	@ 0x80
 8000f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f92:	f107 0320 	add.w	r3, r7, #32
 8000f96:	4619      	mov	r1, r3
 8000f98:	4830      	ldr	r0, [pc, #192]	@ (800105c <MX_TIM3_Init+0x1a4>)
 8000f9a:	f004 ff03 	bl	8005da4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000fa4:	f000 f8d0 	bl	8001148 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000fa8:	2330      	movs	r3, #48	@ 0x30
 8000faa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = NO_TOG;
 8000fac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4826      	ldr	r0, [pc, #152]	@ (800105c <MX_TIM3_Init+0x1a4>)
 8000fc2:	f003 fe89 	bl	8004cd8 <HAL_TIM_OC_ConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000fcc:	f000 f8bc 	bl	8001148 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd0:	2360      	movs	r3, #96	@ 0x60
 8000fd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = HSYNCCOUNTS;//HSYNCCOUNTS;
 8000fd4:	f44f 730d 	mov.w	r3, #564	@ 0x234
 8000fd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2204      	movs	r2, #4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481e      	ldr	r0, [pc, #120]	@ (800105c <MX_TIM3_Init+0x1a4>)
 8000fe2:	f003 fef3 	bl	8004dcc <HAL_TIM_PWM_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM3_Init+0x138>
  {
    Error_Handler();
 8000fec:	f000 f8ac 	bl	8001148 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1100;//208;
 8000ff4:	f240 434c 	movw	r3, #1100	@ 0x44c
 8000ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2208      	movs	r2, #8
 8000ffe:	4619      	mov	r1, r3
 8001000:	4816      	ldr	r0, [pc, #88]	@ (800105c <MX_TIM3_Init+0x1a4>)
 8001002:	f003 fe69 	bl	8004cd8 <HAL_TIM_OC_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM3_Init+0x158>
  {
    Error_Handler();
 800100c:	f000 f89c 	bl	8001148 <Error_Handler>
  }
  sConfigOC.Pulse = 7200;//(672+208);//(672+208);
 8001010:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 8001014:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	220c      	movs	r2, #12
 800101a:	4619      	mov	r1, r3
 800101c:	480f      	ldr	r0, [pc, #60]	@ (800105c <MX_TIM3_Init+0x1a4>)
 800101e:	f003 fe5b 	bl	8004cd8 <HAL_TIM_OC_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM3_Init+0x174>
  {
    Error_Handler();
 8001028:	f000 f88e 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  //TIM_DMACmd(TIM3, TIM_DMA_CC1|TIM_DMA_CC3, ENABLE);
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800102c:	480b      	ldr	r0, [pc, #44]	@ (800105c <MX_TIM3_Init+0x1a4>)
 800102e:	f000 fa49 	bl	80014c4 <HAL_TIM_MspPostInit>
  /* Allow TIM3 Compare-3 (CC3) and Compare-4 (CC4) events to generate DMA requests */
  //__HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC2);
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC3);   // CC3DE bit → DMA request on CC3
 8001032:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <MX_TIM3_Init+0x1a4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	4b08      	ldr	r3, [pc, #32]	@ (800105c <MX_TIM3_Init+0x1a4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001040:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_CC4);   // CC4DE bit → DMA request on CC4
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <MX_TIM3_Init+0x1a4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	4b04      	ldr	r3, [pc, #16]	@ (800105c <MX_TIM3_Init+0x1a4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001050:	60da      	str	r2, [r3, #12]
  //__HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
  //__HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);

}
 8001052:	bf00      	nop
 8001054:	3750      	adds	r7, #80	@ 0x50
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200033c8 	.word	0x200033c8
 8001060:	40000400 	.word	0x40000400

08001064 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800106a:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <MX_DMA_Init+0x80>)
 800106c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800106e:	4a1d      	ldr	r2, [pc, #116]	@ (80010e4 <MX_DMA_Init+0x80>)
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	6493      	str	r3, [r2, #72]	@ 0x48
 8001076:	4b1b      	ldr	r3, [pc, #108]	@ (80010e4 <MX_DMA_Init+0x80>)
 8001078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001082:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <MX_DMA_Init+0x80>)
 8001084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001086:	4a17      	ldr	r2, [pc, #92]	@ (80010e4 <MX_DMA_Init+0x80>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6493      	str	r3, [r2, #72]	@ 0x48
 800108e:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <MX_DMA_Init+0x80>)
 8001090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	200c      	movs	r0, #12
 80010a0:	f000 fc91 	bl	80019c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010a4:	200c      	movs	r0, #12
 80010a6:	f000 fca8 	bl	80019fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	200d      	movs	r0, #13
 80010b0:	f000 fc89 	bl	80019c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010b4:	200d      	movs	r0, #13
 80010b6:	f000 fca0 	bl	80019fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	200f      	movs	r0, #15
 80010c0:	f000 fc81 	bl	80019c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010c4:	200f      	movs	r0, #15
 80010c6:	f000 fc98 	bl	80019fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2010      	movs	r0, #16
 80010d0:	f000 fc79 	bl	80019c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80010d4:	2010      	movs	r0, #16
 80010d6:	f000 fc90 	bl	80019fa <HAL_NVIC_EnableIRQ>

}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000

080010e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <MX_GPIO_Init+0x5c>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	4a14      	ldr	r2, [pc, #80]	@ (8001144 <MX_GPIO_Init+0x5c>)
 80010f4:	f043 0320 	orr.w	r3, r3, #32
 80010f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fa:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <MX_GPIO_Init+0x5c>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	f003 0320 	and.w	r3, r3, #32
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <MX_GPIO_Init+0x5c>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	4a0e      	ldr	r2, [pc, #56]	@ (8001144 <MX_GPIO_Init+0x5c>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001112:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <MX_GPIO_Init+0x5c>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <MX_GPIO_Init+0x5c>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	4a08      	ldr	r2, [pc, #32]	@ (8001144 <MX_GPIO_Init+0x5c>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <MX_GPIO_Init+0x5c>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */


  /* USER CODE END MX_GPIO_Init_2 */
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000

08001148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <Error_Handler+0x8>

08001154 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <HAL_MspInit+0x44>)
 800115c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800115e:	4a0e      	ldr	r2, [pc, #56]	@ (8001198 <HAL_MspInit+0x44>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6613      	str	r3, [r2, #96]	@ 0x60
 8001166:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <HAL_MspInit+0x44>)
 8001168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <HAL_MspInit+0x44>)
 8001174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001176:	4a08      	ldr	r2, [pc, #32]	@ (8001198 <HAL_MspInit+0x44>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800117c:	6593      	str	r3, [r2, #88]	@ 0x58
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_MspInit+0x44>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800118a:	f001 fcc5 	bl	8002b18 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000

0800119c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b09e      	sub	sp, #120	@ 0x78
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	2254      	movs	r2, #84	@ 0x54
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f004 fe87 	bl	8005ed0 <memset>
  if(hi2s->Instance==SPI2)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a35      	ldr	r2, [pc, #212]	@ (800129c <HAL_I2S_MspInit+0x100>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d163      	bne.n	8001294 <HAL_I2S_MspInit+0xf8>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80011cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 f9da 	bl	8003594 <HAL_RCCEx_PeriphCLKConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 80011e6:	f7ff ffaf 	bl	8001148 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011ea:	4b2d      	ldr	r3, [pc, #180]	@ (80012a0 <HAL_I2S_MspInit+0x104>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ee:	4a2c      	ldr	r2, [pc, #176]	@ (80012a0 <HAL_I2S_MspInit+0x104>)
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011f6:	4b2a      	ldr	r3, [pc, #168]	@ (80012a0 <HAL_I2S_MspInit+0x104>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	4b27      	ldr	r3, [pc, #156]	@ (80012a0 <HAL_I2S_MspInit+0x104>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001206:	4a26      	ldr	r2, [pc, #152]	@ (80012a0 <HAL_I2S_MspInit+0x104>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120e:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <HAL_I2S_MspInit+0x104>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800121a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800121e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800122c:	2305      	movs	r3, #5
 800122e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001234:	4619      	mov	r1, r3
 8001236:	481b      	ldr	r0, [pc, #108]	@ (80012a4 <HAL_I2S_MspInit+0x108>)
 8001238:	f000 ff46 	bl	80020c8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800123c:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <HAL_I2S_MspInit+0x10c>)
 800123e:	4a1b      	ldr	r2, [pc, #108]	@ (80012ac <HAL_I2S_MspInit+0x110>)
 8001240:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001242:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <HAL_I2S_MspInit+0x10c>)
 8001244:	220d      	movs	r2, #13
 8001246:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <HAL_I2S_MspInit+0x10c>)
 800124a:	2210      	movs	r2, #16
 800124c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800124e:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <HAL_I2S_MspInit+0x10c>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001254:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <HAL_I2S_MspInit+0x10c>)
 8001256:	2280      	movs	r2, #128	@ 0x80
 8001258:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <HAL_I2S_MspInit+0x10c>)
 800125c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001260:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <HAL_I2S_MspInit+0x10c>)
 8001264:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001268:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <HAL_I2S_MspInit+0x10c>)
 800126c:	2220      	movs	r2, #32
 800126e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001270:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <HAL_I2S_MspInit+0x10c>)
 8001272:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001276:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001278:	480b      	ldr	r0, [pc, #44]	@ (80012a8 <HAL_I2S_MspInit+0x10c>)
 800127a:	f000 fbd9 	bl	8001a30 <HAL_DMA_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_I2S_MspInit+0xec>
    {
      Error_Handler();
 8001284:	f7ff ff60 	bl	8001148 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a07      	ldr	r2, [pc, #28]	@ (80012a8 <HAL_I2S_MspInit+0x10c>)
 800128c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800128e:	4a06      	ldr	r2, [pc, #24]	@ (80012a8 <HAL_I2S_MspInit+0x10c>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001294:	bf00      	nop
 8001296:	3778      	adds	r7, #120	@ 0x78
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40003800 	.word	0x40003800
 80012a0:	40021000 	.word	0x40021000
 80012a4:	48000400 	.word	0x48000400
 80012a8:	2000331c 	.word	0x2000331c
 80012ac:	40020058 	.word	0x40020058

080012b0 <HAL_I2S_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspDeInit(I2S_HandleTypeDef* hi2s)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance==SPI2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0b      	ldr	r2, [pc, #44]	@ (80012ec <HAL_I2S_MspDeInit+0x3c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d10f      	bne.n	80012e2 <HAL_I2S_MspDeInit+0x32>
  {
    /* USER CODE BEGIN SPI2_MspDeInit 0 */

    /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 80012c2:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <HAL_I2S_MspDeInit+0x40>)
 80012c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c6:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <HAL_I2S_MspDeInit+0x40>)
 80012c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80012cc:	6593      	str	r3, [r2, #88]	@ 0x58
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 80012ce:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 80012d2:	4808      	ldr	r0, [pc, #32]	@ (80012f4 <HAL_I2S_MspDeInit+0x44>)
 80012d4:	f001 f87a 	bl	80023cc <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(hi2s->hdmatx);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fc4f 	bl	8001b80 <HAL_DMA_DeInit>
    /* USER CODE BEGIN SPI2_MspDeInit 1 */

    /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40003800 	.word	0x40003800
 80012f0:	40021000 	.word	0x40021000
 80012f4:	48000400 	.word	0x48000400

080012f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	@ 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001318:	d129      	bne.n	800136e <HAL_TIM_Base_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800131a:	4b62      	ldr	r3, [pc, #392]	@ (80014a4 <HAL_TIM_Base_MspInit+0x1ac>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131e:	4a61      	ldr	r2, [pc, #388]	@ (80014a4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6593      	str	r3, [r2, #88]	@ 0x58
 8001326:	4b5f      	ldr	r3, [pc, #380]	@ (80014a4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	4b5c      	ldr	r3, [pc, #368]	@ (80014a4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	4a5b      	ldr	r2, [pc, #364]	@ (80014a4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133e:	4b59      	ldr	r3, [pc, #356]	@ (80014a4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800134a:	2301      	movs	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 800135a:	230e      	movs	r3, #14
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001368:	f000 feae 	bl	80020c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800136c:	e095      	b.n	800149a <HAL_TIM_Base_MspInit+0x1a2>
  else if(htim_base->Instance==TIM3)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a4d      	ldr	r2, [pc, #308]	@ (80014a8 <HAL_TIM_Base_MspInit+0x1b0>)
 8001374:	4293      	cmp	r3, r2
 8001376:	f040 8090 	bne.w	800149a <HAL_TIM_Base_MspInit+0x1a2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800137a:	4b4a      	ldr	r3, [pc, #296]	@ (80014a4 <HAL_TIM_Base_MspInit+0x1ac>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137e:	4a49      	ldr	r2, [pc, #292]	@ (80014a4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6593      	str	r3, [r2, #88]	@ 0x58
 8001386:	4b47      	ldr	r3, [pc, #284]	@ (80014a4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Channel6;
 8001392:	4b46      	ldr	r3, [pc, #280]	@ (80014ac <HAL_TIM_Base_MspInit+0x1b4>)
 8001394:	4a46      	ldr	r2, [pc, #280]	@ (80014b0 <HAL_TIM_Base_MspInit+0x1b8>)
 8001396:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001398:	4b44      	ldr	r3, [pc, #272]	@ (80014ac <HAL_TIM_Base_MspInit+0x1b4>)
 800139a:	223d      	movs	r2, #61	@ 0x3d
 800139c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800139e:	4b43      	ldr	r3, [pc, #268]	@ (80014ac <HAL_TIM_Base_MspInit+0x1b4>)
 80013a0:	2210      	movs	r2, #16
 80013a2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a4:	4b41      	ldr	r3, [pc, #260]	@ (80014ac <HAL_TIM_Base_MspInit+0x1b4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80013aa:	4b40      	ldr	r3, [pc, #256]	@ (80014ac <HAL_TIM_Base_MspInit+0x1b4>)
 80013ac:	2280      	movs	r2, #128	@ 0x80
 80013ae:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013b0:	4b3e      	ldr	r3, [pc, #248]	@ (80014ac <HAL_TIM_Base_MspInit+0x1b4>)
 80013b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013b6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013b8:	4b3c      	ldr	r3, [pc, #240]	@ (80014ac <HAL_TIM_Base_MspInit+0x1b4>)
 80013ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013be:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_CIRCULAR;
 80013c0:	4b3a      	ldr	r3, [pc, #232]	@ (80014ac <HAL_TIM_Base_MspInit+0x1b4>)
 80013c2:	2220      	movs	r2, #32
 80013c4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013c6:	4b39      	ldr	r3, [pc, #228]	@ (80014ac <HAL_TIM_Base_MspInit+0x1b4>)
 80013c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80013ce:	4837      	ldr	r0, [pc, #220]	@ (80014ac <HAL_TIM_Base_MspInit+0x1b4>)
 80013d0:	f000 fb2e 	bl	8001a30 <HAL_DMA_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_TIM_Base_MspInit+0xe6>
      Error_Handler();
 80013da:	f7ff feb5 	bl	8001148 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a32      	ldr	r2, [pc, #200]	@ (80014ac <HAL_TIM_Base_MspInit+0x1b4>)
 80013e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80013e4:	4a31      	ldr	r2, [pc, #196]	@ (80014ac <HAL_TIM_Base_MspInit+0x1b4>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 80013ea:	4b32      	ldr	r3, [pc, #200]	@ (80014b4 <HAL_TIM_Base_MspInit+0x1bc>)
 80013ec:	4a32      	ldr	r2, [pc, #200]	@ (80014b8 <HAL_TIM_Base_MspInit+0x1c0>)
 80013ee:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 80013f0:	4b30      	ldr	r3, [pc, #192]	@ (80014b4 <HAL_TIM_Base_MspInit+0x1bc>)
 80013f2:	223f      	movs	r2, #63	@ 0x3f
 80013f4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013f6:	4b2f      	ldr	r3, [pc, #188]	@ (80014b4 <HAL_TIM_Base_MspInit+0x1bc>)
 80013f8:	2210      	movs	r2, #16
 80013fa:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fc:	4b2d      	ldr	r3, [pc, #180]	@ (80014b4 <HAL_TIM_Base_MspInit+0x1bc>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001402:	4b2c      	ldr	r3, [pc, #176]	@ (80014b4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001404:	2280      	movs	r2, #128	@ 0x80
 8001406:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001408:	4b2a      	ldr	r3, [pc, #168]	@ (80014b4 <HAL_TIM_Base_MspInit+0x1bc>)
 800140a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800140e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001410:	4b28      	ldr	r3, [pc, #160]	@ (80014b4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001412:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001416:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8001418:	4b26      	ldr	r3, [pc, #152]	@ (80014b4 <HAL_TIM_Base_MspInit+0x1bc>)
 800141a:	2220      	movs	r2, #32
 800141c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 800141e:	4b25      	ldr	r3, [pc, #148]	@ (80014b4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001420:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001424:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8001426:	4823      	ldr	r0, [pc, #140]	@ (80014b4 <HAL_TIM_Base_MspInit+0x1bc>)
 8001428:	f000 fb02 	bl	8001a30 <HAL_DMA_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_TIM_Base_MspInit+0x13e>
      Error_Handler();
 8001432:	f7ff fe89 	bl	8001148 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a1e      	ldr	r2, [pc, #120]	@ (80014b4 <HAL_TIM_Base_MspInit+0x1bc>)
 800143a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800143c:	4a1d      	ldr	r2, [pc, #116]	@ (80014b4 <HAL_TIM_Base_MspInit+0x1bc>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim3_ch4.Instance = DMA1_Channel3;
 8001442:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <HAL_TIM_Base_MspInit+0x1c4>)
 8001444:	4a1e      	ldr	r2, [pc, #120]	@ (80014c0 <HAL_TIM_Base_MspInit+0x1c8>)
 8001446:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 8001448:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <HAL_TIM_Base_MspInit+0x1c4>)
 800144a:	2240      	movs	r2, #64	@ 0x40
 800144c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800144e:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <HAL_TIM_Base_MspInit+0x1c4>)
 8001450:	2210      	movs	r2, #16
 8001452:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001454:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <HAL_TIM_Base_MspInit+0x1c4>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800145a:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <HAL_TIM_Base_MspInit+0x1c4>)
 800145c:	2280      	movs	r2, #128	@ 0x80
 800145e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001460:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <HAL_TIM_Base_MspInit+0x1c4>)
 8001462:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001466:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001468:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <HAL_TIM_Base_MspInit+0x1c4>)
 800146a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800146e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_CIRCULAR;
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <HAL_TIM_Base_MspInit+0x1c4>)
 8001472:	2220      	movs	r2, #32
 8001474:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001476:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <HAL_TIM_Base_MspInit+0x1c4>)
 8001478:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800147c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 800147e:	480f      	ldr	r0, [pc, #60]	@ (80014bc <HAL_TIM_Base_MspInit+0x1c4>)
 8001480:	f000 fad6 	bl	8001a30 <HAL_DMA_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_TIM_Base_MspInit+0x196>
      Error_Handler();
 800148a:	f7ff fe5d 	bl	8001148 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <HAL_TIM_Base_MspInit+0x1c4>)
 8001492:	631a      	str	r2, [r3, #48]	@ 0x30
 8001494:	4a09      	ldr	r2, [pc, #36]	@ (80014bc <HAL_TIM_Base_MspInit+0x1c4>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	@ 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40000400 	.word	0x40000400
 80014ac:	20003414 	.word	0x20003414
 80014b0:	4002006c 	.word	0x4002006c
 80014b4:	20003474 	.word	0x20003474
 80014b8:	4002001c 	.word	0x4002001c
 80014bc:	200034d4 	.word	0x200034d4
 80014c0:	40020030 	.word	0x40020030

080014c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	@ 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014e4:	d11d      	bne.n	8001522 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b22      	ldr	r3, [pc, #136]	@ (8001570 <HAL_TIM_MspPostInit+0xac>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	4a21      	ldr	r2, [pc, #132]	@ (8001570 <HAL_TIM_MspPostInit+0xac>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001570 <HAL_TIM_MspPostInit+0xac>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014fe:	2308      	movs	r3, #8
 8001500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800150e:	2301      	movs	r3, #1
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151c:	f000 fdd4 	bl	80020c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001520:	e021      	b.n	8001566 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a13      	ldr	r2, [pc, #76]	@ (8001574 <HAL_TIM_MspPostInit+0xb0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d11c      	bne.n	8001566 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <HAL_TIM_MspPostInit+0xac>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001530:	4a0f      	ldr	r2, [pc, #60]	@ (8001570 <HAL_TIM_MspPostInit+0xac>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001538:	4b0d      	ldr	r3, [pc, #52]	@ (8001570 <HAL_TIM_MspPostInit+0xac>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001544:	2350      	movs	r3, #80	@ 0x50
 8001546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001548:	2312      	movs	r3, #18
 800154a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001554:	2302      	movs	r3, #2
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001562:	f000 fdb1 	bl	80020c8 <HAL_GPIO_Init>
}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	@ 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	40000400 	.word	0x40000400

08001578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <NMI_Handler+0x4>

08001580 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <HardFault_Handler+0x4>

08001588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <MemManage_Handler+0x4>

08001590 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <BusFault_Handler+0x4>

08001598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <UsageFault_Handler+0x4>

080015a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d0:	f000 f8de 	bl	8001790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (TimingDelay != 0) {
 80015d4:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <SysTick_Handler+0x20>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d004      	beq.n	80015e6 <SysTick_Handler+0x1a>
    --TimingDelay;
 80015dc:	4b03      	ldr	r3, [pc, #12]	@ (80015ec <SysTick_Handler+0x20>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	4a02      	ldr	r2, [pc, #8]	@ (80015ec <SysTick_Handler+0x20>)
 80015e4:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20003534 	.word	0x20003534

080015f0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 80015f4:	4802      	ldr	r0, [pc, #8]	@ (8001600 <DMA1_Channel2_IRQHandler+0x10>)
 80015f6:	f000 fc17 	bl	8001e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20003474 	.word	0x20003474

08001604 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 8001608:	4802      	ldr	r0, [pc, #8]	@ (8001614 <DMA1_Channel3_IRQHandler+0x10>)
 800160a:	f000 fc0d 	bl	8001e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200034d4 	.word	0x200034d4

08001618 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800161c:	4802      	ldr	r0, [pc, #8]	@ (8001628 <DMA1_Channel5_IRQHandler+0x10>)
 800161e:	f000 fc03 	bl	8001e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000331c 	.word	0x2000331c

0800162c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8001630:	4802      	ldr	r0, [pc, #8]	@ (800163c <DMA1_Channel6_IRQHandler+0x10>)
 8001632:	f000 fbf9 	bl	8001e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20003414 	.word	0x20003414

08001640 <TIM3_IRQHandler>:
//  }
//}


void TIM3_IRQHandler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
//		TIM3->SR = TIM_IT_CC4;// ~TIM_IT_CC1;		// clear all but Update
//	// scope output on high
//	} else
//		TIM3->SR = 0;					// other interrupts not of interest
	  //HAL_TIM_IRQHandler(&htim3);
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <SystemInit+0x20>)
 8001656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800165a:	4a05      	ldr	r2, [pc, #20]	@ (8001670 <SystemInit+0x20>)
 800165c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001660:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <vidClearScreen>:
/* Private functions ---------------------------------------------------------*/



void vidClearScreen(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	{
		fb[line]				[0] = 0b1111111111111110;
		fb[line]  [XFERS_PERLINE-1] = 0b1111111111111110;
	}
#else
	memset(screen,0xFF,sizeof(screen));
 8001678:	f242 7260 	movw	r2, #10080	@ 0x2760
 800167c:	21ff      	movs	r1, #255	@ 0xff
 800167e:	4802      	ldr	r0, [pc, #8]	@ (8001688 <vidClearScreen+0x14>)
 8001680:	f004 fc26 	bl	8005ed0 <memset>
#endif

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000000 	.word	0x20000000

0800168c <vt100_init>:
 * screen and resets the cursor.  Call this after initialising
 * your peripherals (e.g. UART, LCD) and before feeding any data
 * into the parser.
 */
void vt100_init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
     * function defined in gdi_vt100.c will clear the framebuffer
     * and position the cursor at (0,0).  If you wish to perform
     * additional initialisation (e.g. setting text colours), do it
     * here.
     */
    gdiClearScreen();
 8001690:	f7ff f92c 	bl	80008ec <gdiClearScreen>
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001698:	480d      	ldr	r0, [pc, #52]	@ (80016d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800169a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800169c:	f7ff ffd8 	bl	8001650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a0:	480c      	ldr	r0, [pc, #48]	@ (80016d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80016a2:	490d      	ldr	r1, [pc, #52]	@ (80016d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016a4:	4a0d      	ldr	r2, [pc, #52]	@ (80016dc <LoopForever+0xe>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016a8:	e002      	b.n	80016b0 <LoopCopyDataInit>

080016aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ae:	3304      	adds	r3, #4

080016b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b4:	d3f9      	bcc.n	80016aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b6:	4a0a      	ldr	r2, [pc, #40]	@ (80016e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016b8:	4c0a      	ldr	r4, [pc, #40]	@ (80016e4 <LoopForever+0x16>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016bc:	e001      	b.n	80016c2 <LoopFillZerobss>

080016be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c0:	3204      	adds	r2, #4

080016c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c4:	d3fb      	bcc.n	80016be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016c6:	f004 fc0b 	bl	8005ee0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ca:	f7ff fa51 	bl	8000b70 <main>

080016ce <LoopForever>:

LoopForever:
    b LoopForever
 80016ce:	e7fe      	b.n	80016ce <LoopForever>
  ldr   r0, =_estack
 80016d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d4:	20002760 	.word	0x20002760
  ldr r1, =_edata
 80016d8:	200032b4 	.word	0x200032b4
  ldr r2, =_sidata
 80016dc:	08006890 	.word	0x08006890
  ldr r2, =_sbss
 80016e0:	200032b4 	.word	0x200032b4
  ldr r4, =_ebss
 80016e4:	2000357c 	.word	0x2000357c

080016e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016e8:	e7fe      	b.n	80016e8 <ADC1_2_IRQHandler>

080016ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f4:	2003      	movs	r0, #3
 80016f6:	f000 f95b 	bl	80019b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016fa:	200f      	movs	r0, #15
 80016fc:	f000 f80e 	bl	800171c <HAL_InitTick>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	71fb      	strb	r3, [r7, #7]
 800170a:	e001      	b.n	8001710 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800170c:	f7ff fd22 	bl	8001154 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001710:	79fb      	ldrb	r3, [r7, #7]

}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001728:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <HAL_InitTick+0x68>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d022      	beq.n	8001776 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001730:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <HAL_InitTick+0x6c>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <HAL_InitTick+0x68>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800173c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001740:	fbb2 f3f3 	udiv	r3, r2, r3
 8001744:	4618      	mov	r0, r3
 8001746:	f000 f966 	bl	8001a16 <HAL_SYSTICK_Config>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10f      	bne.n	8001770 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b0f      	cmp	r3, #15
 8001754:	d809      	bhi.n	800176a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001756:	2200      	movs	r2, #0
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800175e:	f000 f932 	bl	80019c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001762:	4a0a      	ldr	r2, [pc, #40]	@ (800178c <HAL_InitTick+0x70>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	e007      	b.n	800177a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	73fb      	strb	r3, [r7, #15]
 800176e:	e004      	b.n	800177a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e001      	b.n	800177a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200032b0 	.word	0x200032b0
 8001788:	20002764 	.word	0x20002764
 800178c:	200032ac 	.word	0x200032ac

08001790 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001794:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <HAL_IncTick+0x1c>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <HAL_IncTick+0x20>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4413      	add	r3, r2
 800179e:	4a03      	ldr	r2, [pc, #12]	@ (80017ac <HAL_IncTick+0x1c>)
 80017a0:	6013      	str	r3, [r2, #0]
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	20003578 	.word	0x20003578
 80017b0:	200032b0 	.word	0x200032b0

080017b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return uwTick;
 80017b8:	4b03      	ldr	r3, [pc, #12]	@ (80017c8 <HAL_GetTick+0x14>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20003578 	.word	0x20003578

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff ffee 	bl	80017b4 <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017e4:	d004      	beq.n	80017f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <HAL_Delay+0x40>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	4413      	add	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017f0:	bf00      	nop
 80017f2:	f7ff ffdf 	bl	80017b4 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d8f7      	bhi.n	80017f2 <HAL_Delay+0x26>
  {
  }
}
 8001802:	bf00      	nop
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200032b0 	.word	0x200032b0

08001810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001820:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800182c:	4013      	ands	r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001838:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800183c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001842:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	60d3      	str	r3, [r2, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800185c:	4b04      	ldr	r3, [pc, #16]	@ (8001870 <__NVIC_GetPriorityGrouping+0x18>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	f003 0307 	and.w	r3, r3, #7
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	2b00      	cmp	r3, #0
 8001884:	db0b      	blt.n	800189e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	f003 021f 	and.w	r2, r3, #31
 800188c:	4907      	ldr	r1, [pc, #28]	@ (80018ac <__NVIC_EnableIRQ+0x38>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	2001      	movs	r0, #1
 8001896:	fa00 f202 	lsl.w	r2, r0, r2
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000e100 	.word	0xe000e100

080018b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	db0a      	blt.n	80018da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	490c      	ldr	r1, [pc, #48]	@ (80018fc <__NVIC_SetPriority+0x4c>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	0112      	lsls	r2, r2, #4
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	440b      	add	r3, r1
 80018d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d8:	e00a      	b.n	80018f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4908      	ldr	r1, [pc, #32]	@ (8001900 <__NVIC_SetPriority+0x50>)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	3b04      	subs	r3, #4
 80018e8:	0112      	lsls	r2, r2, #4
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	440b      	add	r3, r1
 80018ee:	761a      	strb	r2, [r3, #24]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000e100 	.word	0xe000e100
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	@ 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f1c3 0307 	rsb	r3, r3, #7
 800191e:	2b04      	cmp	r3, #4
 8001920:	bf28      	it	cs
 8001922:	2304      	movcs	r3, #4
 8001924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3304      	adds	r3, #4
 800192a:	2b06      	cmp	r3, #6
 800192c:	d902      	bls.n	8001934 <NVIC_EncodePriority+0x30>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3b03      	subs	r3, #3
 8001932:	e000      	b.n	8001936 <NVIC_EncodePriority+0x32>
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	401a      	ands	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800194c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	43d9      	mvns	r1, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	4313      	orrs	r3, r2
         );
}
 800195e:	4618      	mov	r0, r3
 8001960:	3724      	adds	r7, #36	@ 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800197c:	d301      	bcc.n	8001982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197e:	2301      	movs	r3, #1
 8001980:	e00f      	b.n	80019a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001982:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <SysTick_Config+0x40>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198a:	210f      	movs	r1, #15
 800198c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001990:	f7ff ff8e 	bl	80018b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <SysTick_Config+0x40>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199a:	4b04      	ldr	r3, [pc, #16]	@ (80019ac <SysTick_Config+0x40>)
 800199c:	2207      	movs	r2, #7
 800199e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	e000e010 	.word	0xe000e010

080019b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ff29 	bl	8001810 <__NVIC_SetPriorityGrouping>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019d4:	f7ff ff40 	bl	8001858 <__NVIC_GetPriorityGrouping>
 80019d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	6978      	ldr	r0, [r7, #20]
 80019e0:	f7ff ff90 	bl	8001904 <NVIC_EncodePriority>
 80019e4:	4602      	mov	r2, r0
 80019e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff5f 	bl	80018b0 <__NVIC_SetPriority>
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff33 	bl	8001874 <__NVIC_EnableIRQ>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ffa4 	bl	800196c <SysTick_Config>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e08d      	b.n	8001b5e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b47      	ldr	r3, [pc, #284]	@ (8001b68 <HAL_DMA_Init+0x138>)
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d80f      	bhi.n	8001a6e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b45      	ldr	r3, [pc, #276]	@ (8001b6c <HAL_DMA_Init+0x13c>)
 8001a56:	4413      	add	r3, r2
 8001a58:	4a45      	ldr	r2, [pc, #276]	@ (8001b70 <HAL_DMA_Init+0x140>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	009a      	lsls	r2, r3, #2
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a42      	ldr	r2, [pc, #264]	@ (8001b74 <HAL_DMA_Init+0x144>)
 8001a6a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a6c:	e00e      	b.n	8001a8c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b40      	ldr	r3, [pc, #256]	@ (8001b78 <HAL_DMA_Init+0x148>)
 8001a76:	4413      	add	r3, r2
 8001a78:	4a3d      	ldr	r2, [pc, #244]	@ (8001b70 <HAL_DMA_Init+0x140>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	091b      	lsrs	r3, r3, #4
 8001a80:	009a      	lsls	r2, r3, #2
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a3c      	ldr	r2, [pc, #240]	@ (8001b7c <HAL_DMA_Init+0x14c>)
 8001a8a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001aa6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 fa90 	bl	8002004 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001aec:	d102      	bne.n	8001af4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b08:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d010      	beq.n	8001b34 <HAL_DMA_Init+0x104>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d80c      	bhi.n	8001b34 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fab0 	bl	8002080 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	e008      	b.n	8001b46 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40020407 	.word	0x40020407
 8001b6c:	bffdfff8 	.word	0xbffdfff8
 8001b70:	cccccccd 	.word	0xcccccccd
 8001b74:	40020000 	.word	0x40020000
 8001b78:	bffdfbf8 	.word	0xbffdfbf8
 8001b7c:	40020400 	.word	0x40020400

08001b80 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e07b      	b.n	8001c8a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0201 	bic.w	r2, r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b3a      	ldr	r3, [pc, #232]	@ (8001c94 <HAL_DMA_DeInit+0x114>)
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d80f      	bhi.n	8001bce <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b38      	ldr	r3, [pc, #224]	@ (8001c98 <HAL_DMA_DeInit+0x118>)
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4a38      	ldr	r2, [pc, #224]	@ (8001c9c <HAL_DMA_DeInit+0x11c>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	091b      	lsrs	r3, r3, #4
 8001bc0:	009a      	lsls	r2, r3, #2
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a35      	ldr	r2, [pc, #212]	@ (8001ca0 <HAL_DMA_DeInit+0x120>)
 8001bca:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bcc:	e00e      	b.n	8001bec <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4b33      	ldr	r3, [pc, #204]	@ (8001ca4 <HAL_DMA_DeInit+0x124>)
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4a30      	ldr	r2, [pc, #192]	@ (8001c9c <HAL_DMA_DeInit+0x11c>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	009a      	lsls	r2, r3, #2
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a2f      	ldr	r2, [pc, #188]	@ (8001ca8 <HAL_DMA_DeInit+0x128>)
 8001bea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf8:	f003 021f 	and.w	r2, r3, #31
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f202 	lsl.w	r2, r1, r2
 8001c06:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f9fb 	bl	8002004 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c1e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00f      	beq.n	8001c48 <HAL_DMA_DeInit+0xc8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d80b      	bhi.n	8001c48 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 fa25 	bl	8002080 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c46:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40020407 	.word	0x40020407
 8001c98:	bffdfff8 	.word	0xbffdfff8
 8001c9c:	cccccccd 	.word	0xcccccccd
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	bffdfbf8 	.word	0xbffdfbf8
 8001ca8:	40020400 	.word	0x40020400

08001cac <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_DMA_Start+0x20>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e02e      	b.n	8001d2a <HAL_DMA_Start+0x7e>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d11d      	bne.n	8001d1c <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0201 	bic.w	r2, r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 f93e 	bl	8001f86 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0201 	orr.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	e005      	b.n	8001d28 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    status = HAL_BUSY;
 8001d24:	2302      	movs	r3, #2
 8001d26:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_DMA_Start_IT+0x20>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e066      	b.n	8001e20 <HAL_DMA_Start_IT+0xee>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d155      	bne.n	8001e12 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 f8fb 	bl	8001f86 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 020e 	orr.w	r2, r2, #14
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	e00f      	b.n	8001dca <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0204 	bic.w	r2, r2, #4
 8001db8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 020a 	orr.w	r2, r2, #10
 8001dc8:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001de2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001de6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d007      	beq.n	8001e00 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dfe:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	e005      	b.n	8001e1e <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	2204      	movs	r2, #4
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d026      	beq.n	8001ea2 <HAL_DMA_IRQHandler+0x7a>
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d021      	beq.n	8001ea2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d107      	bne.n	8001e7c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0204 	bic.w	r2, r2, #4
 8001e7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e88:	2104      	movs	r1, #4
 8001e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d071      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001ea0:	e06c      	b.n	8001f7c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea6:	f003 031f 	and.w	r3, r3, #31
 8001eaa:	2202      	movs	r2, #2
 8001eac:	409a      	lsls	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d02e      	beq.n	8001f14 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d029      	beq.n	8001f14 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10b      	bne.n	8001ee6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 020a 	bic.w	r2, r2, #10
 8001edc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	f003 021f 	and.w	r2, r3, #31
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	2102      	movs	r1, #2
 8001ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d038      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001f12:	e033      	b.n	8001f7c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d02a      	beq.n	8001f7e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d025      	beq.n	8001f7e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 020e 	bic.w	r2, r2, #14
 8001f40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	f003 021f 	and.w	r2, r3, #31
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	2101      	movs	r1, #1
 8001f50:	fa01 f202 	lsl.w	r2, r1, r2
 8001f54:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d004      	beq.n	8001f7e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
}
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f9c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d004      	beq.n	8001fb0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001fae:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b10      	cmp	r3, #16
 8001fd2:	d108      	bne.n	8001fe6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fe4:	e007      	b.n	8001ff6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	60da      	str	r2, [r3, #12]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	4b16      	ldr	r3, [pc, #88]	@ (800206c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002014:	429a      	cmp	r2, r3
 8002016:	d802      	bhi.n	800201e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002018:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	e001      	b.n	8002022 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002020:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	3b08      	subs	r3, #8
 800202e:	4a12      	ldr	r2, [pc, #72]	@ (8002078 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002030:	fba2 2303 	umull	r2, r3, r2, r3
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	009a      	lsls	r2, r3, #2
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4413      	add	r3, r2
 8002044:	461a      	mov	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a0b      	ldr	r2, [pc, #44]	@ (800207c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800204e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 031f 	and.w	r3, r3, #31
 8002056:	2201      	movs	r2, #1
 8002058:	409a      	lsls	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800205e:	bf00      	nop
 8002060:	371c      	adds	r7, #28
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40020407 	.word	0x40020407
 8002070:	40020800 	.word	0x40020800
 8002074:	40020820 	.word	0x40020820
 8002078:	cccccccd 	.word	0xcccccccd
 800207c:	40020880 	.word	0x40020880

08002080 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	461a      	mov	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a08      	ldr	r2, [pc, #32]	@ (80020c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80020a2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	2201      	movs	r2, #1
 80020ae:	409a      	lsls	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	1000823f 	.word	0x1000823f
 80020c4:	40020940 	.word	0x40020940

080020c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020d6:	e15a      	b.n	800238e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2101      	movs	r1, #1
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	4013      	ands	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 814c 	beq.w	8002388 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d005      	beq.n	8002108 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002104:	2b02      	cmp	r3, #2
 8002106:	d130      	bne.n	800216a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800213e:	2201      	movs	r2, #1
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	f003 0201 	and.w	r2, r3, #1
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b03      	cmp	r3, #3
 8002174:	d017      	beq.n	80021a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	2203      	movs	r2, #3
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d123      	bne.n	80021fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	08da      	lsrs	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3208      	adds	r2, #8
 80021ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	220f      	movs	r2, #15
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	6939      	ldr	r1, [r7, #16]
 80021f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	2203      	movs	r2, #3
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0203 	and.w	r2, r3, #3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 80a6 	beq.w	8002388 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223c:	4b5b      	ldr	r3, [pc, #364]	@ (80023ac <HAL_GPIO_Init+0x2e4>)
 800223e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002240:	4a5a      	ldr	r2, [pc, #360]	@ (80023ac <HAL_GPIO_Init+0x2e4>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6613      	str	r3, [r2, #96]	@ 0x60
 8002248:	4b58      	ldr	r3, [pc, #352]	@ (80023ac <HAL_GPIO_Init+0x2e4>)
 800224a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002254:	4a56      	ldr	r2, [pc, #344]	@ (80023b0 <HAL_GPIO_Init+0x2e8>)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	3302      	adds	r3, #2
 800225c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	220f      	movs	r2, #15
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800227e:	d01f      	beq.n	80022c0 <HAL_GPIO_Init+0x1f8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a4c      	ldr	r2, [pc, #304]	@ (80023b4 <HAL_GPIO_Init+0x2ec>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d019      	beq.n	80022bc <HAL_GPIO_Init+0x1f4>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a4b      	ldr	r2, [pc, #300]	@ (80023b8 <HAL_GPIO_Init+0x2f0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d013      	beq.n	80022b8 <HAL_GPIO_Init+0x1f0>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a4a      	ldr	r2, [pc, #296]	@ (80023bc <HAL_GPIO_Init+0x2f4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d00d      	beq.n	80022b4 <HAL_GPIO_Init+0x1ec>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a49      	ldr	r2, [pc, #292]	@ (80023c0 <HAL_GPIO_Init+0x2f8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d007      	beq.n	80022b0 <HAL_GPIO_Init+0x1e8>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a48      	ldr	r2, [pc, #288]	@ (80023c4 <HAL_GPIO_Init+0x2fc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d101      	bne.n	80022ac <HAL_GPIO_Init+0x1e4>
 80022a8:	2305      	movs	r3, #5
 80022aa:	e00a      	b.n	80022c2 <HAL_GPIO_Init+0x1fa>
 80022ac:	2306      	movs	r3, #6
 80022ae:	e008      	b.n	80022c2 <HAL_GPIO_Init+0x1fa>
 80022b0:	2304      	movs	r3, #4
 80022b2:	e006      	b.n	80022c2 <HAL_GPIO_Init+0x1fa>
 80022b4:	2303      	movs	r3, #3
 80022b6:	e004      	b.n	80022c2 <HAL_GPIO_Init+0x1fa>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e002      	b.n	80022c2 <HAL_GPIO_Init+0x1fa>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <HAL_GPIO_Init+0x1fa>
 80022c0:	2300      	movs	r3, #0
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	f002 0203 	and.w	r2, r2, #3
 80022c8:	0092      	lsls	r2, r2, #2
 80022ca:	4093      	lsls	r3, r2
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022d2:	4937      	ldr	r1, [pc, #220]	@ (80023b0 <HAL_GPIO_Init+0x2e8>)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	089b      	lsrs	r3, r3, #2
 80022d8:	3302      	adds	r3, #2
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022e0:	4b39      	ldr	r3, [pc, #228]	@ (80023c8 <HAL_GPIO_Init+0x300>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002304:	4a30      	ldr	r2, [pc, #192]	@ (80023c8 <HAL_GPIO_Init+0x300>)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800230a:	4b2f      	ldr	r3, [pc, #188]	@ (80023c8 <HAL_GPIO_Init+0x300>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	43db      	mvns	r3, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800232e:	4a26      	ldr	r2, [pc, #152]	@ (80023c8 <HAL_GPIO_Init+0x300>)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002334:	4b24      	ldr	r3, [pc, #144]	@ (80023c8 <HAL_GPIO_Init+0x300>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002358:	4a1b      	ldr	r2, [pc, #108]	@ (80023c8 <HAL_GPIO_Init+0x300>)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800235e:	4b1a      	ldr	r3, [pc, #104]	@ (80023c8 <HAL_GPIO_Init+0x300>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002382:	4a11      	ldr	r2, [pc, #68]	@ (80023c8 <HAL_GPIO_Init+0x300>)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3301      	adds	r3, #1
 800238c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	f47f ae9d 	bne.w	80020d8 <HAL_GPIO_Init+0x10>
  }
}
 800239e:	bf00      	nop
 80023a0:	bf00      	nop
 80023a2:	371c      	adds	r7, #28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40010000 	.word	0x40010000
 80023b4:	48000400 	.word	0x48000400
 80023b8:	48000800 	.word	0x48000800
 80023bc:	48000c00 	.word	0x48000c00
 80023c0:	48001000 	.word	0x48001000
 80023c4:	48001400 	.word	0x48001400
 80023c8:	40010400 	.word	0x40010400

080023cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b087      	sub	sp, #28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80023da:	e0bd      	b.n	8002558 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80023dc:	2201      	movs	r2, #1
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80b0 	beq.w	8002552 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80023f2:	4a60      	ldr	r2, [pc, #384]	@ (8002574 <HAL_GPIO_DeInit+0x1a8>)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	089b      	lsrs	r3, r3, #2
 80023f8:	3302      	adds	r3, #2
 80023fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	220f      	movs	r2, #15
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4013      	ands	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800241a:	d01f      	beq.n	800245c <HAL_GPIO_DeInit+0x90>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a56      	ldr	r2, [pc, #344]	@ (8002578 <HAL_GPIO_DeInit+0x1ac>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d019      	beq.n	8002458 <HAL_GPIO_DeInit+0x8c>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a55      	ldr	r2, [pc, #340]	@ (800257c <HAL_GPIO_DeInit+0x1b0>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d013      	beq.n	8002454 <HAL_GPIO_DeInit+0x88>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a54      	ldr	r2, [pc, #336]	@ (8002580 <HAL_GPIO_DeInit+0x1b4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d00d      	beq.n	8002450 <HAL_GPIO_DeInit+0x84>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a53      	ldr	r2, [pc, #332]	@ (8002584 <HAL_GPIO_DeInit+0x1b8>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d007      	beq.n	800244c <HAL_GPIO_DeInit+0x80>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a52      	ldr	r2, [pc, #328]	@ (8002588 <HAL_GPIO_DeInit+0x1bc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d101      	bne.n	8002448 <HAL_GPIO_DeInit+0x7c>
 8002444:	2305      	movs	r3, #5
 8002446:	e00a      	b.n	800245e <HAL_GPIO_DeInit+0x92>
 8002448:	2306      	movs	r3, #6
 800244a:	e008      	b.n	800245e <HAL_GPIO_DeInit+0x92>
 800244c:	2304      	movs	r3, #4
 800244e:	e006      	b.n	800245e <HAL_GPIO_DeInit+0x92>
 8002450:	2303      	movs	r3, #3
 8002452:	e004      	b.n	800245e <HAL_GPIO_DeInit+0x92>
 8002454:	2302      	movs	r3, #2
 8002456:	e002      	b.n	800245e <HAL_GPIO_DeInit+0x92>
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <HAL_GPIO_DeInit+0x92>
 800245c:	2300      	movs	r3, #0
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	f002 0203 	and.w	r2, r2, #3
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	4093      	lsls	r3, r2
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	429a      	cmp	r2, r3
 800246c:	d132      	bne.n	80024d4 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800246e:	4b47      	ldr	r3, [pc, #284]	@ (800258c <HAL_GPIO_DeInit+0x1c0>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	4945      	ldr	r1, [pc, #276]	@ (800258c <HAL_GPIO_DeInit+0x1c0>)
 8002478:	4013      	ands	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800247c:	4b43      	ldr	r3, [pc, #268]	@ (800258c <HAL_GPIO_DeInit+0x1c0>)
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	4941      	ldr	r1, [pc, #260]	@ (800258c <HAL_GPIO_DeInit+0x1c0>)
 8002486:	4013      	ands	r3, r2
 8002488:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800248a:	4b40      	ldr	r3, [pc, #256]	@ (800258c <HAL_GPIO_DeInit+0x1c0>)
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	43db      	mvns	r3, r3
 8002492:	493e      	ldr	r1, [pc, #248]	@ (800258c <HAL_GPIO_DeInit+0x1c0>)
 8002494:	4013      	ands	r3, r2
 8002496:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002498:	4b3c      	ldr	r3, [pc, #240]	@ (800258c <HAL_GPIO_DeInit+0x1c0>)
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	43db      	mvns	r3, r3
 80024a0:	493a      	ldr	r1, [pc, #232]	@ (800258c <HAL_GPIO_DeInit+0x1c0>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	220f      	movs	r2, #15
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80024b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002574 <HAL_GPIO_DeInit+0x1a8>)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	3302      	adds	r3, #2
 80024be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	43da      	mvns	r2, r3
 80024c6:	482b      	ldr	r0, [pc, #172]	@ (8002574 <HAL_GPIO_DeInit+0x1a8>)
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	400a      	ands	r2, r1
 80024ce:	3302      	adds	r3, #2
 80024d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2103      	movs	r1, #3
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	08da      	lsrs	r2, r3, #3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3208      	adds	r2, #8
 80024f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	220f      	movs	r2, #15
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	08d2      	lsrs	r2, r2, #3
 8002508:	4019      	ands	r1, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3208      	adds	r2, #8
 800250e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2103      	movs	r1, #3
 800251c:	fa01 f303 	lsl.w	r3, r1, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	401a      	ands	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	2101      	movs	r1, #1
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	fa01 f303 	lsl.w	r3, r1, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	401a      	ands	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	2103      	movs	r1, #3
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	401a      	ands	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	3301      	adds	r3, #1
 8002556:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	f47f af3b 	bne.w	80023dc <HAL_GPIO_DeInit+0x10>
  }
}
 8002566:	bf00      	nop
 8002568:	bf00      	nop
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	40010000 	.word	0x40010000
 8002578:	48000400 	.word	0x48000400
 800257c:	48000800 	.word	0x48000800
 8002580:	48000c00 	.word	0x48000c00
 8002584:	48001000 	.word	0x48001000
 8002588:	48001400 	.word	0x48001400
 800258c:	40010400 	.word	0x40010400

08002590 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e0d0      	b.n	8002744 <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7fe fdf0 	bl	800119c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80025d2:	f023 030f 	bic.w	r3, r3, #15
 80025d6:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2202      	movs	r2, #2
 80025de:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d061      	beq.n	80026ac <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80025f0:	2310      	movs	r3, #16
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	e001      	b.n	80025fa <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80025f6:	2320      	movs	r3, #32
 80025f8:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d802      	bhi.n	8002608 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002608:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800260c:	f001 fa10 	bl	8003a30 <HAL_RCCEx_GetPeriphCLKFreq>
 8002610:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800261a:	d125      	bne.n	8002668 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d010      	beq.n	8002646 <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	fbb2 f2f3 	udiv	r2, r2, r3
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	461a      	mov	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	3305      	adds	r3, #5
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	e01f      	b.n	8002686 <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	461a      	mov	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	3305      	adds	r3, #5
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	e00e      	b.n	8002686 <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	461a      	mov	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002682:	3305      	adds	r3, #5
 8002684:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4a30      	ldr	r2, [pc, #192]	@ (800274c <HAL_I2S_Init+0x1bc>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	08db      	lsrs	r3, r3, #3
 8002690:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	085b      	lsrs	r3, r3, #1
 80026a2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	e003      	b.n	80026b4 <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80026ac:	2302      	movs	r3, #2
 80026ae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d902      	bls.n	80026c0 <HAL_I2S_Init+0x130>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	2bff      	cmp	r3, #255	@ 0xff
 80026be:	d907      	bls.n	80026d0 <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c4:	f043 0210 	orr.w	r2, r3, #16
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e039      	b.n	8002744 <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	ea42 0103 	orr.w	r1, r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80026ee:	f023 030f 	bic.w	r3, r3, #15
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6851      	ldr	r1, [r2, #4]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6892      	ldr	r2, [r2, #8]
 80026fa:	4311      	orrs	r1, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	68d2      	ldr	r2, [r2, #12]
 8002700:	4311      	orrs	r1, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6992      	ldr	r2, [r2, #24]
 8002706:	430a      	orrs	r2, r1
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002712:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b30      	cmp	r3, #48	@ 0x30
 800271a:	d003      	beq.n	8002724 <HAL_I2S_Init+0x194>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2bb0      	cmp	r3, #176	@ 0xb0
 8002722:	d107      	bne.n	8002734 <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69da      	ldr	r2, [r3, #28]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002732:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	cccccccd 	.word	0xcccccccd

08002750 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e01a      	b.n	8002798 <HAL_I2S_DeInit+0x48>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2202      	movs	r2, #2
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002778:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe fd98 	bl	80012b0 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	4613      	mov	r3, r2
 80027ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <HAL_I2S_Transmit_DMA+0x1a>
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e08a      	b.n	80028d4 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d001      	beq.n	80027ce <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
 80027cc:	e082      	b.n	80028d4 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_I2S_Transmit_DMA+0x3e>
 80027da:	2302      	movs	r3, #2
 80027dc:	e07a      	b.n	80028d4 <HAL_I2S_Transmit_DMA+0x134>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2203      	movs	r2, #3
 80027ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2b03      	cmp	r3, #3
 800280a:	d002      	beq.n	8002812 <HAL_I2S_Transmit_DMA+0x72>
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b05      	cmp	r3, #5
 8002810:	d10a      	bne.n	8002828 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 800281c:	88fb      	ldrh	r3, [r7, #6]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	845a      	strh	r2, [r3, #34]	@ 0x22
 8002826:	e005      	b.n	8002834 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	88fa      	ldrh	r2, [r7, #6]
 800282c:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	88fa      	ldrh	r2, [r7, #6]
 8002832:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002838:	4a28      	ldr	r2, [pc, #160]	@ (80028dc <HAL_I2S_Transmit_DMA+0x13c>)
 800283a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002840:	4a27      	ldr	r2, [pc, #156]	@ (80028e0 <HAL_I2S_Transmit_DMA+0x140>)
 8002842:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002848:	4a26      	ldr	r2, [pc, #152]	@ (80028e4 <HAL_I2S_Transmit_DMA+0x144>)
 800284a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002854:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800285c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8c1b      	ldrh	r3, [r3, #32]
 8002862:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002864:	f7ff fa65 	bl	8001d32 <HAL_DMA_Start_IT>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00f      	beq.n	800288e <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002872:	f043 0208 	orr.w	r2, r3, #8
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    __HAL_UNLOCK(hi2s);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e022      	b.n	80028d4 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d107      	bne.n	80028b4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0202 	orr.w	r2, r2, #2
 80028b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d107      	bne.n	80028d2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028d0:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	08002967 	.word	0x08002967
 80028e0:	08002925 	.word	0x08002925
 80028e4:	08002983 	.word	0x08002983

080028e8 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002930:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10e      	bne.n	8002958 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0202 	bic.w	r2, r2, #2
 8002948:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	845a      	strh	r2, [r3, #34]	@ 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f7ff ffcf 	bl	80028fc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800295e:	bf00      	nop
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002972:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f7ff ffb7 	bl	80028e8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800297a:	bf00      	nop
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0203 	bic.w	r2, r2, #3
 800299e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b8:	f043 0208 	orr.w	r2, r3, #8
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f7ff ffa5 	bl	8002910 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d141      	bne.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029de:	4b4b      	ldr	r3, [pc, #300]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ea:	d131      	bne.n	8002a50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029ec:	4b47      	ldr	r3, [pc, #284]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029f2:	4a46      	ldr	r2, [pc, #280]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029fc:	4b43      	ldr	r3, [pc, #268]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a04:	4a41      	ldr	r2, [pc, #260]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a0c:	4b40      	ldr	r3, [pc, #256]	@ (8002b10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2232      	movs	r2, #50	@ 0x32
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	4a3f      	ldr	r2, [pc, #252]	@ (8002b14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	0c9b      	lsrs	r3, r3, #18
 8002a1e:	3301      	adds	r3, #1
 8002a20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a22:	e002      	b.n	8002a2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a2a:	4b38      	ldr	r3, [pc, #224]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a36:	d102      	bne.n	8002a3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f2      	bne.n	8002a24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a3e:	4b33      	ldr	r3, [pc, #204]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a4a:	d158      	bne.n	8002afe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e057      	b.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a50:	4b2e      	ldr	r3, [pc, #184]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a56:	4a2d      	ldr	r2, [pc, #180]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a60:	e04d      	b.n	8002afe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a68:	d141      	bne.n	8002aee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a6a:	4b28      	ldr	r3, [pc, #160]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a76:	d131      	bne.n	8002adc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a78:	4b24      	ldr	r3, [pc, #144]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a7e:	4a23      	ldr	r2, [pc, #140]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a88:	4b20      	ldr	r3, [pc, #128]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a90:	4a1e      	ldr	r2, [pc, #120]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a98:	4b1d      	ldr	r3, [pc, #116]	@ (8002b10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2232      	movs	r2, #50	@ 0x32
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
 8002aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa8:	0c9b      	lsrs	r3, r3, #18
 8002aaa:	3301      	adds	r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aae:	e002      	b.n	8002ab6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ab6:	4b15      	ldr	r3, [pc, #84]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ac2:	d102      	bne.n	8002aca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f2      	bne.n	8002ab0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aca:	4b10      	ldr	r3, [pc, #64]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ad6:	d112      	bne.n	8002afe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e011      	b.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002adc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ae8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002aec:	e007      	b.n	8002afe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002aee:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002af6:	4a05      	ldr	r2, [pc, #20]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002afc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	40007000 	.word	0x40007000
 8002b10:	20002764 	.word	0x20002764
 8002b14:	431bde83 	.word	0x431bde83

08002b18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b1c:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4a04      	ldr	r2, [pc, #16]	@ (8002b34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b26:	6093      	str	r3, [r2, #8]
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40007000 	.word	0x40007000

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e2fe      	b.n	8003148 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d075      	beq.n	8002c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b56:	4b97      	ldr	r3, [pc, #604]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b60:	4b94      	ldr	r3, [pc, #592]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	2b0c      	cmp	r3, #12
 8002b6e:	d102      	bne.n	8002b76 <HAL_RCC_OscConfig+0x3e>
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d002      	beq.n	8002b7c <HAL_RCC_OscConfig+0x44>
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d10b      	bne.n	8002b94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7c:	4b8d      	ldr	r3, [pc, #564]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d05b      	beq.n	8002c40 <HAL_RCC_OscConfig+0x108>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d157      	bne.n	8002c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e2d9      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b9c:	d106      	bne.n	8002bac <HAL_RCC_OscConfig+0x74>
 8002b9e:	4b85      	ldr	r3, [pc, #532]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a84      	ldr	r2, [pc, #528]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e01d      	b.n	8002be8 <HAL_RCC_OscConfig+0xb0>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x98>
 8002bb6:	4b7f      	ldr	r3, [pc, #508]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7e      	ldr	r2, [pc, #504]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002bbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b7c      	ldr	r3, [pc, #496]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a7b      	ldr	r2, [pc, #492]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e00b      	b.n	8002be8 <HAL_RCC_OscConfig+0xb0>
 8002bd0:	4b78      	ldr	r3, [pc, #480]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a77      	ldr	r2, [pc, #476]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b75      	ldr	r3, [pc, #468]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a74      	ldr	r2, [pc, #464]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002be2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fde0 	bl	80017b4 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7fe fddc 	bl	80017b4 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	@ 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e29e      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c0a:	4b6a      	ldr	r3, [pc, #424]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0xc0>
 8002c16:	e014      	b.n	8002c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fe fdcc 	bl	80017b4 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c20:	f7fe fdc8 	bl	80017b4 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	@ 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e28a      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c32:	4b60      	ldr	r3, [pc, #384]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0xe8>
 8002c3e:	e000      	b.n	8002c42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d075      	beq.n	8002d3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c4e:	4b59      	ldr	r3, [pc, #356]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c58:	4b56      	ldr	r3, [pc, #344]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	2b0c      	cmp	r3, #12
 8002c66:	d102      	bne.n	8002c6e <HAL_RCC_OscConfig+0x136>
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d002      	beq.n	8002c74 <HAL_RCC_OscConfig+0x13c>
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d11f      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c74:	4b4f      	ldr	r3, [pc, #316]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_OscConfig+0x154>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e25d      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8c:	4b49      	ldr	r3, [pc, #292]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	4946      	ldr	r1, [pc, #280]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ca0:	4b45      	ldr	r3, [pc, #276]	@ (8002db8 <HAL_RCC_OscConfig+0x280>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe fd39 	bl	800171c <HAL_InitTick>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d043      	beq.n	8002d38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e249      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d023      	beq.n	8002d04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cbc:	4b3d      	ldr	r3, [pc, #244]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a3c      	ldr	r2, [pc, #240]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fd74 	bl	80017b4 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd0:	f7fe fd70 	bl	80017b4 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e232      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce2:	4b34      	ldr	r3, [pc, #208]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cee:	4b31      	ldr	r3, [pc, #196]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	061b      	lsls	r3, r3, #24
 8002cfc:	492d      	ldr	r1, [pc, #180]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	604b      	str	r3, [r1, #4]
 8002d02:	e01a      	b.n	8002d3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d04:	4b2b      	ldr	r3, [pc, #172]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a2a      	ldr	r2, [pc, #168]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fe fd50 	bl	80017b4 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d18:	f7fe fd4c 	bl	80017b4 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e20e      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d2a:	4b22      	ldr	r3, [pc, #136]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x1e0>
 8002d36:	e000      	b.n	8002d3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d041      	beq.n	8002dca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01c      	beq.n	8002d88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4e:	4b19      	ldr	r3, [pc, #100]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d54:	4a17      	ldr	r2, [pc, #92]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5e:	f7fe fd29 	bl	80017b4 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d66:	f7fe fd25 	bl	80017b4 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e1e7      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d78:	4b0e      	ldr	r3, [pc, #56]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0ef      	beq.n	8002d66 <HAL_RCC_OscConfig+0x22e>
 8002d86:	e020      	b.n	8002dca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d88:	4b0a      	ldr	r3, [pc, #40]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d8e:	4a09      	ldr	r2, [pc, #36]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d98:	f7fe fd0c 	bl	80017b4 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d9e:	e00d      	b.n	8002dbc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da0:	f7fe fd08 	bl	80017b4 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d906      	bls.n	8002dbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e1ca      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	200032ac 	.word	0x200032ac
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dbc:	4b8c      	ldr	r3, [pc, #560]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1ea      	bne.n	8002da0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80a6 	beq.w	8002f24 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ddc:	4b84      	ldr	r3, [pc, #528]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_OscConfig+0x2b4>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x2b6>
 8002dec:	2300      	movs	r3, #0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00d      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dfe:	4b7c      	ldr	r3, [pc, #496]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e0e:	4b79      	ldr	r3, [pc, #484]	@ (8002ff4 <HAL_RCC_OscConfig+0x4bc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d118      	bne.n	8002e4c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e1a:	4b76      	ldr	r3, [pc, #472]	@ (8002ff4 <HAL_RCC_OscConfig+0x4bc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a75      	ldr	r2, [pc, #468]	@ (8002ff4 <HAL_RCC_OscConfig+0x4bc>)
 8002e20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e26:	f7fe fcc5 	bl	80017b4 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2e:	f7fe fcc1 	bl	80017b4 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e183      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e40:	4b6c      	ldr	r3, [pc, #432]	@ (8002ff4 <HAL_RCC_OscConfig+0x4bc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d108      	bne.n	8002e66 <HAL_RCC_OscConfig+0x32e>
 8002e54:	4b66      	ldr	r3, [pc, #408]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e5a:	4a65      	ldr	r2, [pc, #404]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e64:	e024      	b.n	8002eb0 <HAL_RCC_OscConfig+0x378>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b05      	cmp	r3, #5
 8002e6c:	d110      	bne.n	8002e90 <HAL_RCC_OscConfig+0x358>
 8002e6e:	4b60      	ldr	r3, [pc, #384]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e74:	4a5e      	ldr	r2, [pc, #376]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002e76:	f043 0304 	orr.w	r3, r3, #4
 8002e7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e7e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e84:	4a5a      	ldr	r2, [pc, #360]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e8e:	e00f      	b.n	8002eb0 <HAL_RCC_OscConfig+0x378>
 8002e90:	4b57      	ldr	r3, [pc, #348]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e96:	4a56      	ldr	r2, [pc, #344]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ea0:	4b53      	ldr	r3, [pc, #332]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea6:	4a52      	ldr	r2, [pc, #328]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002ea8:	f023 0304 	bic.w	r3, r3, #4
 8002eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d016      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb8:	f7fe fc7c 	bl	80017b4 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec0:	f7fe fc78 	bl	80017b4 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e138      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed6:	4b46      	ldr	r3, [pc, #280]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0ed      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x388>
 8002ee4:	e015      	b.n	8002f12 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee6:	f7fe fc65 	bl	80017b4 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7fe fc61 	bl	80017b4 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e121      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f04:	4b3a      	ldr	r3, [pc, #232]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1ed      	bne.n	8002eee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f12:	7ffb      	ldrb	r3, [r7, #31]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d105      	bne.n	8002f24 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f18:	4b35      	ldr	r3, [pc, #212]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1c:	4a34      	ldr	r2, [pc, #208]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002f1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f22:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d03c      	beq.n	8002faa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01c      	beq.n	8002f72 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f38:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f3e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	f7fe fc34 	bl	80017b4 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f50:	f7fe fc30 	bl	80017b4 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e0f2      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f62:	4b23      	ldr	r3, [pc, #140]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002f64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0ef      	beq.n	8002f50 <HAL_RCC_OscConfig+0x418>
 8002f70:	e01b      	b.n	8002faa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f72:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f78:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f82:	f7fe fc17 	bl	80017b4 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f8a:	f7fe fc13 	bl	80017b4 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e0d5      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f9c:	4b14      	ldr	r3, [pc, #80]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1ef      	bne.n	8002f8a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 80c9 	beq.w	8003146 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b0c      	cmp	r3, #12
 8002fbe:	f000 8083 	beq.w	80030c8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d15e      	bne.n	8003088 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fca:	4b09      	ldr	r3, [pc, #36]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a08      	ldr	r2, [pc, #32]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002fd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f7fe fbed 	bl	80017b4 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fdc:	e00c      	b.n	8002ff8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fde:	f7fe fbe9 	bl	80017b4 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d905      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e0ab      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff8:	4b55      	ldr	r3, [pc, #340]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1ec      	bne.n	8002fde <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003004:	4b52      	ldr	r3, [pc, #328]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	4b52      	ldr	r3, [pc, #328]	@ (8003154 <HAL_RCC_OscConfig+0x61c>)
 800300a:	4013      	ands	r3, r2
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6a11      	ldr	r1, [r2, #32]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003014:	3a01      	subs	r2, #1
 8003016:	0112      	lsls	r2, r2, #4
 8003018:	4311      	orrs	r1, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800301e:	0212      	lsls	r2, r2, #8
 8003020:	4311      	orrs	r1, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003026:	0852      	lsrs	r2, r2, #1
 8003028:	3a01      	subs	r2, #1
 800302a:	0552      	lsls	r2, r2, #21
 800302c:	4311      	orrs	r1, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003032:	0852      	lsrs	r2, r2, #1
 8003034:	3a01      	subs	r2, #1
 8003036:	0652      	lsls	r2, r2, #25
 8003038:	4311      	orrs	r1, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800303e:	06d2      	lsls	r2, r2, #27
 8003040:	430a      	orrs	r2, r1
 8003042:	4943      	ldr	r1, [pc, #268]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 8003044:	4313      	orrs	r3, r2
 8003046:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003048:	4b41      	ldr	r3, [pc, #260]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a40      	ldr	r2, [pc, #256]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 800304e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003052:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003054:	4b3e      	ldr	r3, [pc, #248]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4a3d      	ldr	r2, [pc, #244]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800305e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe fba8 	bl	80017b4 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe fba4 	bl	80017b4 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e066      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307a:	4b35      	ldr	r3, [pc, #212]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x530>
 8003086:	e05e      	b.n	8003146 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003088:	4b31      	ldr	r3, [pc, #196]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a30      	ldr	r2, [pc, #192]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 800308e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe fb8e 	bl	80017b4 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309c:	f7fe fb8a 	bl	80017b4 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e04c      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ae:	4b28      	ldr	r3, [pc, #160]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030ba:	4b25      	ldr	r3, [pc, #148]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	4924      	ldr	r1, [pc, #144]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 80030c0:	4b25      	ldr	r3, [pc, #148]	@ (8003158 <HAL_RCC_OscConfig+0x620>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	60cb      	str	r3, [r1, #12]
 80030c6:	e03e      	b.n	8003146 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e039      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80030d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f003 0203 	and.w	r2, r3, #3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d12c      	bne.n	8003142 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	3b01      	subs	r3, #1
 80030f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d123      	bne.n	8003142 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003104:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003106:	429a      	cmp	r2, r3
 8003108:	d11b      	bne.n	8003142 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003114:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003116:	429a      	cmp	r2, r3
 8003118:	d113      	bne.n	8003142 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003124:	085b      	lsrs	r3, r3, #1
 8003126:	3b01      	subs	r3, #1
 8003128:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d109      	bne.n	8003142 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003138:	085b      	lsrs	r3, r3, #1
 800313a:	3b01      	subs	r3, #1
 800313c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000
 8003154:	019f800c 	.word	0x019f800c
 8003158:	feeefffc 	.word	0xfeeefffc

0800315c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e11e      	b.n	80033b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003174:	4b91      	ldr	r3, [pc, #580]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d910      	bls.n	80031a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b8e      	ldr	r3, [pc, #568]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 020f 	bic.w	r2, r3, #15
 800318a:	498c      	ldr	r1, [pc, #560]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003192:	4b8a      	ldr	r3, [pc, #552]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e106      	b.n	80033b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d073      	beq.n	8003298 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d129      	bne.n	800320c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b8:	4b81      	ldr	r3, [pc, #516]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0f4      	b.n	80033b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80031c8:	f000 f99e 	bl	8003508 <RCC_GetSysClockFreqFromPLLSource>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4a7c      	ldr	r2, [pc, #496]	@ (80033c4 <HAL_RCC_ClockConfig+0x268>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d93f      	bls.n	8003256 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031d6:	4b7a      	ldr	r3, [pc, #488]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d009      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d033      	beq.n	8003256 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d12f      	bne.n	8003256 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031f6:	4b72      	ldr	r3, [pc, #456]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031fe:	4a70      	ldr	r2, [pc, #448]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003204:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003206:	2380      	movs	r3, #128	@ 0x80
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	e024      	b.n	8003256 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d107      	bne.n	8003224 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003214:	4b6a      	ldr	r3, [pc, #424]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0c6      	b.n	80033b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003224:	4b66      	ldr	r3, [pc, #408]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0be      	b.n	80033b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003234:	f000 f8ce 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8003238:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4a61      	ldr	r2, [pc, #388]	@ (80033c4 <HAL_RCC_ClockConfig+0x268>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d909      	bls.n	8003256 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003242:	4b5f      	ldr	r3, [pc, #380]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800324a:	4a5d      	ldr	r2, [pc, #372]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 800324c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003250:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003252:	2380      	movs	r3, #128	@ 0x80
 8003254:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003256:	4b5a      	ldr	r3, [pc, #360]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f023 0203 	bic.w	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4957      	ldr	r1, [pc, #348]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003264:	4313      	orrs	r3, r2
 8003266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003268:	f7fe faa4 	bl	80017b4 <HAL_GetTick>
 800326c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326e:	e00a      	b.n	8003286 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003270:	f7fe faa0 	bl	80017b4 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e095      	b.n	80033b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	4b4e      	ldr	r3, [pc, #312]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 020c 	and.w	r2, r3, #12
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	429a      	cmp	r2, r3
 8003296:	d1eb      	bne.n	8003270 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d023      	beq.n	80032ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b0:	4b43      	ldr	r3, [pc, #268]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4a42      	ldr	r2, [pc, #264]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80032b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80032c8:	4b3d      	ldr	r3, [pc, #244]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80032d0:	4a3b      	ldr	r2, [pc, #236]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80032d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d8:	4b39      	ldr	r3, [pc, #228]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4936      	ldr	r1, [pc, #216]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
 80032ea:	e008      	b.n	80032fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2b80      	cmp	r3, #128	@ 0x80
 80032f0:	d105      	bne.n	80032fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80032f2:	4b33      	ldr	r3, [pc, #204]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	4a32      	ldr	r2, [pc, #200]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80032f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032fe:	4b2f      	ldr	r3, [pc, #188]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d21d      	bcs.n	8003348 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330c:	4b2b      	ldr	r3, [pc, #172]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f023 020f 	bic.w	r2, r3, #15
 8003314:	4929      	ldr	r1, [pc, #164]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	4313      	orrs	r3, r2
 800331a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800331c:	f7fe fa4a 	bl	80017b4 <HAL_GetTick>
 8003320:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	e00a      	b.n	800333a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003324:	f7fe fa46 	bl	80017b4 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e03b      	b.n	80033b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b20      	ldr	r3, [pc, #128]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d1ed      	bne.n	8003324 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003354:	4b1a      	ldr	r3, [pc, #104]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4917      	ldr	r1, [pc, #92]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003372:	4b13      	ldr	r3, [pc, #76]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	490f      	ldr	r1, [pc, #60]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003386:	f000 f825 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 800338a:	4602      	mov	r2, r0
 800338c:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	490c      	ldr	r1, [pc, #48]	@ (80033c8 <HAL_RCC_ClockConfig+0x26c>)
 8003398:	5ccb      	ldrb	r3, [r1, r3]
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	fa22 f303 	lsr.w	r3, r2, r3
 80033a2:	4a0a      	ldr	r2, [pc, #40]	@ (80033cc <HAL_RCC_ClockConfig+0x270>)
 80033a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033a6:	4b0a      	ldr	r3, [pc, #40]	@ (80033d0 <HAL_RCC_ClockConfig+0x274>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe f9b6 	bl	800171c <HAL_InitTick>
 80033b0:	4603      	mov	r3, r0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40022000 	.word	0x40022000
 80033c0:	40021000 	.word	0x40021000
 80033c4:	04c4b400 	.word	0x04c4b400
 80033c8:	08006350 	.word	0x08006350
 80033cc:	20002764 	.word	0x20002764
 80033d0:	200032ac 	.word	0x200032ac

080033d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033da:	4b2c      	ldr	r3, [pc, #176]	@ (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d102      	bne.n	80033ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003490 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	e047      	b.n	800347c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80033ec:	4b27      	ldr	r3, [pc, #156]	@ (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d102      	bne.n	80033fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033f8:	4b26      	ldr	r3, [pc, #152]	@ (8003494 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	e03e      	b.n	800347c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80033fe:	4b23      	ldr	r3, [pc, #140]	@ (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b0c      	cmp	r3, #12
 8003408:	d136      	bne.n	8003478 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800340a:	4b20      	ldr	r3, [pc, #128]	@ (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003414:	4b1d      	ldr	r3, [pc, #116]	@ (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	3301      	adds	r3, #1
 8003420:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d10c      	bne.n	8003442 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003428:	4a1a      	ldr	r2, [pc, #104]	@ (8003494 <HAL_RCC_GetSysClockFreq+0xc0>)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	4a16      	ldr	r2, [pc, #88]	@ (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003432:	68d2      	ldr	r2, [r2, #12]
 8003434:	0a12      	lsrs	r2, r2, #8
 8003436:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800343a:	fb02 f303 	mul.w	r3, r2, r3
 800343e:	617b      	str	r3, [r7, #20]
      break;
 8003440:	e00c      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003442:	4a13      	ldr	r2, [pc, #76]	@ (8003490 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	fbb2 f3f3 	udiv	r3, r2, r3
 800344a:	4a10      	ldr	r2, [pc, #64]	@ (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 800344c:	68d2      	ldr	r2, [r2, #12]
 800344e:	0a12      	lsrs	r2, r2, #8
 8003450:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003454:	fb02 f303 	mul.w	r3, r2, r3
 8003458:	617b      	str	r3, [r7, #20]
      break;
 800345a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800345c:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	0e5b      	lsrs	r3, r3, #25
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	3301      	adds	r3, #1
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	fbb2 f3f3 	udiv	r3, r2, r3
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	e001      	b.n	800347c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800347c:	693b      	ldr	r3, [r7, #16]
}
 800347e:	4618      	mov	r0, r3
 8003480:	371c      	adds	r7, #28
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	00f42400 	.word	0x00f42400
 8003494:	007a1200 	.word	0x007a1200

08003498 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800349c:	4b03      	ldr	r3, [pc, #12]	@ (80034ac <HAL_RCC_GetHCLKFreq+0x14>)
 800349e:	681b      	ldr	r3, [r3, #0]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20002764 	.word	0x20002764

080034b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034b4:	f7ff fff0 	bl	8003498 <HAL_RCC_GetHCLKFreq>
 80034b8:	4602      	mov	r2, r0
 80034ba:	4b06      	ldr	r3, [pc, #24]	@ (80034d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	4904      	ldr	r1, [pc, #16]	@ (80034d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034c6:	5ccb      	ldrb	r3, [r1, r3]
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40021000 	.word	0x40021000
 80034d8:	08006360 	.word	0x08006360

080034dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034e0:	f7ff ffda 	bl	8003498 <HAL_RCC_GetHCLKFreq>
 80034e4:	4602      	mov	r2, r0
 80034e6:	4b06      	ldr	r3, [pc, #24]	@ (8003500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	0adb      	lsrs	r3, r3, #11
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	4904      	ldr	r1, [pc, #16]	@ (8003504 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034f2:	5ccb      	ldrb	r3, [r1, r3]
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000
 8003504:	08006360 	.word	0x08006360

08003508 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800350e:	4b1e      	ldr	r3, [pc, #120]	@ (8003588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003518:	4b1b      	ldr	r3, [pc, #108]	@ (8003588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	3301      	adds	r3, #1
 8003524:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d10c      	bne.n	8003546 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800352c:	4a17      	ldr	r2, [pc, #92]	@ (800358c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	fbb2 f3f3 	udiv	r3, r2, r3
 8003534:	4a14      	ldr	r2, [pc, #80]	@ (8003588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003536:	68d2      	ldr	r2, [r2, #12]
 8003538:	0a12      	lsrs	r2, r2, #8
 800353a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800353e:	fb02 f303 	mul.w	r3, r2, r3
 8003542:	617b      	str	r3, [r7, #20]
    break;
 8003544:	e00c      	b.n	8003560 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003546:	4a12      	ldr	r2, [pc, #72]	@ (8003590 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	fbb2 f3f3 	udiv	r3, r2, r3
 800354e:	4a0e      	ldr	r2, [pc, #56]	@ (8003588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003550:	68d2      	ldr	r2, [r2, #12]
 8003552:	0a12      	lsrs	r2, r2, #8
 8003554:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003558:	fb02 f303 	mul.w	r3, r2, r3
 800355c:	617b      	str	r3, [r7, #20]
    break;
 800355e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003560:	4b09      	ldr	r3, [pc, #36]	@ (8003588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	0e5b      	lsrs	r3, r3, #25
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	3301      	adds	r3, #1
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800357a:	687b      	ldr	r3, [r7, #4]
}
 800357c:	4618      	mov	r0, r3
 800357e:	371c      	adds	r7, #28
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	40021000 	.word	0x40021000
 800358c:	007a1200 	.word	0x007a1200
 8003590:	00f42400 	.word	0x00f42400

08003594 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800359c:	2300      	movs	r3, #0
 800359e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035a0:	2300      	movs	r3, #0
 80035a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 8098 	beq.w	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b6:	4b43      	ldr	r3, [pc, #268]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10d      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c2:	4b40      	ldr	r3, [pc, #256]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c6:	4a3f      	ldr	r2, [pc, #252]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ce:	4b3d      	ldr	r3, [pc, #244]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035da:	2301      	movs	r3, #1
 80035dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035de:	4b3a      	ldr	r3, [pc, #232]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a39      	ldr	r2, [pc, #228]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035ea:	f7fe f8e3 	bl	80017b4 <HAL_GetTick>
 80035ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035f0:	e009      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f2:	f7fe f8df 	bl	80017b4 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d902      	bls.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	74fb      	strb	r3, [r7, #19]
        break;
 8003604:	e005      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003606:	4b30      	ldr	r3, [pc, #192]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0ef      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003612:	7cfb      	ldrb	r3, [r7, #19]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d159      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003618:	4b2a      	ldr	r3, [pc, #168]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003622:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d01e      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	429a      	cmp	r2, r3
 8003632:	d019      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003634:	4b23      	ldr	r3, [pc, #140]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800363e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003640:	4b20      	ldr	r3, [pc, #128]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003646:	4a1f      	ldr	r2, [pc, #124]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800364c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003650:	4b1c      	ldr	r3, [pc, #112]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003656:	4a1b      	ldr	r2, [pc, #108]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003658:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800365c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003660:	4a18      	ldr	r2, [pc, #96]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d016      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7fe f89f 	bl	80017b4 <HAL_GetTick>
 8003676:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003678:	e00b      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fe f89b 	bl	80017b4 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d902      	bls.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	74fb      	strb	r3, [r7, #19]
            break;
 8003690:	e006      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003692:	4b0c      	ldr	r3, [pc, #48]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0ec      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10b      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036a6:	4b07      	ldr	r3, [pc, #28]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b4:	4903      	ldr	r1, [pc, #12]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80036bc:	e008      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	74bb      	strb	r3, [r7, #18]
 80036c2:	e005      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d0:	7c7b      	ldrb	r3, [r7, #17]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d105      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d6:	4ba7      	ldr	r3, [pc, #668]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036da:	4aa6      	ldr	r2, [pc, #664]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ee:	4ba1      	ldr	r3, [pc, #644]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f4:	f023 0203 	bic.w	r2, r3, #3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	499d      	ldr	r1, [pc, #628]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003710:	4b98      	ldr	r3, [pc, #608]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003716:	f023 020c 	bic.w	r2, r3, #12
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	4995      	ldr	r1, [pc, #596]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003732:	4b90      	ldr	r3, [pc, #576]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003738:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	498c      	ldr	r1, [pc, #560]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003754:	4b87      	ldr	r3, [pc, #540]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	4984      	ldr	r1, [pc, #528]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003776:	4b7f      	ldr	r3, [pc, #508]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	497b      	ldr	r1, [pc, #492]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003798:	4b76      	ldr	r3, [pc, #472]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	4973      	ldr	r1, [pc, #460]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037ba:	4b6e      	ldr	r3, [pc, #440]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	496a      	ldr	r1, [pc, #424]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037dc:	4b65      	ldr	r3, [pc, #404]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	4962      	ldr	r1, [pc, #392]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003804:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380c:	4959      	ldr	r1, [pc, #356]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003820:	4b54      	ldr	r3, [pc, #336]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003822:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003826:	f023 0203 	bic.w	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382e:	4951      	ldr	r1, [pc, #324]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003842:	4b4c      	ldr	r3, [pc, #304]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003848:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003850:	4948      	ldr	r1, [pc, #288]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003860:	2b00      	cmp	r3, #0
 8003862:	d015      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003864:	4b43      	ldr	r3, [pc, #268]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	4940      	ldr	r1, [pc, #256]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003882:	d105      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003884:	4b3b      	ldr	r3, [pc, #236]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4a3a      	ldr	r2, [pc, #232]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800388e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003898:	2b00      	cmp	r3, #0
 800389a:	d015      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800389c:	4b35      	ldr	r3, [pc, #212]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038aa:	4932      	ldr	r1, [pc, #200]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038ba:	d105      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038c6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d015      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038d4:	4b27      	ldr	r3, [pc, #156]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e2:	4924      	ldr	r1, [pc, #144]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038f2:	d105      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038fe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d015      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800390c:	4b19      	ldr	r3, [pc, #100]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003912:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391a:	4916      	ldr	r1, [pc, #88]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003926:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800392a:	d105      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800392c:	4b11      	ldr	r3, [pc, #68]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4a10      	ldr	r2, [pc, #64]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003932:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003936:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d019      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003944:	4b0b      	ldr	r3, [pc, #44]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	4908      	ldr	r1, [pc, #32]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003962:	d109      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003964:	4b03      	ldr	r3, [pc, #12]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4a02      	ldr	r2, [pc, #8]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800396e:	60d3      	str	r3, [r2, #12]
 8003970:	e002      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d015      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003984:	4b29      	ldr	r3, [pc, #164]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003992:	4926      	ldr	r1, [pc, #152]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039a2:	d105      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039a4:	4b21      	ldr	r3, [pc, #132]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a20      	ldr	r2, [pc, #128]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ae:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d015      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80039bc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ca:	4918      	ldr	r1, [pc, #96]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039da:	d105      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039dc:	4b13      	ldr	r3, [pc, #76]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4a12      	ldr	r2, [pc, #72]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d015      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039f4:	4b0d      	ldr	r3, [pc, #52]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a02:	490a      	ldr	r1, [pc, #40]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a12:	d105      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a14:	4b05      	ldr	r3, [pc, #20]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	4a04      	ldr	r2, [pc, #16]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a20:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000

08003a30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a42:	d136      	bne.n	8003ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003a44:	4bb1      	ldr	r3, [pc, #708]	@ (8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a4e:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003a50:	4bae      	ldr	r3, [pc, #696]	@ (8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d108      	bne.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a64:	d104      	bne.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8003a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a6a:	61fb      	str	r3, [r7, #28]
 8003a6c:	f000 bd12 	b.w	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003a70:	4ba6      	ldr	r3, [pc, #664]	@ (8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d108      	bne.n	8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a84:	d104      	bne.n	8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 8003a86:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003a8a:	61fb      	str	r3, [r7, #28]
 8003a8c:	f000 bd02 	b.w	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003a90:	4b9e      	ldr	r3, [pc, #632]	@ (8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a9c:	f040 84fa 	bne.w	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aa6:	f040 84f5 	bne.w	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = HSE_VALUE / 32U;
 8003aaa:	4b99      	ldr	r3, [pc, #612]	@ (8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	f000 bcf1 	b.w	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 8003ab2:	4b96      	ldr	r3, [pc, #600]	@ (8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003abe:	4b93      	ldr	r3, [pc, #588]	@ (8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aca:	d102      	bne.n	8003ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 8003acc:	4b91      	ldr	r3, [pc, #580]	@ (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	e017      	b.n	8003b02 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61bb      	str	r3, [r7, #24]
 8003ad6:	e014      	b.n	8003b02 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 8003ad8:	4b8c      	ldr	r3, [pc, #560]	@ (8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d10c      	bne.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003ae4:	4b89      	ldr	r3, [pc, #548]	@ (8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003af0:	d102      	bne.n	8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 8003af2:	4b89      	ldr	r3, [pc, #548]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	e004      	b.n	8003b02 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e001      	b.n	8003b02 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003b02:	4b82      	ldr	r3, [pc, #520]	@ (8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	091b      	lsrs	r3, r3, #4
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b14:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b1c:	f000 8466 	beq.w	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b26:	f200 848e 	bhi.w	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b30:	f000 8263 	beq.w	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b3a:	f200 8484 	bhi.w	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b44:	f000 8417 	beq.w	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b4e:	f200 847a 	bhi.w	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b58:	f000 83d0 	beq.w	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b62:	f200 8470 	bhi.w	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b6c:	f000 8398 	beq.w	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b76:	f200 8466 	bhi.w	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b80:	f000 8360 	beq.w	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b8a:	f200 845c 	bhi.w	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b94:	f000 8318 	beq.w	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b9e:	f200 8452 	bhi.w	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ba8:	f000 82ca 	beq.w	8004140 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bb2:	f200 8448 	bhi.w	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bbc:	f000 827c 	beq.w	80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bc6:	f200 843e 	bhi.w	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bd0:	f000 8236 	beq.w	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bda:	f200 8434 	bhi.w	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003be4:	f000 81e4 	beq.w	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bee:	f200 842a 	bhi.w	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b80      	cmp	r3, #128	@ 0x80
 8003bf6:	f000 81b1 	beq.w	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b80      	cmp	r3, #128	@ 0x80
 8003bfe:	f200 8422 	bhi.w	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d84b      	bhi.n	8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 841b 	beq.w	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	2b1f      	cmp	r3, #31
 8003c16:	f200 8416 	bhi.w	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>)
 8003c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c20:	08003cab 	.word	0x08003cab
 8003c24:	08003d1d 	.word	0x08003d1d
 8003c28:	08004447 	.word	0x08004447
 8003c2c:	08003d7f 	.word	0x08003d7f
 8003c30:	08004447 	.word	0x08004447
 8003c34:	08004447 	.word	0x08004447
 8003c38:	08004447 	.word	0x08004447
 8003c3c:	08003de1 	.word	0x08003de1
 8003c40:	08004447 	.word	0x08004447
 8003c44:	08004447 	.word	0x08004447
 8003c48:	08004447 	.word	0x08004447
 8003c4c:	08004447 	.word	0x08004447
 8003c50:	08004447 	.word	0x08004447
 8003c54:	08004447 	.word	0x08004447
 8003c58:	08004447 	.word	0x08004447
 8003c5c:	08003e43 	.word	0x08003e43
 8003c60:	08004447 	.word	0x08004447
 8003c64:	08004447 	.word	0x08004447
 8003c68:	08004447 	.word	0x08004447
 8003c6c:	08004447 	.word	0x08004447
 8003c70:	08004447 	.word	0x08004447
 8003c74:	08004447 	.word	0x08004447
 8003c78:	08004447 	.word	0x08004447
 8003c7c:	08004447 	.word	0x08004447
 8003c80:	08004447 	.word	0x08004447
 8003c84:	08004447 	.word	0x08004447
 8003c88:	08004447 	.word	0x08004447
 8003c8c:	08004447 	.word	0x08004447
 8003c90:	08004447 	.word	0x08004447
 8003c94:	08004447 	.word	0x08004447
 8003c98:	08004447 	.word	0x08004447
 8003c9c:	08003eab 	.word	0x08003eab
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b40      	cmp	r3, #64	@ 0x40
 8003ca4:	f000 8135 	beq.w	8003f12 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
      break;

#endif /* QUADSPI */

    default:
      break;
 8003ca8:	e3cd      	b.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003caa:	4b18      	ldr	r3, [pc, #96]	@ (8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d103      	bne.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        frequency = HAL_RCC_GetPCLK2Freq();
 8003cbc:	f7ff fc0e 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 8003cc0:	61f8      	str	r0, [r7, #28]
      break;
 8003cc2:	e3c2      	b.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d103      	bne.n	8003cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
        frequency = HAL_RCC_GetSysClockFreq();
 8003cca:	f7ff fb83 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8003cce:	61f8      	str	r0, [r7, #28]
      break;
 8003cd0:	e3bb      	b.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 8003cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cde:	d105      	bne.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d102      	bne.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HSI_VALUE;
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003ce8:	61fb      	str	r3, [r7, #28]
      break;
 8003cea:	e3ae      	b.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003cec:	4b07      	ldr	r3, [pc, #28]	@ (8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	f040 83a7 	bne.w	800444a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	f040 83a3 	bne.w	800444a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
        frequency = LSE_VALUE;
 8003d04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d08:	61fb      	str	r3, [r7, #28]
      break;
 8003d0a:	e39e      	b.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	0003d090 	.word	0x0003d090
 8003d14:	00f42400 	.word	0x00f42400
 8003d18:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003d1c:	4ba2      	ldr	r3, [pc, #648]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d103      	bne.n	8003d36 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003d2e:	f7ff fbbf 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 8003d32:	61f8      	str	r0, [r7, #28]
      break;
 8003d34:	e38b      	b.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d103      	bne.n	8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
        frequency = HAL_RCC_GetSysClockFreq();
 8003d3c:	f7ff fb4a 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8003d40:	61f8      	str	r0, [r7, #28]
      break;
 8003d42:	e384      	b.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003d44:	4b98      	ldr	r3, [pc, #608]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d50:	d105      	bne.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d102      	bne.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
        frequency = HSI_VALUE;
 8003d58:	4b94      	ldr	r3, [pc, #592]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003d5a:	61fb      	str	r3, [r7, #28]
      break;
 8003d5c:	e377      	b.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003d5e:	4b92      	ldr	r3, [pc, #584]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	f040 8370 	bne.w	800444e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	2b0c      	cmp	r3, #12
 8003d72:	f040 836c 	bne.w	800444e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
        frequency = LSE_VALUE;
 8003d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d7a:	61fb      	str	r3, [r7, #28]
      break;
 8003d7c:	e367      	b.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003d7e:	4b8a      	ldr	r3, [pc, #552]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d88:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d103      	bne.n	8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003d90:	f7ff fb8e 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 8003d94:	61f8      	str	r0, [r7, #28]
      break;
 8003d96:	e35c      	b.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	2b10      	cmp	r3, #16
 8003d9c:	d103      	bne.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
        frequency = HAL_RCC_GetSysClockFreq();
 8003d9e:	f7ff fb19 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8003da2:	61f8      	str	r0, [r7, #28]
      break;
 8003da4:	e355      	b.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003da6:	4b80      	ldr	r3, [pc, #512]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	d102      	bne.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
        frequency = HSI_VALUE;
 8003dba:	4b7c      	ldr	r3, [pc, #496]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003dbc:	61fb      	str	r3, [r7, #28]
      break;
 8003dbe:	e348      	b.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003dc0:	4b79      	ldr	r3, [pc, #484]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	f040 8341 	bne.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b30      	cmp	r3, #48	@ 0x30
 8003dd4:	f040 833d 	bne.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        frequency = LSE_VALUE;
 8003dd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ddc:	61fb      	str	r3, [r7, #28]
      break;
 8003dde:	e338      	b.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003de0:	4b71      	ldr	r3, [pc, #452]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003dea:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d103      	bne.n	8003dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003df2:	f7ff fb5d 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 8003df6:	61f8      	str	r0, [r7, #28]
      break;
 8003df8:	e32d      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b40      	cmp	r3, #64	@ 0x40
 8003dfe:	d103      	bne.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        frequency = HAL_RCC_GetSysClockFreq();
 8003e00:	f7ff fae8 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8003e04:	61f8      	str	r0, [r7, #28]
      break;
 8003e06:	e326      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8003e08:	4b67      	ldr	r3, [pc, #412]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e14:	d105      	bne.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b80      	cmp	r3, #128	@ 0x80
 8003e1a:	d102      	bne.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
        frequency = HSI_VALUE;
 8003e1c:	4b63      	ldr	r3, [pc, #396]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003e1e:	61fb      	str	r3, [r7, #28]
      break;
 8003e20:	e319      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8003e22:	4b61      	ldr	r3, [pc, #388]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	f040 8312 	bne.w	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e36:	f040 830e 	bne.w	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
        frequency = LSE_VALUE;
 8003e3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e3e:	61fb      	str	r3, [r7, #28]
      break;
 8003e40:	e309      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003e42:	4b59      	ldr	r3, [pc, #356]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e4c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d103      	bne.n	8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003e54:	f7ff fb2c 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 8003e58:	61f8      	str	r0, [r7, #28]
      break;
 8003e5a:	e2fe      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e62:	d103      	bne.n	8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
        frequency = HAL_RCC_GetSysClockFreq();
 8003e64:	f7ff fab6 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8003e68:	61f8      	str	r0, [r7, #28]
      break;
 8003e6a:	e2f6      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8003e6c:	4b4e      	ldr	r3, [pc, #312]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e78:	d106      	bne.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e80:	d102      	bne.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
        frequency = HSI_VALUE;
 8003e82:	4b4a      	ldr	r3, [pc, #296]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003e84:	61fb      	str	r3, [r7, #28]
      break;
 8003e86:	e2e8      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8003e88:	4b47      	ldr	r3, [pc, #284]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	f040 82e1 	bne.w	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e9e:	f040 82dc 	bne.w	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
        frequency = LSE_VALUE;
 8003ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ea6:	61fb      	str	r3, [r7, #28]
      break;
 8003ea8:	e2d7      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003eaa:	4b3f      	ldr	r3, [pc, #252]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003eb4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d103      	bne.n	8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003ebc:	f7ff faf8 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 8003ec0:	61f8      	str	r0, [r7, #28]
      break;
 8003ec2:	e2cc      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eca:	d103      	bne.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
        frequency = HAL_RCC_GetSysClockFreq();
 8003ecc:	f7ff fa82 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8003ed0:	61f8      	str	r0, [r7, #28]
      break;
 8003ed2:	e2c4      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003ed4:	4b34      	ldr	r3, [pc, #208]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ee0:	d106      	bne.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ee8:	d102      	bne.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
        frequency = HSI_VALUE;
 8003eea:	4b30      	ldr	r3, [pc, #192]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003eec:	61fb      	str	r3, [r7, #28]
      break;
 8003eee:	e2b6      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8003ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	f040 82af 	bne.w	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f06:	f040 82aa 	bne.w	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
        frequency = LSE_VALUE;
 8003f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f0e:	61fb      	str	r3, [r7, #28]
      break;
 8003f10:	e2a5      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003f12:	4b25      	ldr	r3, [pc, #148]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f18:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f1c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d103      	bne.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003f24:	f7ff fac4 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 8003f28:	61f8      	str	r0, [r7, #28]
      break;
 8003f2a:	e29a      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f32:	d103      	bne.n	8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        frequency = HAL_RCC_GetSysClockFreq();
 8003f34:	f7ff fa4e 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8003f38:	61f8      	str	r0, [r7, #28]
      break;
 8003f3a:	e292      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8003f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f48:	f040 828b 	bne.w	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f52:	f040 8286 	bne.w	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
        frequency = HSI_VALUE;
 8003f56:	4b15      	ldr	r3, [pc, #84]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003f58:	61fb      	str	r3, [r7, #28]
      break;
 8003f5a:	e282      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003f5c:	4b12      	ldr	r3, [pc, #72]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f62:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003f66:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d103      	bne.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003f6e:	f7ff fa9f 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 8003f72:	61f8      	str	r0, [r7, #28]
      break;
 8003f74:	e277      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f7c:	d103      	bne.n	8003f86 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
        frequency = HAL_RCC_GetSysClockFreq();
 8003f7e:	f7ff fa29 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8003f82:	61f8      	str	r0, [r7, #28]
      break;
 8003f84:	e26f      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8003f86:	4b08      	ldr	r3, [pc, #32]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f92:	f040 8268 	bne.w	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f9c:	f040 8263 	bne.w	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
        frequency = HSI_VALUE;
 8003fa0:	4b02      	ldr	r3, [pc, #8]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003fa2:	61fb      	str	r3, [r7, #28]
      break;
 8003fa4:	e25f      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	00f42400 	.word	0x00f42400
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003fb0:	4ba0      	ldr	r3, [pc, #640]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fba:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d103      	bne.n	8003fca <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003fc2:	f7ff fa75 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 8003fc6:	61f8      	str	r0, [r7, #28]
      break;
 8003fc8:	e24f      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fd0:	d103      	bne.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
        frequency = HAL_RCC_GetSysClockFreq();
 8003fd2:	f7ff f9ff 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8003fd6:	61f8      	str	r0, [r7, #28]
      break;
 8003fd8:	e247      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8003fda:	4b96      	ldr	r3, [pc, #600]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fe6:	f040 8240 	bne.w	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ff0:	f040 823b 	bne.w	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        frequency = HSI_VALUE;
 8003ff4:	4b90      	ldr	r3, [pc, #576]	@ (8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8003ff6:	61fb      	str	r3, [r7, #28]
      break;
 8003ff8:	e237      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8003ffa:	4b8e      	ldr	r3, [pc, #568]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004000:	f003 0303 	and.w	r3, r3, #3
 8004004:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d103      	bne.n	8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
        frequency = HAL_RCC_GetPCLK1Freq();
 800400c:	f7ff fa50 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 8004010:	61f8      	str	r0, [r7, #28]
      break;
 8004012:	e22c      	b.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if(srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d103      	bne.n	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        frequency = HAL_RCC_GetSysClockFreq();
 800401a:	f7ff f9db 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 800401e:	61f8      	str	r0, [r7, #28]
      break;
 8004020:	e225      	b.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004022:	4b84      	ldr	r3, [pc, #528]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800402a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800402e:	f040 821e 	bne.w	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	2b02      	cmp	r3, #2
 8004036:	f040 821a 	bne.w	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
        frequency = HSI_VALUE;
 800403a:	4b7f      	ldr	r3, [pc, #508]	@ (8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800403c:	61fb      	str	r3, [r7, #28]
      break;
 800403e:	e216      	b.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004040:	4b7c      	ldr	r3, [pc, #496]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004046:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800404a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d103      	bne.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004052:	f7ff fa2d 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 8004056:	61f8      	str	r0, [r7, #28]
      break;
 8004058:	e20b      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800405a:	4b76      	ldr	r3, [pc, #472]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800405c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b02      	cmp	r3, #2
 8004066:	d107      	bne.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800406e:	d103      	bne.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
        frequency = LSI_VALUE;
 8004070:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	e01e      	b.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004078:	4b6e      	ldr	r3, [pc, #440]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004084:	d106      	bne.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800408c:	d102      	bne.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        frequency = HSI_VALUE;
 800408e:	4b6a      	ldr	r3, [pc, #424]	@ (8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	e010      	b.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004094:	4b67      	ldr	r3, [pc, #412]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b02      	cmp	r3, #2
 80040a0:	f040 81e7 	bne.w	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040aa:	f040 81e2 	bne.w	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
        frequency = LSE_VALUE;
 80040ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040b2:	61fb      	str	r3, [r7, #28]
      break;
 80040b4:	e1dd      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80040b6:	e1dc      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80040b8:	4b5e      	ldr	r3, [pc, #376]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040be:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80040c2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d103      	bne.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
        frequency = HAL_RCC_GetSysClockFreq();
 80040ca:	f7ff f983 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 80040ce:	61f8      	str	r0, [r7, #28]
      break;
 80040d0:	e1d1      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040d8:	d11b      	bne.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80040da:	4b56      	ldr	r3, [pc, #344]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 81c7 	beq.w	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80040e8:	4b52      	ldr	r3, [pc, #328]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	0a1b      	lsrs	r3, r3, #8
 80040ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040f2:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	fb03 f202 	mul.w	r2, r3, r2
 80040fc:	4b4d      	ldr	r3, [pc, #308]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	0d5b      	lsrs	r3, r3, #21
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	3301      	adds	r3, #1
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	fbb2 f3f3 	udiv	r3, r2, r3
 800410e:	61fb      	str	r3, [r7, #28]
      break;
 8004110:	e1b1      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004118:	d102      	bne.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        frequency = EXTERNAL_CLOCK_VALUE;
 800411a:	4b48      	ldr	r3, [pc, #288]	@ (800423c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800411c:	61fb      	str	r3, [r7, #28]
      break;
 800411e:	e1aa      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 8004120:	4b44      	ldr	r3, [pc, #272]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800412c:	f040 81a3 	bne.w	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004136:	f040 819e 	bne.w	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
        frequency = HSI_VALUE;
 800413a:	4b3f      	ldr	r3, [pc, #252]	@ (8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800413c:	61fb      	str	r3, [r7, #28]
      break;
 800413e:	e19a      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004140:	4b3c      	ldr	r3, [pc, #240]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004146:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800414a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d103      	bne.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
        frequency = HAL_RCC_GetSysClockFreq();
 8004152:	f7ff f93f 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8004156:	61f8      	str	r0, [r7, #28]
      break;
 8004158:	e18f      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004160:	d11b      	bne.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8004162:	4b34      	ldr	r3, [pc, #208]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8185 	beq.w	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004170:	4b30      	ldr	r3, [pc, #192]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	0a1b      	lsrs	r3, r3, #8
 8004176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800417a:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	fb03 f202 	mul.w	r2, r3, r2
 8004184:	4b2b      	ldr	r3, [pc, #172]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	0d5b      	lsrs	r3, r3, #21
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	3301      	adds	r3, #1
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	fbb2 f3f3 	udiv	r3, r2, r3
 8004196:	61fb      	str	r3, [r7, #28]
      break;
 8004198:	e16f      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041a0:	d102      	bne.n	80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        frequency = EXTERNAL_CLOCK_VALUE;
 80041a2:	4b26      	ldr	r3, [pc, #152]	@ (800423c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80041a4:	61fb      	str	r3, [r7, #28]
      break;
 80041a6:	e168      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 80041a8:	4b22      	ldr	r3, [pc, #136]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b4:	f040 8161 	bne.w	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80041be:	f040 815c 	bne.w	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
        frequency = HSI_VALUE;
 80041c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80041c4:	61fb      	str	r3, [r7, #28]
      break;
 80041c6:	e158      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80041c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ce:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80041d2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041da:	d103      	bne.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
        frequency = HAL_RCC_GetPCLK1Freq();
 80041dc:	f7ff f968 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 80041e0:	61f8      	str	r0, [r7, #28]
      break;
 80041e2:	e14c      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d102      	bne.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
        frequency = HSE_VALUE;
 80041ea:	4b15      	ldr	r3, [pc, #84]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80041ec:	61fb      	str	r3, [r7, #28]
      break;
 80041ee:	e146      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041f6:	f040 8142 	bne.w	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80041fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 813b 	beq.w	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004208:	4b0a      	ldr	r3, [pc, #40]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	0a1b      	lsrs	r3, r3, #8
 800420e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004212:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	fb03 f202 	mul.w	r2, r3, r2
 800421c:	4b05      	ldr	r3, [pc, #20]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	0d5b      	lsrs	r3, r3, #21
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	3301      	adds	r3, #1
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	fbb2 f3f3 	udiv	r3, r2, r3
 800422e:	61fb      	str	r3, [r7, #28]
      break;
 8004230:	e125      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8004232:	bf00      	nop
 8004234:	40021000 	.word	0x40021000
 8004238:	00f42400 	.word	0x00f42400
 800423c:	00bb8000 	.word	0x00bb8000
 8004240:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004244:	4b96      	ldr	r3, [pc, #600]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800424e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004256:	d114      	bne.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004258:	4b91      	ldr	r3, [pc, #580]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	0a1b      	lsrs	r3, r3, #8
 800425e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004262:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	fb03 f202 	mul.w	r2, r3, r2
 800426c:	4b8c      	ldr	r3, [pc, #560]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	0d5b      	lsrs	r3, r3, #21
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	3301      	adds	r3, #1
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	fbb2 f3f3 	udiv	r3, r2, r3
 800427e:	61fb      	str	r3, [r7, #28]
      break;
 8004280:	e0ff      	b.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 8004282:	4b87      	ldr	r3, [pc, #540]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004284:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b02      	cmp	r3, #2
 800428e:	f040 80f8 	bne.w	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	f040 80f4 	bne.w	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
        frequency = HSI48_VALUE;
 800429a:	4b82      	ldr	r3, [pc, #520]	@ (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800429c:	61fb      	str	r3, [r7, #28]
      break;
 800429e:	e0f0      	b.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80042a0:	4b7f      	ldr	r3, [pc, #508]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80042aa:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042b2:	d114      	bne.n	80042de <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80042b4:	4b7a      	ldr	r3, [pc, #488]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042be:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	fb03 f202 	mul.w	r2, r3, r2
 80042c8:	4b75      	ldr	r3, [pc, #468]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	0d5b      	lsrs	r3, r3, #21
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	3301      	adds	r3, #1
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042da:	61fb      	str	r3, [r7, #28]
      break;
 80042dc:	e0d3      	b.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 80042de:	4b70      	ldr	r3, [pc, #448]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80042e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	f040 80cc 	bne.w	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f040 80c8 	bne.w	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
        frequency = HSI48_VALUE;
 80042f6:	4b6b      	ldr	r3, [pc, #428]	@ (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80042f8:	61fb      	str	r3, [r7, #28]
      break;
 80042fa:	e0c4      	b.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 80042fc:	4b68      	ldr	r3, [pc, #416]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004302:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004306:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800430e:	d129      	bne.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8004310:	4b63      	ldr	r3, [pc, #396]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80b6 	beq.w	800448a <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800431e:	4b60      	ldr	r3, [pc, #384]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	0a1b      	lsrs	r3, r3, #8
 8004324:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004328:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800432a:	4b5d      	ldr	r3, [pc, #372]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	0edb      	lsrs	r3, r3, #27
 8004330:	f003 031f 	and.w	r3, r3, #31
 8004334:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800433c:	4b58      	ldr	r3, [pc, #352]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
              pllp = 17U;
 8004348:	2311      	movs	r3, #17
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	e001      	b.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
              pllp = 7U;
 800434e:	2307      	movs	r3, #7
 8004350:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	fb03 f202 	mul.w	r2, r3, r2
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004360:	61fb      	str	r3, [r7, #28]
      break;
 8004362:	e092      	b.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800436a:	f040 808e 	bne.w	800448a <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
        frequency = HAL_RCC_GetSysClockFreq();
 800436e:	f7ff f831 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8004372:	61f8      	str	r0, [r7, #28]
      break;
 8004374:	e089      	b.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 8004376:	4b4a      	ldr	r3, [pc, #296]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004380:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004388:	d128      	bne.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 800438a:	4b45      	ldr	r3, [pc, #276]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d07b      	beq.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004396:	4b42      	ldr	r3, [pc, #264]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	0a1b      	lsrs	r3, r3, #8
 800439c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043a0:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80043a2:	4b3f      	ldr	r3, [pc, #252]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	0edb      	lsrs	r3, r3, #27
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80043b4:	4b3a      	ldr	r3, [pc, #232]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
              pllp = 17U;
 80043c0:	2311      	movs	r3, #17
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	e001      	b.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
              pllp = 7U;
 80043c6:	2307      	movs	r3, #7
 80043c8:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	fb03 f202 	mul.w	r2, r3, r2
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	61fb      	str	r3, [r7, #28]
      break;
 80043da:	e058      	b.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043e2:	d154      	bne.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
        frequency = HAL_RCC_GetSysClockFreq();
 80043e4:	f7fe fff6 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 80043e8:	61f8      	str	r0, [r7, #28]
      break;
 80043ea:	e050      	b.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 80043ec:	4b2c      	ldr	r3, [pc, #176]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80043ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043f2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80043f6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043fe:	d114      	bne.n	800442a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004400:	4b27      	ldr	r3, [pc, #156]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	0a1b      	lsrs	r3, r3, #8
 8004406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800440a:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	fb03 f202 	mul.w	r2, r3, r2
 8004414:	4b22      	ldr	r3, [pc, #136]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	0d5b      	lsrs	r3, r3, #21
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	3301      	adds	r3, #1
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	fbb2 f3f3 	udiv	r3, r2, r3
 8004426:	61fb      	str	r3, [r7, #28]
      break;
 8004428:	e033      	b.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004430:	d102      	bne.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0xa08>
        frequency = HSI_VALUE;
 8004432:	4b1d      	ldr	r3, [pc, #116]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8004434:	61fb      	str	r3, [r7, #28]
      break;
 8004436:	e02c      	b.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d129      	bne.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
        frequency = HAL_RCC_GetSysClockFreq();
 800443e:	f7fe ffc9 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8004442:	61f8      	str	r0, [r7, #28]
      break;
 8004444:	e025      	b.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      break;
 8004446:	bf00      	nop
 8004448:	e024      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800444a:	bf00      	nop
 800444c:	e022      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800444e:	bf00      	nop
 8004450:	e020      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004452:	bf00      	nop
 8004454:	e01e      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004456:	bf00      	nop
 8004458:	e01c      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800445a:	bf00      	nop
 800445c:	e01a      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800445e:	bf00      	nop
 8004460:	e018      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004462:	bf00      	nop
 8004464:	e016      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004466:	bf00      	nop
 8004468:	e014      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800446a:	bf00      	nop
 800446c:	e012      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800446e:	bf00      	nop
 8004470:	e010      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004472:	bf00      	nop
 8004474:	e00e      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004476:	bf00      	nop
 8004478:	e00c      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800447a:	bf00      	nop
 800447c:	e00a      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800447e:	bf00      	nop
 8004480:	e008      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004482:	bf00      	nop
 8004484:	e006      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004486:	bf00      	nop
 8004488:	e004      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800448a:	bf00      	nop
 800448c:	e002      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800448e:	bf00      	nop
 8004490:	e000      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004492:	bf00      	nop
    }
  }

  return(frequency);
 8004494:	69fb      	ldr	r3, [r7, #28]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40021000 	.word	0x40021000
 80044a4:	02dc6c00 	.word	0x02dc6c00
 80044a8:	00f42400 	.word	0x00f42400

080044ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e049      	b.n	8004552 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fc ff10 	bl	80012f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3304      	adds	r3, #4
 80044e8:	4619      	mov	r1, r3
 80044ea:	4610      	mov	r0, r2
 80044ec:	f000 feda 	bl	80052a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b01      	cmp	r3, #1
 800456e:	d001      	beq.n	8004574 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e04c      	b.n	800460e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a26      	ldr	r2, [pc, #152]	@ (800461c <HAL_TIM_Base_Start+0xc0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d022      	beq.n	80045cc <HAL_TIM_Base_Start+0x70>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800458e:	d01d      	beq.n	80045cc <HAL_TIM_Base_Start+0x70>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a22      	ldr	r2, [pc, #136]	@ (8004620 <HAL_TIM_Base_Start+0xc4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d018      	beq.n	80045cc <HAL_TIM_Base_Start+0x70>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a21      	ldr	r2, [pc, #132]	@ (8004624 <HAL_TIM_Base_Start+0xc8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d013      	beq.n	80045cc <HAL_TIM_Base_Start+0x70>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004628 <HAL_TIM_Base_Start+0xcc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00e      	beq.n	80045cc <HAL_TIM_Base_Start+0x70>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1e      	ldr	r2, [pc, #120]	@ (800462c <HAL_TIM_Base_Start+0xd0>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d009      	beq.n	80045cc <HAL_TIM_Base_Start+0x70>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004630 <HAL_TIM_Base_Start+0xd4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d004      	beq.n	80045cc <HAL_TIM_Base_Start+0x70>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004634 <HAL_TIM_Base_Start+0xd8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d115      	bne.n	80045f8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	4b19      	ldr	r3, [pc, #100]	@ (8004638 <HAL_TIM_Base_Start+0xdc>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b06      	cmp	r3, #6
 80045dc:	d015      	beq.n	800460a <HAL_TIM_Base_Start+0xae>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e4:	d011      	beq.n	800460a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 0201 	orr.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f6:	e008      	b.n	800460a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e000      	b.n	800460c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	40012c00 	.word	0x40012c00
 8004620:	40000400 	.word	0x40000400
 8004624:	40000800 	.word	0x40000800
 8004628:	40000c00 	.word	0x40000c00
 800462c:	40013400 	.word	0x40013400
 8004630:	40014000 	.word	0x40014000
 8004634:	40015000 	.word	0x40015000
 8004638:	00010007 	.word	0x00010007

0800463c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e049      	b.n	80046e2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f89d 	bl	80047a2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3304      	adds	r3, #4
 8004678:	4619      	mov	r1, r3
 800467a:	4610      	mov	r0, r2
 800467c:	f000 fe12 	bl	80052a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2202      	movs	r2, #2
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a1a      	ldr	r2, [r3, #32]
 8004700:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004704:	4013      	ands	r3, r2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10f      	bne.n	800472a <HAL_TIM_OC_DeInit+0x40>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6a1a      	ldr	r2, [r3, #32]
 8004710:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004714:	4013      	ands	r3, r2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d107      	bne.n	800472a <HAL_TIM_OC_DeInit+0x40>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0201 	bic.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f843 	bl	80047b6 <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d109      	bne.n	80047f0 <HAL_TIM_OC_Start+0x24>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	bf14      	ite	ne
 80047e8:	2301      	movne	r3, #1
 80047ea:	2300      	moveq	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	e03c      	b.n	800486a <HAL_TIM_OC_Start+0x9e>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d109      	bne.n	800480a <HAL_TIM_OC_Start+0x3e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	bf14      	ite	ne
 8004802:	2301      	movne	r3, #1
 8004804:	2300      	moveq	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	e02f      	b.n	800486a <HAL_TIM_OC_Start+0x9e>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d109      	bne.n	8004824 <HAL_TIM_OC_Start+0x58>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	bf14      	ite	ne
 800481c:	2301      	movne	r3, #1
 800481e:	2300      	moveq	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	e022      	b.n	800486a <HAL_TIM_OC_Start+0x9e>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b0c      	cmp	r3, #12
 8004828:	d109      	bne.n	800483e <HAL_TIM_OC_Start+0x72>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b01      	cmp	r3, #1
 8004834:	bf14      	ite	ne
 8004836:	2301      	movne	r3, #1
 8004838:	2300      	moveq	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	e015      	b.n	800486a <HAL_TIM_OC_Start+0x9e>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b10      	cmp	r3, #16
 8004842:	d109      	bne.n	8004858 <HAL_TIM_OC_Start+0x8c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	bf14      	ite	ne
 8004850:	2301      	movne	r3, #1
 8004852:	2300      	moveq	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	e008      	b.n	800486a <HAL_TIM_OC_Start+0x9e>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b01      	cmp	r3, #1
 8004862:	bf14      	ite	ne
 8004864:	2301      	movne	r3, #1
 8004866:	2300      	moveq	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e0a6      	b.n	80049c0 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d104      	bne.n	8004882 <HAL_TIM_OC_Start+0xb6>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004880:	e023      	b.n	80048ca <HAL_TIM_OC_Start+0xfe>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b04      	cmp	r3, #4
 8004886:	d104      	bne.n	8004892 <HAL_TIM_OC_Start+0xc6>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004890:	e01b      	b.n	80048ca <HAL_TIM_OC_Start+0xfe>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b08      	cmp	r3, #8
 8004896:	d104      	bne.n	80048a2 <HAL_TIM_OC_Start+0xd6>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048a0:	e013      	b.n	80048ca <HAL_TIM_OC_Start+0xfe>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b0c      	cmp	r3, #12
 80048a6:	d104      	bne.n	80048b2 <HAL_TIM_OC_Start+0xe6>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048b0:	e00b      	b.n	80048ca <HAL_TIM_OC_Start+0xfe>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d104      	bne.n	80048c2 <HAL_TIM_OC_Start+0xf6>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048c0:	e003      	b.n	80048ca <HAL_TIM_OC_Start+0xfe>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2201      	movs	r2, #1
 80048d0:	6839      	ldr	r1, [r7, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f001 fa40 	bl	8005d58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a3a      	ldr	r2, [pc, #232]	@ (80049c8 <HAL_TIM_OC_Start+0x1fc>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d018      	beq.n	8004914 <HAL_TIM_OC_Start+0x148>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a39      	ldr	r2, [pc, #228]	@ (80049cc <HAL_TIM_OC_Start+0x200>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d013      	beq.n	8004914 <HAL_TIM_OC_Start+0x148>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a37      	ldr	r2, [pc, #220]	@ (80049d0 <HAL_TIM_OC_Start+0x204>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00e      	beq.n	8004914 <HAL_TIM_OC_Start+0x148>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a36      	ldr	r2, [pc, #216]	@ (80049d4 <HAL_TIM_OC_Start+0x208>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d009      	beq.n	8004914 <HAL_TIM_OC_Start+0x148>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a34      	ldr	r2, [pc, #208]	@ (80049d8 <HAL_TIM_OC_Start+0x20c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d004      	beq.n	8004914 <HAL_TIM_OC_Start+0x148>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a33      	ldr	r2, [pc, #204]	@ (80049dc <HAL_TIM_OC_Start+0x210>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d101      	bne.n	8004918 <HAL_TIM_OC_Start+0x14c>
 8004914:	2301      	movs	r3, #1
 8004916:	e000      	b.n	800491a <HAL_TIM_OC_Start+0x14e>
 8004918:	2300      	movs	r3, #0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800492c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a25      	ldr	r2, [pc, #148]	@ (80049c8 <HAL_TIM_OC_Start+0x1fc>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d022      	beq.n	800497e <HAL_TIM_OC_Start+0x1b2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004940:	d01d      	beq.n	800497e <HAL_TIM_OC_Start+0x1b2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a26      	ldr	r2, [pc, #152]	@ (80049e0 <HAL_TIM_OC_Start+0x214>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d018      	beq.n	800497e <HAL_TIM_OC_Start+0x1b2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a24      	ldr	r2, [pc, #144]	@ (80049e4 <HAL_TIM_OC_Start+0x218>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d013      	beq.n	800497e <HAL_TIM_OC_Start+0x1b2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a23      	ldr	r2, [pc, #140]	@ (80049e8 <HAL_TIM_OC_Start+0x21c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00e      	beq.n	800497e <HAL_TIM_OC_Start+0x1b2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a19      	ldr	r2, [pc, #100]	@ (80049cc <HAL_TIM_OC_Start+0x200>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d009      	beq.n	800497e <HAL_TIM_OC_Start+0x1b2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a18      	ldr	r2, [pc, #96]	@ (80049d0 <HAL_TIM_OC_Start+0x204>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d004      	beq.n	800497e <HAL_TIM_OC_Start+0x1b2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a18      	ldr	r2, [pc, #96]	@ (80049dc <HAL_TIM_OC_Start+0x210>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d115      	bne.n	80049aa <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	4b19      	ldr	r3, [pc, #100]	@ (80049ec <HAL_TIM_OC_Start+0x220>)
 8004986:	4013      	ands	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b06      	cmp	r3, #6
 800498e:	d015      	beq.n	80049bc <HAL_TIM_OC_Start+0x1f0>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004996:	d011      	beq.n	80049bc <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a8:	e008      	b.n	80049bc <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0201 	orr.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e000      	b.n	80049be <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40012c00 	.word	0x40012c00
 80049cc:	40013400 	.word	0x40013400
 80049d0:	40014000 	.word	0x40014000
 80049d4:	40014400 	.word	0x40014400
 80049d8:	40014800 	.word	0x40014800
 80049dc:	40015000 	.word	0x40015000
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40000800 	.word	0x40000800
 80049e8:	40000c00 	.word	0x40000c00
 80049ec:	00010007 	.word	0x00010007

080049f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e049      	b.n	8004a96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f841 	bl	8004a9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	f000 fc38 	bl	80052a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
	...

08004ab4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d109      	bne.n	8004ad8 <HAL_TIM_PWM_Start+0x24>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	bf14      	ite	ne
 8004ad0:	2301      	movne	r3, #1
 8004ad2:	2300      	moveq	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	e03c      	b.n	8004b52 <HAL_TIM_PWM_Start+0x9e>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d109      	bne.n	8004af2 <HAL_TIM_PWM_Start+0x3e>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	bf14      	ite	ne
 8004aea:	2301      	movne	r3, #1
 8004aec:	2300      	moveq	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	e02f      	b.n	8004b52 <HAL_TIM_PWM_Start+0x9e>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d109      	bne.n	8004b0c <HAL_TIM_PWM_Start+0x58>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	bf14      	ite	ne
 8004b04:	2301      	movne	r3, #1
 8004b06:	2300      	moveq	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	e022      	b.n	8004b52 <HAL_TIM_PWM_Start+0x9e>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2b0c      	cmp	r3, #12
 8004b10:	d109      	bne.n	8004b26 <HAL_TIM_PWM_Start+0x72>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	bf14      	ite	ne
 8004b1e:	2301      	movne	r3, #1
 8004b20:	2300      	moveq	r3, #0
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	e015      	b.n	8004b52 <HAL_TIM_PWM_Start+0x9e>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d109      	bne.n	8004b40 <HAL_TIM_PWM_Start+0x8c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	bf14      	ite	ne
 8004b38:	2301      	movne	r3, #1
 8004b3a:	2300      	moveq	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	e008      	b.n	8004b52 <HAL_TIM_PWM_Start+0x9e>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e0a6      	b.n	8004ca8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <HAL_TIM_PWM_Start+0xb6>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b68:	e023      	b.n	8004bb2 <HAL_TIM_PWM_Start+0xfe>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d104      	bne.n	8004b7a <HAL_TIM_PWM_Start+0xc6>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b78:	e01b      	b.n	8004bb2 <HAL_TIM_PWM_Start+0xfe>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d104      	bne.n	8004b8a <HAL_TIM_PWM_Start+0xd6>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b88:	e013      	b.n	8004bb2 <HAL_TIM_PWM_Start+0xfe>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b0c      	cmp	r3, #12
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_PWM_Start+0xe6>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b98:	e00b      	b.n	8004bb2 <HAL_TIM_PWM_Start+0xfe>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_PWM_Start+0xf6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ba8:	e003      	b.n	8004bb2 <HAL_TIM_PWM_Start+0xfe>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2202      	movs	r2, #2
 8004bae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	6839      	ldr	r1, [r7, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f001 f8cc 	bl	8005d58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a3a      	ldr	r2, [pc, #232]	@ (8004cb0 <HAL_TIM_PWM_Start+0x1fc>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d018      	beq.n	8004bfc <HAL_TIM_PWM_Start+0x148>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a39      	ldr	r2, [pc, #228]	@ (8004cb4 <HAL_TIM_PWM_Start+0x200>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d013      	beq.n	8004bfc <HAL_TIM_PWM_Start+0x148>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a37      	ldr	r2, [pc, #220]	@ (8004cb8 <HAL_TIM_PWM_Start+0x204>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00e      	beq.n	8004bfc <HAL_TIM_PWM_Start+0x148>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a36      	ldr	r2, [pc, #216]	@ (8004cbc <HAL_TIM_PWM_Start+0x208>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d009      	beq.n	8004bfc <HAL_TIM_PWM_Start+0x148>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a34      	ldr	r2, [pc, #208]	@ (8004cc0 <HAL_TIM_PWM_Start+0x20c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <HAL_TIM_PWM_Start+0x148>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a33      	ldr	r2, [pc, #204]	@ (8004cc4 <HAL_TIM_PWM_Start+0x210>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d101      	bne.n	8004c00 <HAL_TIM_PWM_Start+0x14c>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <HAL_TIM_PWM_Start+0x14e>
 8004c00:	2300      	movs	r3, #0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d007      	beq.n	8004c16 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a25      	ldr	r2, [pc, #148]	@ (8004cb0 <HAL_TIM_PWM_Start+0x1fc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d022      	beq.n	8004c66 <HAL_TIM_PWM_Start+0x1b2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c28:	d01d      	beq.n	8004c66 <HAL_TIM_PWM_Start+0x1b2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a26      	ldr	r2, [pc, #152]	@ (8004cc8 <HAL_TIM_PWM_Start+0x214>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d018      	beq.n	8004c66 <HAL_TIM_PWM_Start+0x1b2>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a24      	ldr	r2, [pc, #144]	@ (8004ccc <HAL_TIM_PWM_Start+0x218>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d013      	beq.n	8004c66 <HAL_TIM_PWM_Start+0x1b2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a23      	ldr	r2, [pc, #140]	@ (8004cd0 <HAL_TIM_PWM_Start+0x21c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00e      	beq.n	8004c66 <HAL_TIM_PWM_Start+0x1b2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a19      	ldr	r2, [pc, #100]	@ (8004cb4 <HAL_TIM_PWM_Start+0x200>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d009      	beq.n	8004c66 <HAL_TIM_PWM_Start+0x1b2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a18      	ldr	r2, [pc, #96]	@ (8004cb8 <HAL_TIM_PWM_Start+0x204>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d004      	beq.n	8004c66 <HAL_TIM_PWM_Start+0x1b2>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a18      	ldr	r2, [pc, #96]	@ (8004cc4 <HAL_TIM_PWM_Start+0x210>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d115      	bne.n	8004c92 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	4b19      	ldr	r3, [pc, #100]	@ (8004cd4 <HAL_TIM_PWM_Start+0x220>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b06      	cmp	r3, #6
 8004c76:	d015      	beq.n	8004ca4 <HAL_TIM_PWM_Start+0x1f0>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c7e:	d011      	beq.n	8004ca4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c90:	e008      	b.n	8004ca4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0201 	orr.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	e000      	b.n	8004ca6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40012c00 	.word	0x40012c00
 8004cb4:	40013400 	.word	0x40013400
 8004cb8:	40014000 	.word	0x40014000
 8004cbc:	40014400 	.word	0x40014400
 8004cc0:	40014800 	.word	0x40014800
 8004cc4:	40015000 	.word	0x40015000
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	40000800 	.word	0x40000800
 8004cd0:	40000c00 	.word	0x40000c00
 8004cd4:	00010007 	.word	0x00010007

08004cd8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d101      	bne.n	8004cf6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	e066      	b.n	8004dc4 <HAL_TIM_OC_ConfigChannel+0xec>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b14      	cmp	r3, #20
 8004d02:	d857      	bhi.n	8004db4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004d04:	a201      	add	r2, pc, #4	@ (adr r2, 8004d0c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004d61 	.word	0x08004d61
 8004d10:	08004db5 	.word	0x08004db5
 8004d14:	08004db5 	.word	0x08004db5
 8004d18:	08004db5 	.word	0x08004db5
 8004d1c:	08004d6f 	.word	0x08004d6f
 8004d20:	08004db5 	.word	0x08004db5
 8004d24:	08004db5 	.word	0x08004db5
 8004d28:	08004db5 	.word	0x08004db5
 8004d2c:	08004d7d 	.word	0x08004d7d
 8004d30:	08004db5 	.word	0x08004db5
 8004d34:	08004db5 	.word	0x08004db5
 8004d38:	08004db5 	.word	0x08004db5
 8004d3c:	08004d8b 	.word	0x08004d8b
 8004d40:	08004db5 	.word	0x08004db5
 8004d44:	08004db5 	.word	0x08004db5
 8004d48:	08004db5 	.word	0x08004db5
 8004d4c:	08004d99 	.word	0x08004d99
 8004d50:	08004db5 	.word	0x08004db5
 8004d54:	08004db5 	.word	0x08004db5
 8004d58:	08004db5 	.word	0x08004db5
 8004d5c:	08004da7 	.word	0x08004da7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fb50 	bl	800540c <TIM_OC1_SetConfig>
      break;
 8004d6c:	e025      	b.n	8004dba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fbe3 	bl	8005540 <TIM_OC2_SetConfig>
      break;
 8004d7a:	e01e      	b.n	8004dba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fc70 	bl	8005668 <TIM_OC3_SetConfig>
      break;
 8004d88:	e017      	b.n	8004dba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68b9      	ldr	r1, [r7, #8]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fcfb 	bl	800578c <TIM_OC4_SetConfig>
      break;
 8004d96:	e010      	b.n	8004dba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fd88 	bl	80058b4 <TIM_OC5_SetConfig>
      break;
 8004da4:	e009      	b.n	8004dba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68b9      	ldr	r1, [r7, #8]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fdeb 	bl	8005988 <TIM_OC6_SetConfig>
      break;
 8004db2:	e002      	b.n	8004dba <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	75fb      	strb	r3, [r7, #23]
      break;
 8004db8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e0ff      	b.n	8004fea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b14      	cmp	r3, #20
 8004df6:	f200 80f0 	bhi.w	8004fda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8004e00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004e55 	.word	0x08004e55
 8004e04:	08004fdb 	.word	0x08004fdb
 8004e08:	08004fdb 	.word	0x08004fdb
 8004e0c:	08004fdb 	.word	0x08004fdb
 8004e10:	08004e95 	.word	0x08004e95
 8004e14:	08004fdb 	.word	0x08004fdb
 8004e18:	08004fdb 	.word	0x08004fdb
 8004e1c:	08004fdb 	.word	0x08004fdb
 8004e20:	08004ed7 	.word	0x08004ed7
 8004e24:	08004fdb 	.word	0x08004fdb
 8004e28:	08004fdb 	.word	0x08004fdb
 8004e2c:	08004fdb 	.word	0x08004fdb
 8004e30:	08004f17 	.word	0x08004f17
 8004e34:	08004fdb 	.word	0x08004fdb
 8004e38:	08004fdb 	.word	0x08004fdb
 8004e3c:	08004fdb 	.word	0x08004fdb
 8004e40:	08004f59 	.word	0x08004f59
 8004e44:	08004fdb 	.word	0x08004fdb
 8004e48:	08004fdb 	.word	0x08004fdb
 8004e4c:	08004fdb 	.word	0x08004fdb
 8004e50:	08004f99 	.word	0x08004f99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fad6 	bl	800540c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0208 	orr.w	r2, r2, #8
 8004e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0204 	bic.w	r2, r2, #4
 8004e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6999      	ldr	r1, [r3, #24]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	619a      	str	r2, [r3, #24]
      break;
 8004e92:	e0a5      	b.n	8004fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fb50 	bl	8005540 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6999      	ldr	r1, [r3, #24]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	021a      	lsls	r2, r3, #8
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	619a      	str	r2, [r3, #24]
      break;
 8004ed4:	e084      	b.n	8004fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68b9      	ldr	r1, [r7, #8]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fbc3 	bl	8005668 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69da      	ldr	r2, [r3, #28]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f042 0208 	orr.w	r2, r2, #8
 8004ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69da      	ldr	r2, [r3, #28]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0204 	bic.w	r2, r2, #4
 8004f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69d9      	ldr	r1, [r3, #28]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	61da      	str	r2, [r3, #28]
      break;
 8004f14:	e064      	b.n	8004fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fc35 	bl	800578c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69d9      	ldr	r1, [r3, #28]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	021a      	lsls	r2, r3, #8
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	61da      	str	r2, [r3, #28]
      break;
 8004f56:	e043      	b.n	8004fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68b9      	ldr	r1, [r7, #8]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fca8 	bl	80058b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0208 	orr.w	r2, r2, #8
 8004f72:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0204 	bic.w	r2, r2, #4
 8004f82:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	691a      	ldr	r2, [r3, #16]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004f96:	e023      	b.n	8004fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fcf2 	bl	8005988 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fb2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fc2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	021a      	lsls	r2, r3, #8
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004fd8:	e002      	b.n	8004fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8004fde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop

08004ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_TIM_ConfigClockSource+0x1c>
 800500c:	2302      	movs	r3, #2
 800500e:	e0f6      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x20a>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800502e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800503a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a6f      	ldr	r2, [pc, #444]	@ (8005208 <HAL_TIM_ConfigClockSource+0x214>)
 800504a:	4293      	cmp	r3, r2
 800504c:	f000 80c1 	beq.w	80051d2 <HAL_TIM_ConfigClockSource+0x1de>
 8005050:	4a6d      	ldr	r2, [pc, #436]	@ (8005208 <HAL_TIM_ConfigClockSource+0x214>)
 8005052:	4293      	cmp	r3, r2
 8005054:	f200 80c6 	bhi.w	80051e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005058:	4a6c      	ldr	r2, [pc, #432]	@ (800520c <HAL_TIM_ConfigClockSource+0x218>)
 800505a:	4293      	cmp	r3, r2
 800505c:	f000 80b9 	beq.w	80051d2 <HAL_TIM_ConfigClockSource+0x1de>
 8005060:	4a6a      	ldr	r2, [pc, #424]	@ (800520c <HAL_TIM_ConfigClockSource+0x218>)
 8005062:	4293      	cmp	r3, r2
 8005064:	f200 80be 	bhi.w	80051e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005068:	4a69      	ldr	r2, [pc, #420]	@ (8005210 <HAL_TIM_ConfigClockSource+0x21c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	f000 80b1 	beq.w	80051d2 <HAL_TIM_ConfigClockSource+0x1de>
 8005070:	4a67      	ldr	r2, [pc, #412]	@ (8005210 <HAL_TIM_ConfigClockSource+0x21c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	f200 80b6 	bhi.w	80051e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005078:	4a66      	ldr	r2, [pc, #408]	@ (8005214 <HAL_TIM_ConfigClockSource+0x220>)
 800507a:	4293      	cmp	r3, r2
 800507c:	f000 80a9 	beq.w	80051d2 <HAL_TIM_ConfigClockSource+0x1de>
 8005080:	4a64      	ldr	r2, [pc, #400]	@ (8005214 <HAL_TIM_ConfigClockSource+0x220>)
 8005082:	4293      	cmp	r3, r2
 8005084:	f200 80ae 	bhi.w	80051e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005088:	4a63      	ldr	r2, [pc, #396]	@ (8005218 <HAL_TIM_ConfigClockSource+0x224>)
 800508a:	4293      	cmp	r3, r2
 800508c:	f000 80a1 	beq.w	80051d2 <HAL_TIM_ConfigClockSource+0x1de>
 8005090:	4a61      	ldr	r2, [pc, #388]	@ (8005218 <HAL_TIM_ConfigClockSource+0x224>)
 8005092:	4293      	cmp	r3, r2
 8005094:	f200 80a6 	bhi.w	80051e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005098:	4a60      	ldr	r2, [pc, #384]	@ (800521c <HAL_TIM_ConfigClockSource+0x228>)
 800509a:	4293      	cmp	r3, r2
 800509c:	f000 8099 	beq.w	80051d2 <HAL_TIM_ConfigClockSource+0x1de>
 80050a0:	4a5e      	ldr	r2, [pc, #376]	@ (800521c <HAL_TIM_ConfigClockSource+0x228>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	f200 809e 	bhi.w	80051e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80050a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80050ac:	f000 8091 	beq.w	80051d2 <HAL_TIM_ConfigClockSource+0x1de>
 80050b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80050b4:	f200 8096 	bhi.w	80051e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80050b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050bc:	f000 8089 	beq.w	80051d2 <HAL_TIM_ConfigClockSource+0x1de>
 80050c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050c4:	f200 808e 	bhi.w	80051e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80050c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050cc:	d03e      	beq.n	800514c <HAL_TIM_ConfigClockSource+0x158>
 80050ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050d2:	f200 8087 	bhi.w	80051e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80050d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050da:	f000 8086 	beq.w	80051ea <HAL_TIM_ConfigClockSource+0x1f6>
 80050de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050e2:	d87f      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80050e4:	2b70      	cmp	r3, #112	@ 0x70
 80050e6:	d01a      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x12a>
 80050e8:	2b70      	cmp	r3, #112	@ 0x70
 80050ea:	d87b      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80050ec:	2b60      	cmp	r3, #96	@ 0x60
 80050ee:	d050      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x19e>
 80050f0:	2b60      	cmp	r3, #96	@ 0x60
 80050f2:	d877      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80050f4:	2b50      	cmp	r3, #80	@ 0x50
 80050f6:	d03c      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x17e>
 80050f8:	2b50      	cmp	r3, #80	@ 0x50
 80050fa:	d873      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80050fc:	2b40      	cmp	r3, #64	@ 0x40
 80050fe:	d058      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x1be>
 8005100:	2b40      	cmp	r3, #64	@ 0x40
 8005102:	d86f      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005104:	2b30      	cmp	r3, #48	@ 0x30
 8005106:	d064      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x1de>
 8005108:	2b30      	cmp	r3, #48	@ 0x30
 800510a:	d86b      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800510c:	2b20      	cmp	r3, #32
 800510e:	d060      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x1de>
 8005110:	2b20      	cmp	r3, #32
 8005112:	d867      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005114:	2b00      	cmp	r3, #0
 8005116:	d05c      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x1de>
 8005118:	2b10      	cmp	r3, #16
 800511a:	d05a      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x1de>
 800511c:	e062      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800512e:	f000 fdf3 	bl	8005d18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005140:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	609a      	str	r2, [r3, #8]
      break;
 800514a:	e04f      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800515c:	f000 fddc 	bl	8005d18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800516e:	609a      	str	r2, [r3, #8]
      break;
 8005170:	e03c      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800517e:	461a      	mov	r2, r3
 8005180:	f000 fd4e 	bl	8005c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2150      	movs	r1, #80	@ 0x50
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fda7 	bl	8005cde <TIM_ITRx_SetConfig>
      break;
 8005190:	e02c      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800519e:	461a      	mov	r2, r3
 80051a0:	f000 fd6d 	bl	8005c7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2160      	movs	r1, #96	@ 0x60
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fd97 	bl	8005cde <TIM_ITRx_SetConfig>
      break;
 80051b0:	e01c      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051be:	461a      	mov	r2, r3
 80051c0:	f000 fd2e 	bl	8005c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2140      	movs	r1, #64	@ 0x40
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fd87 	bl	8005cde <TIM_ITRx_SetConfig>
      break;
 80051d0:	e00c      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f000 fd7e 	bl	8005cde <TIM_ITRx_SetConfig>
      break;
 80051e2:	e003      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	73fb      	strb	r3, [r7, #15]
      break;
 80051e8:	e000      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80051ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	00100070 	.word	0x00100070
 800520c:	00100060 	.word	0x00100060
 8005210:	00100050 	.word	0x00100050
 8005214:	00100040 	.word	0x00100040
 8005218:	00100030 	.word	0x00100030
 800521c:	00100020 	.word	0x00100020

08005220 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005234:	2302      	movs	r3, #2
 8005236:	e031      	b.n	800529c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fc08 	bl	8005a60 <TIM_SlaveTimer_SetConfig>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d009      	beq.n	800526a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e018      	b.n	800529c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005278:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005288:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a4c      	ldr	r2, [pc, #304]	@ (80053e8 <TIM_Base_SetConfig+0x144>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d017      	beq.n	80052ec <TIM_Base_SetConfig+0x48>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c2:	d013      	beq.n	80052ec <TIM_Base_SetConfig+0x48>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a49      	ldr	r2, [pc, #292]	@ (80053ec <TIM_Base_SetConfig+0x148>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00f      	beq.n	80052ec <TIM_Base_SetConfig+0x48>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a48      	ldr	r2, [pc, #288]	@ (80053f0 <TIM_Base_SetConfig+0x14c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00b      	beq.n	80052ec <TIM_Base_SetConfig+0x48>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a47      	ldr	r2, [pc, #284]	@ (80053f4 <TIM_Base_SetConfig+0x150>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d007      	beq.n	80052ec <TIM_Base_SetConfig+0x48>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a46      	ldr	r2, [pc, #280]	@ (80053f8 <TIM_Base_SetConfig+0x154>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d003      	beq.n	80052ec <TIM_Base_SetConfig+0x48>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a45      	ldr	r2, [pc, #276]	@ (80053fc <TIM_Base_SetConfig+0x158>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d108      	bne.n	80052fe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a39      	ldr	r2, [pc, #228]	@ (80053e8 <TIM_Base_SetConfig+0x144>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d023      	beq.n	800534e <TIM_Base_SetConfig+0xaa>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800530c:	d01f      	beq.n	800534e <TIM_Base_SetConfig+0xaa>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a36      	ldr	r2, [pc, #216]	@ (80053ec <TIM_Base_SetConfig+0x148>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d01b      	beq.n	800534e <TIM_Base_SetConfig+0xaa>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a35      	ldr	r2, [pc, #212]	@ (80053f0 <TIM_Base_SetConfig+0x14c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d017      	beq.n	800534e <TIM_Base_SetConfig+0xaa>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a34      	ldr	r2, [pc, #208]	@ (80053f4 <TIM_Base_SetConfig+0x150>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <TIM_Base_SetConfig+0xaa>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a33      	ldr	r2, [pc, #204]	@ (80053f8 <TIM_Base_SetConfig+0x154>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00f      	beq.n	800534e <TIM_Base_SetConfig+0xaa>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a33      	ldr	r2, [pc, #204]	@ (8005400 <TIM_Base_SetConfig+0x15c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00b      	beq.n	800534e <TIM_Base_SetConfig+0xaa>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a32      	ldr	r2, [pc, #200]	@ (8005404 <TIM_Base_SetConfig+0x160>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d007      	beq.n	800534e <TIM_Base_SetConfig+0xaa>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a31      	ldr	r2, [pc, #196]	@ (8005408 <TIM_Base_SetConfig+0x164>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d003      	beq.n	800534e <TIM_Base_SetConfig+0xaa>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a2c      	ldr	r2, [pc, #176]	@ (80053fc <TIM_Base_SetConfig+0x158>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d108      	bne.n	8005360 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a18      	ldr	r2, [pc, #96]	@ (80053e8 <TIM_Base_SetConfig+0x144>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d013      	beq.n	80053b4 <TIM_Base_SetConfig+0x110>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a1a      	ldr	r2, [pc, #104]	@ (80053f8 <TIM_Base_SetConfig+0x154>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00f      	beq.n	80053b4 <TIM_Base_SetConfig+0x110>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a1a      	ldr	r2, [pc, #104]	@ (8005400 <TIM_Base_SetConfig+0x15c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00b      	beq.n	80053b4 <TIM_Base_SetConfig+0x110>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a19      	ldr	r2, [pc, #100]	@ (8005404 <TIM_Base_SetConfig+0x160>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d007      	beq.n	80053b4 <TIM_Base_SetConfig+0x110>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a18      	ldr	r2, [pc, #96]	@ (8005408 <TIM_Base_SetConfig+0x164>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d003      	beq.n	80053b4 <TIM_Base_SetConfig+0x110>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a13      	ldr	r2, [pc, #76]	@ (80053fc <TIM_Base_SetConfig+0x158>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d103      	bne.n	80053bc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d105      	bne.n	80053da <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f023 0201 	bic.w	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	611a      	str	r2, [r3, #16]
  }
}
 80053da:	bf00      	nop
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40012c00 	.word	0x40012c00
 80053ec:	40000400 	.word	0x40000400
 80053f0:	40000800 	.word	0x40000800
 80053f4:	40000c00 	.word	0x40000c00
 80053f8:	40013400 	.word	0x40013400
 80053fc:	40015000 	.word	0x40015000
 8005400:	40014000 	.word	0x40014000
 8005404:	40014400 	.word	0x40014400
 8005408:	40014800 	.word	0x40014800

0800540c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	f023 0201 	bic.w	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800543a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800543e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0303 	bic.w	r3, r3, #3
 8005446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f023 0302 	bic.w	r3, r3, #2
 8005458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a30      	ldr	r2, [pc, #192]	@ (8005528 <TIM_OC1_SetConfig+0x11c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d013      	beq.n	8005494 <TIM_OC1_SetConfig+0x88>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a2f      	ldr	r2, [pc, #188]	@ (800552c <TIM_OC1_SetConfig+0x120>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00f      	beq.n	8005494 <TIM_OC1_SetConfig+0x88>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a2e      	ldr	r2, [pc, #184]	@ (8005530 <TIM_OC1_SetConfig+0x124>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00b      	beq.n	8005494 <TIM_OC1_SetConfig+0x88>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a2d      	ldr	r2, [pc, #180]	@ (8005534 <TIM_OC1_SetConfig+0x128>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d007      	beq.n	8005494 <TIM_OC1_SetConfig+0x88>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a2c      	ldr	r2, [pc, #176]	@ (8005538 <TIM_OC1_SetConfig+0x12c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d003      	beq.n	8005494 <TIM_OC1_SetConfig+0x88>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a2b      	ldr	r2, [pc, #172]	@ (800553c <TIM_OC1_SetConfig+0x130>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d10c      	bne.n	80054ae <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f023 0308 	bic.w	r3, r3, #8
 800549a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f023 0304 	bic.w	r3, r3, #4
 80054ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005528 <TIM_OC1_SetConfig+0x11c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d013      	beq.n	80054de <TIM_OC1_SetConfig+0xd2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a1c      	ldr	r2, [pc, #112]	@ (800552c <TIM_OC1_SetConfig+0x120>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00f      	beq.n	80054de <TIM_OC1_SetConfig+0xd2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005530 <TIM_OC1_SetConfig+0x124>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00b      	beq.n	80054de <TIM_OC1_SetConfig+0xd2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005534 <TIM_OC1_SetConfig+0x128>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d007      	beq.n	80054de <TIM_OC1_SetConfig+0xd2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a19      	ldr	r2, [pc, #100]	@ (8005538 <TIM_OC1_SetConfig+0x12c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d003      	beq.n	80054de <TIM_OC1_SetConfig+0xd2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a18      	ldr	r2, [pc, #96]	@ (800553c <TIM_OC1_SetConfig+0x130>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d111      	bne.n	8005502 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	621a      	str	r2, [r3, #32]
}
 800551c:	bf00      	nop
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	40012c00 	.word	0x40012c00
 800552c:	40013400 	.word	0x40013400
 8005530:	40014000 	.word	0x40014000
 8005534:	40014400 	.word	0x40014400
 8005538:	40014800 	.word	0x40014800
 800553c:	40015000 	.word	0x40015000

08005540 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	f023 0210 	bic.w	r2, r3, #16
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800556e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800557a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	021b      	lsls	r3, r3, #8
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	4313      	orrs	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f023 0320 	bic.w	r3, r3, #32
 800558e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a2c      	ldr	r2, [pc, #176]	@ (8005650 <TIM_OC2_SetConfig+0x110>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d007      	beq.n	80055b4 <TIM_OC2_SetConfig+0x74>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a2b      	ldr	r2, [pc, #172]	@ (8005654 <TIM_OC2_SetConfig+0x114>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d003      	beq.n	80055b4 <TIM_OC2_SetConfig+0x74>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005658 <TIM_OC2_SetConfig+0x118>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d10d      	bne.n	80055d0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005650 <TIM_OC2_SetConfig+0x110>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d013      	beq.n	8005600 <TIM_OC2_SetConfig+0xc0>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a1e      	ldr	r2, [pc, #120]	@ (8005654 <TIM_OC2_SetConfig+0x114>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00f      	beq.n	8005600 <TIM_OC2_SetConfig+0xc0>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a1e      	ldr	r2, [pc, #120]	@ (800565c <TIM_OC2_SetConfig+0x11c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00b      	beq.n	8005600 <TIM_OC2_SetConfig+0xc0>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005660 <TIM_OC2_SetConfig+0x120>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d007      	beq.n	8005600 <TIM_OC2_SetConfig+0xc0>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005664 <TIM_OC2_SetConfig+0x124>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d003      	beq.n	8005600 <TIM_OC2_SetConfig+0xc0>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a17      	ldr	r2, [pc, #92]	@ (8005658 <TIM_OC2_SetConfig+0x118>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d113      	bne.n	8005628 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005606:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800560e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	621a      	str	r2, [r3, #32]
}
 8005642:	bf00      	nop
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40012c00 	.word	0x40012c00
 8005654:	40013400 	.word	0x40013400
 8005658:	40015000 	.word	0x40015000
 800565c:	40014000 	.word	0x40014000
 8005660:	40014400 	.word	0x40014400
 8005664:	40014800 	.word	0x40014800

08005668 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800569a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0303 	bic.w	r3, r3, #3
 80056a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005774 <TIM_OC3_SetConfig+0x10c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d007      	beq.n	80056da <TIM_OC3_SetConfig+0x72>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005778 <TIM_OC3_SetConfig+0x110>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d003      	beq.n	80056da <TIM_OC3_SetConfig+0x72>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a29      	ldr	r2, [pc, #164]	@ (800577c <TIM_OC3_SetConfig+0x114>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d10d      	bne.n	80056f6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005774 <TIM_OC3_SetConfig+0x10c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d013      	beq.n	8005726 <TIM_OC3_SetConfig+0xbe>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a1d      	ldr	r2, [pc, #116]	@ (8005778 <TIM_OC3_SetConfig+0x110>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00f      	beq.n	8005726 <TIM_OC3_SetConfig+0xbe>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a1d      	ldr	r2, [pc, #116]	@ (8005780 <TIM_OC3_SetConfig+0x118>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00b      	beq.n	8005726 <TIM_OC3_SetConfig+0xbe>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a1c      	ldr	r2, [pc, #112]	@ (8005784 <TIM_OC3_SetConfig+0x11c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d007      	beq.n	8005726 <TIM_OC3_SetConfig+0xbe>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a1b      	ldr	r2, [pc, #108]	@ (8005788 <TIM_OC3_SetConfig+0x120>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d003      	beq.n	8005726 <TIM_OC3_SetConfig+0xbe>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a16      	ldr	r2, [pc, #88]	@ (800577c <TIM_OC3_SetConfig+0x114>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d113      	bne.n	800574e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800572c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4313      	orrs	r3, r2
 8005740:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	011b      	lsls	r3, r3, #4
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	621a      	str	r2, [r3, #32]
}
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	40012c00 	.word	0x40012c00
 8005778:	40013400 	.word	0x40013400
 800577c:	40015000 	.word	0x40015000
 8005780:	40014000 	.word	0x40014000
 8005784:	40014400 	.word	0x40014400
 8005788:	40014800 	.word	0x40014800

0800578c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	021b      	lsls	r3, r3, #8
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	031b      	lsls	r3, r3, #12
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a2c      	ldr	r2, [pc, #176]	@ (800589c <TIM_OC4_SetConfig+0x110>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d007      	beq.n	8005800 <TIM_OC4_SetConfig+0x74>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a2b      	ldr	r2, [pc, #172]	@ (80058a0 <TIM_OC4_SetConfig+0x114>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d003      	beq.n	8005800 <TIM_OC4_SetConfig+0x74>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a2a      	ldr	r2, [pc, #168]	@ (80058a4 <TIM_OC4_SetConfig+0x118>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d10d      	bne.n	800581c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	031b      	lsls	r3, r3, #12
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800581a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a1f      	ldr	r2, [pc, #124]	@ (800589c <TIM_OC4_SetConfig+0x110>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d013      	beq.n	800584c <TIM_OC4_SetConfig+0xc0>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a1e      	ldr	r2, [pc, #120]	@ (80058a0 <TIM_OC4_SetConfig+0x114>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00f      	beq.n	800584c <TIM_OC4_SetConfig+0xc0>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a1e      	ldr	r2, [pc, #120]	@ (80058a8 <TIM_OC4_SetConfig+0x11c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00b      	beq.n	800584c <TIM_OC4_SetConfig+0xc0>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a1d      	ldr	r2, [pc, #116]	@ (80058ac <TIM_OC4_SetConfig+0x120>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d007      	beq.n	800584c <TIM_OC4_SetConfig+0xc0>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a1c      	ldr	r2, [pc, #112]	@ (80058b0 <TIM_OC4_SetConfig+0x124>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d003      	beq.n	800584c <TIM_OC4_SetConfig+0xc0>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a17      	ldr	r2, [pc, #92]	@ (80058a4 <TIM_OC4_SetConfig+0x118>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d113      	bne.n	8005874 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005852:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800585a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	019b      	lsls	r3, r3, #6
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	019b      	lsls	r3, r3, #6
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	40012c00 	.word	0x40012c00
 80058a0:	40013400 	.word	0x40013400
 80058a4:	40015000 	.word	0x40015000
 80058a8:	40014000 	.word	0x40014000
 80058ac:	40014400 	.word	0x40014400
 80058b0:	40014800 	.word	0x40014800

080058b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80058f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	041b      	lsls	r3, r3, #16
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a19      	ldr	r2, [pc, #100]	@ (8005970 <TIM_OC5_SetConfig+0xbc>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d013      	beq.n	8005936 <TIM_OC5_SetConfig+0x82>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a18      	ldr	r2, [pc, #96]	@ (8005974 <TIM_OC5_SetConfig+0xc0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00f      	beq.n	8005936 <TIM_OC5_SetConfig+0x82>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a17      	ldr	r2, [pc, #92]	@ (8005978 <TIM_OC5_SetConfig+0xc4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00b      	beq.n	8005936 <TIM_OC5_SetConfig+0x82>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a16      	ldr	r2, [pc, #88]	@ (800597c <TIM_OC5_SetConfig+0xc8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d007      	beq.n	8005936 <TIM_OC5_SetConfig+0x82>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a15      	ldr	r2, [pc, #84]	@ (8005980 <TIM_OC5_SetConfig+0xcc>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d003      	beq.n	8005936 <TIM_OC5_SetConfig+0x82>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a14      	ldr	r2, [pc, #80]	@ (8005984 <TIM_OC5_SetConfig+0xd0>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d109      	bne.n	800594a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800593c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	021b      	lsls	r3, r3, #8
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	621a      	str	r2, [r3, #32]
}
 8005964:	bf00      	nop
 8005966:	371c      	adds	r7, #28
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	40012c00 	.word	0x40012c00
 8005974:	40013400 	.word	0x40013400
 8005978:	40014000 	.word	0x40014000
 800597c:	40014400 	.word	0x40014400
 8005980:	40014800 	.word	0x40014800
 8005984:	40015000 	.word	0x40015000

08005988 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	051b      	lsls	r3, r3, #20
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a1a      	ldr	r2, [pc, #104]	@ (8005a48 <TIM_OC6_SetConfig+0xc0>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d013      	beq.n	8005a0c <TIM_OC6_SetConfig+0x84>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a19      	ldr	r2, [pc, #100]	@ (8005a4c <TIM_OC6_SetConfig+0xc4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00f      	beq.n	8005a0c <TIM_OC6_SetConfig+0x84>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a18      	ldr	r2, [pc, #96]	@ (8005a50 <TIM_OC6_SetConfig+0xc8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00b      	beq.n	8005a0c <TIM_OC6_SetConfig+0x84>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a17      	ldr	r2, [pc, #92]	@ (8005a54 <TIM_OC6_SetConfig+0xcc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d007      	beq.n	8005a0c <TIM_OC6_SetConfig+0x84>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a16      	ldr	r2, [pc, #88]	@ (8005a58 <TIM_OC6_SetConfig+0xd0>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_OC6_SetConfig+0x84>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a15      	ldr	r2, [pc, #84]	@ (8005a5c <TIM_OC6_SetConfig+0xd4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d109      	bne.n	8005a20 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	029b      	lsls	r3, r3, #10
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	621a      	str	r2, [r3, #32]
}
 8005a3a:	bf00      	nop
 8005a3c:	371c      	adds	r7, #28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40012c00 	.word	0x40012c00
 8005a4c:	40013400 	.word	0x40013400
 8005a50:	40014000 	.word	0x40014000
 8005a54:	40014400 	.word	0x40014400
 8005a58:	40014800 	.word	0x40014800
 8005a5c:	40015000 	.word	0x40015000

08005a60 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a80:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a92:	f023 0307 	bic.w	r3, r3, #7
 8005a96:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	4a56      	ldr	r2, [pc, #344]	@ (8005c08 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	f000 80a2 	beq.w	8005bfa <TIM_SlaveTimer_SetConfig+0x19a>
 8005ab6:	4a54      	ldr	r2, [pc, #336]	@ (8005c08 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	f200 809b 	bhi.w	8005bf4 <TIM_SlaveTimer_SetConfig+0x194>
 8005abe:	4a53      	ldr	r2, [pc, #332]	@ (8005c0c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	f000 809a 	beq.w	8005bfa <TIM_SlaveTimer_SetConfig+0x19a>
 8005ac6:	4a51      	ldr	r2, [pc, #324]	@ (8005c0c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	f200 8093 	bhi.w	8005bf4 <TIM_SlaveTimer_SetConfig+0x194>
 8005ace:	4a50      	ldr	r2, [pc, #320]	@ (8005c10 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	f000 8092 	beq.w	8005bfa <TIM_SlaveTimer_SetConfig+0x19a>
 8005ad6:	4a4e      	ldr	r2, [pc, #312]	@ (8005c10 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	f200 808b 	bhi.w	8005bf4 <TIM_SlaveTimer_SetConfig+0x194>
 8005ade:	4a4d      	ldr	r2, [pc, #308]	@ (8005c14 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	f000 808a 	beq.w	8005bfa <TIM_SlaveTimer_SetConfig+0x19a>
 8005ae6:	4a4b      	ldr	r2, [pc, #300]	@ (8005c14 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	f200 8083 	bhi.w	8005bf4 <TIM_SlaveTimer_SetConfig+0x194>
 8005aee:	4a4a      	ldr	r2, [pc, #296]	@ (8005c18 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	f000 8082 	beq.w	8005bfa <TIM_SlaveTimer_SetConfig+0x19a>
 8005af6:	4a48      	ldr	r2, [pc, #288]	@ (8005c18 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d87b      	bhi.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x194>
 8005afc:	4a47      	ldr	r2, [pc, #284]	@ (8005c1c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d07b      	beq.n	8005bfa <TIM_SlaveTimer_SetConfig+0x19a>
 8005b02:	4a46      	ldr	r2, [pc, #280]	@ (8005c1c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d875      	bhi.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x194>
 8005b08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b0c:	d075      	beq.n	8005bfa <TIM_SlaveTimer_SetConfig+0x19a>
 8005b0e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b12:	d86f      	bhi.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x194>
 8005b14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b18:	d06f      	beq.n	8005bfa <TIM_SlaveTimer_SetConfig+0x19a>
 8005b1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b1e:	d869      	bhi.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x194>
 8005b20:	2b70      	cmp	r3, #112	@ 0x70
 8005b22:	d01a      	beq.n	8005b5a <TIM_SlaveTimer_SetConfig+0xfa>
 8005b24:	2b70      	cmp	r3, #112	@ 0x70
 8005b26:	d865      	bhi.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x194>
 8005b28:	2b60      	cmp	r3, #96	@ 0x60
 8005b2a:	d059      	beq.n	8005be0 <TIM_SlaveTimer_SetConfig+0x180>
 8005b2c:	2b60      	cmp	r3, #96	@ 0x60
 8005b2e:	d861      	bhi.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x194>
 8005b30:	2b50      	cmp	r3, #80	@ 0x50
 8005b32:	d04b      	beq.n	8005bcc <TIM_SlaveTimer_SetConfig+0x16c>
 8005b34:	2b50      	cmp	r3, #80	@ 0x50
 8005b36:	d85d      	bhi.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x194>
 8005b38:	2b40      	cmp	r3, #64	@ 0x40
 8005b3a:	d019      	beq.n	8005b70 <TIM_SlaveTimer_SetConfig+0x110>
 8005b3c:	2b40      	cmp	r3, #64	@ 0x40
 8005b3e:	d859      	bhi.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x194>
 8005b40:	2b30      	cmp	r3, #48	@ 0x30
 8005b42:	d05a      	beq.n	8005bfa <TIM_SlaveTimer_SetConfig+0x19a>
 8005b44:	2b30      	cmp	r3, #48	@ 0x30
 8005b46:	d855      	bhi.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x194>
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d056      	beq.n	8005bfa <TIM_SlaveTimer_SetConfig+0x19a>
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d851      	bhi.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x194>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d052      	beq.n	8005bfa <TIM_SlaveTimer_SetConfig+0x19a>
 8005b54:	2b10      	cmp	r3, #16
 8005b56:	d050      	beq.n	8005bfa <TIM_SlaveTimer_SetConfig+0x19a>
 8005b58:	e04c      	b.n	8005bf4 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005b6a:	f000 f8d5 	bl	8005d18 <TIM_ETR_SetConfig>
      break;
 8005b6e:	e045      	b.n	8005bfc <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b05      	cmp	r3, #5
 8005b76:	d004      	beq.n	8005b82 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005b7c:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8005b80:	d101      	bne.n	8005b86 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e03b      	b.n	8005bfe <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6a1a      	ldr	r2, [r3, #32]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0201 	bic.w	r2, r2, #1
 8005b9c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bac:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	621a      	str	r2, [r3, #32]
      break;
 8005bca:	e017      	b.n	8005bfc <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bd8:	461a      	mov	r2, r3
 8005bda:	f000 f821 	bl	8005c20 <TIM_TI1_ConfigInputStage>
      break;
 8005bde:	e00d      	b.n	8005bfc <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bec:	461a      	mov	r2, r3
 8005bee:	f000 f846 	bl	8005c7e <TIM_TI2_ConfigInputStage>
      break;
 8005bf2:	e003      	b.n	8005bfc <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8005bf8:	e000      	b.n	8005bfc <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8005bfa:	bf00      	nop
  }

  return status;
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	00100070 	.word	0x00100070
 8005c0c:	00100060 	.word	0x00100060
 8005c10:	00100050 	.word	0x00100050
 8005c14:	00100040 	.word	0x00100040
 8005c18:	00100030 	.word	0x00100030
 8005c1c:	00100020 	.word	0x00100020

08005c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	f023 0201 	bic.w	r2, r3, #1
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f023 030a 	bic.w	r3, r3, #10
 8005c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	621a      	str	r2, [r3, #32]
}
 8005c72:	bf00      	nop
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b087      	sub	sp, #28
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	60b9      	str	r1, [r7, #8]
 8005c88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	f023 0210 	bic.w	r2, r3, #16
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ca8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	031b      	lsls	r3, r3, #12
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	621a      	str	r2, [r3, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b085      	sub	sp, #20
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005cf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f043 0307 	orr.w	r3, r3, #7
 8005d04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	609a      	str	r2, [r3, #8]
}
 8005d0c:	bf00      	nop
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	021a      	lsls	r2, r3, #8
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	609a      	str	r2, [r3, #8]
}
 8005d4c:	bf00      	nop
 8005d4e:	371c      	adds	r7, #28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f003 031f 	and.w	r3, r3, #31
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a1a      	ldr	r2, [r3, #32]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	43db      	mvns	r3, r3
 8005d7a:	401a      	ands	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a1a      	ldr	r2, [r3, #32]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f003 031f 	and.w	r3, r3, #31
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d90:	431a      	orrs	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	621a      	str	r2, [r3, #32]
}
 8005d96:	bf00      	nop
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
	...

08005da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d101      	bne.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e074      	b.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a34      	ldr	r2, [pc, #208]	@ (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d009      	beq.n	8005dfa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a33      	ldr	r2, [pc, #204]	@ (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d004      	beq.n	8005dfa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a31      	ldr	r2, [pc, #196]	@ (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d108      	bne.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a21      	ldr	r2, [pc, #132]	@ (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d022      	beq.n	8005e7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e3c:	d01d      	beq.n	8005e7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a1f      	ldr	r2, [pc, #124]	@ (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d018      	beq.n	8005e7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d013      	beq.n	8005e7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a1c      	ldr	r2, [pc, #112]	@ (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00e      	beq.n	8005e7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a15      	ldr	r2, [pc, #84]	@ (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d009      	beq.n	8005e7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a18      	ldr	r2, [pc, #96]	@ (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d004      	beq.n	8005e7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a11      	ldr	r2, [pc, #68]	@ (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d10c      	bne.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	40012c00 	.word	0x40012c00
 8005eb8:	40013400 	.word	0x40013400
 8005ebc:	40015000 	.word	0x40015000
 8005ec0:	40000400 	.word	0x40000400
 8005ec4:	40000800 	.word	0x40000800
 8005ec8:	40000c00 	.word	0x40000c00
 8005ecc:	40014000 	.word	0x40014000

08005ed0 <memset>:
 8005ed0:	4402      	add	r2, r0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d100      	bne.n	8005eda <memset+0xa>
 8005ed8:	4770      	bx	lr
 8005eda:	f803 1b01 	strb.w	r1, [r3], #1
 8005ede:	e7f9      	b.n	8005ed4 <memset+0x4>

08005ee0 <__libc_init_array>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	4d0d      	ldr	r5, [pc, #52]	@ (8005f18 <__libc_init_array+0x38>)
 8005ee4:	4c0d      	ldr	r4, [pc, #52]	@ (8005f1c <__libc_init_array+0x3c>)
 8005ee6:	1b64      	subs	r4, r4, r5
 8005ee8:	10a4      	asrs	r4, r4, #2
 8005eea:	2600      	movs	r6, #0
 8005eec:	42a6      	cmp	r6, r4
 8005eee:	d109      	bne.n	8005f04 <__libc_init_array+0x24>
 8005ef0:	4d0b      	ldr	r5, [pc, #44]	@ (8005f20 <__libc_init_array+0x40>)
 8005ef2:	4c0c      	ldr	r4, [pc, #48]	@ (8005f24 <__libc_init_array+0x44>)
 8005ef4:	f000 f818 	bl	8005f28 <_init>
 8005ef8:	1b64      	subs	r4, r4, r5
 8005efa:	10a4      	asrs	r4, r4, #2
 8005efc:	2600      	movs	r6, #0
 8005efe:	42a6      	cmp	r6, r4
 8005f00:	d105      	bne.n	8005f0e <__libc_init_array+0x2e>
 8005f02:	bd70      	pop	{r4, r5, r6, pc}
 8005f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f08:	4798      	blx	r3
 8005f0a:	3601      	adds	r6, #1
 8005f0c:	e7ee      	b.n	8005eec <__libc_init_array+0xc>
 8005f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f12:	4798      	blx	r3
 8005f14:	3601      	adds	r6, #1
 8005f16:	e7f2      	b.n	8005efe <__libc_init_array+0x1e>
 8005f18:	08006888 	.word	0x08006888
 8005f1c:	08006888 	.word	0x08006888
 8005f20:	08006888 	.word	0x08006888
 8005f24:	0800688c 	.word	0x0800688c

08005f28 <_init>:
 8005f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2a:	bf00      	nop
 8005f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2e:	bc08      	pop	{r3}
 8005f30:	469e      	mov	lr, r3
 8005f32:	4770      	bx	lr

08005f34 <_fini>:
 8005f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f36:	bf00      	nop
 8005f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f3a:	bc08      	pop	{r3}
 8005f3c:	469e      	mov	lr, r3
 8005f3e:	4770      	bx	lr
