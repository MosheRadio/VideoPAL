
VideoStm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .screen       00002760  20000000  20000000  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000068c4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000630  08006aa4  08006aa4  00007aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080070d4  080070d4  0005ac00  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  080070d4  080070d4  000080d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080070dc  080070dc  0005ac00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080070dc  080070dc  000080dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  080070e0  080070e0  000080e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000006c  20002760  080070e4  00008760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000003d4  200027cc  08007150  000087cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002ba0  08007150  00008ba0  2**0
                  ALLOC
 12 .screenBB     0004ec00  22000000  22000000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 00000030  00000000  00000000  0005ac00  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ef4d  00000000  00000000  0005ac30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002878  00000000  00000000  00069b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ff8  00000000  00000000  0006c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ac3  00000000  00000000  0006d3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011718  00000000  00000000  00094eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9d61  00000000  00000000  000a65cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a032c  2**0
                  CONTENTS, READONLY
 21 .debug_rnglists 00000c23  00000000  00000000  001a036f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004ad8  00000000  00000000  001a0f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000061  00000000  00000000  001a5a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200027cc 	.word	0x200027cc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006a8c 	.word	0x08006a8c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200027d0 	.word	0x200027d0
 800021c:	08006a8c 	.word	0x08006a8c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <gdiBitBlt>:
		h			Bitmap height, in pixels
		bm			Pointer to the bitmap start position

	return			none
*/
void gdiBitBlt(PGDI_RECT prc, int16_t x, int16_t y, int16_t w, int16_t h, pBMP bm) {
 80002c0:	b490      	push	{r4, r7}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	4608      	mov	r0, r1
 80002ca:	4611      	mov	r1, r2
 80002cc:	461a      	mov	r2, r3
 80002ce:	4603      	mov	r3, r0
 80002d0:	817b      	strh	r3, [r7, #10]
 80002d2:	460b      	mov	r3, r1
 80002d4:	813b      	strh	r3, [r7, #8]
 80002d6:	4613      	mov	r3, r2
 80002d8:	80fb      	strh	r3, [r7, #6]
int16_t todo;
uint16_t alignment;

//	Calculate clipping region

	if (prc != NULL) {
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d00f      	beq.n	8000300 <gdiBitBlt+0x40>
		x += prc->x;
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	897b      	ldrh	r3, [r7, #10]
 80002ea:	4413      	add	r3, r2
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	817b      	strh	r3, [r7, #10]
		y += prc->y;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80002f6:	b29a      	uxth	r2, r3
 80002f8:	893b      	ldrh	r3, [r7, #8]
 80002fa:	4413      	add	r3, r2
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	813b      	strh	r3, [r7, #8]
//??		w = min(prc->w, VID_PIXELS_X-x);	// clip X
//??		h = min(prc->w, VID_PIXELS_Y-y);	// clip Y
	}
	alignment = x & 0b0000000000001111;
 8000300:	897b      	ldrh	r3, [r7, #10]
 8000302:	f003 030f 	and.w	r3, r3, #15
 8000306:	82bb      	strh	r3, [r7, #20]
	for(;--h >= 0; y++) {
 8000308:	e2cc      	b.n	80008a4 <gdiBitBlt+0x5e4>
		for (todo = w; todo>0;) {
 800030a:	88fb      	ldrh	r3, [r7, #6]
 800030c:	82fb      	strh	r3, [r7, #22]
 800030e:	e2be      	b.n	800088e <gdiBitBlt+0x5ce>
			if (todo >= 9) {
 8000310:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000314:	2b08      	cmp	r3, #8
 8000316:	dd2d      	ble.n	8000374 <gdiBitBlt+0xb4>
				bitmask.word = (todo >= 16) ?
									0xFFFF		<< (16-alignment):
 8000318:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800031c:	2b0f      	cmp	r3, #15
 800031e:	dd08      	ble.n	8000332 <gdiBitBlt+0x72>
 8000320:	8abb      	ldrh	r3, [r7, #20]
 8000322:	f1c3 0310 	rsb	r3, r3, #16
 8000326:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800032a:	fa02 f303 	lsl.w	r3, r2, r3
 800032e:	461a      	mov	r2, r3
 8000330:	e00c      	b.n	800034c <gdiBitBlt+0x8c>
						masktable[todo-1]		<< (16-alignment);
 8000332:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000336:	3b01      	subs	r3, #1
 8000338:	4a79      	ldr	r2, [pc, #484]	@ (8000520 <gdiBitBlt+0x260>)
 800033a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800033e:	461a      	mov	r2, r3
 8000340:	8abb      	ldrh	r3, [r7, #20]
 8000342:	f1c3 0310 	rsb	r3, r3, #16
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
									0xFFFF		<< (16-alignment):
 800034a:	461a      	mov	r2, r3
				bitmask.word = (todo >= 16) ?
 800034c:	4b75      	ldr	r3, [pc, #468]	@ (8000524 <gdiBitBlt+0x264>)
 800034e:	601a      	str	r2, [r3, #0]
				pattern.word = *bm.halfwords++	<< (16-alignment);
 8000350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000352:	1c9a      	adds	r2, r3, #2
 8000354:	627a      	str	r2, [r7, #36]	@ 0x24
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	461a      	mov	r2, r3
 800035a:	8abb      	ldrh	r3, [r7, #20]
 800035c:	f1c3 0310 	rsb	r3, r3, #16
 8000360:	fa02 f303 	lsl.w	r3, r2, r3
 8000364:	461a      	mov	r2, r3
 8000366:	4b70      	ldr	r3, [pc, #448]	@ (8000528 <gdiBitBlt+0x268>)
 8000368:	601a      	str	r2, [r3, #0]
				todo -= 16;
 800036a:	8afb      	ldrh	r3, [r7, #22]
 800036c:	3b10      	subs	r3, #16
 800036e:	b29b      	uxth	r3, r3
 8000370:	82fb      	strh	r3, [r7, #22]
 8000372:	e01f      	b.n	80003b4 <gdiBitBlt+0xf4>
			} else {
				bitmask.word = masktable[todo-1] << (16-alignment);
 8000374:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000378:	3b01      	subs	r3, #1
 800037a:	4a69      	ldr	r2, [pc, #420]	@ (8000520 <gdiBitBlt+0x260>)
 800037c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000380:	461a      	mov	r2, r3
 8000382:	8abb      	ldrh	r3, [r7, #20]
 8000384:	f1c3 0310 	rsb	r3, r3, #16
 8000388:	fa02 f303 	lsl.w	r3, r2, r3
 800038c:	461a      	mov	r2, r3
 800038e:	4b65      	ldr	r3, [pc, #404]	@ (8000524 <gdiBitBlt+0x264>)
 8000390:	601a      	str	r2, [r3, #0]
				pattern.word = *bm.bytesinROM++  << (24-alignment);
 8000392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000394:	1c5a      	adds	r2, r3, #1
 8000396:	627a      	str	r2, [r7, #36]	@ 0x24
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	461a      	mov	r2, r3
 800039c:	8abb      	ldrh	r3, [r7, #20]
 800039e:	f1c3 0318 	rsb	r3, r3, #24
 80003a2:	fa02 f303 	lsl.w	r3, r2, r3
 80003a6:	461a      	mov	r2, r3
 80003a8:	4b5f      	ldr	r3, [pc, #380]	@ (8000528 <gdiBitBlt+0x268>)
 80003aa:	601a      	str	r2, [r3, #0]
				todo -= 8;
 80003ac:	8afb      	ldrh	r3, [r7, #22]
 80003ae:	3b08      	subs	r3, #8
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	82fb      	strh	r3, [r7, #22]
			}
			switch(rop) {
 80003b4:	4b5d      	ldr	r3, [pc, #372]	@ (800052c <gdiBitBlt+0x26c>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b04      	cmp	r3, #4
 80003ba:	f200 8268 	bhi.w	800088e <gdiBitBlt+0x5ce>
 80003be:	a201      	add	r2, pc, #4	@ (adr r2, 80003c4 <gdiBitBlt+0x104>)
 80003c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c4:	080003d9 	.word	0x080003d9
 80003c8:	08000535 	.word	0x08000535
 80003cc:	080007bd 	.word	0x080007bd
 80003d0:	0800067d 	.word	0x0800067d
 80003d4:	0800071d 	.word	0x0800071d
				case GDI_ROP_COPY:
					screen[y][x>>4] &= ~bitmask.halfword[1];
 80003d8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80003dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80003e0:	111b      	asrs	r3, r3, #4
 80003e2:	b21b      	sxth	r3, r3
 80003e4:	4618      	mov	r0, r3
 80003e6:	4952      	ldr	r1, [pc, #328]	@ (8000530 <gdiBitBlt+0x270>)
 80003e8:	4613      	mov	r3, r2
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	4413      	add	r3, r2
 80003ee:	00da      	lsls	r2, r3, #3
 80003f0:	1ad2      	subs	r2, r2, r3
 80003f2:	1813      	adds	r3, r2, r0
 80003f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80003f8:	b21a      	sxth	r2, r3
 80003fa:	4b4a      	ldr	r3, [pc, #296]	@ (8000524 <gdiBitBlt+0x264>)
 80003fc:	885b      	ldrh	r3, [r3, #2]
 80003fe:	b21b      	sxth	r3, r3
 8000400:	43db      	mvns	r3, r3
 8000402:	b21b      	sxth	r3, r3
 8000404:	4013      	ands	r3, r2
 8000406:	b219      	sxth	r1, r3
 8000408:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800040c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000410:	111b      	asrs	r3, r3, #4
 8000412:	b21b      	sxth	r3, r3
 8000414:	461c      	mov	r4, r3
 8000416:	b288      	uxth	r0, r1
 8000418:	4945      	ldr	r1, [pc, #276]	@ (8000530 <gdiBitBlt+0x270>)
 800041a:	4613      	mov	r3, r2
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	4413      	add	r3, r2
 8000420:	00da      	lsls	r2, r3, #3
 8000422:	1ad2      	subs	r2, r2, r3
 8000424:	1913      	adds	r3, r2, r4
 8000426:	4602      	mov	r2, r0
 8000428:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					screen[y][x>>4] |=  pattern.halfword[1];
 800042c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000430:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000434:	111b      	asrs	r3, r3, #4
 8000436:	b21b      	sxth	r3, r3
 8000438:	4618      	mov	r0, r3
 800043a:	493d      	ldr	r1, [pc, #244]	@ (8000530 <gdiBitBlt+0x270>)
 800043c:	4613      	mov	r3, r2
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	4413      	add	r3, r2
 8000442:	00da      	lsls	r2, r3, #3
 8000444:	1ad2      	subs	r2, r2, r3
 8000446:	1813      	adds	r3, r2, r0
 8000448:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800044c:	4b36      	ldr	r3, [pc, #216]	@ (8000528 <gdiBitBlt+0x268>)
 800044e:	885b      	ldrh	r3, [r3, #2]
 8000450:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000454:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000458:	1100      	asrs	r0, r0, #4
 800045a:	b200      	sxth	r0, r0
 800045c:	4604      	mov	r4, r0
 800045e:	430b      	orrs	r3, r1
 8000460:	b298      	uxth	r0, r3
 8000462:	4933      	ldr	r1, [pc, #204]	@ (8000530 <gdiBitBlt+0x270>)
 8000464:	4613      	mov	r3, r2
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	4413      	add	r3, r2
 800046a:	00da      	lsls	r2, r3, #3
 800046c:	1ad2      	subs	r2, r2, r3
 800046e:	1913      	adds	r3, r2, r4
 8000470:	4602      	mov	r2, r0
 8000472:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (bitmask.halfword[0] != 0) {
 8000476:	4b2b      	ldr	r3, [pc, #172]	@ (8000524 <gdiBitBlt+0x264>)
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	f000 81fe 	beq.w	800087c <gdiBitBlt+0x5bc>
						screen[y][(x>>4)+1] &= ~bitmask.halfword[0];
 8000480:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000484:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000488:	111b      	asrs	r3, r3, #4
 800048a:	b21b      	sxth	r3, r3
 800048c:	1c59      	adds	r1, r3, #1
 800048e:	4828      	ldr	r0, [pc, #160]	@ (8000530 <gdiBitBlt+0x270>)
 8000490:	4613      	mov	r3, r2
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	4413      	add	r3, r2
 8000496:	00da      	lsls	r2, r3, #3
 8000498:	1ad2      	subs	r2, r2, r3
 800049a:	1853      	adds	r3, r2, r1
 800049c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80004a0:	b21a      	sxth	r2, r3
 80004a2:	4b20      	ldr	r3, [pc, #128]	@ (8000524 <gdiBitBlt+0x264>)
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	b21b      	sxth	r3, r3
 80004a8:	43db      	mvns	r3, r3
 80004aa:	b21b      	sxth	r3, r3
 80004ac:	4013      	ands	r3, r2
 80004ae:	b218      	sxth	r0, r3
 80004b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004b8:	111b      	asrs	r3, r3, #4
 80004ba:	b21b      	sxth	r3, r3
 80004bc:	1c59      	adds	r1, r3, #1
 80004be:	b284      	uxth	r4, r0
 80004c0:	481b      	ldr	r0, [pc, #108]	@ (8000530 <gdiBitBlt+0x270>)
 80004c2:	4613      	mov	r3, r2
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	4413      	add	r3, r2
 80004c8:	00da      	lsls	r2, r3, #3
 80004ca:	1ad2      	subs	r2, r2, r3
 80004cc:	1853      	adds	r3, r2, r1
 80004ce:	4622      	mov	r2, r4
 80004d0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						screen[y][(x>>4)+1] |=  pattern.halfword[0];
 80004d4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004dc:	111b      	asrs	r3, r3, #4
 80004de:	b21b      	sxth	r3, r3
 80004e0:	1c59      	adds	r1, r3, #1
 80004e2:	4813      	ldr	r0, [pc, #76]	@ (8000530 <gdiBitBlt+0x270>)
 80004e4:	4613      	mov	r3, r2
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	4413      	add	r3, r2
 80004ea:	00da      	lsls	r2, r3, #3
 80004ec:	1ad2      	subs	r2, r2, r3
 80004ee:	1853      	adds	r3, r2, r1
 80004f0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80004f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <gdiBitBlt+0x268>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004fc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000500:	1109      	asrs	r1, r1, #4
 8000502:	b209      	sxth	r1, r1
 8000504:	3101      	adds	r1, #1
 8000506:	4303      	orrs	r3, r0
 8000508:	b29c      	uxth	r4, r3
 800050a:	4809      	ldr	r0, [pc, #36]	@ (8000530 <gdiBitBlt+0x270>)
 800050c:	4613      	mov	r3, r2
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	4413      	add	r3, r2
 8000512:	00da      	lsls	r2, r3, #3
 8000514:	1ad2      	subs	r2, r2, r3
 8000516:	1853      	adds	r3, r2, r1
 8000518:	4622      	mov	r2, r4
 800051a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					}
					break;
 800051e:	e1ad      	b.n	800087c <gdiBitBlt+0x5bc>
 8000520:	08006f74 	.word	0x08006f74
 8000524:	200027ec 	.word	0x200027ec
 8000528:	200027e8 	.word	0x200027e8
 800052c:	20002760 	.word	0x20002760
 8000530:	20000000 	.word	0x20000000
				case GDI_ROP_BONW:	// inverse video
					screen[y][x>>4] |=  bitmask.halfword[1];
 8000534:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000538:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800053c:	111b      	asrs	r3, r3, #4
 800053e:	b21b      	sxth	r3, r3
 8000540:	4618      	mov	r0, r3
 8000542:	49cb      	ldr	r1, [pc, #812]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000544:	4613      	mov	r3, r2
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	4413      	add	r3, r2
 800054a:	00da      	lsls	r2, r3, #3
 800054c:	1ad2      	subs	r2, r2, r3
 800054e:	1813      	adds	r3, r2, r0
 8000550:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000554:	4bc7      	ldr	r3, [pc, #796]	@ (8000874 <gdiBitBlt+0x5b4>)
 8000556:	885b      	ldrh	r3, [r3, #2]
 8000558:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800055c:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000560:	1100      	asrs	r0, r0, #4
 8000562:	b200      	sxth	r0, r0
 8000564:	4604      	mov	r4, r0
 8000566:	430b      	orrs	r3, r1
 8000568:	b298      	uxth	r0, r3
 800056a:	49c1      	ldr	r1, [pc, #772]	@ (8000870 <gdiBitBlt+0x5b0>)
 800056c:	4613      	mov	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	4413      	add	r3, r2
 8000572:	00da      	lsls	r2, r3, #3
 8000574:	1ad2      	subs	r2, r2, r3
 8000576:	1913      	adds	r3, r2, r4
 8000578:	4602      	mov	r2, r0
 800057a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					screen[y][x>>4] &= ~pattern.halfword[1];
 800057e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000582:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000586:	111b      	asrs	r3, r3, #4
 8000588:	b21b      	sxth	r3, r3
 800058a:	4618      	mov	r0, r3
 800058c:	49b8      	ldr	r1, [pc, #736]	@ (8000870 <gdiBitBlt+0x5b0>)
 800058e:	4613      	mov	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	4413      	add	r3, r2
 8000594:	00da      	lsls	r2, r3, #3
 8000596:	1ad2      	subs	r2, r2, r3
 8000598:	1813      	adds	r3, r2, r0
 800059a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800059e:	b21a      	sxth	r2, r3
 80005a0:	4bb5      	ldr	r3, [pc, #724]	@ (8000878 <gdiBitBlt+0x5b8>)
 80005a2:	885b      	ldrh	r3, [r3, #2]
 80005a4:	b21b      	sxth	r3, r3
 80005a6:	43db      	mvns	r3, r3
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	4013      	ands	r3, r2
 80005ac:	b219      	sxth	r1, r3
 80005ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005b6:	111b      	asrs	r3, r3, #4
 80005b8:	b21b      	sxth	r3, r3
 80005ba:	461c      	mov	r4, r3
 80005bc:	b288      	uxth	r0, r1
 80005be:	49ac      	ldr	r1, [pc, #688]	@ (8000870 <gdiBitBlt+0x5b0>)
 80005c0:	4613      	mov	r3, r2
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	4413      	add	r3, r2
 80005c6:	00da      	lsls	r2, r3, #3
 80005c8:	1ad2      	subs	r2, r2, r3
 80005ca:	1913      	adds	r3, r2, r4
 80005cc:	4602      	mov	r2, r0
 80005ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (bitmask.halfword[0] != 0) {
 80005d2:	4ba8      	ldr	r3, [pc, #672]	@ (8000874 <gdiBitBlt+0x5b4>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	f000 8152 	beq.w	8000880 <gdiBitBlt+0x5c0>
						screen[y][(x>>4)+1] |=  bitmask.halfword[0];
 80005dc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005e4:	111b      	asrs	r3, r3, #4
 80005e6:	b21b      	sxth	r3, r3
 80005e8:	1c59      	adds	r1, r3, #1
 80005ea:	48a1      	ldr	r0, [pc, #644]	@ (8000870 <gdiBitBlt+0x5b0>)
 80005ec:	4613      	mov	r3, r2
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	4413      	add	r3, r2
 80005f2:	00da      	lsls	r2, r3, #3
 80005f4:	1ad2      	subs	r2, r2, r3
 80005f6:	1853      	adds	r3, r2, r1
 80005f8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80005fc:	4b9d      	ldr	r3, [pc, #628]	@ (8000874 <gdiBitBlt+0x5b4>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000604:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000608:	1109      	asrs	r1, r1, #4
 800060a:	b209      	sxth	r1, r1
 800060c:	3101      	adds	r1, #1
 800060e:	4303      	orrs	r3, r0
 8000610:	b29c      	uxth	r4, r3
 8000612:	4897      	ldr	r0, [pc, #604]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000614:	4613      	mov	r3, r2
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	4413      	add	r3, r2
 800061a:	00da      	lsls	r2, r3, #3
 800061c:	1ad2      	subs	r2, r2, r3
 800061e:	1853      	adds	r3, r2, r1
 8000620:	4622      	mov	r2, r4
 8000622:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						screen[y][(x>>4)+1] &= ~pattern.halfword[0];
 8000626:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800062a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800062e:	111b      	asrs	r3, r3, #4
 8000630:	b21b      	sxth	r3, r3
 8000632:	1c59      	adds	r1, r3, #1
 8000634:	488e      	ldr	r0, [pc, #568]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000636:	4613      	mov	r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	4413      	add	r3, r2
 800063c:	00da      	lsls	r2, r3, #3
 800063e:	1ad2      	subs	r2, r2, r3
 8000640:	1853      	adds	r3, r2, r1
 8000642:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000646:	b21a      	sxth	r2, r3
 8000648:	4b8b      	ldr	r3, [pc, #556]	@ (8000878 <gdiBitBlt+0x5b8>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	b21b      	sxth	r3, r3
 800064e:	43db      	mvns	r3, r3
 8000650:	b21b      	sxth	r3, r3
 8000652:	4013      	ands	r3, r2
 8000654:	b218      	sxth	r0, r3
 8000656:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800065a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800065e:	111b      	asrs	r3, r3, #4
 8000660:	b21b      	sxth	r3, r3
 8000662:	1c59      	adds	r1, r3, #1
 8000664:	b284      	uxth	r4, r0
 8000666:	4882      	ldr	r0, [pc, #520]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	00da      	lsls	r2, r3, #3
 8000670:	1ad2      	subs	r2, r2, r3
 8000672:	1853      	adds	r3, r2, r1
 8000674:	4622      	mov	r2, r4
 8000676:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					}
					break;
 800067a:	e101      	b.n	8000880 <gdiBitBlt+0x5c0>
				case GDI_ROP_XOR:
					screen[y][x>>4] ^= pattern.halfword[1];
 800067c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000680:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000684:	111b      	asrs	r3, r3, #4
 8000686:	b21b      	sxth	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	4979      	ldr	r1, [pc, #484]	@ (8000870 <gdiBitBlt+0x5b0>)
 800068c:	4613      	mov	r3, r2
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	4413      	add	r3, r2
 8000692:	00da      	lsls	r2, r3, #3
 8000694:	1ad2      	subs	r2, r2, r3
 8000696:	1813      	adds	r3, r2, r0
 8000698:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800069c:	4b76      	ldr	r3, [pc, #472]	@ (8000878 <gdiBitBlt+0x5b8>)
 800069e:	885b      	ldrh	r3, [r3, #2]
 80006a0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006a4:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 80006a8:	1100      	asrs	r0, r0, #4
 80006aa:	b200      	sxth	r0, r0
 80006ac:	4604      	mov	r4, r0
 80006ae:	404b      	eors	r3, r1
 80006b0:	b298      	uxth	r0, r3
 80006b2:	496f      	ldr	r1, [pc, #444]	@ (8000870 <gdiBitBlt+0x5b0>)
 80006b4:	4613      	mov	r3, r2
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	4413      	add	r3, r2
 80006ba:	00da      	lsls	r2, r3, #3
 80006bc:	1ad2      	subs	r2, r2, r3
 80006be:	1913      	adds	r3, r2, r4
 80006c0:	4602      	mov	r2, r0
 80006c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 80006c6:	4b6c      	ldr	r3, [pc, #432]	@ (8000878 <gdiBitBlt+0x5b8>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	f000 80da 	beq.w	8000884 <gdiBitBlt+0x5c4>
						screen[y][(x>>4)+1] ^= pattern.halfword[0];
 80006d0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80006d8:	111b      	asrs	r3, r3, #4
 80006da:	b21b      	sxth	r3, r3
 80006dc:	1c59      	adds	r1, r3, #1
 80006de:	4864      	ldr	r0, [pc, #400]	@ (8000870 <gdiBitBlt+0x5b0>)
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	00da      	lsls	r2, r3, #3
 80006e8:	1ad2      	subs	r2, r2, r3
 80006ea:	1853      	adds	r3, r2, r1
 80006ec:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80006f0:	4b61      	ldr	r3, [pc, #388]	@ (8000878 <gdiBitBlt+0x5b8>)
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006f8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80006fc:	1109      	asrs	r1, r1, #4
 80006fe:	b209      	sxth	r1, r1
 8000700:	3101      	adds	r1, #1
 8000702:	4043      	eors	r3, r0
 8000704:	b29c      	uxth	r4, r3
 8000706:	485a      	ldr	r0, [pc, #360]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000708:	4613      	mov	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	4413      	add	r3, r2
 800070e:	00da      	lsls	r2, r3, #3
 8000710:	1ad2      	subs	r2, r2, r3
 8000712:	1853      	adds	r3, r2, r1
 8000714:	4622      	mov	r2, r4
 8000716:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 800071a:	e0b3      	b.n	8000884 <gdiBitBlt+0x5c4>
				case GDI_ROP_OR:
					screen[y][x>>4] |= pattern.halfword[1];
 800071c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000720:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000724:	111b      	asrs	r3, r3, #4
 8000726:	b21b      	sxth	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	4951      	ldr	r1, [pc, #324]	@ (8000870 <gdiBitBlt+0x5b0>)
 800072c:	4613      	mov	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4413      	add	r3, r2
 8000732:	00da      	lsls	r2, r3, #3
 8000734:	1ad2      	subs	r2, r2, r3
 8000736:	1813      	adds	r3, r2, r0
 8000738:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800073c:	4b4e      	ldr	r3, [pc, #312]	@ (8000878 <gdiBitBlt+0x5b8>)
 800073e:	885b      	ldrh	r3, [r3, #2]
 8000740:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000744:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000748:	1100      	asrs	r0, r0, #4
 800074a:	b200      	sxth	r0, r0
 800074c:	4604      	mov	r4, r0
 800074e:	430b      	orrs	r3, r1
 8000750:	b298      	uxth	r0, r3
 8000752:	4947      	ldr	r1, [pc, #284]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	00da      	lsls	r2, r3, #3
 800075c:	1ad2      	subs	r2, r2, r3
 800075e:	1913      	adds	r3, r2, r4
 8000760:	4602      	mov	r2, r0
 8000762:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 8000766:	4b44      	ldr	r3, [pc, #272]	@ (8000878 <gdiBitBlt+0x5b8>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	f000 808c 	beq.w	8000888 <gdiBitBlt+0x5c8>
						screen[y][(x>>4)+1] |= pattern.halfword[0];
 8000770:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000774:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000778:	111b      	asrs	r3, r3, #4
 800077a:	b21b      	sxth	r3, r3
 800077c:	1c59      	adds	r1, r3, #1
 800077e:	483c      	ldr	r0, [pc, #240]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	00da      	lsls	r2, r3, #3
 8000788:	1ad2      	subs	r2, r2, r3
 800078a:	1853      	adds	r3, r2, r1
 800078c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8000790:	4b39      	ldr	r3, [pc, #228]	@ (8000878 <gdiBitBlt+0x5b8>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000798:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800079c:	1109      	asrs	r1, r1, #4
 800079e:	b209      	sxth	r1, r1
 80007a0:	3101      	adds	r1, #1
 80007a2:	4303      	orrs	r3, r0
 80007a4:	b29c      	uxth	r4, r3
 80007a6:	4832      	ldr	r0, [pc, #200]	@ (8000870 <gdiBitBlt+0x5b0>)
 80007a8:	4613      	mov	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	00da      	lsls	r2, r3, #3
 80007b0:	1ad2      	subs	r2, r2, r3
 80007b2:	1853      	adds	r3, r2, r1
 80007b4:	4622      	mov	r2, r4
 80007b6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 80007ba:	e065      	b.n	8000888 <gdiBitBlt+0x5c8>
				case GDI_ROP_NAND:
					screen[y][x>>4] &= ~pattern.halfword[1];
 80007bc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80007c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007c4:	111b      	asrs	r3, r3, #4
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	4929      	ldr	r1, [pc, #164]	@ (8000870 <gdiBitBlt+0x5b0>)
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	00da      	lsls	r2, r3, #3
 80007d4:	1ad2      	subs	r2, r2, r3
 80007d6:	1813      	adds	r3, r2, r0
 80007d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007dc:	b21a      	sxth	r2, r3
 80007de:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <gdiBitBlt+0x5b8>)
 80007e0:	885b      	ldrh	r3, [r3, #2]
 80007e2:	b21b      	sxth	r3, r3
 80007e4:	43db      	mvns	r3, r3
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	4013      	ands	r3, r2
 80007ea:	b219      	sxth	r1, r3
 80007ec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80007f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007f4:	111b      	asrs	r3, r3, #4
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	461c      	mov	r4, r3
 80007fa:	b288      	uxth	r0, r1
 80007fc:	491c      	ldr	r1, [pc, #112]	@ (8000870 <gdiBitBlt+0x5b0>)
 80007fe:	4613      	mov	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	4413      	add	r3, r2
 8000804:	00da      	lsls	r2, r3, #3
 8000806:	1ad2      	subs	r2, r2, r3
 8000808:	1913      	adds	r3, r2, r4
 800080a:	4602      	mov	r2, r0
 800080c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if (pattern.halfword[0] != 0)
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <gdiBitBlt+0x5b8>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d039      	beq.n	800088c <gdiBitBlt+0x5cc>
						screen[y][(x>>4)+1] &= ~pattern.halfword[0];
 8000818:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800081c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000820:	111b      	asrs	r3, r3, #4
 8000822:	b21b      	sxth	r3, r3
 8000824:	1c59      	adds	r1, r3, #1
 8000826:	4812      	ldr	r0, [pc, #72]	@ (8000870 <gdiBitBlt+0x5b0>)
 8000828:	4613      	mov	r3, r2
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	4413      	add	r3, r2
 800082e:	00da      	lsls	r2, r3, #3
 8000830:	1ad2      	subs	r2, r2, r3
 8000832:	1853      	adds	r3, r2, r1
 8000834:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000838:	b21a      	sxth	r2, r3
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <gdiBitBlt+0x5b8>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	b21b      	sxth	r3, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	b21b      	sxth	r3, r3
 8000844:	4013      	ands	r3, r2
 8000846:	b218      	sxth	r0, r3
 8000848:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800084c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000850:	111b      	asrs	r3, r3, #4
 8000852:	b21b      	sxth	r3, r3
 8000854:	1c59      	adds	r1, r3, #1
 8000856:	b284      	uxth	r4, r0
 8000858:	4805      	ldr	r0, [pc, #20]	@ (8000870 <gdiBitBlt+0x5b0>)
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00da      	lsls	r2, r3, #3
 8000862:	1ad2      	subs	r2, r2, r3
 8000864:	1853      	adds	r3, r2, r1
 8000866:	4622      	mov	r2, r4
 8000868:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					break;
 800086c:	e00e      	b.n	800088c <gdiBitBlt+0x5cc>
 800086e:	bf00      	nop
 8000870:	20000000 	.word	0x20000000
 8000874:	200027ec 	.word	0x200027ec
 8000878:	200027e8 	.word	0x200027e8
					break;
 800087c:	bf00      	nop
 800087e:	e006      	b.n	800088e <gdiBitBlt+0x5ce>
					break;
 8000880:	bf00      	nop
 8000882:	e004      	b.n	800088e <gdiBitBlt+0x5ce>
					break;
 8000884:	bf00      	nop
 8000886:	e002      	b.n	800088e <gdiBitBlt+0x5ce>
					break;
 8000888:	bf00      	nop
 800088a:	e000      	b.n	800088e <gdiBitBlt+0x5ce>
					break;
 800088c:	bf00      	nop
		for (todo = w; todo>0;) {
 800088e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000892:	2b00      	cmp	r3, #0
 8000894:	f73f ad3c 	bgt.w	8000310 <gdiBitBlt+0x50>
	for(;--h >= 0; y++) {
 8000898:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800089c:	b29b      	uxth	r3, r3
 800089e:	3301      	adds	r3, #1
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	813b      	strh	r3, [r7, #8]
 80008a4:	8c3b      	ldrh	r3, [r7, #32]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	843b      	strh	r3, [r7, #32]
 80008ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	f6bf ad2a 	bge.w	800030a <gdiBitBlt+0x4a>
			}
		}
	}
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc90      	pop	{r4, r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop

080008c4 <gdiPoint>:
		x			X position
		y			Y position

	return:			none
*/
void gdiPoint(PGDI_RECT rc, uint16_t x, uint16_t y) {
 80008c4:	b490      	push	{r4, r7}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	807b      	strh	r3, [r7, #2]
 80008d0:	4613      	mov	r3, r2
 80008d2:	803b      	strh	r3, [r7, #0]
	/* The bit addressing of pixels is MSB first (I2S property).
	 * so invert the lower nibble, indexing 16 pixels
	 */
	uint16_t nibble = x & 0b1111;
 80008d4:	887b      	ldrh	r3, [r7, #2]
 80008d6:	f003 030f 	and.w	r3, r3, #15
 80008da:	81fb      	strh	r3, [r7, #14]
	x = (x & ~0b1111) + 0b1111 - nibble;
 80008dc:	887b      	ldrh	r3, [r7, #2]
 80008de:	f023 030f 	bic.w	r3, r3, #15
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	89fb      	ldrh	r3, [r7, #14]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	330f      	adds	r3, #15
 80008ec:	807b      	strh	r3, [r7, #2]
	if (x < VID_PIXELS_X && y < VID_PIXELS_Y)	// Check display area bounds
 80008ee:	887b      	ldrh	r3, [r7, #2]
 80008f0:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 80008f4:	d243      	bcs.n	800097e <gdiPoint+0xba>
 80008f6:	883b      	ldrh	r3, [r7, #0]
 80008f8:	2bef      	cmp	r3, #239	@ 0xef
 80008fa:	d840      	bhi.n	800097e <gdiPoint+0xba>
	{
		switch(rop) {
 80008fc:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <gdiPoint+0xc4>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b04      	cmp	r3, #4
 8000902:	d83c      	bhi.n	800097e <gdiPoint+0xba>
 8000904:	a201      	add	r2, pc, #4	@ (adr r2, 800090c <gdiPoint+0x48>)
 8000906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090a:	bf00      	nop
 800090c:	08000921 	.word	0x08000921
 8000910:	08000939 	.word	0x08000939
 8000914:	08000939 	.word	0x08000939
 8000918:	08000951 	.word	0x08000951
 800091c:	08000921 	.word	0x08000921
			case GDI_ROP_COPY:
			case GDI_ROP_OR:	screenBB[y][x] = 1;
 8000920:	883a      	ldrh	r2, [r7, #0]
 8000922:	887b      	ldrh	r3, [r7, #2]
 8000924:	4919      	ldr	r1, [pc, #100]	@ (800098c <gdiPoint+0xc8>)
 8000926:	f44f 70a8 	mov.w	r0, #336	@ 0x150
 800092a:	fb00 f202 	mul.w	r2, r0, r2
 800092e:	4413      	add	r3, r2
 8000930:	2201      	movs	r2, #1
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
								break;
 8000936:	e022      	b.n	800097e <gdiPoint+0xba>
			case GDI_ROP_BONW:
			case GDI_ROP_NAND:	screenBB[y][x] = 0;
 8000938:	883a      	ldrh	r2, [r7, #0]
 800093a:	887b      	ldrh	r3, [r7, #2]
 800093c:	4913      	ldr	r1, [pc, #76]	@ (800098c <gdiPoint+0xc8>)
 800093e:	f44f 70a8 	mov.w	r0, #336	@ 0x150
 8000942:	fb00 f202 	mul.w	r2, r0, r2
 8000946:	4413      	add	r3, r2
 8000948:	2200      	movs	r2, #0
 800094a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
								break;
 800094e:	e016      	b.n	800097e <gdiPoint+0xba>
			case GDI_ROP_XOR:	screenBB[y][x] ^= 1;
 8000950:	883a      	ldrh	r2, [r7, #0]
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	490d      	ldr	r1, [pc, #52]	@ (800098c <gdiPoint+0xc8>)
 8000956:	f44f 70a8 	mov.w	r0, #336	@ 0x150
 800095a:	fb00 f202 	mul.w	r2, r0, r2
 800095e:	4413      	add	r3, r2
 8000960:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000964:	8839      	ldrh	r1, [r7, #0]
 8000966:	887b      	ldrh	r3, [r7, #2]
 8000968:	f082 0201 	eor.w	r2, r2, #1
 800096c:	4807      	ldr	r0, [pc, #28]	@ (800098c <gdiPoint+0xc8>)
 800096e:	f44f 74a8 	mov.w	r4, #336	@ 0x150
 8000972:	fb04 f101 	mul.w	r1, r4, r1
 8000976:	440b      	add	r3, r1
 8000978:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		}
	}
}
 800097c:	e7ff      	b.n	800097e <gdiPoint+0xba>
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bc90      	pop	{r4, r7}
 8000986:	4770      	bx	lr
 8000988:	20002760 	.word	0x20002760
 800098c:	22000000 	.word	0x22000000

08000990 <gdiLine>:
		x2			X end position
		y2			Y end position

	return			none
*/
void gdiLine(PGDI_RECT prc, int16_t x1, int16_t y1, int16_t x2, int16_t y2) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	4608      	mov	r0, r1
 800099a:	4611      	mov	r1, r2
 800099c:	461a      	mov	r2, r3
 800099e:	4603      	mov	r3, r0
 80009a0:	817b      	strh	r3, [r7, #10]
 80009a2:	460b      	mov	r3, r1
 80009a4:	813b      	strh	r3, [r7, #8]
 80009a6:	4613      	mov	r3, r2
 80009a8:	80fb      	strh	r3, [r7, #6]

int16_t		dx, dy, i, e;
int16_t		incx, incy, inc1, inc2;
int16_t		x, y;

	dx = x2 - x1;
 80009aa:	88fa      	ldrh	r2, [r7, #6]
 80009ac:	897b      	ldrh	r3, [r7, #10]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	dy = y2 - y1;
 80009b4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80009b6:	893b      	ldrh	r3, [r7, #8]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	84bb      	strh	r3, [r7, #36]	@ 0x24

	if(dx < 0) dx = -dx;
 80009be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	da03      	bge.n	80009ce <gdiLine+0x3e>
 80009c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80009c8:	425b      	negs	r3, r3
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	if(dy < 0) dy = -dy;
 80009ce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	da03      	bge.n	80009de <gdiLine+0x4e>
 80009d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80009d8:	425b      	negs	r3, r3
 80009da:	b29b      	uxth	r3, r3
 80009dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
	incx = 1;
 80009de:	2301      	movs	r3, #1
 80009e0:	83fb      	strh	r3, [r7, #30]
	if(x2 < x1) incx = -1;
 80009e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80009e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	da02      	bge.n	80009f4 <gdiLine+0x64>
 80009ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009f2:	83fb      	strh	r3, [r7, #30]
	incy = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	83bb      	strh	r3, [r7, #28]
	if(y2 < y1) incy = -1;
 80009f8:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 80009fc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	da02      	bge.n	8000a0a <gdiLine+0x7a>
 8000a04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a08:	83bb      	strh	r3, [r7, #28]
	x = x1;
 8000a0a:	897b      	ldrh	r3, [r7, #10]
 8000a0c:	837b      	strh	r3, [r7, #26]
	y = y1;
 8000a0e:	893b      	ldrh	r3, [r7, #8]
 8000a10:	833b      	strh	r3, [r7, #24]

	if (dx > dy) {
 8000a12:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8000a16:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	dd48      	ble.n	8000ab0 <gdiLine+0x120>
		gdiPoint(prc, x, y);
 8000a1e:	8b7b      	ldrh	r3, [r7, #26]
 8000a20:	8b3a      	ldrh	r2, [r7, #24]
 8000a22:	4619      	mov	r1, r3
 8000a24:	68f8      	ldr	r0, [r7, #12]
 8000a26:	f7ff ff4d 	bl	80008c4 <gdiPoint>
		e = 2*dy - dx;
 8000a2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	843b      	strh	r3, [r7, #32]
		inc1 = 2 * (dy - dx);
 8000a38:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8000a3c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	82fb      	strh	r3, [r7, #22]
		inc2 = 2 * dy;
 8000a4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	82bb      	strh	r3, [r7, #20]
		for (i = 0; i < dx; i++) {
 8000a52:	2300      	movs	r3, #0
 8000a54:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000a56:	e024      	b.n	8000aa2 <gdiLine+0x112>
			if (e >= 0) {
 8000a58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <gdiLine+0xe6>
				y += incy;
 8000a60:	8b3a      	ldrh	r2, [r7, #24]
 8000a62:	8bbb      	ldrh	r3, [r7, #28]
 8000a64:	4413      	add	r3, r2
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	833b      	strh	r3, [r7, #24]
				e += inc1;
 8000a6a:	8c3a      	ldrh	r2, [r7, #32]
 8000a6c:	8afb      	ldrh	r3, [r7, #22]
 8000a6e:	4413      	add	r3, r2
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	843b      	strh	r3, [r7, #32]
 8000a74:	e004      	b.n	8000a80 <gdiLine+0xf0>
			}
			else {
				e += inc2;
 8000a76:	8c3a      	ldrh	r2, [r7, #32]
 8000a78:	8abb      	ldrh	r3, [r7, #20]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	843b      	strh	r3, [r7, #32]
			}
			x += incx;
 8000a80:	8b7a      	ldrh	r2, [r7, #26]
 8000a82:	8bfb      	ldrh	r3, [r7, #30]
 8000a84:	4413      	add	r3, r2
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	837b      	strh	r3, [r7, #26]
			gdiPoint(prc, x, y);
 8000a8a:	8b7b      	ldrh	r3, [r7, #26]
 8000a8c:	8b3a      	ldrh	r2, [r7, #24]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f7ff ff17 	bl	80008c4 <gdiPoint>
		for (i = 0; i < dx; i++) {
 8000a96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000aa2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8000aa6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	dbd4      	blt.n	8000a58 <gdiLine+0xc8>
			}
			y += incy;
			gdiPoint(prc, x, y);
		}
	}
}
 8000aae:	e047      	b.n	8000b40 <gdiLine+0x1b0>
		gdiPoint(prc, x, y);
 8000ab0:	8b7b      	ldrh	r3, [r7, #26]
 8000ab2:	8b3a      	ldrh	r2, [r7, #24]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff ff04 	bl	80008c4 <gdiPoint>
		e = 2 * dx - dy;
 8000abc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	843b      	strh	r3, [r7, #32]
		inc1 = 2 * (dx - dy);
 8000aca:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8000ace:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	82fb      	strh	r3, [r7, #22]
		inc2 = 2 * dx;
 8000adc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	82bb      	strh	r3, [r7, #20]
		for(i = 0; i < dy; i++) {
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000ae8:	e024      	b.n	8000b34 <gdiLine+0x1a4>
			if (e >= 0) {
 8000aea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db0a      	blt.n	8000b08 <gdiLine+0x178>
				x += incx;
 8000af2:	8b7a      	ldrh	r2, [r7, #26]
 8000af4:	8bfb      	ldrh	r3, [r7, #30]
 8000af6:	4413      	add	r3, r2
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	837b      	strh	r3, [r7, #26]
				e += inc1;
 8000afc:	8c3a      	ldrh	r2, [r7, #32]
 8000afe:	8afb      	ldrh	r3, [r7, #22]
 8000b00:	4413      	add	r3, r2
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	843b      	strh	r3, [r7, #32]
 8000b06:	e004      	b.n	8000b12 <gdiLine+0x182>
				e += inc2;
 8000b08:	8c3a      	ldrh	r2, [r7, #32]
 8000b0a:	8abb      	ldrh	r3, [r7, #20]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	843b      	strh	r3, [r7, #32]
			y += incy;
 8000b12:	8b3a      	ldrh	r2, [r7, #24]
 8000b14:	8bbb      	ldrh	r3, [r7, #28]
 8000b16:	4413      	add	r3, r2
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	833b      	strh	r3, [r7, #24]
			gdiPoint(prc, x, y);
 8000b1c:	8b7b      	ldrh	r3, [r7, #26]
 8000b1e:	8b3a      	ldrh	r2, [r7, #24]
 8000b20:	4619      	mov	r1, r3
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f7ff fece 	bl	80008c4 <gdiPoint>
		for(i = 0; i < dy; i++) {
 8000b28:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	3301      	adds	r3, #1
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000b34:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8000b38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dbd4      	blt.n	8000aea <gdiLine+0x15a>
}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	@ 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <gdiRectangle>:
		y2			Y end position

	return			none
*/
void	gdiRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	4604      	mov	r4, r0
 8000b50:	4608      	mov	r0, r1
 8000b52:	4611      	mov	r1, r2
 8000b54:	461a      	mov	r2, r3
 8000b56:	4623      	mov	r3, r4
 8000b58:	80fb      	strh	r3, [r7, #6]
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80bb      	strh	r3, [r7, #4]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	807b      	strh	r3, [r7, #2]
 8000b62:	4613      	mov	r3, r2
 8000b64:	803b      	strh	r3, [r7, #0]
	gdiLine(NULL,x0,y0,x1,y0);
 8000b66:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000b6a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b6e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff ff08 	bl	8000990 <gdiLine>
	gdiLine(NULL,x0,y1,x1,y1);
 8000b80:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000b84:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b88:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	4603      	mov	r3, r0
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff fefb 	bl	8000990 <gdiLine>
	gdiLine(NULL,x0,y0,x0,y1);
 8000b9a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b9e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ba2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ba6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	4603      	mov	r3, r0
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff feee 	bl	8000990 <gdiLine>
	gdiLine(NULL,x1,y0,x1,y1);
 8000bb4:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000bb8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000bbc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000bc0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff fee1 	bl	8000990 <gdiLine>
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd90      	pop	{r4, r7, pc}
	...

08000bd8 <gdiDrawTextEx>:
		ptext		Pointer to text

	return			none
*/
void gdiDrawTextEx(int16_t x, int16_t y, char *ptext)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	4603      	mov	r3, r0
 8000be0:	603a      	str	r2, [r7, #0]
 8000be2:	80fb      	strh	r3, [r7, #6]
 8000be4:	460b      	mov	r3, r1
 8000be6:	80bb      	strh	r3, [r7, #4]
	char		c;

	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH)
 8000be8:	e01a      	b.n	8000c20 <gdiDrawTextEx+0x48>
		if (c >= GDI_SYSFONT_OFFSET)
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	2b1f      	cmp	r3, #31
 8000bee:	d913      	bls.n	8000c18 <gdiDrawTextEx+0x40>
			gdiBitBlt(NULL, x, y, GDI_SYSFONT_WIDTH, GDI_SYSFONT_HEIGHT, (pBMP) gdiSystemFont[c-GDI_SYSFONT_OFFSET]);
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	f1a3 0220 	sub.w	r2, r3, #32
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	4413      	add	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8000c3c <gdiDrawTextEx+0x64>)
 8000c00:	4413      	add	r3, r2
 8000c02:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c06:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	230a      	movs	r3, #10
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2306      	movs	r3, #6
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff fb54 	bl	80002c0 <gdiBitBlt>
	for (; (c = *ptext++) != 0; x += GDI_SYSFONT_WIDTH)
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	3306      	adds	r3, #6
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	80fb      	strh	r3, [r7, #6]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	603a      	str	r2, [r7, #0]
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d1dc      	bne.n	8000bea <gdiDrawTextEx+0x12>
//	clip here if		if (x >= VID_PIXELS_X - GDI_SYSFONT_WIDTH)
		// else control character handling ...
}
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08006bb4 	.word	0x08006bb4

08000c40 <DelayMs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DelayMs(uint32_t nTime) // delay function
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 8000c48:	4a09      	ldr	r2, [pc, #36]	@ (8000c70 <DelayMs+0x30>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  while((TimingDelay != 0));
 8000c4e:	bf00      	nop
 8000c50:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <DelayMs+0x30>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1fb      	bne.n	8000c50 <DelayMs+0x10>
  while(Paused);
 8000c58:	bf00      	nop
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <DelayMs+0x34>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1fb      	bne.n	8000c5a <DelayMs+0x1a>
}
 8000c62:	bf00      	nop
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	20002a48 	.word	0x20002a48
 8000c74:	20002a44 	.word	0x20002a44

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7c:	f000 ff59 	bl	8001b32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c80:	f000 f832 	bl	8000ce8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c84:	f000 fa38 	bl	80010f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c88:	f000 f9f4 	bl	8001074 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c8c:	f000 f894 	bl	8000db8 <MX_TIM2_Init>
  MX_I2S2_Init();
 8000c90:	f000 f86a 	bl	8000d68 <MX_I2S2_Init>
  MX_TIM3_Init();
 8000c94:	f000 f92a 	bl	8000eec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //do know if it is necessary

  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	480f      	ldr	r0, [pc, #60]	@ (8000cd8 <main+0x60>)
 8000c9c:	f003 fb0c 	bl	80042b8 <HAL_TIM_OC_Start>
  // --------------------------------------------------------------
  // may be to start line that ?
  //HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_2); // this the same as
  // or
  // maybe to start like that :
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // this the same
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	480d      	ldr	r0, [pc, #52]	@ (8000cd8 <main+0x60>)
 8000ca4:	f003 fc7c 	bl	80045a0 <HAL_TIM_PWM_Start>
  // --------------------------------------------------------------

  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3);
 8000ca8:	2108      	movs	r1, #8
 8000caa:	480b      	ldr	r0, [pc, #44]	@ (8000cd8 <main+0x60>)
 8000cac:	f003 fb04 	bl	80042b8 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_4);
 8000cb0:	210c      	movs	r1, #12
 8000cb2:	4809      	ldr	r0, [pc, #36]	@ (8000cd8 <main+0x60>)
 8000cb4:	f003 fb00 	bl	80042b8 <HAL_TIM_OC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // i am not sure if i need to start this PWM
 8000cb8:	210c      	movs	r1, #12
 8000cba:	4808      	ldr	r0, [pc, #32]	@ (8000cdc <main+0x64>)
 8000cbc:	f003 fc70 	bl	80045a0 <HAL_TIM_PWM_Start>

  //HAL_I2S_Transmit_DMA(&hi2s2, Vblack, VID_HSIZE);
  //HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)Vblack, XFERS_PERLINE);

  printf("Hello from STM32 over USB UART!\r\n");
 8000cc0:	4807      	ldr	r0, [pc, #28]	@ (8000ce0 <main+0x68>)
 8000cc2:	f004 ffff 	bl	8005cc4 <puts>
//
//    // Now the buffer will be replayed over and over at the I2S bitrate.
//}

  // also i added a function for handleing
  srand(SysTick->VAL);
 8000cc6:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <main+0x6c>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f004 fe76 	bl	80059bc <srand>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  show();
 8000cd0:	f000 fa62 	bl	8001198 <show>
 8000cd4:	e7fc      	b.n	8000cd0 <main+0x58>
 8000cd6:	bf00      	nop
 8000cd8:	200028d8 	.word	0x200028d8
 8000cdc:	2000288c 	.word	0x2000288c
 8000ce0:	08006aa4 	.word	0x08006aa4
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b094      	sub	sp, #80	@ 0x50
 8000cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cee:	f107 0318 	add.w	r3, r7, #24
 8000cf2:	2238      	movs	r2, #56	@ 0x38
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f005 f8c4 	bl	8005e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d0a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d0e:	f001 fcad 	bl	800266c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d1c:	2340      	movs	r3, #64	@ 0x40
 8000d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d24:	f107 0318 	add.w	r3, r7, #24
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f001 fd53 	bl	80027d4 <HAL_RCC_OscConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d34:	f000 fa04 	bl	8001140 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d38:	230f      	movs	r3, #15
 8000d3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f002 f851 	bl	8002df8 <HAL_RCC_ClockConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000d5c:	f000 f9f0 	bl	8001140 <Error_Handler>
  }
}
 8000d60:	bf00      	nop
 8000d62:	3750      	adds	r7, #80	@ 0x50
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2S2_Init 1 */
	//hi2s2.Init.CPOL = I2S_CPOL_HIGH;

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000d6c:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <MX_I2S2_Init+0x48>)
 8000d6e:	4a11      	ldr	r2, [pc, #68]	@ (8000db4 <MX_I2S2_Init+0x4c>)
 8000d70:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000d72:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <MX_I2S2_Init+0x48>)
 8000d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d78:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000db0 <MX_I2S2_Init+0x48>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d80:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <MX_I2S2_Init+0x48>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000d86:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <MX_I2S2_Init+0x48>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <MX_I2S2_Init+0x48>)
 8000d8e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000d92:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <MX_I2S2_Init+0x48>)
 8000d96:	2208      	movs	r2, #8
 8000d98:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_I2S2_Init+0x48>)
 8000d9c:	f001 fb86 	bl	80024ac <HAL_I2S_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8000da6:	f000 f9cb 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200027f0 	.word	0x200027f0
 8000db4:	40003800 	.word	0x40003800

08000db8 <MX_TIM2_Init>:
  * @param None
  * @retval None
  */

static void MX_TIM2_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b094      	sub	sp, #80	@ 0x50
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dbe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000dcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ddc:	f107 0320 	add.w	r3, r7, #32
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]
 8000df6:	615a      	str	r2, [r3, #20]
 8000df8:	619a      	str	r2, [r3, #24]
  //htim2.Init.Prescaler         = VID_HSIZE/4 - 1;
  //htim2.Init.Period            = 2*VID_VSIZE - 1;
  //sConfigOC.Pulse      = VID_VSIZE - 1;

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee8 <MX_TIM2_Init+0x130>)
 8000dfc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VID_HSIZE/4 - 1;
 8000e02:	4b39      	ldr	r3, [pc, #228]	@ (8000ee8 <MX_TIM2_Init+0x130>)
 8000e04:	2207      	movs	r2, #7
 8000e06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e08:	4b37      	ldr	r3, [pc, #220]	@ (8000ee8 <MX_TIM2_Init+0x130>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2*VID_VSIZE - 1;
 8000e0e:	4b36      	ldr	r3, [pc, #216]	@ (8000ee8 <MX_TIM2_Init+0x130>)
 8000e10:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8000e14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000e16:	4b34      	ldr	r3, [pc, #208]	@ (8000ee8 <MX_TIM2_Init+0x130>)
 8000e18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1e:	4b32      	ldr	r3, [pc, #200]	@ (8000ee8 <MX_TIM2_Init+0x130>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e24:	4830      	ldr	r0, [pc, #192]	@ (8000ee8 <MX_TIM2_Init+0x130>)
 8000e26:	f003 f98f 	bl	8004148 <HAL_TIM_Base_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000e30:	f000 f986 	bl	8001140 <Error_Handler>
  }
  // chat told me to add - this is external then the ioc aoutumatics

    sClockSourceConfig.ClockSource    = TIM_CLOCKSOURCE_ETRMODE1;  // CHANGE it from INTERNAL to ETRMODE1
 8000e34:	2370      	movs	r3, #112	@ 0x70
 8000e36:	643b      	str	r3, [r7, #64]	@ 0x40
    sClockSourceConfig.ClockPolarity  = TIM_CLOCKPOLARITY_NONINVERTED;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	647b      	str	r3, [r7, #68]	@ 0x44
    sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
    sClockSourceConfig.ClockFilter    = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e44:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4827      	ldr	r0, [pc, #156]	@ (8000ee8 <MX_TIM2_Init+0x130>)
 8000e4c:	f003 fe48 	bl	8004ae0 <HAL_TIM_ConfigClockSource>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000e56:	f000 f973 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e5a:	4823      	ldr	r0, [pc, #140]	@ (8000ee8 <MX_TIM2_Init+0x130>)
 8000e5c:	f003 fb3e 	bl	80044dc <HAL_TIM_PWM_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000e66:	f000 f96b 	bl	8001140 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000e6a:	2306      	movs	r3, #6
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000e6e:	2370      	movs	r3, #112	@ 0x70
 8000e70:	633b      	str	r3, [r7, #48]	@ 0x30
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000e72:	2300      	movs	r3, #0
 8000e74:	637b      	str	r3, [r7, #52]	@ 0x34
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	63bb      	str	r3, [r7, #56]	@ 0x38
  sSlaveConfig.TriggerFilter = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000e7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e82:	4619      	mov	r1, r3
 8000e84:	4818      	ldr	r0, [pc, #96]	@ (8000ee8 <MX_TIM2_Init+0x130>)
 8000e86:	f003 ff41 	bl	8004d0c <HAL_TIM_SlaveConfigSynchro>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000e90:	f000 f956 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000e94:	2370      	movs	r3, #112	@ 0x70
 8000e96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000e98:	2380      	movs	r3, #128	@ 0x80
 8000e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e9c:	f107 0320 	add.w	r3, r7, #32
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4811      	ldr	r0, [pc, #68]	@ (8000ee8 <MX_TIM2_Init+0x130>)
 8000ea4:	f004 fcf4 	bl	8005890 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000eae:	f000 f947 	bl	8001140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb2:	2360      	movs	r3, #96	@ 0x60
 8000eb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VID_VSIZE - 1;
 8000eb6:	f44f 731c 	mov.w	r3, #624	@ 0x270
 8000eba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4807      	ldr	r0, [pc, #28]	@ (8000ee8 <MX_TIM2_Init+0x130>)
 8000ecc:	f003 fcf4 	bl	80048b8 <HAL_TIM_PWM_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8000ed6:	f000 f933 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000eda:	4803      	ldr	r0, [pc, #12]	@ (8000ee8 <MX_TIM2_Init+0x130>)
 8000edc:	f000 fc5e 	bl	800179c <HAL_TIM_MspPostInit>

}
 8000ee0:	bf00      	nop
 8000ee2:	3750      	adds	r7, #80	@ 0x50
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000288c 	.word	0x2000288c

08000eec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b094      	sub	sp, #80	@ 0x50
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f10:	f107 0320 	add.w	r3, r7, #32
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]
 8000f2a:	615a      	str	r2, [r3, #20]
 8000f2c:	619a      	str	r2, [r3, #24]

  //FOR CHANNEL 2:
  //sConfigOC.Pulse = HSYNCCOUNTS;

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f2e:	4b4f      	ldr	r3, [pc, #316]	@ (800106c <MX_TIM3_Init+0x180>)
 8000f30:	4a4f      	ldr	r2, [pc, #316]	@ (8001070 <MX_TIM3_Init+0x184>)
 8000f32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f34:	4b4d      	ldr	r3, [pc, #308]	@ (800106c <MX_TIM3_Init+0x180>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3a:	4b4c      	ldr	r3, [pc, #304]	@ (800106c <MX_TIM3_Init+0x180>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIMERCOUNTS - 1;
 8000f40:	4b4a      	ldr	r3, [pc, #296]	@ (800106c <MX_TIM3_Init+0x180>)
 8000f42:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000f46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f48:	4b48      	ldr	r3, [pc, #288]	@ (800106c <MX_TIM3_Init+0x180>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4e:	4b47      	ldr	r3, [pc, #284]	@ (800106c <MX_TIM3_Init+0x180>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f54:	4845      	ldr	r0, [pc, #276]	@ (800106c <MX_TIM3_Init+0x180>)
 8000f56:	f003 f8f7 	bl	8004148 <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f60:	f000 f8ee 	bl	8001140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f68:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f6e:	4619      	mov	r1, r3
 8000f70:	483e      	ldr	r0, [pc, #248]	@ (800106c <MX_TIM3_Init+0x180>)
 8000f72:	f003 fdb5 	bl	8004ae0 <HAL_TIM_ConfigClockSource>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f7c:	f000 f8e0 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000f80:	483a      	ldr	r0, [pc, #232]	@ (800106c <MX_TIM3_Init+0x180>)
 8000f82:	f003 f938 	bl	80041f6 <HAL_TIM_OC_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8000f8c:	f000 f8d8 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f90:	4836      	ldr	r0, [pc, #216]	@ (800106c <MX_TIM3_Init+0x180>)
 8000f92:	f003 faa3 	bl	80044dc <HAL_TIM_PWM_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000f9c:	f000 f8d0 	bl	8001140 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000fa0:	2306      	movs	r3, #6
 8000fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000fa8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fac:	4619      	mov	r1, r3
 8000fae:	482f      	ldr	r0, [pc, #188]	@ (800106c <MX_TIM3_Init+0x180>)
 8000fb0:	f003 feac 	bl	8004d0c <HAL_TIM_SlaveConfigSynchro>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000fba:	f000 f8c1 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fc6:	f107 0320 	add.w	r3, r7, #32
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4827      	ldr	r0, [pc, #156]	@ (800106c <MX_TIM3_Init+0x180>)
 8000fce:	f004 fc5f 	bl	8005890 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000fd8:	f000 f8b2 	bl	8001140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000fdc:	2330      	movs	r3, #48	@ 0x30
 8000fde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = NO_TOG;
 8000fe0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fe4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	481d      	ldr	r0, [pc, #116]	@ (800106c <MX_TIM3_Init+0x180>)
 8000ff6:	f003 fbe5 	bl	80047c4 <HAL_TIM_OC_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001000:	f000 f89e 	bl	8001140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001004:	2360      	movs	r3, #96	@ 0x60
 8001006:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = HSYNCCOUNTS;
 8001008:	234b      	movs	r3, #75	@ 0x4b
 800100a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2204      	movs	r2, #4
 8001010:	4619      	mov	r1, r3
 8001012:	4816      	ldr	r0, [pc, #88]	@ (800106c <MX_TIM3_Init+0x180>)
 8001014:	f003 fc50 	bl	80048b8 <HAL_TIM_PWM_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM3_Init+0x136>
  {
    Error_Handler();
 800101e:	f000 f88f 	bl	8001140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 208;
 8001026:	23d0      	movs	r3, #208	@ 0xd0
 8001028:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2208      	movs	r2, #8
 800102e:	4619      	mov	r1, r3
 8001030:	480e      	ldr	r0, [pc, #56]	@ (800106c <MX_TIM3_Init+0x180>)
 8001032:	f003 fbc7 	bl	80047c4 <HAL_TIM_OC_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM3_Init+0x154>
  {
    Error_Handler();
 800103c:	f000 f880 	bl	8001140 <Error_Handler>
  }
  sConfigOC.Pulse = 880;
 8001040:	f44f 735c 	mov.w	r3, #880	@ 0x370
 8001044:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	220c      	movs	r2, #12
 800104a:	4619      	mov	r1, r3
 800104c:	4807      	ldr	r0, [pc, #28]	@ (800106c <MX_TIM3_Init+0x180>)
 800104e:	f003 fbb9 	bl	80047c4 <HAL_TIM_OC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM3_Init+0x170>
  {
    Error_Handler();
 8001058:	f000 f872 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800105c:	4803      	ldr	r0, [pc, #12]	@ (800106c <MX_TIM3_Init+0x180>)
 800105e:	f000 fb9d 	bl	800179c <HAL_TIM_MspPostInit>

}
 8001062:	bf00      	nop
 8001064:	3750      	adds	r7, #80	@ 0x50
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200028d8 	.word	0x200028d8
 8001070:	40000400 	.word	0x40000400

08001074 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800107a:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <MX_DMA_Init+0x80>)
 800107c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800107e:	4a1d      	ldr	r2, [pc, #116]	@ (80010f4 <MX_DMA_Init+0x80>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	6493      	str	r3, [r2, #72]	@ 0x48
 8001086:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <MX_DMA_Init+0x80>)
 8001088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001092:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <MX_DMA_Init+0x80>)
 8001094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001096:	4a17      	ldr	r2, [pc, #92]	@ (80010f4 <MX_DMA_Init+0x80>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6493      	str	r3, [r2, #72]	@ 0x48
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <MX_DMA_Init+0x80>)
 80010a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	200c      	movs	r0, #12
 80010b0:	f000 fe8b 	bl	8001dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010b4:	200c      	movs	r0, #12
 80010b6:	f000 fea2 	bl	8001dfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	200d      	movs	r0, #13
 80010c0:	f000 fe83 	bl	8001dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010c4:	200d      	movs	r0, #13
 80010c6:	f000 fe9a 	bl	8001dfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	200f      	movs	r0, #15
 80010d0:	f000 fe7b 	bl	8001dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010d4:	200f      	movs	r0, #15
 80010d6:	f000 fe92 	bl	8001dfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2010      	movs	r0, #16
 80010e0:	f000 fe73 	bl	8001dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80010e4:	2010      	movs	r0, #16
 80010e6:	f000 fe8a 	bl	8001dfe <HAL_NVIC_EnableIRQ>

}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000

080010f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_GPIO_Init+0x44>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	4a0e      	ldr	r2, [pc, #56]	@ (800113c <MX_GPIO_Init+0x44>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110a:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_GPIO_Init+0x44>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_GPIO_Init+0x44>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	4a08      	ldr	r2, [pc, #32]	@ (800113c <MX_GPIO_Init+0x44>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_GPIO_Init+0x44>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000

08001140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001144:	b672      	cpsid	i
}
 8001146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <Error_Handler+0x8>

0800114c <introScreen>:
	}
	Paused = !Paused;
}

void introScreen(char *subtitle)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	vidClearScreen();
 8001154:	f000 fcb8 	bl	8001ac8 <vidClearScreen>
	gdiDrawTextEx(120, 40, KOPTEKST);
 8001158:	4a0d      	ldr	r2, [pc, #52]	@ (8001190 <introScreen+0x44>)
 800115a:	2128      	movs	r1, #40	@ 0x28
 800115c:	2078      	movs	r0, #120	@ 0x78
 800115e:	f7ff fd3b 	bl	8000bd8 <gdiDrawTextEx>
	gdiDrawTextEx(100, 50, SUBTITEL);
 8001162:	4a0c      	ldr	r2, [pc, #48]	@ (8001194 <introScreen+0x48>)
 8001164:	2132      	movs	r1, #50	@ 0x32
 8001166:	2064      	movs	r0, #100	@ 0x64
 8001168:	f7ff fd36 	bl	8000bd8 <gdiDrawTextEx>
	DelayMs(2000); gdiDrawTextEx(110, 60, subtitle);
 800116c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001170:	f7ff fd66 	bl	8000c40 <DelayMs>
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	213c      	movs	r1, #60	@ 0x3c
 8001178:	206e      	movs	r0, #110	@ 0x6e
 800117a:	f7ff fd2d 	bl	8000bd8 <gdiDrawTextEx>
	DelayMs(3000);
 800117e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001182:	f7ff fd5d 	bl	8000c40 <DelayMs>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	08006adc 	.word	0x08006adc
 8001194:	08006ae8 	.word	0x08006ae8

08001198 <show>:

void show(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af02      	add	r7, sp, #8
	int16_t		x1, y1, x2, y2, i;

//	Demo Point
	introScreen("point demonstration");
 800119e:	48a7      	ldr	r0, [pc, #668]	@ (800143c <show+0x2a4>)
 80011a0:	f7ff ffd4 	bl	800114c <introScreen>
	for (i = 0; i < 500; i++) {
 80011a4:	2300      	movs	r3, #0
 80011a6:	81bb      	strh	r3, [r7, #12]
 80011a8:	e02e      	b.n	8001208 <show+0x70>
		DelayMs(10);
 80011aa:	200a      	movs	r0, #10
 80011ac:	f7ff fd48 	bl	8000c40 <DelayMs>
		x1 = rand() % VID_PIXELS_X;
 80011b0:	f004 fc32 	bl	8005a18 <rand>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	0913      	lsrs	r3, r2, #4
 80011ba:	49a1      	ldr	r1, [pc, #644]	@ (8001440 <show+0x2a8>)
 80011bc:	fba1 1303 	umull	r1, r3, r1, r3
 80011c0:	085b      	lsrs	r3, r3, #1
 80011c2:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80011c6:	fb01 f303 	mul.w	r3, r1, r3
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	81fb      	strh	r3, [r7, #14]
		y1 = rand() % VID_PIXELS_Y;
 80011ce:	f004 fc23 	bl	8005a18 <rand>
 80011d2:	4602      	mov	r2, r0
 80011d4:	4b9b      	ldr	r3, [pc, #620]	@ (8001444 <show+0x2ac>)
 80011d6:	fb83 1302 	smull	r1, r3, r3, r2
 80011da:	4413      	add	r3, r2
 80011dc:	11d9      	asrs	r1, r3, #7
 80011de:	17d3      	asrs	r3, r2, #31
 80011e0:	1ac9      	subs	r1, r1, r3
 80011e2:	460b      	mov	r3, r1
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	1a5b      	subs	r3, r3, r1
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	1ad1      	subs	r1, r2, r3
 80011ec:	460b      	mov	r3, r1
 80011ee:	817b      	strh	r3, [r7, #10]
		gdiPoint(NULL,x1,y1);
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	897a      	ldrh	r2, [r7, #10]
 80011f4:	4619      	mov	r1, r3
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff fb64 	bl	80008c4 <gdiPoint>
	for (i = 0; i < 500; i++) {
 80011fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001200:	b29b      	uxth	r3, r3
 8001202:	3301      	adds	r3, #1
 8001204:	b29b      	uxth	r3, r3
 8001206:	81bb      	strh	r3, [r7, #12]
 8001208:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800120c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001210:	dbcb      	blt.n	80011aa <show+0x12>
	}
	DelayMs(3000);
 8001212:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001216:	f7ff fd13 	bl	8000c40 <DelayMs>

//	Demo Line
	introScreen("line demonstration");
 800121a:	488b      	ldr	r0, [pc, #556]	@ (8001448 <show+0x2b0>)
 800121c:	f7ff ff96 	bl	800114c <introScreen>
	for (i = 0; i < 50; i++) {
 8001220:	2300      	movs	r3, #0
 8001222:	81bb      	strh	r3, [r7, #12]
 8001224:	e055      	b.n	80012d2 <show+0x13a>
		DelayMs(150);
 8001226:	2096      	movs	r0, #150	@ 0x96
 8001228:	f7ff fd0a 	bl	8000c40 <DelayMs>
		x1 = rand() % VID_PIXELS_X;
 800122c:	f004 fbf4 	bl	8005a18 <rand>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	0913      	lsrs	r3, r2, #4
 8001236:	4982      	ldr	r1, [pc, #520]	@ (8001440 <show+0x2a8>)
 8001238:	fba1 1303 	umull	r1, r3, r1, r3
 800123c:	085b      	lsrs	r3, r3, #1
 800123e:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8001242:	fb01 f303 	mul.w	r3, r1, r3
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	81fb      	strh	r3, [r7, #14]
		y1 = rand() % VID_PIXELS_Y;
 800124a:	f004 fbe5 	bl	8005a18 <rand>
 800124e:	4602      	mov	r2, r0
 8001250:	4b7c      	ldr	r3, [pc, #496]	@ (8001444 <show+0x2ac>)
 8001252:	fb83 1302 	smull	r1, r3, r3, r2
 8001256:	4413      	add	r3, r2
 8001258:	11d9      	asrs	r1, r3, #7
 800125a:	17d3      	asrs	r3, r2, #31
 800125c:	1ac9      	subs	r1, r1, r3
 800125e:	460b      	mov	r3, r1
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	1a5b      	subs	r3, r3, r1
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	1ad1      	subs	r1, r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	817b      	strh	r3, [r7, #10]
		x2 = rand() % VID_PIXELS_X;
 800126c:	f004 fbd4 	bl	8005a18 <rand>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	0913      	lsrs	r3, r2, #4
 8001276:	4972      	ldr	r1, [pc, #456]	@ (8001440 <show+0x2a8>)
 8001278:	fba1 1303 	umull	r1, r3, r1, r3
 800127c:	085b      	lsrs	r3, r3, #1
 800127e:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8001282:	fb01 f303 	mul.w	r3, r1, r3
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	813b      	strh	r3, [r7, #8]
		y2 = rand() % VID_PIXELS_Y;
 800128a:	f004 fbc5 	bl	8005a18 <rand>
 800128e:	4602      	mov	r2, r0
 8001290:	4b6c      	ldr	r3, [pc, #432]	@ (8001444 <show+0x2ac>)
 8001292:	fb83 1302 	smull	r1, r3, r3, r2
 8001296:	4413      	add	r3, r2
 8001298:	11d9      	asrs	r1, r3, #7
 800129a:	17d3      	asrs	r3, r2, #31
 800129c:	1ac9      	subs	r1, r1, r3
 800129e:	460b      	mov	r3, r1
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	1a5b      	subs	r3, r3, r1
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	1ad1      	subs	r1, r2, r3
 80012a8:	460b      	mov	r3, r1
 80012aa:	80fb      	strh	r3, [r7, #6]
		gdiLine(NULL,x1,y1,x2,y2);
 80012ac:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80012b0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80012b4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80012b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	4603      	mov	r3, r0
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff fb65 	bl	8000990 <gdiLine>
	for (i = 0; i < 50; i++) {
 80012c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	3301      	adds	r3, #1
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	81bb      	strh	r3, [r7, #12]
 80012d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012d6:	2b31      	cmp	r3, #49	@ 0x31
 80012d8:	dda5      	ble.n	8001226 <show+0x8e>
	}
	DelayMs(3000);
 80012da:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80012de:	f7ff fcaf 	bl	8000c40 <DelayMs>

//	Demo Rectangle
	introScreen("rectangle demonstration");
 80012e2:	485a      	ldr	r0, [pc, #360]	@ (800144c <show+0x2b4>)
 80012e4:	f7ff ff32 	bl	800114c <introScreen>
	for (i = 0; i < 15; i++) {
 80012e8:	2300      	movs	r3, #0
 80012ea:	81bb      	strh	r3, [r7, #12]
 80012ec:	e051      	b.n	8001392 <show+0x1fa>
		DelayMs(600);
 80012ee:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80012f2:	f7ff fca5 	bl	8000c40 <DelayMs>
		x1 = rand() % VID_PIXELS_X;
 80012f6:	f004 fb8f 	bl	8005a18 <rand>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	0913      	lsrs	r3, r2, #4
 8001300:	494f      	ldr	r1, [pc, #316]	@ (8001440 <show+0x2a8>)
 8001302:	fba1 1303 	umull	r1, r3, r1, r3
 8001306:	085b      	lsrs	r3, r3, #1
 8001308:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 800130c:	fb01 f303 	mul.w	r3, r1, r3
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	81fb      	strh	r3, [r7, #14]
		y1 = rand() % VID_PIXELS_Y;
 8001314:	f004 fb80 	bl	8005a18 <rand>
 8001318:	4602      	mov	r2, r0
 800131a:	4b4a      	ldr	r3, [pc, #296]	@ (8001444 <show+0x2ac>)
 800131c:	fb83 1302 	smull	r1, r3, r3, r2
 8001320:	4413      	add	r3, r2
 8001322:	11d9      	asrs	r1, r3, #7
 8001324:	17d3      	asrs	r3, r2, #31
 8001326:	1ac9      	subs	r1, r1, r3
 8001328:	460b      	mov	r3, r1
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	1a5b      	subs	r3, r3, r1
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	1ad1      	subs	r1, r2, r3
 8001332:	460b      	mov	r3, r1
 8001334:	817b      	strh	r3, [r7, #10]
		x2 = rand() % 100;
 8001336:	f004 fb6f 	bl	8005a18 <rand>
 800133a:	4603      	mov	r3, r0
 800133c:	4a44      	ldr	r2, [pc, #272]	@ (8001450 <show+0x2b8>)
 800133e:	fb82 1203 	smull	r1, r2, r2, r3
 8001342:	1151      	asrs	r1, r2, #5
 8001344:	17da      	asrs	r2, r3, #31
 8001346:	1a8a      	subs	r2, r1, r2
 8001348:	2164      	movs	r1, #100	@ 0x64
 800134a:	fb01 f202 	mul.w	r2, r1, r2
 800134e:	1a9a      	subs	r2, r3, r2
 8001350:	4613      	mov	r3, r2
 8001352:	813b      	strh	r3, [r7, #8]
		y2 = rand() % 100;
 8001354:	f004 fb60 	bl	8005a18 <rand>
 8001358:	4603      	mov	r3, r0
 800135a:	4a3d      	ldr	r2, [pc, #244]	@ (8001450 <show+0x2b8>)
 800135c:	fb82 1203 	smull	r1, r2, r2, r3
 8001360:	1151      	asrs	r1, r2, #5
 8001362:	17da      	asrs	r2, r3, #31
 8001364:	1a8a      	subs	r2, r1, r2
 8001366:	2164      	movs	r1, #100	@ 0x64
 8001368:	fb01 f202 	mul.w	r2, r1, r2
 800136c:	1a9a      	subs	r2, r3, r2
 800136e:	4613      	mov	r3, r2
 8001370:	80fb      	strh	r3, [r7, #6]
		gdiRectangle(x1,y1,x2,y2);
 8001372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001376:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800137a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800137e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001382:	f7ff fbe1 	bl	8000b48 <gdiRectangle>
	for (i = 0; i < 15; i++) {
 8001386:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800138a:	b29b      	uxth	r3, r3
 800138c:	3301      	adds	r3, #1
 800138e:	b29b      	uxth	r3, r3
 8001390:	81bb      	strh	r3, [r7, #12]
 8001392:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001396:	2b0e      	cmp	r3, #14
 8001398:	dda9      	ble.n	80012ee <show+0x156>
	}
	DelayMs(3000);
 800139a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800139e:	f7ff fc4f 	bl	8000c40 <DelayMs>
		gdiCircle(x,y,x1,GDI_ROP_COPY);
	}
	DelayMs(3000);
#endif
//	Demo Bitmap
	introScreen("bitmap demonstration");
 80013a2:	482c      	ldr	r0, [pc, #176]	@ (8001454 <show+0x2bc>)
 80013a4:	f7ff fed2 	bl	800114c <introScreen>
	x1 = VID_PIXELS_X / 8;
 80013a8:	232a      	movs	r3, #42	@ 0x2a
 80013aa:	81fb      	strh	r3, [r7, #14]
	y1 = 220;
 80013ac:	23dc      	movs	r3, #220	@ 0xdc
 80013ae:	817b      	strh	r3, [r7, #10]
	do {
		gdiBitBlt(NULL,x1,y1,15,12,(pBMP)((x1&1)?deBadBoys1:
 80013b0:	89fb      	ldrh	r3, [r7, #14]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d108      	bne.n	80013cc <show+0x234>
				((x1&3)?deBadBoys2:deBadBoys0)));
 80013ba:	89fb      	ldrh	r3, [r7, #14]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <show+0x230>
 80013c4:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <show+0x2c0>)
 80013c6:	e002      	b.n	80013ce <show+0x236>
 80013c8:	4b24      	ldr	r3, [pc, #144]	@ (800145c <show+0x2c4>)
 80013ca:	e000      	b.n	80013ce <show+0x236>
		gdiBitBlt(NULL,x1,y1,15,12,(pBMP)((x1&1)?deBadBoys1:
 80013cc:	4b24      	ldr	r3, [pc, #144]	@ (8001460 <show+0x2c8>)
 80013ce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80013d2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	230c      	movs	r3, #12
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	230f      	movs	r3, #15
 80013de:	2000      	movs	r0, #0
 80013e0:	f7fe ff6e 	bl	80002c0 <gdiBitBlt>
		DelayMs(100);
 80013e4:	2064      	movs	r0, #100	@ 0x64
 80013e6:	f7ff fc2b 	bl	8000c40 <DelayMs>
	} while (x1++ < (VID_PIXELS_X * 7 / 8));
 80013ea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013ee:	b293      	uxth	r3, r2
 80013f0:	3301      	adds	r3, #1
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	81fb      	strh	r3, [r7, #14]
 80013f6:	b293      	uxth	r3, r2
 80013f8:	f5b3 7f93 	cmp.w	r3, #294	@ 0x126
 80013fc:	d3d8      	bcc.n	80013b0 <show+0x218>
	DelayMs(3000);
 80013fe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001402:	f7ff fc1d 	bl	8000c40 <DelayMs>

// Goodbye
	introScreen("font size 6x10, 42 * 24 text");
 8001406:	4817      	ldr	r0, [pc, #92]	@ (8001464 <show+0x2cc>)
 8001408:	f7ff fea0 	bl	800114c <introScreen>

	gdiDrawTextEx(80, 90, "ARM MCU development");
 800140c:	4a16      	ldr	r2, [pc, #88]	@ (8001468 <show+0x2d0>)
 800140e:	215a      	movs	r1, #90	@ 0x5a
 8001410:	2050      	movs	r0, #80	@ 0x50
 8001412:	f7ff fbe1 	bl	8000bd8 <gdiDrawTextEx>
	gdiDrawTextEx(95, 120, "by E.J.W. VRIEZE");
 8001416:	4a15      	ldr	r2, [pc, #84]	@ (800146c <show+0x2d4>)
 8001418:	2178      	movs	r1, #120	@ 0x78
 800141a:	205f      	movs	r0, #95	@ 0x5f
 800141c:	f7ff fbdc 	bl	8000bd8 <gdiDrawTextEx>
	gdiDrawTextEx(95, 130, "~~~~~ 2016 ~~~~~");
 8001420:	4a13      	ldr	r2, [pc, #76]	@ (8001470 <show+0x2d8>)
 8001422:	2182      	movs	r1, #130	@ 0x82
 8001424:	205f      	movs	r0, #95	@ 0x5f
 8001426:	f7ff fbd7 	bl	8000bd8 <gdiDrawTextEx>
	DelayMs(9000);
 800142a:	f242 3028 	movw	r0, #9000	@ 0x2328
 800142e:	f7ff fc07 	bl	8000c40 <DelayMs>
}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	08006b00 	.word	0x08006b00
 8001440:	18618619 	.word	0x18618619
 8001444:	88888889 	.word	0x88888889
 8001448:	08006b14 	.word	0x08006b14
 800144c:	08006b28 	.word	0x08006b28
 8001450:	51eb851f 	.word	0x51eb851f
 8001454:	08006b40 	.word	0x08006b40
 8001458:	08006fc4 	.word	0x08006fc4
 800145c:	08006f94 	.word	0x08006f94
 8001460:	08006fac 	.word	0x08006fac
 8001464:	08006b58 	.word	0x08006b58
 8001468:	08006b78 	.word	0x08006b78
 800146c:	08006b8c 	.word	0x08006b8c
 8001470:	08006ba0 	.word	0x08006ba0

08001474 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <HAL_MspInit+0x44>)
 800147c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800147e:	4a0e      	ldr	r2, [pc, #56]	@ (80014b8 <HAL_MspInit+0x44>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6613      	str	r3, [r2, #96]	@ 0x60
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <HAL_MspInit+0x44>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <HAL_MspInit+0x44>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001496:	4a08      	ldr	r2, [pc, #32]	@ (80014b8 <HAL_MspInit+0x44>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800149c:	6593      	str	r3, [r2, #88]	@ 0x58
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_MspInit+0x44>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014aa:	f001 f983 	bl	80027b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b09e      	sub	sp, #120	@ 0x78
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	2254      	movs	r2, #84	@ 0x54
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f004 fcd1 	bl	8005e84 <memset>
  if(hi2s->Instance==SPI2)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a35      	ldr	r2, [pc, #212]	@ (80015bc <HAL_I2S_MspInit+0x100>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d163      	bne.n	80015b4 <HAL_I2S_MspInit+0xf8>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80014ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 fe98 	bl	8003230 <HAL_RCCEx_PeriphCLKConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 8001506:	f7ff fe1b 	bl	8001140 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800150a:	4b2d      	ldr	r3, [pc, #180]	@ (80015c0 <HAL_I2S_MspInit+0x104>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150e:	4a2c      	ldr	r2, [pc, #176]	@ (80015c0 <HAL_I2S_MspInit+0x104>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001514:	6593      	str	r3, [r2, #88]	@ 0x58
 8001516:	4b2a      	ldr	r3, [pc, #168]	@ (80015c0 <HAL_I2S_MspInit+0x104>)
 8001518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	4b27      	ldr	r3, [pc, #156]	@ (80015c0 <HAL_I2S_MspInit+0x104>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	4a26      	ldr	r2, [pc, #152]	@ (80015c0 <HAL_I2S_MspInit+0x104>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152e:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <HAL_I2S_MspInit+0x104>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800153a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800153e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800154c:	2305      	movs	r3, #5
 800154e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001550:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001554:	4619      	mov	r1, r3
 8001556:	481b      	ldr	r0, [pc, #108]	@ (80015c4 <HAL_I2S_MspInit+0x108>)
 8001558:	f000 fe26 	bl	80021a8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800155c:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <HAL_I2S_MspInit+0x10c>)
 800155e:	4a1b      	ldr	r2, [pc, #108]	@ (80015cc <HAL_I2S_MspInit+0x110>)
 8001560:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001562:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <HAL_I2S_MspInit+0x10c>)
 8001564:	220d      	movs	r2, #13
 8001566:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001568:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <HAL_I2S_MspInit+0x10c>)
 800156a:	2210      	movs	r2, #16
 800156c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800156e:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <HAL_I2S_MspInit+0x10c>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001574:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <HAL_I2S_MspInit+0x10c>)
 8001576:	2280      	movs	r2, #128	@ 0x80
 8001578:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800157a:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <HAL_I2S_MspInit+0x10c>)
 800157c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001580:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <HAL_I2S_MspInit+0x10c>)
 8001584:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001588:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800158a:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <HAL_I2S_MspInit+0x10c>)
 800158c:	2220      	movs	r2, #32
 800158e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001590:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <HAL_I2S_MspInit+0x10c>)
 8001592:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001596:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001598:	480b      	ldr	r0, [pc, #44]	@ (80015c8 <HAL_I2S_MspInit+0x10c>)
 800159a:	f000 fc4b 	bl	8001e34 <HAL_DMA_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_I2S_MspInit+0xec>
    {
      Error_Handler();
 80015a4:	f7ff fdcc 	bl	8001140 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a07      	ldr	r2, [pc, #28]	@ (80015c8 <HAL_I2S_MspInit+0x10c>)
 80015ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015ae:	4a06      	ldr	r2, [pc, #24]	@ (80015c8 <HAL_I2S_MspInit+0x10c>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80015b4:	bf00      	nop
 80015b6:	3778      	adds	r7, #120	@ 0x78
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40003800 	.word	0x40003800
 80015c0:	40021000 	.word	0x40021000
 80015c4:	48000400 	.word	0x48000400
 80015c8:	2000282c 	.word	0x2000282c
 80015cc:	40020058 	.word	0x40020058

080015d0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	@ 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015f0:	d129      	bne.n	8001646 <HAL_TIM_Base_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015f2:	4b62      	ldr	r3, [pc, #392]	@ (800177c <HAL_TIM_Base_MspInit+0x1ac>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f6:	4a61      	ldr	r2, [pc, #388]	@ (800177c <HAL_TIM_Base_MspInit+0x1ac>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80015fe:	4b5f      	ldr	r3, [pc, #380]	@ (800177c <HAL_TIM_Base_MspInit+0x1ac>)
 8001600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	4b5c      	ldr	r3, [pc, #368]	@ (800177c <HAL_TIM_Base_MspInit+0x1ac>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160e:	4a5b      	ldr	r2, [pc, #364]	@ (800177c <HAL_TIM_Base_MspInit+0x1ac>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001616:	4b59      	ldr	r3, [pc, #356]	@ (800177c <HAL_TIM_Base_MspInit+0x1ac>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001622:	2301      	movs	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8001632:	230e      	movs	r3, #14
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001640:	f000 fdb2 	bl	80021a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001644:	e095      	b.n	8001772 <HAL_TIM_Base_MspInit+0x1a2>
  else if(htim_base->Instance==TIM3)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a4d      	ldr	r2, [pc, #308]	@ (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	f040 8090 	bne.w	8001772 <HAL_TIM_Base_MspInit+0x1a2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001652:	4b4a      	ldr	r3, [pc, #296]	@ (800177c <HAL_TIM_Base_MspInit+0x1ac>)
 8001654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001656:	4a49      	ldr	r2, [pc, #292]	@ (800177c <HAL_TIM_Base_MspInit+0x1ac>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6593      	str	r3, [r2, #88]	@ 0x58
 800165e:	4b47      	ldr	r3, [pc, #284]	@ (800177c <HAL_TIM_Base_MspInit+0x1ac>)
 8001660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Channel6;
 800166a:	4b46      	ldr	r3, [pc, #280]	@ (8001784 <HAL_TIM_Base_MspInit+0x1b4>)
 800166c:	4a46      	ldr	r2, [pc, #280]	@ (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 800166e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001670:	4b44      	ldr	r3, [pc, #272]	@ (8001784 <HAL_TIM_Base_MspInit+0x1b4>)
 8001672:	223d      	movs	r2, #61	@ 0x3d
 8001674:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001676:	4b43      	ldr	r3, [pc, #268]	@ (8001784 <HAL_TIM_Base_MspInit+0x1b4>)
 8001678:	2210      	movs	r2, #16
 800167a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800167c:	4b41      	ldr	r3, [pc, #260]	@ (8001784 <HAL_TIM_Base_MspInit+0x1b4>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001682:	4b40      	ldr	r3, [pc, #256]	@ (8001784 <HAL_TIM_Base_MspInit+0x1b4>)
 8001684:	2280      	movs	r2, #128	@ 0x80
 8001686:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001688:	4b3e      	ldr	r3, [pc, #248]	@ (8001784 <HAL_TIM_Base_MspInit+0x1b4>)
 800168a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800168e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001690:	4b3c      	ldr	r3, [pc, #240]	@ (8001784 <HAL_TIM_Base_MspInit+0x1b4>)
 8001692:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001696:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_CIRCULAR;
 8001698:	4b3a      	ldr	r3, [pc, #232]	@ (8001784 <HAL_TIM_Base_MspInit+0x1b4>)
 800169a:	2220      	movs	r2, #32
 800169c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800169e:	4b39      	ldr	r3, [pc, #228]	@ (8001784 <HAL_TIM_Base_MspInit+0x1b4>)
 80016a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80016a6:	4837      	ldr	r0, [pc, #220]	@ (8001784 <HAL_TIM_Base_MspInit+0x1b4>)
 80016a8:	f000 fbc4 	bl	8001e34 <HAL_DMA_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_TIM_Base_MspInit+0xe6>
      Error_Handler();
 80016b2:	f7ff fd45 	bl	8001140 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a32      	ldr	r2, [pc, #200]	@ (8001784 <HAL_TIM_Base_MspInit+0x1b4>)
 80016ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80016bc:	4a31      	ldr	r2, [pc, #196]	@ (8001784 <HAL_TIM_Base_MspInit+0x1b4>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 80016c2:	4b32      	ldr	r3, [pc, #200]	@ (800178c <HAL_TIM_Base_MspInit+0x1bc>)
 80016c4:	4a32      	ldr	r2, [pc, #200]	@ (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 80016c6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 80016c8:	4b30      	ldr	r3, [pc, #192]	@ (800178c <HAL_TIM_Base_MspInit+0x1bc>)
 80016ca:	223f      	movs	r2, #63	@ 0x3f
 80016cc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016ce:	4b2f      	ldr	r3, [pc, #188]	@ (800178c <HAL_TIM_Base_MspInit+0x1bc>)
 80016d0:	2210      	movs	r2, #16
 80016d2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d4:	4b2d      	ldr	r3, [pc, #180]	@ (800178c <HAL_TIM_Base_MspInit+0x1bc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80016da:	4b2c      	ldr	r3, [pc, #176]	@ (800178c <HAL_TIM_Base_MspInit+0x1bc>)
 80016dc:	2280      	movs	r2, #128	@ 0x80
 80016de:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016e0:	4b2a      	ldr	r3, [pc, #168]	@ (800178c <HAL_TIM_Base_MspInit+0x1bc>)
 80016e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016e6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016e8:	4b28      	ldr	r3, [pc, #160]	@ (800178c <HAL_TIM_Base_MspInit+0x1bc>)
 80016ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016ee:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 80016f0:	4b26      	ldr	r3, [pc, #152]	@ (800178c <HAL_TIM_Base_MspInit+0x1bc>)
 80016f2:	2220      	movs	r2, #32
 80016f4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016f6:	4b25      	ldr	r3, [pc, #148]	@ (800178c <HAL_TIM_Base_MspInit+0x1bc>)
 80016f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 80016fe:	4823      	ldr	r0, [pc, #140]	@ (800178c <HAL_TIM_Base_MspInit+0x1bc>)
 8001700:	f000 fb98 	bl	8001e34 <HAL_DMA_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_TIM_Base_MspInit+0x13e>
      Error_Handler();
 800170a:	f7ff fd19 	bl	8001140 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a1e      	ldr	r2, [pc, #120]	@ (800178c <HAL_TIM_Base_MspInit+0x1bc>)
 8001712:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001714:	4a1d      	ldr	r2, [pc, #116]	@ (800178c <HAL_TIM_Base_MspInit+0x1bc>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_tim3_ch4.Instance = DMA1_Channel3;
 800171a:	4b1e      	ldr	r3, [pc, #120]	@ (8001794 <HAL_TIM_Base_MspInit+0x1c4>)
 800171c:	4a1e      	ldr	r2, [pc, #120]	@ (8001798 <HAL_TIM_Base_MspInit+0x1c8>)
 800171e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 8001720:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <HAL_TIM_Base_MspInit+0x1c4>)
 8001722:	2240      	movs	r2, #64	@ 0x40
 8001724:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001726:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <HAL_TIM_Base_MspInit+0x1c4>)
 8001728:	2210      	movs	r2, #16
 800172a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800172c:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <HAL_TIM_Base_MspInit+0x1c4>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001732:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <HAL_TIM_Base_MspInit+0x1c4>)
 8001734:	2280      	movs	r2, #128	@ 0x80
 8001736:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001738:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <HAL_TIM_Base_MspInit+0x1c4>)
 800173a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800173e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001740:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <HAL_TIM_Base_MspInit+0x1c4>)
 8001742:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001746:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_CIRCULAR;
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <HAL_TIM_Base_MspInit+0x1c4>)
 800174a:	2220      	movs	r2, #32
 800174c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <HAL_TIM_Base_MspInit+0x1c4>)
 8001750:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001754:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 8001756:	480f      	ldr	r0, [pc, #60]	@ (8001794 <HAL_TIM_Base_MspInit+0x1c4>)
 8001758:	f000 fb6c 	bl	8001e34 <HAL_DMA_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_TIM_Base_MspInit+0x196>
      Error_Handler();
 8001762:	f7ff fced 	bl	8001140 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <HAL_TIM_Base_MspInit+0x1c4>)
 800176a:	631a      	str	r2, [r3, #48]	@ 0x30
 800176c:	4a09      	ldr	r2, [pc, #36]	@ (8001794 <HAL_TIM_Base_MspInit+0x1c4>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001772:	bf00      	nop
 8001774:	3728      	adds	r7, #40	@ 0x28
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	40000400 	.word	0x40000400
 8001784:	20002924 	.word	0x20002924
 8001788:	4002006c 	.word	0x4002006c
 800178c:	20002984 	.word	0x20002984
 8001790:	4002001c 	.word	0x4002001c
 8001794:	200029e4 	.word	0x200029e4
 8001798:	40020030 	.word	0x40020030

0800179c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017bc:	d11d      	bne.n	80017fa <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b22      	ldr	r3, [pc, #136]	@ (8001848 <HAL_TIM_MspPostInit+0xac>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c2:	4a21      	ldr	r2, [pc, #132]	@ (8001848 <HAL_TIM_MspPostInit+0xac>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001848 <HAL_TIM_MspPostInit+0xac>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017d6:	2308      	movs	r3, #8
 80017d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017e6:	2301      	movs	r3, #1
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017f4:	f000 fcd8 	bl	80021a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017f8:	e021      	b.n	800183e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a13      	ldr	r2, [pc, #76]	@ (800184c <HAL_TIM_MspPostInit+0xb0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d11c      	bne.n	800183e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <HAL_TIM_MspPostInit+0xac>)
 8001806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001808:	4a0f      	ldr	r2, [pc, #60]	@ (8001848 <HAL_TIM_MspPostInit+0xac>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001810:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <HAL_TIM_MspPostInit+0xac>)
 8001812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800181c:	2350      	movs	r3, #80	@ 0x50
 800181e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800182c:	2302      	movs	r3, #2
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800183a:	f000 fcb5 	bl	80021a8 <HAL_GPIO_Init>
}
 800183e:	bf00      	nop
 8001840:	3728      	adds	r7, #40	@ 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	40000400 	.word	0x40000400

08001850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <NMI_Handler+0x4>

08001858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <HardFault_Handler+0x4>

08001860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <MemManage_Handler+0x4>

08001868 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <BusFault_Handler+0x4>

08001870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <UsageFault_Handler+0x4>

08001878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a8:	f000 f996 	bl	8001bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (TimingDelay) {
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <SysTick_Handler+0x20>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d004      	beq.n	80018be <SysTick_Handler+0x1a>
    TimingDelay--;
 80018b4:	4b03      	ldr	r3, [pc, #12]	@ (80018c4 <SysTick_Handler+0x20>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	4a02      	ldr	r2, [pc, #8]	@ (80018c4 <SysTick_Handler+0x20>)
 80018bc:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20002a48 	.word	0x20002a48

080018c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 80018cc:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <DMA1_Channel2_IRQHandler+0x10>)
 80018ce:	f000 fb59 	bl	8001f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20002984 	.word	0x20002984

080018dc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 80018e0:	4802      	ldr	r0, [pc, #8]	@ (80018ec <DMA1_Channel3_IRQHandler+0x10>)
 80018e2:	f000 fb4f 	bl	8001f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200029e4 	.word	0x200029e4

080018f0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <DMA1_Channel5_IRQHandler+0x10>)
 80018f6:	f000 fb45 	bl	8001f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000282c 	.word	0x2000282c

08001904 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8001908:	4802      	ldr	r0, [pc, #8]	@ (8001914 <DMA1_Channel6_IRQHandler+0x10>)
 800190a:	f000 fb3b 	bl	8001f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20002924 	.word	0x20002924

08001918 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return 1;
 800191c:	2301      	movs	r3, #1
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_kill>:

int _kill(int pid, int sig)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001932:	f004 faf5 	bl	8005f20 <__errno>
 8001936:	4603      	mov	r3, r0
 8001938:	2216      	movs	r2, #22
 800193a:	601a      	str	r2, [r3, #0]
  return -1;
 800193c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_exit>:

void _exit (int status)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001950:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ffe7 	bl	8001928 <_kill>
  while (1) {}    /* Make sure we hang here */
 800195a:	bf00      	nop
 800195c:	e7fd      	b.n	800195a <_exit+0x12>

0800195e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e00a      	b.n	8001986 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001970:	f3af 8000 	nop.w
 8001974:	4601      	mov	r1, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	60ba      	str	r2, [r7, #8]
 800197c:	b2ca      	uxtb	r2, r1
 800197e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	3301      	adds	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	dbf0      	blt.n	8001970 <_read+0x12>
  }

  return len;
 800198e:	687b      	ldr	r3, [r7, #4]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e009      	b.n	80019be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	60ba      	str	r2, [r7, #8]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	dbf1      	blt.n	80019aa <_write+0x12>
  }
  return len;
 80019c6:	687b      	ldr	r3, [r7, #4]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_close>:

int _close(int file)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019f8:	605a      	str	r2, [r3, #4]
  return 0;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <_isatty>:

int _isatty(int file)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a10:	2301      	movs	r3, #1
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b085      	sub	sp, #20
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a40:	4a14      	ldr	r2, [pc, #80]	@ (8001a94 <_sbrk+0x5c>)
 8001a42:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <_sbrk+0x60>)
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a4c:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a54:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <_sbrk+0x64>)
 8001a56:	4a12      	ldr	r2, [pc, #72]	@ (8001aa0 <_sbrk+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a5a:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d207      	bcs.n	8001a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a68:	f004 fa5a 	bl	8005f20 <__errno>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	220c      	movs	r2, #12
 8001a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a76:	e009      	b.n	8001a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a78:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7e:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	4a05      	ldr	r2, [pc, #20]	@ (8001a9c <_sbrk+0x64>)
 8001a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20020000 	.word	0x20020000
 8001a98:	00000400 	.word	0x00000400
 8001a9c:	20002a4c 	.word	0x20002a4c
 8001aa0:	20002ba0 	.word	0x20002ba0

08001aa4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001aa8:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <SystemInit+0x20>)
 8001aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aae:	4a05      	ldr	r2, [pc, #20]	@ (8001ac4 <SystemInit+0x20>)
 8001ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <vidClearScreen>:

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

void vidClearScreen(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	{
		fb[line]				[0] = 0b1111111111111110;
		fb[line]  [XFERS_PERLINE-1] = 0b1111111111111110;
	}
#else
	memset(screen,0xFF,sizeof(screen));
 8001acc:	f242 7260 	movw	r2, #10080	@ 0x2760
 8001ad0:	21ff      	movs	r1, #255	@ 0xff
 8001ad2:	4802      	ldr	r0, [pc, #8]	@ (8001adc <vidClearScreen+0x14>)
 8001ad4:	f004 f9d6 	bl	8005e84 <memset>
#endif

}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000000 	.word	0x20000000

08001ae0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ae0:	480d      	ldr	r0, [pc, #52]	@ (8001b18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ae2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ae4:	f7ff ffde 	bl	8001aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae8:	480c      	ldr	r0, [pc, #48]	@ (8001b1c <LoopForever+0x6>)
  ldr r1, =_edata
 8001aea:	490d      	ldr	r1, [pc, #52]	@ (8001b20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aec:	4a0d      	ldr	r2, [pc, #52]	@ (8001b24 <LoopForever+0xe>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001af0:	e002      	b.n	8001af8 <LoopCopyDataInit>

08001af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af6:	3304      	adds	r3, #4

08001af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001afc:	d3f9      	bcc.n	8001af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b00:	4c0a      	ldr	r4, [pc, #40]	@ (8001b2c <LoopForever+0x16>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b04:	e001      	b.n	8001b0a <LoopFillZerobss>

08001b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b08:	3204      	adds	r2, #4

08001b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b0e:	f004 fa0d 	bl	8005f2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b12:	f7ff f8b1 	bl	8000c78 <main>

08001b16 <LoopForever>:

LoopForever:
    b LoopForever
 8001b16:	e7fe      	b.n	8001b16 <LoopForever>
  ldr   r0, =_estack
 8001b18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b1c:	20002760 	.word	0x20002760
  ldr r1, =_edata
 8001b20:	200027cc 	.word	0x200027cc
  ldr r2, =_sidata
 8001b24:	080070e4 	.word	0x080070e4
  ldr r2, =_sbss
 8001b28:	200027cc 	.word	0x200027cc
  ldr r4, =_ebss
 8001b2c:	20002ba0 	.word	0x20002ba0

08001b30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC1_2_IRQHandler>

08001b32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 f939 	bl	8001db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b42:	200f      	movs	r0, #15
 8001b44:	f000 f80e 	bl	8001b64 <HAL_InitTick>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	71fb      	strb	r3, [r7, #7]
 8001b52:	e001      	b.n	8001b58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b54:	f7ff fc8e 	bl	8001474 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b58:	79fb      	ldrb	r3, [r7, #7]

}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b70:	4b16      	ldr	r3, [pc, #88]	@ (8001bcc <HAL_InitTick+0x68>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d022      	beq.n	8001bbe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b78:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <HAL_InitTick+0x6c>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b13      	ldr	r3, [pc, #76]	@ (8001bcc <HAL_InitTick+0x68>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b84:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 f944 	bl	8001e1a <HAL_SYSTICK_Config>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10f      	bne.n	8001bb8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b0f      	cmp	r3, #15
 8001b9c:	d809      	bhi.n	8001bb2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ba6:	f000 f910 	bl	8001dca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001baa:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <HAL_InitTick+0x70>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	e007      	b.n	8001bc2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	73fb      	strb	r3, [r7, #15]
 8001bb6:	e004      	b.n	8001bc2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	73fb      	strb	r3, [r7, #15]
 8001bbc:	e001      	b.n	8001bc2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	2000276c 	.word	0x2000276c
 8001bd0:	20002764 	.word	0x20002764
 8001bd4:	20002768 	.word	0x20002768

08001bd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <HAL_IncTick+0x1c>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b05      	ldr	r3, [pc, #20]	@ (8001bf8 <HAL_IncTick+0x20>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4413      	add	r3, r2
 8001be6:	4a03      	ldr	r2, [pc, #12]	@ (8001bf4 <HAL_IncTick+0x1c>)
 8001be8:	6013      	str	r3, [r2, #0]
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	20002a50 	.word	0x20002a50
 8001bf8:	2000276c 	.word	0x2000276c

08001bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001c00:	4b03      	ldr	r3, [pc, #12]	@ (8001c10 <HAL_GetTick+0x14>)
 8001c02:	681b      	ldr	r3, [r3, #0]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20002a50 	.word	0x20002a50

08001c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c24:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c30:	4013      	ands	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c46:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	60d3      	str	r3, [r2, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c60:	4b04      	ldr	r3, [pc, #16]	@ (8001c74 <__NVIC_GetPriorityGrouping+0x18>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	f003 0307 	and.w	r3, r3, #7
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	db0b      	blt.n	8001ca2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	f003 021f 	and.w	r2, r3, #31
 8001c90:	4907      	ldr	r1, [pc, #28]	@ (8001cb0 <__NVIC_EnableIRQ+0x38>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	2001      	movs	r0, #1
 8001c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000e100 	.word	0xe000e100

08001cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	db0a      	blt.n	8001cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	490c      	ldr	r1, [pc, #48]	@ (8001d00 <__NVIC_SetPriority+0x4c>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	0112      	lsls	r2, r2, #4
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cdc:	e00a      	b.n	8001cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4908      	ldr	r1, [pc, #32]	@ (8001d04 <__NVIC_SetPriority+0x50>)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3b04      	subs	r3, #4
 8001cec:	0112      	lsls	r2, r2, #4
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	761a      	strb	r2, [r3, #24]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	@ 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f1c3 0307 	rsb	r3, r3, #7
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	bf28      	it	cs
 8001d26:	2304      	movcs	r3, #4
 8001d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d902      	bls.n	8001d38 <NVIC_EncodePriority+0x30>
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b03      	subs	r3, #3
 8001d36:	e000      	b.n	8001d3a <NVIC_EncodePriority+0x32>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	43d9      	mvns	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	4313      	orrs	r3, r2
         );
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3724      	adds	r7, #36	@ 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d80:	d301      	bcc.n	8001d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00f      	b.n	8001da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d86:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <SysTick_Config+0x40>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8e:	210f      	movs	r1, #15
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d94:	f7ff ff8e 	bl	8001cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d98:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <SysTick_Config+0x40>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9e:	4b04      	ldr	r3, [pc, #16]	@ (8001db0 <SysTick_Config+0x40>)
 8001da0:	2207      	movs	r2, #7
 8001da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	e000e010 	.word	0xe000e010

08001db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff29 	bl	8001c14 <__NVIC_SetPriorityGrouping>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd8:	f7ff ff40 	bl	8001c5c <__NVIC_GetPriorityGrouping>
 8001ddc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	6978      	ldr	r0, [r7, #20]
 8001de4:	f7ff ff90 	bl	8001d08 <NVIC_EncodePriority>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff5f 	bl	8001cb4 <__NVIC_SetPriority>
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff33 	bl	8001c78 <__NVIC_EnableIRQ>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffa4 	bl	8001d70 <SysTick_Config>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e08d      	b.n	8001f62 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4b47      	ldr	r3, [pc, #284]	@ (8001f6c <HAL_DMA_Init+0x138>)
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d80f      	bhi.n	8001e72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b45      	ldr	r3, [pc, #276]	@ (8001f70 <HAL_DMA_Init+0x13c>)
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a45      	ldr	r2, [pc, #276]	@ (8001f74 <HAL_DMA_Init+0x140>)
 8001e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	009a      	lsls	r2, r3, #2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a42      	ldr	r2, [pc, #264]	@ (8001f78 <HAL_DMA_Init+0x144>)
 8001e6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e70:	e00e      	b.n	8001e90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b40      	ldr	r3, [pc, #256]	@ (8001f7c <HAL_DMA_Init+0x148>)
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a3d      	ldr	r2, [pc, #244]	@ (8001f74 <HAL_DMA_Init+0x140>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	009a      	lsls	r2, r3, #2
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f80 <HAL_DMA_Init+0x14c>)
 8001e8e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eaa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f8fe 	bl	80020e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ef0:	d102      	bne.n	8001ef8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f0c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d010      	beq.n	8001f38 <HAL_DMA_Init+0x104>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d80c      	bhi.n	8001f38 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f91e 	bl	8002160 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	e008      	b.n	8001f4a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40020407 	.word	0x40020407
 8001f70:	bffdfff8 	.word	0xbffdfff8
 8001f74:	cccccccd 	.word	0xcccccccd
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	bffdfbf8 	.word	0xbffdfbf8
 8001f80:	40020400 	.word	0x40020400

08001f84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d026      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x7a>
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d021      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d107      	bne.n	8001fd8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0204 	bic.w	r2, r2, #4
 8001fd6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fdc:	f003 021f 	and.w	r2, r3, #31
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d071      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001ffc:	e06c      	b.n	80020d8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	2202      	movs	r2, #2
 8002008:	409a      	lsls	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4013      	ands	r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d02e      	beq.n	8002070 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d029      	beq.n	8002070 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0320 	and.w	r3, r3, #32
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10b      	bne.n	8002042 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 020a 	bic.w	r2, r2, #10
 8002038:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	f003 021f 	and.w	r2, r3, #31
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	2102      	movs	r1, #2
 8002050:	fa01 f202 	lsl.w	r2, r1, r2
 8002054:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002062:	2b00      	cmp	r3, #0
 8002064:	d038      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800206e:	e033      	b.n	80020d8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	2208      	movs	r2, #8
 800207a:	409a      	lsls	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d02a      	beq.n	80020da <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d025      	beq.n	80020da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 020e 	bic.w	r2, r2, #14
 800209c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	f003 021f 	and.w	r2, r3, #31
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	2101      	movs	r1, #1
 80020ac:	fa01 f202 	lsl.w	r2, r1, r2
 80020b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d004      	beq.n	80020da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
}
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b16      	ldr	r3, [pc, #88]	@ (800214c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d802      	bhi.n	80020fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80020f8:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	e001      	b.n	8002102 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80020fe:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002100:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	3b08      	subs	r3, #8
 800210e:	4a12      	ldr	r2, [pc, #72]	@ (8002158 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	009a      	lsls	r2, r3, #2
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4413      	add	r3, r2
 8002124:	461a      	mov	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a0b      	ldr	r2, [pc, #44]	@ (800215c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800212e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 031f 	and.w	r3, r3, #31
 8002136:	2201      	movs	r2, #1
 8002138:	409a      	lsls	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800213e:	bf00      	nop
 8002140:	371c      	adds	r7, #28
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40020407 	.word	0x40020407
 8002150:	40020800 	.word	0x40020800
 8002154:	40020820 	.word	0x40020820
 8002158:	cccccccd 	.word	0xcccccccd
 800215c:	40020880 	.word	0x40020880

08002160 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	461a      	mov	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a08      	ldr	r2, [pc, #32]	@ (80021a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002182:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3b01      	subs	r3, #1
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	2201      	movs	r2, #1
 800218e:	409a      	lsls	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	1000823f 	.word	0x1000823f
 80021a4:	40020940 	.word	0x40020940

080021a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021b6:	e15a      	b.n	800246e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	2101      	movs	r1, #1
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	4013      	ands	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 814c 	beq.w	8002468 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d005      	beq.n	80021e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d130      	bne.n	800224a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800221e:	2201      	movs	r2, #1
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	f003 0201 	and.w	r2, r3, #1
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b03      	cmp	r3, #3
 8002254:	d017      	beq.n	8002286 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	2203      	movs	r2, #3
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d123      	bne.n	80022da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	08da      	lsrs	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3208      	adds	r2, #8
 800229a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800229e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	220f      	movs	r2, #15
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4013      	ands	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	08da      	lsrs	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3208      	adds	r2, #8
 80022d4:	6939      	ldr	r1, [r7, #16]
 80022d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	2203      	movs	r2, #3
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0203 	and.w	r2, r3, #3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80a6 	beq.w	8002468 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231c:	4b5b      	ldr	r3, [pc, #364]	@ (800248c <HAL_GPIO_Init+0x2e4>)
 800231e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002320:	4a5a      	ldr	r2, [pc, #360]	@ (800248c <HAL_GPIO_Init+0x2e4>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6613      	str	r3, [r2, #96]	@ 0x60
 8002328:	4b58      	ldr	r3, [pc, #352]	@ (800248c <HAL_GPIO_Init+0x2e4>)
 800232a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002334:	4a56      	ldr	r2, [pc, #344]	@ (8002490 <HAL_GPIO_Init+0x2e8>)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	3302      	adds	r3, #2
 800233c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	220f      	movs	r2, #15
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4013      	ands	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800235e:	d01f      	beq.n	80023a0 <HAL_GPIO_Init+0x1f8>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a4c      	ldr	r2, [pc, #304]	@ (8002494 <HAL_GPIO_Init+0x2ec>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d019      	beq.n	800239c <HAL_GPIO_Init+0x1f4>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a4b      	ldr	r2, [pc, #300]	@ (8002498 <HAL_GPIO_Init+0x2f0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d013      	beq.n	8002398 <HAL_GPIO_Init+0x1f0>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a4a      	ldr	r2, [pc, #296]	@ (800249c <HAL_GPIO_Init+0x2f4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00d      	beq.n	8002394 <HAL_GPIO_Init+0x1ec>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a49      	ldr	r2, [pc, #292]	@ (80024a0 <HAL_GPIO_Init+0x2f8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d007      	beq.n	8002390 <HAL_GPIO_Init+0x1e8>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a48      	ldr	r2, [pc, #288]	@ (80024a4 <HAL_GPIO_Init+0x2fc>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d101      	bne.n	800238c <HAL_GPIO_Init+0x1e4>
 8002388:	2305      	movs	r3, #5
 800238a:	e00a      	b.n	80023a2 <HAL_GPIO_Init+0x1fa>
 800238c:	2306      	movs	r3, #6
 800238e:	e008      	b.n	80023a2 <HAL_GPIO_Init+0x1fa>
 8002390:	2304      	movs	r3, #4
 8002392:	e006      	b.n	80023a2 <HAL_GPIO_Init+0x1fa>
 8002394:	2303      	movs	r3, #3
 8002396:	e004      	b.n	80023a2 <HAL_GPIO_Init+0x1fa>
 8002398:	2302      	movs	r3, #2
 800239a:	e002      	b.n	80023a2 <HAL_GPIO_Init+0x1fa>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_GPIO_Init+0x1fa>
 80023a0:	2300      	movs	r3, #0
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	f002 0203 	and.w	r2, r2, #3
 80023a8:	0092      	lsls	r2, r2, #2
 80023aa:	4093      	lsls	r3, r2
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b2:	4937      	ldr	r1, [pc, #220]	@ (8002490 <HAL_GPIO_Init+0x2e8>)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	3302      	adds	r3, #2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023c0:	4b39      	ldr	r3, [pc, #228]	@ (80024a8 <HAL_GPIO_Init+0x300>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023e4:	4a30      	ldr	r2, [pc, #192]	@ (80024a8 <HAL_GPIO_Init+0x300>)
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023ea:	4b2f      	ldr	r3, [pc, #188]	@ (80024a8 <HAL_GPIO_Init+0x300>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800240e:	4a26      	ldr	r2, [pc, #152]	@ (80024a8 <HAL_GPIO_Init+0x300>)
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002414:	4b24      	ldr	r3, [pc, #144]	@ (80024a8 <HAL_GPIO_Init+0x300>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	43db      	mvns	r3, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002438:	4a1b      	ldr	r2, [pc, #108]	@ (80024a8 <HAL_GPIO_Init+0x300>)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800243e:	4b1a      	ldr	r3, [pc, #104]	@ (80024a8 <HAL_GPIO_Init+0x300>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	43db      	mvns	r3, r3
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4013      	ands	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4313      	orrs	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002462:	4a11      	ldr	r2, [pc, #68]	@ (80024a8 <HAL_GPIO_Init+0x300>)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3301      	adds	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	f47f ae9d 	bne.w	80021b8 <HAL_GPIO_Init+0x10>
  }
}
 800247e:	bf00      	nop
 8002480:	bf00      	nop
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	40021000 	.word	0x40021000
 8002490:	40010000 	.word	0x40010000
 8002494:	48000400 	.word	0x48000400
 8002498:	48000800 	.word	0x48000800
 800249c:	48000c00 	.word	0x48000c00
 80024a0:	48001000 	.word	0x48001000
 80024a4:	48001400 	.word	0x48001400
 80024a8:	40010400 	.word	0x40010400

080024ac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0d0      	b.n	8002660 <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fff2 	bl	80014bc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80024ee:	f023 030f 	bic.w	r3, r3, #15
 80024f2:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2202      	movs	r2, #2
 80024fa:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d061      	beq.n	80025c8 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d102      	bne.n	8002512 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800250c:	2310      	movs	r3, #16
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	e001      	b.n	8002516 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002512:	2320      	movs	r3, #32
 8002514:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b20      	cmp	r3, #32
 800251c:	d802      	bhi.n	8002524 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002524:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002528:	f001 f8d0 	bl	80036cc <HAL_RCCEx_GetPeriphCLKFreq>
 800252c:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002536:	d125      	bne.n	8002584 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d010      	beq.n	8002562 <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	fbb2 f2f3 	udiv	r2, r2, r3
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	461a      	mov	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	fbb2 f3f3 	udiv	r3, r2, r3
 800255c:	3305      	adds	r3, #5
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	e01f      	b.n	80025a2 <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	fbb2 f2f3 	udiv	r2, r2, r3
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	461a      	mov	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	fbb2 f3f3 	udiv	r3, r2, r3
 800257e:	3305      	adds	r3, #5
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	e00e      	b.n	80025a2 <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	fbb2 f2f3 	udiv	r2, r2, r3
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	461a      	mov	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	fbb2 f3f3 	udiv	r3, r2, r3
 800259e:	3305      	adds	r3, #5
 80025a0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4a30      	ldr	r2, [pc, #192]	@ (8002668 <HAL_I2S_Init+0x1bc>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	08db      	lsrs	r3, r3, #3
 80025ac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	085b      	lsrs	r3, r3, #1
 80025be:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	e003      	b.n	80025d0 <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80025c8:	2302      	movs	r3, #2
 80025ca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d902      	bls.n	80025dc <HAL_I2S_Init+0x130>
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	2bff      	cmp	r3, #255	@ 0xff
 80025da:	d907      	bls.n	80025ec <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e0:	f043 0210 	orr.w	r2, r3, #16
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e039      	b.n	8002660 <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	ea42 0103 	orr.w	r1, r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800260a:	f023 030f 	bic.w	r3, r3, #15
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6851      	ldr	r1, [r2, #4]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6892      	ldr	r2, [r2, #8]
 8002616:	4311      	orrs	r1, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68d2      	ldr	r2, [r2, #12]
 800261c:	4311      	orrs	r1, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6992      	ldr	r2, [r2, #24]
 8002622:	430a      	orrs	r2, r1
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800262e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b30      	cmp	r3, #48	@ 0x30
 8002636:	d003      	beq.n	8002640 <HAL_I2S_Init+0x194>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2bb0      	cmp	r3, #176	@ 0xb0
 800263e:	d107      	bne.n	8002650 <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800264e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3720      	adds	r7, #32
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	cccccccd 	.word	0xcccccccd

0800266c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d141      	bne.n	80026fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800267a:	4b4b      	ldr	r3, [pc, #300]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002686:	d131      	bne.n	80026ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002688:	4b47      	ldr	r3, [pc, #284]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800268a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800268e:	4a46      	ldr	r2, [pc, #280]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002690:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002694:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002698:	4b43      	ldr	r3, [pc, #268]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026a0:	4a41      	ldr	r2, [pc, #260]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026a8:	4b40      	ldr	r3, [pc, #256]	@ (80027ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2232      	movs	r2, #50	@ 0x32
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	4a3f      	ldr	r2, [pc, #252]	@ (80027b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026b4:	fba2 2303 	umull	r2, r3, r2, r3
 80026b8:	0c9b      	lsrs	r3, r3, #18
 80026ba:	3301      	adds	r3, #1
 80026bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026be:	e002      	b.n	80026c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026c6:	4b38      	ldr	r3, [pc, #224]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026d2:	d102      	bne.n	80026da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f2      	bne.n	80026c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026da:	4b33      	ldr	r3, [pc, #204]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026e6:	d158      	bne.n	800279a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e057      	b.n	800279c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026ec:	4b2e      	ldr	r3, [pc, #184]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026f2:	4a2d      	ldr	r2, [pc, #180]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80026fc:	e04d      	b.n	800279a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002704:	d141      	bne.n	800278a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002706:	4b28      	ldr	r3, [pc, #160]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800270e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002712:	d131      	bne.n	8002778 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002714:	4b24      	ldr	r3, [pc, #144]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800271a:	4a23      	ldr	r2, [pc, #140]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800271c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002720:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002724:	4b20      	ldr	r3, [pc, #128]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800272c:	4a1e      	ldr	r2, [pc, #120]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800272e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002732:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002734:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2232      	movs	r2, #50	@ 0x32
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	4a1c      	ldr	r2, [pc, #112]	@ (80027b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002740:	fba2 2303 	umull	r2, r3, r2, r3
 8002744:	0c9b      	lsrs	r3, r3, #18
 8002746:	3301      	adds	r3, #1
 8002748:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800274a:	e002      	b.n	8002752 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3b01      	subs	r3, #1
 8002750:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002752:	4b15      	ldr	r3, [pc, #84]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800275a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800275e:	d102      	bne.n	8002766 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f2      	bne.n	800274c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002766:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800276e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002772:	d112      	bne.n	800279a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e011      	b.n	800279c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002778:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800277e:	4a0a      	ldr	r2, [pc, #40]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002784:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002788:	e007      	b.n	800279a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800278a:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002792:	4a05      	ldr	r2, [pc, #20]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002794:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002798:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40007000 	.word	0x40007000
 80027ac:	20002764 	.word	0x20002764
 80027b0:	431bde83 	.word	0x431bde83

080027b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80027b8:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4a04      	ldr	r2, [pc, #16]	@ (80027d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027c2:	6093      	str	r3, [r2, #8]
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40007000 	.word	0x40007000

080027d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e2fe      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d075      	beq.n	80028de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f2:	4b97      	ldr	r3, [pc, #604]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027fc:	4b94      	ldr	r3, [pc, #592]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b0c      	cmp	r3, #12
 800280a:	d102      	bne.n	8002812 <HAL_RCC_OscConfig+0x3e>
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b03      	cmp	r3, #3
 8002810:	d002      	beq.n	8002818 <HAL_RCC_OscConfig+0x44>
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2b08      	cmp	r3, #8
 8002816:	d10b      	bne.n	8002830 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002818:	4b8d      	ldr	r3, [pc, #564]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d05b      	beq.n	80028dc <HAL_RCC_OscConfig+0x108>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d157      	bne.n	80028dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e2d9      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002838:	d106      	bne.n	8002848 <HAL_RCC_OscConfig+0x74>
 800283a:	4b85      	ldr	r3, [pc, #532]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a84      	ldr	r2, [pc, #528]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e01d      	b.n	8002884 <HAL_RCC_OscConfig+0xb0>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x98>
 8002852:	4b7f      	ldr	r3, [pc, #508]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a7e      	ldr	r2, [pc, #504]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a7b      	ldr	r2, [pc, #492]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e00b      	b.n	8002884 <HAL_RCC_OscConfig+0xb0>
 800286c:	4b78      	ldr	r3, [pc, #480]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a77      	ldr	r2, [pc, #476]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b75      	ldr	r3, [pc, #468]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a74      	ldr	r2, [pc, #464]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800287e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7ff f9b6 	bl	8001bfc <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002894:	f7ff f9b2 	bl	8001bfc <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	@ 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e29e      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0xc0>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7ff f9a2 	bl	8001bfc <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7ff f99e 	bl	8001bfc <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	@ 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e28a      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ce:	4b60      	ldr	r3, [pc, #384]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0xe8>
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d075      	beq.n	80029d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ea:	4b59      	ldr	r3, [pc, #356]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028f4:	4b56      	ldr	r3, [pc, #344]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2b0c      	cmp	r3, #12
 8002902:	d102      	bne.n	800290a <HAL_RCC_OscConfig+0x136>
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d002      	beq.n	8002910 <HAL_RCC_OscConfig+0x13c>
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	2b04      	cmp	r3, #4
 800290e:	d11f      	bne.n	8002950 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002910:	4b4f      	ldr	r3, [pc, #316]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_OscConfig+0x154>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e25d      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002928:	4b49      	ldr	r3, [pc, #292]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	061b      	lsls	r3, r3, #24
 8002936:	4946      	ldr	r1, [pc, #280]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800293c:	4b45      	ldr	r3, [pc, #276]	@ (8002a54 <HAL_RCC_OscConfig+0x280>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff f90f 	bl	8001b64 <HAL_InitTick>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d043      	beq.n	80029d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e249      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d023      	beq.n	80029a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002958:	4b3d      	ldr	r3, [pc, #244]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800295e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7ff f94a 	bl	8001bfc <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296c:	f7ff f946 	bl	8001bfc <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e232      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800297e:	4b34      	ldr	r3, [pc, #208]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298a:	4b31      	ldr	r3, [pc, #196]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	061b      	lsls	r3, r3, #24
 8002998:	492d      	ldr	r1, [pc, #180]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
 800299e:	e01a      	b.n	80029d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80029a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7ff f926 	bl	8001bfc <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b4:	f7ff f922 	bl	8001bfc <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e20e      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029c6:	4b22      	ldr	r3, [pc, #136]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x1e0>
 80029d2:	e000      	b.n	80029d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d041      	beq.n	8002a66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d01c      	beq.n	8002a24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ea:	4b19      	ldr	r3, [pc, #100]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80029ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029f0:	4a17      	ldr	r2, [pc, #92]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fa:	f7ff f8ff 	bl	8001bfc <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a02:	f7ff f8fb 	bl	8001bfc <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e1e7      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a14:	4b0e      	ldr	r3, [pc, #56]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0ef      	beq.n	8002a02 <HAL_RCC_OscConfig+0x22e>
 8002a22:	e020      	b.n	8002a66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a24:	4b0a      	ldr	r3, [pc, #40]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a2a:	4a09      	ldr	r2, [pc, #36]	@ (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7ff f8e2 	bl	8001bfc <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a3a:	e00d      	b.n	8002a58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7ff f8de 	bl	8001bfc <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d906      	bls.n	8002a58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e1ca      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000
 8002a54:	20002768 	.word	0x20002768
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a58:	4b8c      	ldr	r3, [pc, #560]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1ea      	bne.n	8002a3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 80a6 	beq.w	8002bc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a74:	2300      	movs	r3, #0
 8002a76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a78:	4b84      	ldr	r3, [pc, #528]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_RCC_OscConfig+0x2b4>
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <HAL_RCC_OscConfig+0x2b6>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00d      	beq.n	8002aaa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a92:	4a7e      	ldr	r2, [pc, #504]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a98:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aaa:	4b79      	ldr	r3, [pc, #484]	@ (8002c90 <HAL_RCC_OscConfig+0x4bc>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d118      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ab6:	4b76      	ldr	r3, [pc, #472]	@ (8002c90 <HAL_RCC_OscConfig+0x4bc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a75      	ldr	r2, [pc, #468]	@ (8002c90 <HAL_RCC_OscConfig+0x4bc>)
 8002abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac2:	f7ff f89b 	bl	8001bfc <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aca:	f7ff f897 	bl	8001bfc <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e183      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002adc:	4b6c      	ldr	r3, [pc, #432]	@ (8002c90 <HAL_RCC_OscConfig+0x4bc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d108      	bne.n	8002b02 <HAL_RCC_OscConfig+0x32e>
 8002af0:	4b66      	ldr	r3, [pc, #408]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af6:	4a65      	ldr	r2, [pc, #404]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b00:	e024      	b.n	8002b4c <HAL_RCC_OscConfig+0x378>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b05      	cmp	r3, #5
 8002b08:	d110      	bne.n	8002b2c <HAL_RCC_OscConfig+0x358>
 8002b0a:	4b60      	ldr	r3, [pc, #384]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b10:	4a5e      	ldr	r2, [pc, #376]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b12:	f043 0304 	orr.w	r3, r3, #4
 8002b16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b1a:	4b5c      	ldr	r3, [pc, #368]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b20:	4a5a      	ldr	r2, [pc, #360]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b2a:	e00f      	b.n	8002b4c <HAL_RCC_OscConfig+0x378>
 8002b2c:	4b57      	ldr	r3, [pc, #348]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b32:	4a56      	ldr	r2, [pc, #344]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b3c:	4b53      	ldr	r3, [pc, #332]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b42:	4a52      	ldr	r2, [pc, #328]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d016      	beq.n	8002b82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b54:	f7ff f852 	bl	8001bfc <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b5a:	e00a      	b.n	8002b72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5c:	f7ff f84e 	bl	8001bfc <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e138      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b72:	4b46      	ldr	r3, [pc, #280]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0ed      	beq.n	8002b5c <HAL_RCC_OscConfig+0x388>
 8002b80:	e015      	b.n	8002bae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b82:	f7ff f83b 	bl	8001bfc <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7ff f837 	bl	8001bfc <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e121      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1ed      	bne.n	8002b8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bae:	7ffb      	ldrb	r3, [r7, #31]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d105      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb4:	4b35      	ldr	r3, [pc, #212]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb8:	4a34      	ldr	r2, [pc, #208]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bbe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d03c      	beq.n	8002c46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01c      	beq.n	8002c0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bda:	4a2c      	ldr	r2, [pc, #176]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7ff f80a 	bl	8001bfc <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bec:	f7ff f806 	bl	8001bfc <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e0f2      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bfe:	4b23      	ldr	r3, [pc, #140]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ef      	beq.n	8002bec <HAL_RCC_OscConfig+0x418>
 8002c0c:	e01b      	b.n	8002c46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c14:	4a1d      	ldr	r2, [pc, #116]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1e:	f7fe ffed 	bl	8001bfc <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c26:	f7fe ffe9 	bl	8001bfc <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e0d5      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c38:	4b14      	ldr	r3, [pc, #80]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1ef      	bne.n	8002c26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 80c9 	beq.w	8002de2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c50:	4b0e      	ldr	r3, [pc, #56]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 030c 	and.w	r3, r3, #12
 8002c58:	2b0c      	cmp	r3, #12
 8002c5a:	f000 8083 	beq.w	8002d64 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d15e      	bne.n	8002d24 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c66:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a08      	ldr	r2, [pc, #32]	@ (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002c6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c72:	f7fe ffc3 	bl	8001bfc <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c78:	e00c      	b.n	8002c94 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7a:	f7fe ffbf 	bl	8001bfc <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d905      	bls.n	8002c94 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e0ab      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c94:	4b55      	ldr	r3, [pc, #340]	@ (8002dec <HAL_RCC_OscConfig+0x618>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1ec      	bne.n	8002c7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca0:	4b52      	ldr	r3, [pc, #328]	@ (8002dec <HAL_RCC_OscConfig+0x618>)
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	4b52      	ldr	r3, [pc, #328]	@ (8002df0 <HAL_RCC_OscConfig+0x61c>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6a11      	ldr	r1, [r2, #32]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cb0:	3a01      	subs	r2, #1
 8002cb2:	0112      	lsls	r2, r2, #4
 8002cb4:	4311      	orrs	r1, r2
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002cba:	0212      	lsls	r2, r2, #8
 8002cbc:	4311      	orrs	r1, r2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002cc2:	0852      	lsrs	r2, r2, #1
 8002cc4:	3a01      	subs	r2, #1
 8002cc6:	0552      	lsls	r2, r2, #21
 8002cc8:	4311      	orrs	r1, r2
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002cce:	0852      	lsrs	r2, r2, #1
 8002cd0:	3a01      	subs	r2, #1
 8002cd2:	0652      	lsls	r2, r2, #25
 8002cd4:	4311      	orrs	r1, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002cda:	06d2      	lsls	r2, r2, #27
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	4943      	ldr	r1, [pc, #268]	@ (8002dec <HAL_RCC_OscConfig+0x618>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce4:	4b41      	ldr	r3, [pc, #260]	@ (8002dec <HAL_RCC_OscConfig+0x618>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a40      	ldr	r2, [pc, #256]	@ (8002dec <HAL_RCC_OscConfig+0x618>)
 8002cea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cf0:	4b3e      	ldr	r3, [pc, #248]	@ (8002dec <HAL_RCC_OscConfig+0x618>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a3d      	ldr	r2, [pc, #244]	@ (8002dec <HAL_RCC_OscConfig+0x618>)
 8002cf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cfa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe ff7e 	bl	8001bfc <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d04:	f7fe ff7a 	bl	8001bfc <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e066      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d16:	4b35      	ldr	r3, [pc, #212]	@ (8002dec <HAL_RCC_OscConfig+0x618>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x530>
 8002d22:	e05e      	b.n	8002de2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d24:	4b31      	ldr	r3, [pc, #196]	@ (8002dec <HAL_RCC_OscConfig+0x618>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a30      	ldr	r2, [pc, #192]	@ (8002dec <HAL_RCC_OscConfig+0x618>)
 8002d2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7fe ff64 	bl	8001bfc <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d38:	f7fe ff60 	bl	8001bfc <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e04c      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d4a:	4b28      	ldr	r3, [pc, #160]	@ (8002dec <HAL_RCC_OscConfig+0x618>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d56:	4b25      	ldr	r3, [pc, #148]	@ (8002dec <HAL_RCC_OscConfig+0x618>)
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	4924      	ldr	r1, [pc, #144]	@ (8002dec <HAL_RCC_OscConfig+0x618>)
 8002d5c:	4b25      	ldr	r3, [pc, #148]	@ (8002df4 <HAL_RCC_OscConfig+0x620>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	60cb      	str	r3, [r1, #12]
 8002d62:	e03e      	b.n	8002de2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e039      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d70:	4b1e      	ldr	r3, [pc, #120]	@ (8002dec <HAL_RCC_OscConfig+0x618>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f003 0203 	and.w	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d12c      	bne.n	8002dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d123      	bne.n	8002dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d11b      	bne.n	8002dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d113      	bne.n	8002dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc0:	085b      	lsrs	r3, r3, #1
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d109      	bne.n	8002dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd4:	085b      	lsrs	r3, r3, #1
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d001      	beq.n	8002de2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000
 8002df0:	019f800c 	.word	0x019f800c
 8002df4:	feeefffc 	.word	0xfeeefffc

08002df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e11e      	b.n	800304e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e10:	4b91      	ldr	r3, [pc, #580]	@ (8003058 <HAL_RCC_ClockConfig+0x260>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d910      	bls.n	8002e40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b8e      	ldr	r3, [pc, #568]	@ (8003058 <HAL_RCC_ClockConfig+0x260>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 020f 	bic.w	r2, r3, #15
 8002e26:	498c      	ldr	r1, [pc, #560]	@ (8003058 <HAL_RCC_ClockConfig+0x260>)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b8a      	ldr	r3, [pc, #552]	@ (8003058 <HAL_RCC_ClockConfig+0x260>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e106      	b.n	800304e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d073      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d129      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e54:	4b81      	ldr	r3, [pc, #516]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0f4      	b.n	800304e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e64:	f000 f99e 	bl	80031a4 <RCC_GetSysClockFreqFromPLLSource>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4a7c      	ldr	r2, [pc, #496]	@ (8003060 <HAL_RCC_ClockConfig+0x268>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d93f      	bls.n	8002ef2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e72:	4b7a      	ldr	r3, [pc, #488]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d033      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d12f      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e92:	4b72      	ldr	r3, [pc, #456]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e9a:	4a70      	ldr	r2, [pc, #448]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ea0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ea2:	2380      	movs	r3, #128	@ 0x80
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	e024      	b.n	8002ef2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d107      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eb0:	4b6a      	ldr	r3, [pc, #424]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d109      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0c6      	b.n	800304e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ec0:	4b66      	ldr	r3, [pc, #408]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0be      	b.n	800304e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ed0:	f000 f8ce 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8002ed4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4a61      	ldr	r2, [pc, #388]	@ (8003060 <HAL_RCC_ClockConfig+0x268>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d909      	bls.n	8002ef2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ede:	4b5f      	ldr	r3, [pc, #380]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ee6:	4a5d      	ldr	r2, [pc, #372]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002eee:	2380      	movs	r3, #128	@ 0x80
 8002ef0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ef2:	4b5a      	ldr	r3, [pc, #360]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f023 0203 	bic.w	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4957      	ldr	r1, [pc, #348]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f04:	f7fe fe7a 	bl	8001bfc <HAL_GetTick>
 8002f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0c:	f7fe fe76 	bl	8001bfc <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e095      	b.n	800304e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	4b4e      	ldr	r3, [pc, #312]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 020c 	and.w	r2, r3, #12
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d1eb      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d023      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f4c:	4b43      	ldr	r3, [pc, #268]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4a42      	ldr	r2, [pc, #264]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002f52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f56:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f64:	4b3d      	ldr	r3, [pc, #244]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002f6c:	4a3b      	ldr	r2, [pc, #236]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002f6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f74:	4b39      	ldr	r3, [pc, #228]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4936      	ldr	r1, [pc, #216]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	608b      	str	r3, [r1, #8]
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2b80      	cmp	r3, #128	@ 0x80
 8002f8c:	d105      	bne.n	8002f9a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f8e:	4b33      	ldr	r3, [pc, #204]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	4a32      	ldr	r2, [pc, #200]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002f94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f98:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003058 <HAL_RCC_ClockConfig+0x260>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d21d      	bcs.n	8002fe4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8003058 <HAL_RCC_ClockConfig+0x260>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f023 020f 	bic.w	r2, r3, #15
 8002fb0:	4929      	ldr	r1, [pc, #164]	@ (8003058 <HAL_RCC_ClockConfig+0x260>)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fb8:	f7fe fe20 	bl	8001bfc <HAL_GetTick>
 8002fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc0:	f7fe fe1c 	bl	8001bfc <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e03b      	b.n	800304e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b20      	ldr	r3, [pc, #128]	@ (8003058 <HAL_RCC_ClockConfig+0x260>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d1ed      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4917      	ldr	r1, [pc, #92]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800300e:	4b13      	ldr	r3, [pc, #76]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	490f      	ldr	r1, [pc, #60]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 800301e:	4313      	orrs	r3, r2
 8003020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003022:	f000 f825 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8003026:	4602      	mov	r2, r0
 8003028:	4b0c      	ldr	r3, [pc, #48]	@ (800305c <HAL_RCC_ClockConfig+0x264>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	490c      	ldr	r1, [pc, #48]	@ (8003064 <HAL_RCC_ClockConfig+0x26c>)
 8003034:	5ccb      	ldrb	r3, [r1, r3]
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	fa22 f303 	lsr.w	r3, r2, r3
 800303e:	4a0a      	ldr	r2, [pc, #40]	@ (8003068 <HAL_RCC_ClockConfig+0x270>)
 8003040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003042:	4b0a      	ldr	r3, [pc, #40]	@ (800306c <HAL_RCC_ClockConfig+0x274>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fd8c 	bl	8001b64 <HAL_InitTick>
 800304c:	4603      	mov	r3, r0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40022000 	.word	0x40022000
 800305c:	40021000 	.word	0x40021000
 8003060:	04c4b400 	.word	0x04c4b400
 8003064:	08006fdc 	.word	0x08006fdc
 8003068:	20002764 	.word	0x20002764
 800306c:	20002768 	.word	0x20002768

08003070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003076:	4b2c      	ldr	r3, [pc, #176]	@ (8003128 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b04      	cmp	r3, #4
 8003080:	d102      	bne.n	8003088 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003082:	4b2a      	ldr	r3, [pc, #168]	@ (800312c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	e047      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003088:	4b27      	ldr	r3, [pc, #156]	@ (8003128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 030c 	and.w	r3, r3, #12
 8003090:	2b08      	cmp	r3, #8
 8003092:	d102      	bne.n	800309a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003094:	4b26      	ldr	r3, [pc, #152]	@ (8003130 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	e03e      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800309a:	4b23      	ldr	r3, [pc, #140]	@ (8003128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d136      	bne.n	8003114 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030a6:	4b20      	ldr	r3, [pc, #128]	@ (8003128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	3301      	adds	r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d10c      	bne.n	80030de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003130 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030cc:	4a16      	ldr	r2, [pc, #88]	@ (8003128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ce:	68d2      	ldr	r2, [r2, #12]
 80030d0:	0a12      	lsrs	r2, r2, #8
 80030d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	617b      	str	r3, [r7, #20]
      break;
 80030dc:	e00c      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030de:	4a13      	ldr	r2, [pc, #76]	@ (800312c <HAL_RCC_GetSysClockFreq+0xbc>)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e6:	4a10      	ldr	r2, [pc, #64]	@ (8003128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030e8:	68d2      	ldr	r2, [r2, #12]
 80030ea:	0a12      	lsrs	r2, r2, #8
 80030ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030f0:	fb02 f303 	mul.w	r3, r2, r3
 80030f4:	617b      	str	r3, [r7, #20]
      break;
 80030f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	0e5b      	lsrs	r3, r3, #25
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	3301      	adds	r3, #1
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	e001      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003118:	693b      	ldr	r3, [r7, #16]
}
 800311a:	4618      	mov	r0, r3
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	00f42400 	.word	0x00f42400
 8003130:	007a1200 	.word	0x007a1200

08003134 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003138:	4b03      	ldr	r3, [pc, #12]	@ (8003148 <HAL_RCC_GetHCLKFreq+0x14>)
 800313a:	681b      	ldr	r3, [r3, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20002764 	.word	0x20002764

0800314c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003150:	f7ff fff0 	bl	8003134 <HAL_RCC_GetHCLKFreq>
 8003154:	4602      	mov	r2, r0
 8003156:	4b06      	ldr	r3, [pc, #24]	@ (8003170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	4904      	ldr	r1, [pc, #16]	@ (8003174 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003162:	5ccb      	ldrb	r3, [r1, r3]
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	08006fec 	.word	0x08006fec

08003178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800317c:	f7ff ffda 	bl	8003134 <HAL_RCC_GetHCLKFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b06      	ldr	r3, [pc, #24]	@ (800319c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	0adb      	lsrs	r3, r3, #11
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	4904      	ldr	r1, [pc, #16]	@ (80031a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40021000 	.word	0x40021000
 80031a0:	08006fec 	.word	0x08006fec

080031a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	3301      	adds	r3, #1
 80031c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d10c      	bne.n	80031e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031c8:	4a17      	ldr	r2, [pc, #92]	@ (8003228 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d0:	4a14      	ldr	r2, [pc, #80]	@ (8003224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031d2:	68d2      	ldr	r2, [r2, #12]
 80031d4:	0a12      	lsrs	r2, r2, #8
 80031d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	617b      	str	r3, [r7, #20]
    break;
 80031e0:	e00c      	b.n	80031fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031e2:	4a12      	ldr	r2, [pc, #72]	@ (800322c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ea:	4a0e      	ldr	r2, [pc, #56]	@ (8003224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031ec:	68d2      	ldr	r2, [r2, #12]
 80031ee:	0a12      	lsrs	r2, r2, #8
 80031f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031f4:	fb02 f303 	mul.w	r3, r2, r3
 80031f8:	617b      	str	r3, [r7, #20]
    break;
 80031fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031fc:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	0e5b      	lsrs	r3, r3, #25
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	3301      	adds	r3, #1
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003216:	687b      	ldr	r3, [r7, #4]
}
 8003218:	4618      	mov	r0, r3
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	40021000 	.word	0x40021000
 8003228:	007a1200 	.word	0x007a1200
 800322c:	00f42400 	.word	0x00f42400

08003230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003238:	2300      	movs	r3, #0
 800323a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800323c:	2300      	movs	r3, #0
 800323e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 8098 	beq.w	800337e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800324e:	2300      	movs	r3, #0
 8003250:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003252:	4b43      	ldr	r3, [pc, #268]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10d      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325e:	4b40      	ldr	r3, [pc, #256]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003262:	4a3f      	ldr	r2, [pc, #252]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003268:	6593      	str	r3, [r2, #88]	@ 0x58
 800326a:	4b3d      	ldr	r3, [pc, #244]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003276:	2301      	movs	r3, #1
 8003278:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800327a:	4b3a      	ldr	r3, [pc, #232]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a39      	ldr	r2, [pc, #228]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003284:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003286:	f7fe fcb9 	bl	8001bfc <HAL_GetTick>
 800328a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800328c:	e009      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328e:	f7fe fcb5 	bl	8001bfc <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d902      	bls.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	74fb      	strb	r3, [r7, #19]
        break;
 80032a0:	e005      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032a2:	4b30      	ldr	r3, [pc, #192]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0ef      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80032ae:	7cfb      	ldrb	r3, [r7, #19]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d159      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d01e      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d019      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032d0:	4b23      	ldr	r3, [pc, #140]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032dc:	4b20      	ldr	r3, [pc, #128]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032fc:	4a18      	ldr	r2, [pc, #96]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7fe fc75 	bl	8001bfc <HAL_GetTick>
 8003312:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003314:	e00b      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7fe fc71 	bl	8001bfc <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d902      	bls.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	74fb      	strb	r3, [r7, #19]
            break;
 800332c:	e006      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800332e:	4b0c      	ldr	r3, [pc, #48]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ec      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800333c:	7cfb      	ldrb	r3, [r7, #19]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10b      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003342:	4b07      	ldr	r3, [pc, #28]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003348:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003350:	4903      	ldr	r1, [pc, #12]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003358:	e008      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800335a:	7cfb      	ldrb	r3, [r7, #19]
 800335c:	74bb      	strb	r3, [r7, #18]
 800335e:	e005      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003360:	40021000 	.word	0x40021000
 8003364:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800336c:	7c7b      	ldrb	r3, [r7, #17]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d105      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003372:	4ba7      	ldr	r3, [pc, #668]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003376:	4aa6      	ldr	r2, [pc, #664]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003378:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800337c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800338a:	4ba1      	ldr	r3, [pc, #644]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003390:	f023 0203 	bic.w	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	499d      	ldr	r1, [pc, #628]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033ac:	4b98      	ldr	r3, [pc, #608]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b2:	f023 020c 	bic.w	r2, r3, #12
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	4995      	ldr	r1, [pc, #596]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033ce:	4b90      	ldr	r3, [pc, #576]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	498c      	ldr	r1, [pc, #560]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033f0:	4b87      	ldr	r3, [pc, #540]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	4984      	ldr	r1, [pc, #528]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003412:	4b7f      	ldr	r3, [pc, #508]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003418:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	497b      	ldr	r1, [pc, #492]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003434:	4b76      	ldr	r3, [pc, #472]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	4973      	ldr	r1, [pc, #460]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003456:	4b6e      	ldr	r3, [pc, #440]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	496a      	ldr	r1, [pc, #424]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003478:	4b65      	ldr	r3, [pc, #404]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	4962      	ldr	r1, [pc, #392]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800349a:	4b5d      	ldr	r3, [pc, #372]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a8:	4959      	ldr	r1, [pc, #356]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034bc:	4b54      	ldr	r3, [pc, #336]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034c2:	f023 0203 	bic.w	r2, r3, #3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ca:	4951      	ldr	r1, [pc, #324]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034de:	4b4c      	ldr	r3, [pc, #304]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ec:	4948      	ldr	r1, [pc, #288]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d015      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003500:	4b43      	ldr	r3, [pc, #268]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003506:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350e:	4940      	ldr	r1, [pc, #256]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800351e:	d105      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003520:	4b3b      	ldr	r3, [pc, #236]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	4a3a      	ldr	r2, [pc, #232]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003526:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800352a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003534:	2b00      	cmp	r3, #0
 8003536:	d015      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003538:	4b35      	ldr	r3, [pc, #212]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003546:	4932      	ldr	r1, [pc, #200]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003552:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003556:	d105      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003558:	4b2d      	ldr	r3, [pc, #180]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4a2c      	ldr	r2, [pc, #176]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800355e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003562:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d015      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003570:	4b27      	ldr	r3, [pc, #156]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003576:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357e:	4924      	ldr	r1, [pc, #144]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800358e:	d105      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003590:	4b1f      	ldr	r3, [pc, #124]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4a1e      	ldr	r2, [pc, #120]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800359a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d015      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035a8:	4b19      	ldr	r3, [pc, #100]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b6:	4916      	ldr	r1, [pc, #88]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035c6:	d105      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c8:	4b11      	ldr	r3, [pc, #68]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4a10      	ldr	r2, [pc, #64]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d019      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	4908      	ldr	r1, [pc, #32]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035fe:	d109      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003600:	4b03      	ldr	r3, [pc, #12]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4a02      	ldr	r2, [pc, #8]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003606:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800360a:	60d3      	str	r3, [r2, #12]
 800360c:	e002      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d015      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003620:	4b29      	ldr	r3, [pc, #164]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003626:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	4926      	ldr	r1, [pc, #152]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800363e:	d105      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003640:	4b21      	ldr	r3, [pc, #132]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4a20      	ldr	r2, [pc, #128]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800364a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d015      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003658:	4b1b      	ldr	r3, [pc, #108]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003666:	4918      	ldr	r1, [pc, #96]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003676:	d105      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003678:	4b13      	ldr	r3, [pc, #76]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4a12      	ldr	r2, [pc, #72]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800367e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003682:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d015      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003690:	4b0d      	ldr	r3, [pc, #52]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003692:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003696:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369e:	490a      	ldr	r1, [pc, #40]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036ae:	d105      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036b0:	4b05      	ldr	r3, [pc, #20]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4a04      	ldr	r2, [pc, #16]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80036bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40021000 	.word	0x40021000

080036cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80036de:	d136      	bne.n	800374e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80036e0:	4bb1      	ldr	r3, [pc, #708]	@ (80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ea:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80036ec:	4bae      	ldr	r3, [pc, #696]	@ (80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d108      	bne.n	800370c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003700:	d104      	bne.n	800370c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8003702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	f000 bd12 	b.w	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800370c:	4ba6      	ldr	r3, [pc, #664]	@ (80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800370e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b02      	cmp	r3, #2
 8003718:	d108      	bne.n	800372c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003720:	d104      	bne.n	800372c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 8003722:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	f000 bd02 	b.w	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800372c:	4b9e      	ldr	r3, [pc, #632]	@ (80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003734:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003738:	f040 84fa 	bne.w	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003742:	f040 84f5 	bne.w	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = HSE_VALUE / 32U;
 8003746:	4b99      	ldr	r3, [pc, #612]	@ (80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003748:	61fb      	str	r3, [r7, #28]
 800374a:	f000 bcf1 	b.w	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 800374e:	4b96      	ldr	r3, [pc, #600]	@ (80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d10c      	bne.n	8003774 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800375a:	4b93      	ldr	r3, [pc, #588]	@ (80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003766:	d102      	bne.n	800376e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 8003768:	4b91      	ldr	r3, [pc, #580]	@ (80039b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	e017      	b.n	800379e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	e014      	b.n	800379e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 8003774:	4b8c      	ldr	r3, [pc, #560]	@ (80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	2b03      	cmp	r3, #3
 800377e:	d10c      	bne.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003780:	4b89      	ldr	r3, [pc, #548]	@ (80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003788:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800378c:	d102      	bne.n	8003794 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 800378e:	4b89      	ldr	r3, [pc, #548]	@ (80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	e004      	b.n	800379e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	61bb      	str	r3, [r7, #24]
 8003798:	e001      	b.n	800379e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800379e:	4b82      	ldr	r3, [pc, #520]	@ (80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	091b      	lsrs	r3, r3, #4
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	3301      	adds	r3, #1
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b0:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037b8:	f000 8466 	beq.w	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037c2:	f200 848e 	bhi.w	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037cc:	f000 8263 	beq.w	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037d6:	f200 8484 	bhi.w	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e0:	f000 8417 	beq.w	8004012 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ea:	f200 847a 	bhi.w	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037f4:	f000 83d0 	beq.w	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037fe:	f200 8470 	bhi.w	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003808:	f000 8398 	beq.w	8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003812:	f200 8466 	bhi.w	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800381c:	f000 8360 	beq.w	8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003826:	f200 845c 	bhi.w	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003830:	f000 8318 	beq.w	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800383a:	f200 8452 	bhi.w	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003844:	f000 82ca 	beq.w	8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800384e:	f200 8448 	bhi.w	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003858:	f000 827c 	beq.w	8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003862:	f200 843e 	bhi.w	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800386c:	f000 8236 	beq.w	8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003876:	f200 8434 	bhi.w	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003880:	f000 81e4 	beq.w	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800388a:	f200 842a 	bhi.w	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b80      	cmp	r3, #128	@ 0x80
 8003892:	f000 81b1 	beq.w	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b80      	cmp	r3, #128	@ 0x80
 800389a:	f200 8422 	bhi.w	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d84b      	bhi.n	800393c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 841b 	beq.w	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	2b1f      	cmp	r3, #31
 80038b2:	f200 8416 	bhi.w	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80038b6:	a201      	add	r2, pc, #4	@ (adr r2, 80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	08003947 	.word	0x08003947
 80038c0:	080039b9 	.word	0x080039b9
 80038c4:	080040e3 	.word	0x080040e3
 80038c8:	08003a1b 	.word	0x08003a1b
 80038cc:	080040e3 	.word	0x080040e3
 80038d0:	080040e3 	.word	0x080040e3
 80038d4:	080040e3 	.word	0x080040e3
 80038d8:	08003a7d 	.word	0x08003a7d
 80038dc:	080040e3 	.word	0x080040e3
 80038e0:	080040e3 	.word	0x080040e3
 80038e4:	080040e3 	.word	0x080040e3
 80038e8:	080040e3 	.word	0x080040e3
 80038ec:	080040e3 	.word	0x080040e3
 80038f0:	080040e3 	.word	0x080040e3
 80038f4:	080040e3 	.word	0x080040e3
 80038f8:	08003adf 	.word	0x08003adf
 80038fc:	080040e3 	.word	0x080040e3
 8003900:	080040e3 	.word	0x080040e3
 8003904:	080040e3 	.word	0x080040e3
 8003908:	080040e3 	.word	0x080040e3
 800390c:	080040e3 	.word	0x080040e3
 8003910:	080040e3 	.word	0x080040e3
 8003914:	080040e3 	.word	0x080040e3
 8003918:	080040e3 	.word	0x080040e3
 800391c:	080040e3 	.word	0x080040e3
 8003920:	080040e3 	.word	0x080040e3
 8003924:	080040e3 	.word	0x080040e3
 8003928:	080040e3 	.word	0x080040e3
 800392c:	080040e3 	.word	0x080040e3
 8003930:	080040e3 	.word	0x080040e3
 8003934:	080040e3 	.word	0x080040e3
 8003938:	08003b47 	.word	0x08003b47
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b40      	cmp	r3, #64	@ 0x40
 8003940:	f000 8135 	beq.w	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
      break;

#endif /* QUADSPI */

    default:
      break;
 8003944:	e3cd      	b.n	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003946:	4b18      	ldr	r3, [pc, #96]	@ (80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d103      	bne.n	8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        frequency = HAL_RCC_GetPCLK2Freq();
 8003958:	f7ff fc0e 	bl	8003178 <HAL_RCC_GetPCLK2Freq>
 800395c:	61f8      	str	r0, [r7, #28]
      break;
 800395e:	e3c2      	b.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d103      	bne.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
        frequency = HAL_RCC_GetSysClockFreq();
 8003966:	f7ff fb83 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 800396a:	61f8      	str	r0, [r7, #28]
      break;
 800396c:	e3bb      	b.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 800396e:	4b0e      	ldr	r3, [pc, #56]	@ (80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800397a:	d105      	bne.n	8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d102      	bne.n	8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HSI_VALUE;
 8003982:	4b0b      	ldr	r3, [pc, #44]	@ (80039b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003984:	61fb      	str	r3, [r7, #28]
      break;
 8003986:	e3ae      	b.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003988:	4b07      	ldr	r3, [pc, #28]	@ (80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800398a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b02      	cmp	r3, #2
 8003994:	f040 83a7 	bne.w	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	2b03      	cmp	r3, #3
 800399c:	f040 83a3 	bne.w	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
        frequency = LSE_VALUE;
 80039a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039a4:	61fb      	str	r3, [r7, #28]
      break;
 80039a6:	e39e      	b.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80039a8:	40021000 	.word	0x40021000
 80039ac:	0003d090 	.word	0x0003d090
 80039b0:	00f42400 	.word	0x00f42400
 80039b4:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80039b8:	4ba2      	ldr	r3, [pc, #648]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d103      	bne.n	80039d2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
        frequency = HAL_RCC_GetPCLK1Freq();
 80039ca:	f7ff fbbf 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 80039ce:	61f8      	str	r0, [r7, #28]
      break;
 80039d0:	e38b      	b.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d103      	bne.n	80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
        frequency = HAL_RCC_GetSysClockFreq();
 80039d8:	f7ff fb4a 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 80039dc:	61f8      	str	r0, [r7, #28]
      break;
 80039de:	e384      	b.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80039e0:	4b98      	ldr	r3, [pc, #608]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ec:	d105      	bne.n	80039fa <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d102      	bne.n	80039fa <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
        frequency = HSI_VALUE;
 80039f4:	4b94      	ldr	r3, [pc, #592]	@ (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80039f6:	61fb      	str	r3, [r7, #28]
      break;
 80039f8:	e377      	b.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80039fa:	4b92      	ldr	r3, [pc, #584]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	f040 8370 	bne.w	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	2b0c      	cmp	r3, #12
 8003a0e:	f040 836c 	bne.w	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
        frequency = LSE_VALUE;
 8003a12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a16:	61fb      	str	r3, [r7, #28]
      break;
 8003a18:	e367      	b.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003a1a:	4b8a      	ldr	r3, [pc, #552]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a20:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a24:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d103      	bne.n	8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003a2c:	f7ff fb8e 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8003a30:	61f8      	str	r0, [r7, #28]
      break;
 8003a32:	e35c      	b.n	80040ee <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	2b10      	cmp	r3, #16
 8003a38:	d103      	bne.n	8003a42 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
        frequency = HAL_RCC_GetSysClockFreq();
 8003a3a:	f7ff fb19 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8003a3e:	61f8      	str	r0, [r7, #28]
      break;
 8003a40:	e355      	b.n	80040ee <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003a42:	4b80      	ldr	r3, [pc, #512]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a4e:	d105      	bne.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	d102      	bne.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x390>
        frequency = HSI_VALUE;
 8003a56:	4b7c      	ldr	r3, [pc, #496]	@ (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003a58:	61fb      	str	r3, [r7, #28]
      break;
 8003a5a:	e348      	b.n	80040ee <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003a5c:	4b79      	ldr	r3, [pc, #484]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	f040 8341 	bne.w	80040ee <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b30      	cmp	r3, #48	@ 0x30
 8003a70:	f040 833d 	bne.w	80040ee <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        frequency = LSE_VALUE;
 8003a74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a78:	61fb      	str	r3, [r7, #28]
      break;
 8003a7a:	e338      	b.n	80040ee <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003a7c:	4b71      	ldr	r3, [pc, #452]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a86:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d103      	bne.n	8003a96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003a8e:	f7ff fb5d 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8003a92:	61f8      	str	r0, [r7, #28]
      break;
 8003a94:	e32d      	b.n	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b40      	cmp	r3, #64	@ 0x40
 8003a9a:	d103      	bne.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        frequency = HAL_RCC_GetSysClockFreq();
 8003a9c:	f7ff fae8 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8003aa0:	61f8      	str	r0, [r7, #28]
      break;
 8003aa2:	e326      	b.n	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8003aa4:	4b67      	ldr	r3, [pc, #412]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ab0:	d105      	bne.n	8003abe <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b80      	cmp	r3, #128	@ 0x80
 8003ab6:	d102      	bne.n	8003abe <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
        frequency = HSI_VALUE;
 8003ab8:	4b63      	ldr	r3, [pc, #396]	@ (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003aba:	61fb      	str	r3, [r7, #28]
      break;
 8003abc:	e319      	b.n	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8003abe:	4b61      	ldr	r3, [pc, #388]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	f040 8312 	bne.w	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ad2:	f040 830e 	bne.w	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
        frequency = LSE_VALUE;
 8003ad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ada:	61fb      	str	r3, [r7, #28]
      break;
 8003adc:	e309      	b.n	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003ade:	4b59      	ldr	r3, [pc, #356]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ae8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d103      	bne.n	8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003af0:	f7ff fb2c 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8003af4:	61f8      	str	r0, [r7, #28]
      break;
 8003af6:	e2fe      	b.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003afe:	d103      	bne.n	8003b08 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
        frequency = HAL_RCC_GetSysClockFreq();
 8003b00:	f7ff fab6 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8003b04:	61f8      	str	r0, [r7, #28]
      break;
 8003b06:	e2f6      	b.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8003b08:	4b4e      	ldr	r3, [pc, #312]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b14:	d106      	bne.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b1c:	d102      	bne.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
        frequency = HSI_VALUE;
 8003b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003b20:	61fb      	str	r3, [r7, #28]
      break;
 8003b22:	e2e8      	b.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8003b24:	4b47      	ldr	r3, [pc, #284]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	f040 82e1 	bne.w	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b3a:	f040 82dc 	bne.w	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
        frequency = LSE_VALUE;
 8003b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b42:	61fb      	str	r3, [r7, #28]
      break;
 8003b44:	e2d7      	b.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003b46:	4b3f      	ldr	r3, [pc, #252]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b50:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d103      	bne.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003b58:	f7ff faf8 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8003b5c:	61f8      	str	r0, [r7, #28]
      break;
 8003b5e:	e2cc      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b66:	d103      	bne.n	8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
        frequency = HAL_RCC_GetSysClockFreq();
 8003b68:	f7ff fa82 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8003b6c:	61f8      	str	r0, [r7, #28]
      break;
 8003b6e:	e2c4      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003b70:	4b34      	ldr	r3, [pc, #208]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b7c:	d106      	bne.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b84:	d102      	bne.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
        frequency = HSI_VALUE;
 8003b86:	4b30      	ldr	r3, [pc, #192]	@ (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003b88:	61fb      	str	r3, [r7, #28]
      break;
 8003b8a:	e2b6      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8003b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	f040 82af 	bne.w	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ba2:	f040 82aa 	bne.w	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
        frequency = LSE_VALUE;
 8003ba6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003baa:	61fb      	str	r3, [r7, #28]
      break;
 8003bac:	e2a5      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003bae:	4b25      	ldr	r3, [pc, #148]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003bb8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d103      	bne.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003bc0:	f7ff fac4 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8003bc4:	61f8      	str	r0, [r7, #28]
      break;
 8003bc6:	e29a      	b.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bce:	d103      	bne.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        frequency = HAL_RCC_GetSysClockFreq();
 8003bd0:	f7ff fa4e 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8003bd4:	61f8      	str	r0, [r7, #28]
      break;
 8003bd6:	e292      	b.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8003bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be4:	f040 828b 	bne.w	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bee:	f040 8286 	bne.w	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
        frequency = HSI_VALUE;
 8003bf2:	4b15      	ldr	r3, [pc, #84]	@ (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003bf4:	61fb      	str	r3, [r7, #28]
      break;
 8003bf6:	e282      	b.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003bf8:	4b12      	ldr	r3, [pc, #72]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003c02:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d103      	bne.n	8003c12 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003c0a:	f7ff fa9f 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8003c0e:	61f8      	str	r0, [r7, #28]
      break;
 8003c10:	e277      	b.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c18:	d103      	bne.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
        frequency = HAL_RCC_GetSysClockFreq();
 8003c1a:	f7ff fa29 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8003c1e:	61f8      	str	r0, [r7, #28]
      break;
 8003c20:	e26f      	b.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8003c22:	4b08      	ldr	r3, [pc, #32]	@ (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c2e:	f040 8268 	bne.w	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c38:	f040 8263 	bne.w	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
        frequency = HSI_VALUE;
 8003c3c:	4b02      	ldr	r3, [pc, #8]	@ (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8003c3e:	61fb      	str	r3, [r7, #28]
      break;
 8003c40:	e25f      	b.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8003c42:	bf00      	nop
 8003c44:	40021000 	.word	0x40021000
 8003c48:	00f42400 	.word	0x00f42400
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003c4c:	4ba0      	ldr	r3, [pc, #640]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c56:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d103      	bne.n	8003c66 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003c5e:	f7ff fa75 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8003c62:	61f8      	str	r0, [r7, #28]
      break;
 8003c64:	e24f      	b.n	8004106 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c6c:	d103      	bne.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
        frequency = HAL_RCC_GetSysClockFreq();
 8003c6e:	f7ff f9ff 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8003c72:	61f8      	str	r0, [r7, #28]
      break;
 8003c74:	e247      	b.n	8004106 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8003c76:	4b96      	ldr	r3, [pc, #600]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c82:	f040 8240 	bne.w	8004106 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c8c:	f040 823b 	bne.w	8004106 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        frequency = HSI_VALUE;
 8003c90:	4b90      	ldr	r3, [pc, #576]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8003c92:	61fb      	str	r3, [r7, #28]
      break;
 8003c94:	e237      	b.n	8004106 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8003c96:	4b8e      	ldr	r3, [pc, #568]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003c98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d103      	bne.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003ca8:	f7ff fa50 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8003cac:	61f8      	str	r0, [r7, #28]
      break;
 8003cae:	e22c      	b.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if(srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d103      	bne.n	8003cbe <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        frequency = HAL_RCC_GetSysClockFreq();
 8003cb6:	f7ff f9db 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8003cba:	61f8      	str	r0, [r7, #28]
      break;
 8003cbc:	e225      	b.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8003cbe:	4b84      	ldr	r3, [pc, #528]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cca:	f040 821e 	bne.w	800410a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	f040 821a 	bne.w	800410a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
        frequency = HSI_VALUE;
 8003cd6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8003cd8:	61fb      	str	r3, [r7, #28]
      break;
 8003cda:	e216      	b.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003cdc:	4b7c      	ldr	r3, [pc, #496]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003ce6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d103      	bne.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003cee:	f7ff fa2d 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8003cf2:	61f8      	str	r0, [r7, #28]
      break;
 8003cf4:	e20b      	b.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8003cf6:	4b76      	ldr	r3, [pc, #472]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d107      	bne.n	8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d0a:	d103      	bne.n	8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
        frequency = LSI_VALUE;
 8003d0c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	e01e      	b.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8003d14:	4b6e      	ldr	r3, [pc, #440]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d20:	d106      	bne.n	8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d28:	d102      	bne.n	8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        frequency = HSI_VALUE;
 8003d2a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8003d2c:	61fb      	str	r3, [r7, #28]
 8003d2e:	e010      	b.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8003d30:	4b67      	ldr	r3, [pc, #412]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	f040 81e7 	bne.w	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d46:	f040 81e2 	bne.w	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
        frequency = LSE_VALUE;
 8003d4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d4e:	61fb      	str	r3, [r7, #28]
      break;
 8003d50:	e1dd      	b.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8003d52:	e1dc      	b.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003d54:	4b5e      	ldr	r3, [pc, #376]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003d5e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
        frequency = HAL_RCC_GetSysClockFreq();
 8003d66:	f7ff f983 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8003d6a:	61f8      	str	r0, [r7, #28]
      break;
 8003d6c:	e1d1      	b.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d74:	d11b      	bne.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8003d76:	4b56      	ldr	r3, [pc, #344]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 81c7 	beq.w	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003d84:	4b52      	ldr	r3, [pc, #328]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	0a1b      	lsrs	r3, r3, #8
 8003d8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d8e:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	fb03 f202 	mul.w	r2, r3, r2
 8003d98:	4b4d      	ldr	r3, [pc, #308]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	0d5b      	lsrs	r3, r3, #21
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	3301      	adds	r3, #1
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003daa:	61fb      	str	r3, [r7, #28]
      break;
 8003dac:	e1b1      	b.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003db4:	d102      	bne.n	8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        frequency = EXTERNAL_CLOCK_VALUE;
 8003db6:	4b48      	ldr	r3, [pc, #288]	@ (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8003db8:	61fb      	str	r3, [r7, #28]
      break;
 8003dba:	e1aa      	b.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 8003dbc:	4b44      	ldr	r3, [pc, #272]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dc8:	f040 81a3 	bne.w	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003dd2:	f040 819e 	bne.w	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
        frequency = HSI_VALUE;
 8003dd6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8003dd8:	61fb      	str	r3, [r7, #28]
      break;
 8003dda:	e19a      	b.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003ddc:	4b3c      	ldr	r3, [pc, #240]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003de6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d103      	bne.n	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
        frequency = HAL_RCC_GetSysClockFreq();
 8003dee:	f7ff f93f 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8003df2:	61f8      	str	r0, [r7, #28]
      break;
 8003df4:	e18f      	b.n	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dfc:	d11b      	bne.n	8003e36 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8003dfe:	4b34      	ldr	r3, [pc, #208]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8185 	beq.w	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003e0c:	4b30      	ldr	r3, [pc, #192]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e16:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	fb03 f202 	mul.w	r2, r3, r2
 8003e20:	4b2b      	ldr	r3, [pc, #172]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	0d5b      	lsrs	r3, r3, #21
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e32:	61fb      	str	r3, [r7, #28]
      break;
 8003e34:	e16f      	b.n	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e3c:	d102      	bne.n	8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        frequency = EXTERNAL_CLOCK_VALUE;
 8003e3e:	4b26      	ldr	r3, [pc, #152]	@ (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8003e40:	61fb      	str	r3, [r7, #28]
      break;
 8003e42:	e168      	b.n	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 8003e44:	4b22      	ldr	r3, [pc, #136]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e50:	f040 8161 	bne.w	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e5a:	f040 815c 	bne.w	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
        frequency = HSI_VALUE;
 8003e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8003e60:	61fb      	str	r3, [r7, #28]
      break;
 8003e62:	e158      	b.n	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8003e64:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e6a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8003e6e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e76:	d103      	bne.n	8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003e78:	f7ff f968 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8003e7c:	61f8      	str	r0, [r7, #28]
      break;
 8003e7e:	e14c      	b.n	800411a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d102      	bne.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
        frequency = HSE_VALUE;
 8003e86:	4b15      	ldr	r3, [pc, #84]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8003e88:	61fb      	str	r3, [r7, #28]
      break;
 8003e8a:	e146      	b.n	800411a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e92:	f040 8142 	bne.w	800411a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8003e96:	4b0e      	ldr	r3, [pc, #56]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 813b 	beq.w	800411a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	0a1b      	lsrs	r3, r3, #8
 8003eaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003eae:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	fb03 f202 	mul.w	r2, r3, r2
 8003eb8:	4b05      	ldr	r3, [pc, #20]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	0d5b      	lsrs	r3, r3, #21
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eca:	61fb      	str	r3, [r7, #28]
      break;
 8003ecc:	e125      	b.n	800411a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	00f42400 	.word	0x00f42400
 8003ed8:	00bb8000 	.word	0x00bb8000
 8003edc:	007a1200 	.word	0x007a1200
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 8003ee0:	4b96      	ldr	r3, [pc, #600]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003eea:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ef2:	d114      	bne.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003ef4:	4b91      	ldr	r3, [pc, #580]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	0a1b      	lsrs	r3, r3, #8
 8003efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003efe:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	fb03 f202 	mul.w	r2, r3, r2
 8003f08:	4b8c      	ldr	r3, [pc, #560]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	0d5b      	lsrs	r3, r3, #21
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	3301      	adds	r3, #1
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1a:	61fb      	str	r3, [r7, #28]
      break;
 8003f1c:	e0ff      	b.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 8003f1e:	4b87      	ldr	r3, [pc, #540]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8003f20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	f040 80f8 	bne.w	800411e <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f040 80f4 	bne.w	800411e <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
        frequency = HSI48_VALUE;
 8003f36:	4b82      	ldr	r3, [pc, #520]	@ (8004140 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003f38:	61fb      	str	r3, [r7, #28]
      break;
 8003f3a:	e0f0      	b.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8003f3c:	4b7f      	ldr	r3, [pc, #508]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f42:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003f46:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f4e:	d114      	bne.n	8003f7a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003f50:	4b7a      	ldr	r3, [pc, #488]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	0a1b      	lsrs	r3, r3, #8
 8003f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f5a:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	fb03 f202 	mul.w	r2, r3, r2
 8003f64:	4b75      	ldr	r3, [pc, #468]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	0d5b      	lsrs	r3, r3, #21
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	3301      	adds	r3, #1
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f76:	61fb      	str	r3, [r7, #28]
      break;
 8003f78:	e0d3      	b.n	8004122 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 8003f7a:	4b70      	ldr	r3, [pc, #448]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8003f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	f040 80cc 	bne.w	8004122 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f040 80c8 	bne.w	8004122 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
        frequency = HSI48_VALUE;
 8003f92:	4b6b      	ldr	r3, [pc, #428]	@ (8004140 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003f94:	61fb      	str	r3, [r7, #28]
      break;
 8003f96:	e0c4      	b.n	8004122 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 8003f98:	4b68      	ldr	r3, [pc, #416]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003fa2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003faa:	d129      	bne.n	8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8003fac:	4b63      	ldr	r3, [pc, #396]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80b6 	beq.w	8004126 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003fba:	4b60      	ldr	r3, [pc, #384]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	0a1b      	lsrs	r3, r3, #8
 8003fc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fc4:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8003fc6:	4b5d      	ldr	r3, [pc, #372]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	0edb      	lsrs	r3, r3, #27
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <HAL_RCCEx_GetPeriphCLKFreq+0x922>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003fd8:	4b58      	ldr	r3, [pc, #352]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
              pllp = 17U;
 8003fe4:	2311      	movs	r3, #17
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	e001      	b.n	8003fee <HAL_RCCEx_GetPeriphCLKFreq+0x922>
              pllp = 7U;
 8003fea:	2307      	movs	r3, #7
 8003fec:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	fb03 f202 	mul.w	r2, r3, r2
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	61fb      	str	r3, [r7, #28]
      break;
 8003ffe:	e092      	b.n	8004126 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004006:	f040 808e 	bne.w	8004126 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
        frequency = HAL_RCC_GetSysClockFreq();
 800400a:	f7ff f831 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 800400e:	61f8      	str	r0, [r7, #28]
      break;
 8004010:	e089      	b.n	8004126 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 8004012:	4b4a      	ldr	r3, [pc, #296]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004018:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800401c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004024:	d128      	bne.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8004026:	4b45      	ldr	r3, [pc, #276]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d07b      	beq.n	800412a <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004032:	4b42      	ldr	r3, [pc, #264]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	0a1b      	lsrs	r3, r3, #8
 8004038:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800403c:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800403e:	4b3f      	ldr	r3, [pc, #252]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	0edb      	lsrs	r3, r3, #27
 8004044:	f003 031f 	and.w	r3, r3, #31
 8004048:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004050:	4b3a      	ldr	r3, [pc, #232]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
              pllp = 17U;
 800405c:	2311      	movs	r3, #17
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e001      	b.n	8004066 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
              pllp = 7U;
 8004062:	2307      	movs	r3, #7
 8004064:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	fb03 f202 	mul.w	r2, r3, r2
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	fbb2 f3f3 	udiv	r3, r2, r3
 8004074:	61fb      	str	r3, [r7, #28]
      break;
 8004076:	e058      	b.n	800412a <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800407e:	d154      	bne.n	800412a <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
        frequency = HAL_RCC_GetSysClockFreq();
 8004080:	f7fe fff6 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8004084:	61f8      	str	r0, [r7, #28]
      break;
 8004086:	e050      	b.n	800412a <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 8004088:	4b2c      	ldr	r3, [pc, #176]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800408a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800408e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004092:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800409a:	d114      	bne.n	80040c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800409c:	4b27      	ldr	r3, [pc, #156]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	0a1b      	lsrs	r3, r3, #8
 80040a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040a6:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	fb03 f202 	mul.w	r2, r3, r2
 80040b0:	4b22      	ldr	r3, [pc, #136]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	0d5b      	lsrs	r3, r3, #21
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	3301      	adds	r3, #1
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c2:	61fb      	str	r3, [r7, #28]
      break;
 80040c4:	e033      	b.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040cc:	d102      	bne.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa08>
        frequency = HSI_VALUE;
 80040ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 80040d0:	61fb      	str	r3, [r7, #28]
      break;
 80040d2:	e02c      	b.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d129      	bne.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
        frequency = HAL_RCC_GetSysClockFreq();
 80040da:	f7fe ffc9 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 80040de:	61f8      	str	r0, [r7, #28]
      break;
 80040e0:	e025      	b.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      break;
 80040e2:	bf00      	nop
 80040e4:	e024      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80040e6:	bf00      	nop
 80040e8:	e022      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80040ea:	bf00      	nop
 80040ec:	e020      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80040ee:	bf00      	nop
 80040f0:	e01e      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80040f2:	bf00      	nop
 80040f4:	e01c      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80040f6:	bf00      	nop
 80040f8:	e01a      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80040fa:	bf00      	nop
 80040fc:	e018      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80040fe:	bf00      	nop
 8004100:	e016      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004102:	bf00      	nop
 8004104:	e014      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004106:	bf00      	nop
 8004108:	e012      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800410a:	bf00      	nop
 800410c:	e010      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800410e:	bf00      	nop
 8004110:	e00e      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004112:	bf00      	nop
 8004114:	e00c      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004116:	bf00      	nop
 8004118:	e00a      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800411a:	bf00      	nop
 800411c:	e008      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800411e:	bf00      	nop
 8004120:	e006      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004122:	bf00      	nop
 8004124:	e004      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8004126:	bf00      	nop
 8004128:	e002      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800412a:	bf00      	nop
 800412c:	e000      	b.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 800412e:	bf00      	nop
    }
  }

  return(frequency);
 8004130:	69fb      	ldr	r3, [r7, #28]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3720      	adds	r7, #32
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
 8004140:	02dc6c00 	.word	0x02dc6c00
 8004144:	00f42400 	.word	0x00f42400

08004148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e049      	b.n	80041ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd fa2e 	bl	80015d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3304      	adds	r3, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4610      	mov	r0, r2
 8004188:	f000 fe02 	bl	8004d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e049      	b.n	800429c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d106      	bne.n	8004222 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f841 	bl	80042a4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2202      	movs	r2, #2
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3304      	adds	r3, #4
 8004232:	4619      	mov	r1, r3
 8004234:	4610      	mov	r0, r2
 8004236:	f000 fdab 	bl	8004d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d109      	bne.n	80042dc <HAL_TIM_OC_Start+0x24>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	bf14      	ite	ne
 80042d4:	2301      	movne	r3, #1
 80042d6:	2300      	moveq	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	e03c      	b.n	8004356 <HAL_TIM_OC_Start+0x9e>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d109      	bne.n	80042f6 <HAL_TIM_OC_Start+0x3e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	bf14      	ite	ne
 80042ee:	2301      	movne	r3, #1
 80042f0:	2300      	moveq	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	e02f      	b.n	8004356 <HAL_TIM_OC_Start+0x9e>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d109      	bne.n	8004310 <HAL_TIM_OC_Start+0x58>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	bf14      	ite	ne
 8004308:	2301      	movne	r3, #1
 800430a:	2300      	moveq	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	e022      	b.n	8004356 <HAL_TIM_OC_Start+0x9e>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2b0c      	cmp	r3, #12
 8004314:	d109      	bne.n	800432a <HAL_TIM_OC_Start+0x72>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b01      	cmp	r3, #1
 8004320:	bf14      	ite	ne
 8004322:	2301      	movne	r3, #1
 8004324:	2300      	moveq	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	e015      	b.n	8004356 <HAL_TIM_OC_Start+0x9e>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b10      	cmp	r3, #16
 800432e:	d109      	bne.n	8004344 <HAL_TIM_OC_Start+0x8c>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	bf14      	ite	ne
 800433c:	2301      	movne	r3, #1
 800433e:	2300      	moveq	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	e008      	b.n	8004356 <HAL_TIM_OC_Start+0x9e>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	bf14      	ite	ne
 8004350:	2301      	movne	r3, #1
 8004352:	2300      	moveq	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e0a6      	b.n	80044ac <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d104      	bne.n	800436e <HAL_TIM_OC_Start+0xb6>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800436c:	e023      	b.n	80043b6 <HAL_TIM_OC_Start+0xfe>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b04      	cmp	r3, #4
 8004372:	d104      	bne.n	800437e <HAL_TIM_OC_Start+0xc6>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800437c:	e01b      	b.n	80043b6 <HAL_TIM_OC_Start+0xfe>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d104      	bne.n	800438e <HAL_TIM_OC_Start+0xd6>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800438c:	e013      	b.n	80043b6 <HAL_TIM_OC_Start+0xfe>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b0c      	cmp	r3, #12
 8004392:	d104      	bne.n	800439e <HAL_TIM_OC_Start+0xe6>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800439c:	e00b      	b.n	80043b6 <HAL_TIM_OC_Start+0xfe>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d104      	bne.n	80043ae <HAL_TIM_OC_Start+0xf6>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043ac:	e003      	b.n	80043b6 <HAL_TIM_OC_Start+0xfe>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2202      	movs	r2, #2
 80043b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2201      	movs	r2, #1
 80043bc:	6839      	ldr	r1, [r7, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f001 fa40 	bl	8005844 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a3a      	ldr	r2, [pc, #232]	@ (80044b4 <HAL_TIM_OC_Start+0x1fc>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d018      	beq.n	8004400 <HAL_TIM_OC_Start+0x148>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a39      	ldr	r2, [pc, #228]	@ (80044b8 <HAL_TIM_OC_Start+0x200>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d013      	beq.n	8004400 <HAL_TIM_OC_Start+0x148>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a37      	ldr	r2, [pc, #220]	@ (80044bc <HAL_TIM_OC_Start+0x204>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00e      	beq.n	8004400 <HAL_TIM_OC_Start+0x148>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a36      	ldr	r2, [pc, #216]	@ (80044c0 <HAL_TIM_OC_Start+0x208>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d009      	beq.n	8004400 <HAL_TIM_OC_Start+0x148>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a34      	ldr	r2, [pc, #208]	@ (80044c4 <HAL_TIM_OC_Start+0x20c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d004      	beq.n	8004400 <HAL_TIM_OC_Start+0x148>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a33      	ldr	r2, [pc, #204]	@ (80044c8 <HAL_TIM_OC_Start+0x210>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d101      	bne.n	8004404 <HAL_TIM_OC_Start+0x14c>
 8004400:	2301      	movs	r3, #1
 8004402:	e000      	b.n	8004406 <HAL_TIM_OC_Start+0x14e>
 8004404:	2300      	movs	r3, #0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d007      	beq.n	800441a <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004418:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a25      	ldr	r2, [pc, #148]	@ (80044b4 <HAL_TIM_OC_Start+0x1fc>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d022      	beq.n	800446a <HAL_TIM_OC_Start+0x1b2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442c:	d01d      	beq.n	800446a <HAL_TIM_OC_Start+0x1b2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a26      	ldr	r2, [pc, #152]	@ (80044cc <HAL_TIM_OC_Start+0x214>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d018      	beq.n	800446a <HAL_TIM_OC_Start+0x1b2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a24      	ldr	r2, [pc, #144]	@ (80044d0 <HAL_TIM_OC_Start+0x218>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d013      	beq.n	800446a <HAL_TIM_OC_Start+0x1b2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a23      	ldr	r2, [pc, #140]	@ (80044d4 <HAL_TIM_OC_Start+0x21c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00e      	beq.n	800446a <HAL_TIM_OC_Start+0x1b2>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a19      	ldr	r2, [pc, #100]	@ (80044b8 <HAL_TIM_OC_Start+0x200>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d009      	beq.n	800446a <HAL_TIM_OC_Start+0x1b2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a18      	ldr	r2, [pc, #96]	@ (80044bc <HAL_TIM_OC_Start+0x204>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d004      	beq.n	800446a <HAL_TIM_OC_Start+0x1b2>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a18      	ldr	r2, [pc, #96]	@ (80044c8 <HAL_TIM_OC_Start+0x210>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d115      	bne.n	8004496 <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	4b19      	ldr	r3, [pc, #100]	@ (80044d8 <HAL_TIM_OC_Start+0x220>)
 8004472:	4013      	ands	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b06      	cmp	r3, #6
 800447a:	d015      	beq.n	80044a8 <HAL_TIM_OC_Start+0x1f0>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004482:	d011      	beq.n	80044a8 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004494:	e008      	b.n	80044a8 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0201 	orr.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	e000      	b.n	80044aa <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40012c00 	.word	0x40012c00
 80044b8:	40013400 	.word	0x40013400
 80044bc:	40014000 	.word	0x40014000
 80044c0:	40014400 	.word	0x40014400
 80044c4:	40014800 	.word	0x40014800
 80044c8:	40015000 	.word	0x40015000
 80044cc:	40000400 	.word	0x40000400
 80044d0:	40000800 	.word	0x40000800
 80044d4:	40000c00 	.word	0x40000c00
 80044d8:	00010007 	.word	0x00010007

080044dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e049      	b.n	8004582 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f841 	bl	800458a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3304      	adds	r3, #4
 8004518:	4619      	mov	r1, r3
 800451a:	4610      	mov	r0, r2
 800451c:	f000 fc38 	bl	8004d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <HAL_TIM_PWM_Start+0x24>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	bf14      	ite	ne
 80045bc:	2301      	movne	r3, #1
 80045be:	2300      	moveq	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	e03c      	b.n	800463e <HAL_TIM_PWM_Start+0x9e>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d109      	bne.n	80045de <HAL_TIM_PWM_Start+0x3e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	bf14      	ite	ne
 80045d6:	2301      	movne	r3, #1
 80045d8:	2300      	moveq	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	e02f      	b.n	800463e <HAL_TIM_PWM_Start+0x9e>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d109      	bne.n	80045f8 <HAL_TIM_PWM_Start+0x58>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	bf14      	ite	ne
 80045f0:	2301      	movne	r3, #1
 80045f2:	2300      	moveq	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	e022      	b.n	800463e <HAL_TIM_PWM_Start+0x9e>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b0c      	cmp	r3, #12
 80045fc:	d109      	bne.n	8004612 <HAL_TIM_PWM_Start+0x72>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b01      	cmp	r3, #1
 8004608:	bf14      	ite	ne
 800460a:	2301      	movne	r3, #1
 800460c:	2300      	moveq	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	e015      	b.n	800463e <HAL_TIM_PWM_Start+0x9e>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b10      	cmp	r3, #16
 8004616:	d109      	bne.n	800462c <HAL_TIM_PWM_Start+0x8c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b01      	cmp	r3, #1
 8004622:	bf14      	ite	ne
 8004624:	2301      	movne	r3, #1
 8004626:	2300      	moveq	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	e008      	b.n	800463e <HAL_TIM_PWM_Start+0x9e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	bf14      	ite	ne
 8004638:	2301      	movne	r3, #1
 800463a:	2300      	moveq	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e0a6      	b.n	8004794 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d104      	bne.n	8004656 <HAL_TIM_PWM_Start+0xb6>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004654:	e023      	b.n	800469e <HAL_TIM_PWM_Start+0xfe>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b04      	cmp	r3, #4
 800465a:	d104      	bne.n	8004666 <HAL_TIM_PWM_Start+0xc6>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004664:	e01b      	b.n	800469e <HAL_TIM_PWM_Start+0xfe>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d104      	bne.n	8004676 <HAL_TIM_PWM_Start+0xd6>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004674:	e013      	b.n	800469e <HAL_TIM_PWM_Start+0xfe>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b0c      	cmp	r3, #12
 800467a:	d104      	bne.n	8004686 <HAL_TIM_PWM_Start+0xe6>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004684:	e00b      	b.n	800469e <HAL_TIM_PWM_Start+0xfe>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b10      	cmp	r3, #16
 800468a:	d104      	bne.n	8004696 <HAL_TIM_PWM_Start+0xf6>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004694:	e003      	b.n	800469e <HAL_TIM_PWM_Start+0xfe>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2202      	movs	r2, #2
 800469a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2201      	movs	r2, #1
 80046a4:	6839      	ldr	r1, [r7, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 f8cc 	bl	8005844 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a3a      	ldr	r2, [pc, #232]	@ (800479c <HAL_TIM_PWM_Start+0x1fc>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d018      	beq.n	80046e8 <HAL_TIM_PWM_Start+0x148>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a39      	ldr	r2, [pc, #228]	@ (80047a0 <HAL_TIM_PWM_Start+0x200>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d013      	beq.n	80046e8 <HAL_TIM_PWM_Start+0x148>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a37      	ldr	r2, [pc, #220]	@ (80047a4 <HAL_TIM_PWM_Start+0x204>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00e      	beq.n	80046e8 <HAL_TIM_PWM_Start+0x148>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a36      	ldr	r2, [pc, #216]	@ (80047a8 <HAL_TIM_PWM_Start+0x208>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d009      	beq.n	80046e8 <HAL_TIM_PWM_Start+0x148>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a34      	ldr	r2, [pc, #208]	@ (80047ac <HAL_TIM_PWM_Start+0x20c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d004      	beq.n	80046e8 <HAL_TIM_PWM_Start+0x148>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a33      	ldr	r2, [pc, #204]	@ (80047b0 <HAL_TIM_PWM_Start+0x210>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d101      	bne.n	80046ec <HAL_TIM_PWM_Start+0x14c>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <HAL_TIM_PWM_Start+0x14e>
 80046ec:	2300      	movs	r3, #0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004700:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a25      	ldr	r2, [pc, #148]	@ (800479c <HAL_TIM_PWM_Start+0x1fc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d022      	beq.n	8004752 <HAL_TIM_PWM_Start+0x1b2>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004714:	d01d      	beq.n	8004752 <HAL_TIM_PWM_Start+0x1b2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a26      	ldr	r2, [pc, #152]	@ (80047b4 <HAL_TIM_PWM_Start+0x214>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d018      	beq.n	8004752 <HAL_TIM_PWM_Start+0x1b2>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a24      	ldr	r2, [pc, #144]	@ (80047b8 <HAL_TIM_PWM_Start+0x218>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <HAL_TIM_PWM_Start+0x1b2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a23      	ldr	r2, [pc, #140]	@ (80047bc <HAL_TIM_PWM_Start+0x21c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00e      	beq.n	8004752 <HAL_TIM_PWM_Start+0x1b2>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a19      	ldr	r2, [pc, #100]	@ (80047a0 <HAL_TIM_PWM_Start+0x200>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d009      	beq.n	8004752 <HAL_TIM_PWM_Start+0x1b2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a18      	ldr	r2, [pc, #96]	@ (80047a4 <HAL_TIM_PWM_Start+0x204>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <HAL_TIM_PWM_Start+0x1b2>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a18      	ldr	r2, [pc, #96]	@ (80047b0 <HAL_TIM_PWM_Start+0x210>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d115      	bne.n	800477e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	4b19      	ldr	r3, [pc, #100]	@ (80047c0 <HAL_TIM_PWM_Start+0x220>)
 800475a:	4013      	ands	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b06      	cmp	r3, #6
 8004762:	d015      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1f0>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800476a:	d011      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477c:	e008      	b.n	8004790 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e000      	b.n	8004792 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004790:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40013400 	.word	0x40013400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40014400 	.word	0x40014400
 80047ac:	40014800 	.word	0x40014800
 80047b0:	40015000 	.word	0x40015000
 80047b4:	40000400 	.word	0x40000400
 80047b8:	40000800 	.word	0x40000800
 80047bc:	40000c00 	.word	0x40000c00
 80047c0:	00010007 	.word	0x00010007

080047c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047d0:	2300      	movs	r3, #0
 80047d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d101      	bne.n	80047e2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80047de:	2302      	movs	r3, #2
 80047e0:	e066      	b.n	80048b0 <HAL_TIM_OC_ConfigChannel+0xec>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b14      	cmp	r3, #20
 80047ee:	d857      	bhi.n	80048a0 <HAL_TIM_OC_ConfigChannel+0xdc>
 80047f0:	a201      	add	r2, pc, #4	@ (adr r2, 80047f8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80047f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f6:	bf00      	nop
 80047f8:	0800484d 	.word	0x0800484d
 80047fc:	080048a1 	.word	0x080048a1
 8004800:	080048a1 	.word	0x080048a1
 8004804:	080048a1 	.word	0x080048a1
 8004808:	0800485b 	.word	0x0800485b
 800480c:	080048a1 	.word	0x080048a1
 8004810:	080048a1 	.word	0x080048a1
 8004814:	080048a1 	.word	0x080048a1
 8004818:	08004869 	.word	0x08004869
 800481c:	080048a1 	.word	0x080048a1
 8004820:	080048a1 	.word	0x080048a1
 8004824:	080048a1 	.word	0x080048a1
 8004828:	08004877 	.word	0x08004877
 800482c:	080048a1 	.word	0x080048a1
 8004830:	080048a1 	.word	0x080048a1
 8004834:	080048a1 	.word	0x080048a1
 8004838:	08004885 	.word	0x08004885
 800483c:	080048a1 	.word	0x080048a1
 8004840:	080048a1 	.word	0x080048a1
 8004844:	080048a1 	.word	0x080048a1
 8004848:	08004893 	.word	0x08004893
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fb50 	bl	8004ef8 <TIM_OC1_SetConfig>
      break;
 8004858:	e025      	b.n	80048a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fbe3 	bl	800502c <TIM_OC2_SetConfig>
      break;
 8004866:	e01e      	b.n	80048a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fc70 	bl	8005154 <TIM_OC3_SetConfig>
      break;
 8004874:	e017      	b.n	80048a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fcfb 	bl	8005278 <TIM_OC4_SetConfig>
      break;
 8004882:	e010      	b.n	80048a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68b9      	ldr	r1, [r7, #8]
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fd88 	bl	80053a0 <TIM_OC5_SetConfig>
      break;
 8004890:	e009      	b.n	80048a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fdeb 	bl	8005474 <TIM_OC6_SetConfig>
      break;
 800489e:	e002      	b.n	80048a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	75fb      	strb	r3, [r7, #23]
      break;
 80048a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e0ff      	b.n	8004ad6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b14      	cmp	r3, #20
 80048e2:	f200 80f0 	bhi.w	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80048e6:	a201      	add	r2, pc, #4	@ (adr r2, 80048ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	08004941 	.word	0x08004941
 80048f0:	08004ac7 	.word	0x08004ac7
 80048f4:	08004ac7 	.word	0x08004ac7
 80048f8:	08004ac7 	.word	0x08004ac7
 80048fc:	08004981 	.word	0x08004981
 8004900:	08004ac7 	.word	0x08004ac7
 8004904:	08004ac7 	.word	0x08004ac7
 8004908:	08004ac7 	.word	0x08004ac7
 800490c:	080049c3 	.word	0x080049c3
 8004910:	08004ac7 	.word	0x08004ac7
 8004914:	08004ac7 	.word	0x08004ac7
 8004918:	08004ac7 	.word	0x08004ac7
 800491c:	08004a03 	.word	0x08004a03
 8004920:	08004ac7 	.word	0x08004ac7
 8004924:	08004ac7 	.word	0x08004ac7
 8004928:	08004ac7 	.word	0x08004ac7
 800492c:	08004a45 	.word	0x08004a45
 8004930:	08004ac7 	.word	0x08004ac7
 8004934:	08004ac7 	.word	0x08004ac7
 8004938:	08004ac7 	.word	0x08004ac7
 800493c:	08004a85 	.word	0x08004a85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fad6 	bl	8004ef8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699a      	ldr	r2, [r3, #24]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0208 	orr.w	r2, r2, #8
 800495a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0204 	bic.w	r2, r2, #4
 800496a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6999      	ldr	r1, [r3, #24]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	691a      	ldr	r2, [r3, #16]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	619a      	str	r2, [r3, #24]
      break;
 800497e:	e0a5      	b.n	8004acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fb50 	bl	800502c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699a      	ldr	r2, [r3, #24]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800499a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6999      	ldr	r1, [r3, #24]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	021a      	lsls	r2, r3, #8
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	619a      	str	r2, [r3, #24]
      break;
 80049c0:	e084      	b.n	8004acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68b9      	ldr	r1, [r7, #8]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fbc3 	bl	8005154 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69da      	ldr	r2, [r3, #28]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0208 	orr.w	r2, r2, #8
 80049dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69da      	ldr	r2, [r3, #28]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0204 	bic.w	r2, r2, #4
 80049ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69d9      	ldr	r1, [r3, #28]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	61da      	str	r2, [r3, #28]
      break;
 8004a00:	e064      	b.n	8004acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fc35 	bl	8005278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69da      	ldr	r2, [r3, #28]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69d9      	ldr	r1, [r3, #28]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	021a      	lsls	r2, r3, #8
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	61da      	str	r2, [r3, #28]
      break;
 8004a42:	e043      	b.n	8004acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fca8 	bl	80053a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0208 	orr.w	r2, r2, #8
 8004a5e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0204 	bic.w	r2, r2, #4
 8004a6e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004a82:	e023      	b.n	8004acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fcf2 	bl	8005474 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a9e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	021a      	lsls	r2, r3, #8
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004ac4:	e002      	b.n	8004acc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8004aca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop

08004ae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_TIM_ConfigClockSource+0x1c>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e0f6      	b.n	8004cea <HAL_TIM_ConfigClockSource+0x20a>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004b1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a6f      	ldr	r2, [pc, #444]	@ (8004cf4 <HAL_TIM_ConfigClockSource+0x214>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	f000 80c1 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0x1de>
 8004b3c:	4a6d      	ldr	r2, [pc, #436]	@ (8004cf4 <HAL_TIM_ConfigClockSource+0x214>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	f200 80c6 	bhi.w	8004cd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b44:	4a6c      	ldr	r2, [pc, #432]	@ (8004cf8 <HAL_TIM_ConfigClockSource+0x218>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	f000 80b9 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0x1de>
 8004b4c:	4a6a      	ldr	r2, [pc, #424]	@ (8004cf8 <HAL_TIM_ConfigClockSource+0x218>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	f200 80be 	bhi.w	8004cd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b54:	4a69      	ldr	r2, [pc, #420]	@ (8004cfc <HAL_TIM_ConfigClockSource+0x21c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	f000 80b1 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0x1de>
 8004b5c:	4a67      	ldr	r2, [pc, #412]	@ (8004cfc <HAL_TIM_ConfigClockSource+0x21c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	f200 80b6 	bhi.w	8004cd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b64:	4a66      	ldr	r2, [pc, #408]	@ (8004d00 <HAL_TIM_ConfigClockSource+0x220>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	f000 80a9 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0x1de>
 8004b6c:	4a64      	ldr	r2, [pc, #400]	@ (8004d00 <HAL_TIM_ConfigClockSource+0x220>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	f200 80ae 	bhi.w	8004cd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b74:	4a63      	ldr	r2, [pc, #396]	@ (8004d04 <HAL_TIM_ConfigClockSource+0x224>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	f000 80a1 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0x1de>
 8004b7c:	4a61      	ldr	r2, [pc, #388]	@ (8004d04 <HAL_TIM_ConfigClockSource+0x224>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	f200 80a6 	bhi.w	8004cd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b84:	4a60      	ldr	r2, [pc, #384]	@ (8004d08 <HAL_TIM_ConfigClockSource+0x228>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	f000 8099 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0x1de>
 8004b8c:	4a5e      	ldr	r2, [pc, #376]	@ (8004d08 <HAL_TIM_ConfigClockSource+0x228>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	f200 809e 	bhi.w	8004cd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b94:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004b98:	f000 8091 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0x1de>
 8004b9c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004ba0:	f200 8096 	bhi.w	8004cd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ba4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ba8:	f000 8089 	beq.w	8004cbe <HAL_TIM_ConfigClockSource+0x1de>
 8004bac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bb0:	f200 808e 	bhi.w	8004cd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bb8:	d03e      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0x158>
 8004bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bbe:	f200 8087 	bhi.w	8004cd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bc6:	f000 8086 	beq.w	8004cd6 <HAL_TIM_ConfigClockSource+0x1f6>
 8004bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bce:	d87f      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bd0:	2b70      	cmp	r3, #112	@ 0x70
 8004bd2:	d01a      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x12a>
 8004bd4:	2b70      	cmp	r3, #112	@ 0x70
 8004bd6:	d87b      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bd8:	2b60      	cmp	r3, #96	@ 0x60
 8004bda:	d050      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x19e>
 8004bdc:	2b60      	cmp	r3, #96	@ 0x60
 8004bde:	d877      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004be0:	2b50      	cmp	r3, #80	@ 0x50
 8004be2:	d03c      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x17e>
 8004be4:	2b50      	cmp	r3, #80	@ 0x50
 8004be6:	d873      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004be8:	2b40      	cmp	r3, #64	@ 0x40
 8004bea:	d058      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x1be>
 8004bec:	2b40      	cmp	r3, #64	@ 0x40
 8004bee:	d86f      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bf0:	2b30      	cmp	r3, #48	@ 0x30
 8004bf2:	d064      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x1de>
 8004bf4:	2b30      	cmp	r3, #48	@ 0x30
 8004bf6:	d86b      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	d060      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x1de>
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d867      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d05c      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x1de>
 8004c04:	2b10      	cmp	r3, #16
 8004c06:	d05a      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x1de>
 8004c08:	e062      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c1a:	f000 fdf3 	bl	8005804 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	609a      	str	r2, [r3, #8]
      break;
 8004c36:	e04f      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c48:	f000 fddc 	bl	8005804 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c5a:	609a      	str	r2, [r3, #8]
      break;
 8004c5c:	e03c      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f000 fd4e 	bl	800570c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2150      	movs	r1, #80	@ 0x50
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fda7 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 8004c7c:	e02c      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f000 fd6d 	bl	800576a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2160      	movs	r1, #96	@ 0x60
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fd97 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 8004c9c:	e01c      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004caa:	461a      	mov	r2, r3
 8004cac:	f000 fd2e 	bl	800570c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2140      	movs	r1, #64	@ 0x40
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fd87 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 8004cbc:	e00c      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4610      	mov	r0, r2
 8004cca:	f000 fd7e 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 8004cce:	e003      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd4:	e000      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004cd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	00100070 	.word	0x00100070
 8004cf8:	00100060 	.word	0x00100060
 8004cfc:	00100050 	.word	0x00100050
 8004d00:	00100040 	.word	0x00100040
 8004d04:	00100030 	.word	0x00100030
 8004d08:	00100020 	.word	0x00100020

08004d0c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004d20:	2302      	movs	r3, #2
 8004d22:	e031      	b.n	8004d88 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004d34:	6839      	ldr	r1, [r7, #0]
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fc08 	bl	800554c <TIM_SlaveTimer_SetConfig>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e018      	b.n	8004d88 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d64:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d74:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a4c      	ldr	r2, [pc, #304]	@ (8004ed4 <TIM_Base_SetConfig+0x144>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d017      	beq.n	8004dd8 <TIM_Base_SetConfig+0x48>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dae:	d013      	beq.n	8004dd8 <TIM_Base_SetConfig+0x48>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a49      	ldr	r2, [pc, #292]	@ (8004ed8 <TIM_Base_SetConfig+0x148>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00f      	beq.n	8004dd8 <TIM_Base_SetConfig+0x48>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a48      	ldr	r2, [pc, #288]	@ (8004edc <TIM_Base_SetConfig+0x14c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00b      	beq.n	8004dd8 <TIM_Base_SetConfig+0x48>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a47      	ldr	r2, [pc, #284]	@ (8004ee0 <TIM_Base_SetConfig+0x150>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d007      	beq.n	8004dd8 <TIM_Base_SetConfig+0x48>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a46      	ldr	r2, [pc, #280]	@ (8004ee4 <TIM_Base_SetConfig+0x154>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_Base_SetConfig+0x48>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a45      	ldr	r2, [pc, #276]	@ (8004ee8 <TIM_Base_SetConfig+0x158>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d108      	bne.n	8004dea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a39      	ldr	r2, [pc, #228]	@ (8004ed4 <TIM_Base_SetConfig+0x144>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d023      	beq.n	8004e3a <TIM_Base_SetConfig+0xaa>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df8:	d01f      	beq.n	8004e3a <TIM_Base_SetConfig+0xaa>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a36      	ldr	r2, [pc, #216]	@ (8004ed8 <TIM_Base_SetConfig+0x148>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01b      	beq.n	8004e3a <TIM_Base_SetConfig+0xaa>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a35      	ldr	r2, [pc, #212]	@ (8004edc <TIM_Base_SetConfig+0x14c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d017      	beq.n	8004e3a <TIM_Base_SetConfig+0xaa>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a34      	ldr	r2, [pc, #208]	@ (8004ee0 <TIM_Base_SetConfig+0x150>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <TIM_Base_SetConfig+0xaa>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a33      	ldr	r2, [pc, #204]	@ (8004ee4 <TIM_Base_SetConfig+0x154>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00f      	beq.n	8004e3a <TIM_Base_SetConfig+0xaa>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a33      	ldr	r2, [pc, #204]	@ (8004eec <TIM_Base_SetConfig+0x15c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00b      	beq.n	8004e3a <TIM_Base_SetConfig+0xaa>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a32      	ldr	r2, [pc, #200]	@ (8004ef0 <TIM_Base_SetConfig+0x160>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d007      	beq.n	8004e3a <TIM_Base_SetConfig+0xaa>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a31      	ldr	r2, [pc, #196]	@ (8004ef4 <TIM_Base_SetConfig+0x164>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d003      	beq.n	8004e3a <TIM_Base_SetConfig+0xaa>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2c      	ldr	r2, [pc, #176]	@ (8004ee8 <TIM_Base_SetConfig+0x158>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d108      	bne.n	8004e4c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a18      	ldr	r2, [pc, #96]	@ (8004ed4 <TIM_Base_SetConfig+0x144>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d013      	beq.n	8004ea0 <TIM_Base_SetConfig+0x110>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ee4 <TIM_Base_SetConfig+0x154>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00f      	beq.n	8004ea0 <TIM_Base_SetConfig+0x110>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a1a      	ldr	r2, [pc, #104]	@ (8004eec <TIM_Base_SetConfig+0x15c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d00b      	beq.n	8004ea0 <TIM_Base_SetConfig+0x110>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a19      	ldr	r2, [pc, #100]	@ (8004ef0 <TIM_Base_SetConfig+0x160>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d007      	beq.n	8004ea0 <TIM_Base_SetConfig+0x110>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a18      	ldr	r2, [pc, #96]	@ (8004ef4 <TIM_Base_SetConfig+0x164>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d003      	beq.n	8004ea0 <TIM_Base_SetConfig+0x110>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a13      	ldr	r2, [pc, #76]	@ (8004ee8 <TIM_Base_SetConfig+0x158>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d103      	bne.n	8004ea8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d105      	bne.n	8004ec6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f023 0201 	bic.w	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	611a      	str	r2, [r3, #16]
  }
}
 8004ec6:	bf00      	nop
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	40012c00 	.word	0x40012c00
 8004ed8:	40000400 	.word	0x40000400
 8004edc:	40000800 	.word	0x40000800
 8004ee0:	40000c00 	.word	0x40000c00
 8004ee4:	40013400 	.word	0x40013400
 8004ee8:	40015000 	.word	0x40015000
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40014400 	.word	0x40014400
 8004ef4:	40014800 	.word	0x40014800

08004ef8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	f023 0201 	bic.w	r2, r3, #1
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0303 	bic.w	r3, r3, #3
 8004f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f023 0302 	bic.w	r3, r3, #2
 8004f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a30      	ldr	r2, [pc, #192]	@ (8005014 <TIM_OC1_SetConfig+0x11c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d013      	beq.n	8004f80 <TIM_OC1_SetConfig+0x88>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a2f      	ldr	r2, [pc, #188]	@ (8005018 <TIM_OC1_SetConfig+0x120>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00f      	beq.n	8004f80 <TIM_OC1_SetConfig+0x88>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a2e      	ldr	r2, [pc, #184]	@ (800501c <TIM_OC1_SetConfig+0x124>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00b      	beq.n	8004f80 <TIM_OC1_SetConfig+0x88>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a2d      	ldr	r2, [pc, #180]	@ (8005020 <TIM_OC1_SetConfig+0x128>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d007      	beq.n	8004f80 <TIM_OC1_SetConfig+0x88>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a2c      	ldr	r2, [pc, #176]	@ (8005024 <TIM_OC1_SetConfig+0x12c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d003      	beq.n	8004f80 <TIM_OC1_SetConfig+0x88>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a2b      	ldr	r2, [pc, #172]	@ (8005028 <TIM_OC1_SetConfig+0x130>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d10c      	bne.n	8004f9a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 0308 	bic.w	r3, r3, #8
 8004f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f023 0304 	bic.w	r3, r3, #4
 8004f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005014 <TIM_OC1_SetConfig+0x11c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <TIM_OC1_SetConfig+0xd2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8005018 <TIM_OC1_SetConfig+0x120>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00f      	beq.n	8004fca <TIM_OC1_SetConfig+0xd2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a1b      	ldr	r2, [pc, #108]	@ (800501c <TIM_OC1_SetConfig+0x124>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00b      	beq.n	8004fca <TIM_OC1_SetConfig+0xd2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8005020 <TIM_OC1_SetConfig+0x128>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <TIM_OC1_SetConfig+0xd2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a19      	ldr	r2, [pc, #100]	@ (8005024 <TIM_OC1_SetConfig+0x12c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <TIM_OC1_SetConfig+0xd2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a18      	ldr	r2, [pc, #96]	@ (8005028 <TIM_OC1_SetConfig+0x130>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d111      	bne.n	8004fee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	621a      	str	r2, [r3, #32]
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40012c00 	.word	0x40012c00
 8005018:	40013400 	.word	0x40013400
 800501c:	40014000 	.word	0x40014000
 8005020:	40014400 	.word	0x40014400
 8005024:	40014800 	.word	0x40014800
 8005028:	40015000 	.word	0x40015000

0800502c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	f023 0210 	bic.w	r2, r3, #16
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800505a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800505e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	021b      	lsls	r3, r3, #8
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4313      	orrs	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0320 	bic.w	r3, r3, #32
 800507a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a2c      	ldr	r2, [pc, #176]	@ (800513c <TIM_OC2_SetConfig+0x110>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d007      	beq.n	80050a0 <TIM_OC2_SetConfig+0x74>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a2b      	ldr	r2, [pc, #172]	@ (8005140 <TIM_OC2_SetConfig+0x114>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_OC2_SetConfig+0x74>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a2a      	ldr	r2, [pc, #168]	@ (8005144 <TIM_OC2_SetConfig+0x118>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d10d      	bne.n	80050bc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a1f      	ldr	r2, [pc, #124]	@ (800513c <TIM_OC2_SetConfig+0x110>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d013      	beq.n	80050ec <TIM_OC2_SetConfig+0xc0>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005140 <TIM_OC2_SetConfig+0x114>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00f      	beq.n	80050ec <TIM_OC2_SetConfig+0xc0>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005148 <TIM_OC2_SetConfig+0x11c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00b      	beq.n	80050ec <TIM_OC2_SetConfig+0xc0>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a1d      	ldr	r2, [pc, #116]	@ (800514c <TIM_OC2_SetConfig+0x120>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d007      	beq.n	80050ec <TIM_OC2_SetConfig+0xc0>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a1c      	ldr	r2, [pc, #112]	@ (8005150 <TIM_OC2_SetConfig+0x124>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_OC2_SetConfig+0xc0>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a17      	ldr	r2, [pc, #92]	@ (8005144 <TIM_OC2_SetConfig+0x118>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d113      	bne.n	8005114 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4313      	orrs	r3, r2
 8005112:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	621a      	str	r2, [r3, #32]
}
 800512e:	bf00      	nop
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40012c00 	.word	0x40012c00
 8005140:	40013400 	.word	0x40013400
 8005144:	40015000 	.word	0x40015000
 8005148:	40014000 	.word	0x40014000
 800514c:	40014400 	.word	0x40014400
 8005150:	40014800 	.word	0x40014800

08005154 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a2b      	ldr	r2, [pc, #172]	@ (8005260 <TIM_OC3_SetConfig+0x10c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d007      	beq.n	80051c6 <TIM_OC3_SetConfig+0x72>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005264 <TIM_OC3_SetConfig+0x110>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d003      	beq.n	80051c6 <TIM_OC3_SetConfig+0x72>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a29      	ldr	r2, [pc, #164]	@ (8005268 <TIM_OC3_SetConfig+0x114>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d10d      	bne.n	80051e2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1e      	ldr	r2, [pc, #120]	@ (8005260 <TIM_OC3_SetConfig+0x10c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d013      	beq.n	8005212 <TIM_OC3_SetConfig+0xbe>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005264 <TIM_OC3_SetConfig+0x110>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00f      	beq.n	8005212 <TIM_OC3_SetConfig+0xbe>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a1d      	ldr	r2, [pc, #116]	@ (800526c <TIM_OC3_SetConfig+0x118>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00b      	beq.n	8005212 <TIM_OC3_SetConfig+0xbe>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005270 <TIM_OC3_SetConfig+0x11c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d007      	beq.n	8005212 <TIM_OC3_SetConfig+0xbe>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a1b      	ldr	r2, [pc, #108]	@ (8005274 <TIM_OC3_SetConfig+0x120>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d003      	beq.n	8005212 <TIM_OC3_SetConfig+0xbe>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a16      	ldr	r2, [pc, #88]	@ (8005268 <TIM_OC3_SetConfig+0x114>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d113      	bne.n	800523a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	621a      	str	r2, [r3, #32]
}
 8005254:	bf00      	nop
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	40012c00 	.word	0x40012c00
 8005264:	40013400 	.word	0x40013400
 8005268:	40015000 	.word	0x40015000
 800526c:	40014000 	.word	0x40014000
 8005270:	40014400 	.word	0x40014400
 8005274:	40014800 	.word	0x40014800

08005278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	031b      	lsls	r3, r3, #12
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005388 <TIM_OC4_SetConfig+0x110>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d007      	beq.n	80052ec <TIM_OC4_SetConfig+0x74>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a2b      	ldr	r2, [pc, #172]	@ (800538c <TIM_OC4_SetConfig+0x114>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d003      	beq.n	80052ec <TIM_OC4_SetConfig+0x74>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a2a      	ldr	r2, [pc, #168]	@ (8005390 <TIM_OC4_SetConfig+0x118>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d10d      	bne.n	8005308 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80052f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	031b      	lsls	r3, r3, #12
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005306:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a1f      	ldr	r2, [pc, #124]	@ (8005388 <TIM_OC4_SetConfig+0x110>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d013      	beq.n	8005338 <TIM_OC4_SetConfig+0xc0>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a1e      	ldr	r2, [pc, #120]	@ (800538c <TIM_OC4_SetConfig+0x114>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00f      	beq.n	8005338 <TIM_OC4_SetConfig+0xc0>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a1e      	ldr	r2, [pc, #120]	@ (8005394 <TIM_OC4_SetConfig+0x11c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d00b      	beq.n	8005338 <TIM_OC4_SetConfig+0xc0>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a1d      	ldr	r2, [pc, #116]	@ (8005398 <TIM_OC4_SetConfig+0x120>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d007      	beq.n	8005338 <TIM_OC4_SetConfig+0xc0>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a1c      	ldr	r2, [pc, #112]	@ (800539c <TIM_OC4_SetConfig+0x124>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d003      	beq.n	8005338 <TIM_OC4_SetConfig+0xc0>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a17      	ldr	r2, [pc, #92]	@ (8005390 <TIM_OC4_SetConfig+0x118>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d113      	bne.n	8005360 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800533e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005346:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	019b      	lsls	r3, r3, #6
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	019b      	lsls	r3, r3, #6
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	621a      	str	r2, [r3, #32]
}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40012c00 	.word	0x40012c00
 800538c:	40013400 	.word	0x40013400
 8005390:	40015000 	.word	0x40015000
 8005394:	40014000 	.word	0x40014000
 8005398:	40014400 	.word	0x40014400
 800539c:	40014800 	.word	0x40014800

080053a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80053e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	041b      	lsls	r3, r3, #16
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a19      	ldr	r2, [pc, #100]	@ (800545c <TIM_OC5_SetConfig+0xbc>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d013      	beq.n	8005422 <TIM_OC5_SetConfig+0x82>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a18      	ldr	r2, [pc, #96]	@ (8005460 <TIM_OC5_SetConfig+0xc0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00f      	beq.n	8005422 <TIM_OC5_SetConfig+0x82>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a17      	ldr	r2, [pc, #92]	@ (8005464 <TIM_OC5_SetConfig+0xc4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00b      	beq.n	8005422 <TIM_OC5_SetConfig+0x82>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a16      	ldr	r2, [pc, #88]	@ (8005468 <TIM_OC5_SetConfig+0xc8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d007      	beq.n	8005422 <TIM_OC5_SetConfig+0x82>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a15      	ldr	r2, [pc, #84]	@ (800546c <TIM_OC5_SetConfig+0xcc>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d003      	beq.n	8005422 <TIM_OC5_SetConfig+0x82>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a14      	ldr	r2, [pc, #80]	@ (8005470 <TIM_OC5_SetConfig+0xd0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d109      	bne.n	8005436 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005428:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	021b      	lsls	r3, r3, #8
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	4313      	orrs	r3, r2
 8005434:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	621a      	str	r2, [r3, #32]
}
 8005450:	bf00      	nop
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	40012c00 	.word	0x40012c00
 8005460:	40013400 	.word	0x40013400
 8005464:	40014000 	.word	0x40014000
 8005468:	40014400 	.word	0x40014400
 800546c:	40014800 	.word	0x40014800
 8005470:	40015000 	.word	0x40015000

08005474 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	051b      	lsls	r3, r3, #20
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005534 <TIM_OC6_SetConfig+0xc0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d013      	beq.n	80054f8 <TIM_OC6_SetConfig+0x84>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a19      	ldr	r2, [pc, #100]	@ (8005538 <TIM_OC6_SetConfig+0xc4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00f      	beq.n	80054f8 <TIM_OC6_SetConfig+0x84>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a18      	ldr	r2, [pc, #96]	@ (800553c <TIM_OC6_SetConfig+0xc8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00b      	beq.n	80054f8 <TIM_OC6_SetConfig+0x84>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a17      	ldr	r2, [pc, #92]	@ (8005540 <TIM_OC6_SetConfig+0xcc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d007      	beq.n	80054f8 <TIM_OC6_SetConfig+0x84>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a16      	ldr	r2, [pc, #88]	@ (8005544 <TIM_OC6_SetConfig+0xd0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d003      	beq.n	80054f8 <TIM_OC6_SetConfig+0x84>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a15      	ldr	r2, [pc, #84]	@ (8005548 <TIM_OC6_SetConfig+0xd4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d109      	bne.n	800550c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	029b      	lsls	r3, r3, #10
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	621a      	str	r2, [r3, #32]
}
 8005526:	bf00      	nop
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40012c00 	.word	0x40012c00
 8005538:	40013400 	.word	0x40013400
 800553c:	40014000 	.word	0x40014000
 8005540:	40014400 	.word	0x40014400
 8005544:	40014800 	.word	0x40014800
 8005548:	40015000 	.word	0x40015000

0800554c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005568:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800556c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	4313      	orrs	r3, r2
 8005576:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800557e:	f023 0307 	bic.w	r3, r3, #7
 8005582:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	4a56      	ldr	r2, [pc, #344]	@ (80056f4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	f000 80a2 	beq.w	80056e6 <TIM_SlaveTimer_SetConfig+0x19a>
 80055a2:	4a54      	ldr	r2, [pc, #336]	@ (80056f4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	f200 809b 	bhi.w	80056e0 <TIM_SlaveTimer_SetConfig+0x194>
 80055aa:	4a53      	ldr	r2, [pc, #332]	@ (80056f8 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	f000 809a 	beq.w	80056e6 <TIM_SlaveTimer_SetConfig+0x19a>
 80055b2:	4a51      	ldr	r2, [pc, #324]	@ (80056f8 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	f200 8093 	bhi.w	80056e0 <TIM_SlaveTimer_SetConfig+0x194>
 80055ba:	4a50      	ldr	r2, [pc, #320]	@ (80056fc <TIM_SlaveTimer_SetConfig+0x1b0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	f000 8092 	beq.w	80056e6 <TIM_SlaveTimer_SetConfig+0x19a>
 80055c2:	4a4e      	ldr	r2, [pc, #312]	@ (80056fc <TIM_SlaveTimer_SetConfig+0x1b0>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	f200 808b 	bhi.w	80056e0 <TIM_SlaveTimer_SetConfig+0x194>
 80055ca:	4a4d      	ldr	r2, [pc, #308]	@ (8005700 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	f000 808a 	beq.w	80056e6 <TIM_SlaveTimer_SetConfig+0x19a>
 80055d2:	4a4b      	ldr	r2, [pc, #300]	@ (8005700 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	f200 8083 	bhi.w	80056e0 <TIM_SlaveTimer_SetConfig+0x194>
 80055da:	4a4a      	ldr	r2, [pc, #296]	@ (8005704 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	f000 8082 	beq.w	80056e6 <TIM_SlaveTimer_SetConfig+0x19a>
 80055e2:	4a48      	ldr	r2, [pc, #288]	@ (8005704 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d87b      	bhi.n	80056e0 <TIM_SlaveTimer_SetConfig+0x194>
 80055e8:	4a47      	ldr	r2, [pc, #284]	@ (8005708 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d07b      	beq.n	80056e6 <TIM_SlaveTimer_SetConfig+0x19a>
 80055ee:	4a46      	ldr	r2, [pc, #280]	@ (8005708 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d875      	bhi.n	80056e0 <TIM_SlaveTimer_SetConfig+0x194>
 80055f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80055f8:	d075      	beq.n	80056e6 <TIM_SlaveTimer_SetConfig+0x19a>
 80055fa:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80055fe:	d86f      	bhi.n	80056e0 <TIM_SlaveTimer_SetConfig+0x194>
 8005600:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005604:	d06f      	beq.n	80056e6 <TIM_SlaveTimer_SetConfig+0x19a>
 8005606:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800560a:	d869      	bhi.n	80056e0 <TIM_SlaveTimer_SetConfig+0x194>
 800560c:	2b70      	cmp	r3, #112	@ 0x70
 800560e:	d01a      	beq.n	8005646 <TIM_SlaveTimer_SetConfig+0xfa>
 8005610:	2b70      	cmp	r3, #112	@ 0x70
 8005612:	d865      	bhi.n	80056e0 <TIM_SlaveTimer_SetConfig+0x194>
 8005614:	2b60      	cmp	r3, #96	@ 0x60
 8005616:	d059      	beq.n	80056cc <TIM_SlaveTimer_SetConfig+0x180>
 8005618:	2b60      	cmp	r3, #96	@ 0x60
 800561a:	d861      	bhi.n	80056e0 <TIM_SlaveTimer_SetConfig+0x194>
 800561c:	2b50      	cmp	r3, #80	@ 0x50
 800561e:	d04b      	beq.n	80056b8 <TIM_SlaveTimer_SetConfig+0x16c>
 8005620:	2b50      	cmp	r3, #80	@ 0x50
 8005622:	d85d      	bhi.n	80056e0 <TIM_SlaveTimer_SetConfig+0x194>
 8005624:	2b40      	cmp	r3, #64	@ 0x40
 8005626:	d019      	beq.n	800565c <TIM_SlaveTimer_SetConfig+0x110>
 8005628:	2b40      	cmp	r3, #64	@ 0x40
 800562a:	d859      	bhi.n	80056e0 <TIM_SlaveTimer_SetConfig+0x194>
 800562c:	2b30      	cmp	r3, #48	@ 0x30
 800562e:	d05a      	beq.n	80056e6 <TIM_SlaveTimer_SetConfig+0x19a>
 8005630:	2b30      	cmp	r3, #48	@ 0x30
 8005632:	d855      	bhi.n	80056e0 <TIM_SlaveTimer_SetConfig+0x194>
 8005634:	2b20      	cmp	r3, #32
 8005636:	d056      	beq.n	80056e6 <TIM_SlaveTimer_SetConfig+0x19a>
 8005638:	2b20      	cmp	r3, #32
 800563a:	d851      	bhi.n	80056e0 <TIM_SlaveTimer_SetConfig+0x194>
 800563c:	2b00      	cmp	r3, #0
 800563e:	d052      	beq.n	80056e6 <TIM_SlaveTimer_SetConfig+0x19a>
 8005640:	2b10      	cmp	r3, #16
 8005642:	d050      	beq.n	80056e6 <TIM_SlaveTimer_SetConfig+0x19a>
 8005644:	e04c      	b.n	80056e0 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005656:	f000 f8d5 	bl	8005804 <TIM_ETR_SetConfig>
      break;
 800565a:	e045      	b.n	80056e8 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b05      	cmp	r3, #5
 8005662:	d004      	beq.n	800566e <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005668:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 800566c:	d101      	bne.n	8005672 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e03b      	b.n	80056ea <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6a1a      	ldr	r2, [r3, #32]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0201 	bic.w	r2, r2, #1
 8005688:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005698:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	621a      	str	r2, [r3, #32]
      break;
 80056b6:	e017      	b.n	80056e8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c4:	461a      	mov	r2, r3
 80056c6:	f000 f821 	bl	800570c <TIM_TI1_ConfigInputStage>
      break;
 80056ca:	e00d      	b.n	80056e8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056d8:	461a      	mov	r2, r3
 80056da:	f000 f846 	bl	800576a <TIM_TI2_ConfigInputStage>
      break;
 80056de:	e003      	b.n	80056e8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	75fb      	strb	r3, [r7, #23]
      break;
 80056e4:	e000      	b.n	80056e8 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 80056e6:	bf00      	nop
  }

  return status;
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	00100070 	.word	0x00100070
 80056f8:	00100060 	.word	0x00100060
 80056fc:	00100050 	.word	0x00100050
 8005700:	00100040 	.word	0x00100040
 8005704:	00100030 	.word	0x00100030
 8005708:	00100020 	.word	0x00100020

0800570c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	f023 0201 	bic.w	r2, r3, #1
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4313      	orrs	r3, r2
 8005740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f023 030a 	bic.w	r3, r3, #10
 8005748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	621a      	str	r2, [r3, #32]
}
 800575e:	bf00      	nop
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800576a:	b480      	push	{r7}
 800576c:	b087      	sub	sp, #28
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	f023 0210 	bic.w	r2, r3, #16
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005794:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	031b      	lsls	r3, r3, #12
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b085      	sub	sp, #20
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80057e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f043 0307 	orr.w	r3, r3, #7
 80057f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	609a      	str	r2, [r3, #8]
}
 80057f8:	bf00      	nop
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
 8005810:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800581e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	021a      	lsls	r2, r3, #8
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	431a      	orrs	r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4313      	orrs	r3, r2
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	609a      	str	r2, [r3, #8]
}
 8005838:	bf00      	nop
 800583a:	371c      	adds	r7, #28
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f003 031f 	and.w	r3, r3, #31
 8005856:	2201      	movs	r2, #1
 8005858:	fa02 f303 	lsl.w	r3, r2, r3
 800585c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a1a      	ldr	r2, [r3, #32]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	43db      	mvns	r3, r3
 8005866:	401a      	ands	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6a1a      	ldr	r2, [r3, #32]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	fa01 f303 	lsl.w	r3, r1, r3
 800587c:	431a      	orrs	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	621a      	str	r2, [r3, #32]
}
 8005882:	bf00      	nop
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
	...

08005890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e074      	b.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a34      	ldr	r2, [pc, #208]	@ (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d009      	beq.n	80058e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a33      	ldr	r2, [pc, #204]	@ (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d004      	beq.n	80058e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a31      	ldr	r2, [pc, #196]	@ (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d108      	bne.n	80058f8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80058fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a21      	ldr	r2, [pc, #132]	@ (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d022      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005928:	d01d      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1f      	ldr	r2, [pc, #124]	@ (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d018      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1d      	ldr	r2, [pc, #116]	@ (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d013      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a1c      	ldr	r2, [pc, #112]	@ (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00e      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a15      	ldr	r2, [pc, #84]	@ (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d009      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a18      	ldr	r2, [pc, #96]	@ (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d004      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a11      	ldr	r2, [pc, #68]	@ (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d10c      	bne.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800596c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	4313      	orrs	r3, r2
 8005976:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40012c00 	.word	0x40012c00
 80059a4:	40013400 	.word	0x40013400
 80059a8:	40015000 	.word	0x40015000
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40000800 	.word	0x40000800
 80059b4:	40000c00 	.word	0x40000c00
 80059b8:	40014000 	.word	0x40014000

080059bc <srand>:
 80059bc:	b538      	push	{r3, r4, r5, lr}
 80059be:	4b10      	ldr	r3, [pc, #64]	@ (8005a00 <srand+0x44>)
 80059c0:	681d      	ldr	r5, [r3, #0]
 80059c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80059c4:	4604      	mov	r4, r0
 80059c6:	b9b3      	cbnz	r3, 80059f6 <srand+0x3a>
 80059c8:	2018      	movs	r0, #24
 80059ca:	f000 fb3f 	bl	800604c <malloc>
 80059ce:	4602      	mov	r2, r0
 80059d0:	6328      	str	r0, [r5, #48]	@ 0x30
 80059d2:	b920      	cbnz	r0, 80059de <srand+0x22>
 80059d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a04 <srand+0x48>)
 80059d6:	480c      	ldr	r0, [pc, #48]	@ (8005a08 <srand+0x4c>)
 80059d8:	2146      	movs	r1, #70	@ 0x46
 80059da:	f000 facf 	bl	8005f7c <__assert_func>
 80059de:	490b      	ldr	r1, [pc, #44]	@ (8005a0c <srand+0x50>)
 80059e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a10 <srand+0x54>)
 80059e2:	e9c0 1300 	strd	r1, r3, [r0]
 80059e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a14 <srand+0x58>)
 80059e8:	6083      	str	r3, [r0, #8]
 80059ea:	230b      	movs	r3, #11
 80059ec:	8183      	strh	r3, [r0, #12]
 80059ee:	2100      	movs	r1, #0
 80059f0:	2001      	movs	r0, #1
 80059f2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80059f6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80059f8:	2200      	movs	r2, #0
 80059fa:	611c      	str	r4, [r3, #16]
 80059fc:	615a      	str	r2, [r3, #20]
 80059fe:	bd38      	pop	{r3, r4, r5, pc}
 8005a00:	2000277c 	.word	0x2000277c
 8005a04:	08006ff4 	.word	0x08006ff4
 8005a08:	0800700b 	.word	0x0800700b
 8005a0c:	abcd330e 	.word	0xabcd330e
 8005a10:	e66d1234 	.word	0xe66d1234
 8005a14:	0005deec 	.word	0x0005deec

08005a18 <rand>:
 8005a18:	4b16      	ldr	r3, [pc, #88]	@ (8005a74 <rand+0x5c>)
 8005a1a:	b510      	push	{r4, lr}
 8005a1c:	681c      	ldr	r4, [r3, #0]
 8005a1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005a20:	b9b3      	cbnz	r3, 8005a50 <rand+0x38>
 8005a22:	2018      	movs	r0, #24
 8005a24:	f000 fb12 	bl	800604c <malloc>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	6320      	str	r0, [r4, #48]	@ 0x30
 8005a2c:	b920      	cbnz	r0, 8005a38 <rand+0x20>
 8005a2e:	4b12      	ldr	r3, [pc, #72]	@ (8005a78 <rand+0x60>)
 8005a30:	4812      	ldr	r0, [pc, #72]	@ (8005a7c <rand+0x64>)
 8005a32:	2152      	movs	r1, #82	@ 0x52
 8005a34:	f000 faa2 	bl	8005f7c <__assert_func>
 8005a38:	4911      	ldr	r1, [pc, #68]	@ (8005a80 <rand+0x68>)
 8005a3a:	4b12      	ldr	r3, [pc, #72]	@ (8005a84 <rand+0x6c>)
 8005a3c:	e9c0 1300 	strd	r1, r3, [r0]
 8005a40:	4b11      	ldr	r3, [pc, #68]	@ (8005a88 <rand+0x70>)
 8005a42:	6083      	str	r3, [r0, #8]
 8005a44:	230b      	movs	r3, #11
 8005a46:	8183      	strh	r3, [r0, #12]
 8005a48:	2100      	movs	r1, #0
 8005a4a:	2001      	movs	r0, #1
 8005a4c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005a50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005a52:	480e      	ldr	r0, [pc, #56]	@ (8005a8c <rand+0x74>)
 8005a54:	690b      	ldr	r3, [r1, #16]
 8005a56:	694c      	ldr	r4, [r1, #20]
 8005a58:	4a0d      	ldr	r2, [pc, #52]	@ (8005a90 <rand+0x78>)
 8005a5a:	4358      	muls	r0, r3
 8005a5c:	fb02 0004 	mla	r0, r2, r4, r0
 8005a60:	fba3 3202 	umull	r3, r2, r3, r2
 8005a64:	3301      	adds	r3, #1
 8005a66:	eb40 0002 	adc.w	r0, r0, r2
 8005a6a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005a6e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005a72:	bd10      	pop	{r4, pc}
 8005a74:	2000277c 	.word	0x2000277c
 8005a78:	08006ff4 	.word	0x08006ff4
 8005a7c:	0800700b 	.word	0x0800700b
 8005a80:	abcd330e 	.word	0xabcd330e
 8005a84:	e66d1234 	.word	0xe66d1234
 8005a88:	0005deec 	.word	0x0005deec
 8005a8c:	5851f42d 	.word	0x5851f42d
 8005a90:	4c957f2d 	.word	0x4c957f2d

08005a94 <std>:
 8005a94:	2300      	movs	r3, #0
 8005a96:	b510      	push	{r4, lr}
 8005a98:	4604      	mov	r4, r0
 8005a9a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005aa2:	6083      	str	r3, [r0, #8]
 8005aa4:	8181      	strh	r1, [r0, #12]
 8005aa6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005aa8:	81c2      	strh	r2, [r0, #14]
 8005aaa:	6183      	str	r3, [r0, #24]
 8005aac:	4619      	mov	r1, r3
 8005aae:	2208      	movs	r2, #8
 8005ab0:	305c      	adds	r0, #92	@ 0x5c
 8005ab2:	f000 f9e7 	bl	8005e84 <memset>
 8005ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8005aec <std+0x58>)
 8005ab8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005aba:	4b0d      	ldr	r3, [pc, #52]	@ (8005af0 <std+0x5c>)
 8005abc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005abe:	4b0d      	ldr	r3, [pc, #52]	@ (8005af4 <std+0x60>)
 8005ac0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8005af8 <std+0x64>)
 8005ac4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8005afc <std+0x68>)
 8005ac8:	6224      	str	r4, [r4, #32]
 8005aca:	429c      	cmp	r4, r3
 8005acc:	d006      	beq.n	8005adc <std+0x48>
 8005ace:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ad2:	4294      	cmp	r4, r2
 8005ad4:	d002      	beq.n	8005adc <std+0x48>
 8005ad6:	33d0      	adds	r3, #208	@ 0xd0
 8005ad8:	429c      	cmp	r4, r3
 8005ada:	d105      	bne.n	8005ae8 <std+0x54>
 8005adc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ae4:	f000 ba46 	b.w	8005f74 <__retarget_lock_init_recursive>
 8005ae8:	bd10      	pop	{r4, pc}
 8005aea:	bf00      	nop
 8005aec:	08005cd5 	.word	0x08005cd5
 8005af0:	08005cf7 	.word	0x08005cf7
 8005af4:	08005d2f 	.word	0x08005d2f
 8005af8:	08005d53 	.word	0x08005d53
 8005afc:	20002a54 	.word	0x20002a54

08005b00 <stdio_exit_handler>:
 8005b00:	4a02      	ldr	r2, [pc, #8]	@ (8005b0c <stdio_exit_handler+0xc>)
 8005b02:	4903      	ldr	r1, [pc, #12]	@ (8005b10 <stdio_exit_handler+0x10>)
 8005b04:	4803      	ldr	r0, [pc, #12]	@ (8005b14 <stdio_exit_handler+0x14>)
 8005b06:	f000 b869 	b.w	8005bdc <_fwalk_sglue>
 8005b0a:	bf00      	nop
 8005b0c:	20002770 	.word	0x20002770
 8005b10:	080062c1 	.word	0x080062c1
 8005b14:	20002780 	.word	0x20002780

08005b18 <cleanup_stdio>:
 8005b18:	6841      	ldr	r1, [r0, #4]
 8005b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b4c <cleanup_stdio+0x34>)
 8005b1c:	4299      	cmp	r1, r3
 8005b1e:	b510      	push	{r4, lr}
 8005b20:	4604      	mov	r4, r0
 8005b22:	d001      	beq.n	8005b28 <cleanup_stdio+0x10>
 8005b24:	f000 fbcc 	bl	80062c0 <_fflush_r>
 8005b28:	68a1      	ldr	r1, [r4, #8]
 8005b2a:	4b09      	ldr	r3, [pc, #36]	@ (8005b50 <cleanup_stdio+0x38>)
 8005b2c:	4299      	cmp	r1, r3
 8005b2e:	d002      	beq.n	8005b36 <cleanup_stdio+0x1e>
 8005b30:	4620      	mov	r0, r4
 8005b32:	f000 fbc5 	bl	80062c0 <_fflush_r>
 8005b36:	68e1      	ldr	r1, [r4, #12]
 8005b38:	4b06      	ldr	r3, [pc, #24]	@ (8005b54 <cleanup_stdio+0x3c>)
 8005b3a:	4299      	cmp	r1, r3
 8005b3c:	d004      	beq.n	8005b48 <cleanup_stdio+0x30>
 8005b3e:	4620      	mov	r0, r4
 8005b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b44:	f000 bbbc 	b.w	80062c0 <_fflush_r>
 8005b48:	bd10      	pop	{r4, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20002a54 	.word	0x20002a54
 8005b50:	20002abc 	.word	0x20002abc
 8005b54:	20002b24 	.word	0x20002b24

08005b58 <global_stdio_init.part.0>:
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b88 <global_stdio_init.part.0+0x30>)
 8005b5c:	4c0b      	ldr	r4, [pc, #44]	@ (8005b8c <global_stdio_init.part.0+0x34>)
 8005b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8005b90 <global_stdio_init.part.0+0x38>)
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	4620      	mov	r0, r4
 8005b64:	2200      	movs	r2, #0
 8005b66:	2104      	movs	r1, #4
 8005b68:	f7ff ff94 	bl	8005a94 <std>
 8005b6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b70:	2201      	movs	r2, #1
 8005b72:	2109      	movs	r1, #9
 8005b74:	f7ff ff8e 	bl	8005a94 <std>
 8005b78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b82:	2112      	movs	r1, #18
 8005b84:	f7ff bf86 	b.w	8005a94 <std>
 8005b88:	20002b8c 	.word	0x20002b8c
 8005b8c:	20002a54 	.word	0x20002a54
 8005b90:	08005b01 	.word	0x08005b01

08005b94 <__sfp_lock_acquire>:
 8005b94:	4801      	ldr	r0, [pc, #4]	@ (8005b9c <__sfp_lock_acquire+0x8>)
 8005b96:	f000 b9ee 	b.w	8005f76 <__retarget_lock_acquire_recursive>
 8005b9a:	bf00      	nop
 8005b9c:	20002b95 	.word	0x20002b95

08005ba0 <__sfp_lock_release>:
 8005ba0:	4801      	ldr	r0, [pc, #4]	@ (8005ba8 <__sfp_lock_release+0x8>)
 8005ba2:	f000 b9e9 	b.w	8005f78 <__retarget_lock_release_recursive>
 8005ba6:	bf00      	nop
 8005ba8:	20002b95 	.word	0x20002b95

08005bac <__sinit>:
 8005bac:	b510      	push	{r4, lr}
 8005bae:	4604      	mov	r4, r0
 8005bb0:	f7ff fff0 	bl	8005b94 <__sfp_lock_acquire>
 8005bb4:	6a23      	ldr	r3, [r4, #32]
 8005bb6:	b11b      	cbz	r3, 8005bc0 <__sinit+0x14>
 8005bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bbc:	f7ff bff0 	b.w	8005ba0 <__sfp_lock_release>
 8005bc0:	4b04      	ldr	r3, [pc, #16]	@ (8005bd4 <__sinit+0x28>)
 8005bc2:	6223      	str	r3, [r4, #32]
 8005bc4:	4b04      	ldr	r3, [pc, #16]	@ (8005bd8 <__sinit+0x2c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f5      	bne.n	8005bb8 <__sinit+0xc>
 8005bcc:	f7ff ffc4 	bl	8005b58 <global_stdio_init.part.0>
 8005bd0:	e7f2      	b.n	8005bb8 <__sinit+0xc>
 8005bd2:	bf00      	nop
 8005bd4:	08005b19 	.word	0x08005b19
 8005bd8:	20002b8c 	.word	0x20002b8c

08005bdc <_fwalk_sglue>:
 8005bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005be0:	4607      	mov	r7, r0
 8005be2:	4688      	mov	r8, r1
 8005be4:	4614      	mov	r4, r2
 8005be6:	2600      	movs	r6, #0
 8005be8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bec:	f1b9 0901 	subs.w	r9, r9, #1
 8005bf0:	d505      	bpl.n	8005bfe <_fwalk_sglue+0x22>
 8005bf2:	6824      	ldr	r4, [r4, #0]
 8005bf4:	2c00      	cmp	r4, #0
 8005bf6:	d1f7      	bne.n	8005be8 <_fwalk_sglue+0xc>
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bfe:	89ab      	ldrh	r3, [r5, #12]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d907      	bls.n	8005c14 <_fwalk_sglue+0x38>
 8005c04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	d003      	beq.n	8005c14 <_fwalk_sglue+0x38>
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	4638      	mov	r0, r7
 8005c10:	47c0      	blx	r8
 8005c12:	4306      	orrs	r6, r0
 8005c14:	3568      	adds	r5, #104	@ 0x68
 8005c16:	e7e9      	b.n	8005bec <_fwalk_sglue+0x10>

08005c18 <_puts_r>:
 8005c18:	6a03      	ldr	r3, [r0, #32]
 8005c1a:	b570      	push	{r4, r5, r6, lr}
 8005c1c:	6884      	ldr	r4, [r0, #8]
 8005c1e:	4605      	mov	r5, r0
 8005c20:	460e      	mov	r6, r1
 8005c22:	b90b      	cbnz	r3, 8005c28 <_puts_r+0x10>
 8005c24:	f7ff ffc2 	bl	8005bac <__sinit>
 8005c28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c2a:	07db      	lsls	r3, r3, #31
 8005c2c:	d405      	bmi.n	8005c3a <_puts_r+0x22>
 8005c2e:	89a3      	ldrh	r3, [r4, #12]
 8005c30:	0598      	lsls	r0, r3, #22
 8005c32:	d402      	bmi.n	8005c3a <_puts_r+0x22>
 8005c34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c36:	f000 f99e 	bl	8005f76 <__retarget_lock_acquire_recursive>
 8005c3a:	89a3      	ldrh	r3, [r4, #12]
 8005c3c:	0719      	lsls	r1, r3, #28
 8005c3e:	d502      	bpl.n	8005c46 <_puts_r+0x2e>
 8005c40:	6923      	ldr	r3, [r4, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d135      	bne.n	8005cb2 <_puts_r+0x9a>
 8005c46:	4621      	mov	r1, r4
 8005c48:	4628      	mov	r0, r5
 8005c4a:	f000 f8c5 	bl	8005dd8 <__swsetup_r>
 8005c4e:	b380      	cbz	r0, 8005cb2 <_puts_r+0x9a>
 8005c50:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005c54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c56:	07da      	lsls	r2, r3, #31
 8005c58:	d405      	bmi.n	8005c66 <_puts_r+0x4e>
 8005c5a:	89a3      	ldrh	r3, [r4, #12]
 8005c5c:	059b      	lsls	r3, r3, #22
 8005c5e:	d402      	bmi.n	8005c66 <_puts_r+0x4e>
 8005c60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c62:	f000 f989 	bl	8005f78 <__retarget_lock_release_recursive>
 8005c66:	4628      	mov	r0, r5
 8005c68:	bd70      	pop	{r4, r5, r6, pc}
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	da04      	bge.n	8005c78 <_puts_r+0x60>
 8005c6e:	69a2      	ldr	r2, [r4, #24]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	dc17      	bgt.n	8005ca4 <_puts_r+0x8c>
 8005c74:	290a      	cmp	r1, #10
 8005c76:	d015      	beq.n	8005ca4 <_puts_r+0x8c>
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	6022      	str	r2, [r4, #0]
 8005c7e:	7019      	strb	r1, [r3, #0]
 8005c80:	68a3      	ldr	r3, [r4, #8]
 8005c82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c86:	3b01      	subs	r3, #1
 8005c88:	60a3      	str	r3, [r4, #8]
 8005c8a:	2900      	cmp	r1, #0
 8005c8c:	d1ed      	bne.n	8005c6a <_puts_r+0x52>
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	da11      	bge.n	8005cb6 <_puts_r+0x9e>
 8005c92:	4622      	mov	r2, r4
 8005c94:	210a      	movs	r1, #10
 8005c96:	4628      	mov	r0, r5
 8005c98:	f000 f85f 	bl	8005d5a <__swbuf_r>
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d0d7      	beq.n	8005c50 <_puts_r+0x38>
 8005ca0:	250a      	movs	r5, #10
 8005ca2:	e7d7      	b.n	8005c54 <_puts_r+0x3c>
 8005ca4:	4622      	mov	r2, r4
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 f857 	bl	8005d5a <__swbuf_r>
 8005cac:	3001      	adds	r0, #1
 8005cae:	d1e7      	bne.n	8005c80 <_puts_r+0x68>
 8005cb0:	e7ce      	b.n	8005c50 <_puts_r+0x38>
 8005cb2:	3e01      	subs	r6, #1
 8005cb4:	e7e4      	b.n	8005c80 <_puts_r+0x68>
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	6022      	str	r2, [r4, #0]
 8005cbc:	220a      	movs	r2, #10
 8005cbe:	701a      	strb	r2, [r3, #0]
 8005cc0:	e7ee      	b.n	8005ca0 <_puts_r+0x88>
	...

08005cc4 <puts>:
 8005cc4:	4b02      	ldr	r3, [pc, #8]	@ (8005cd0 <puts+0xc>)
 8005cc6:	4601      	mov	r1, r0
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	f7ff bfa5 	b.w	8005c18 <_puts_r>
 8005cce:	bf00      	nop
 8005cd0:	2000277c 	.word	0x2000277c

08005cd4 <__sread>:
 8005cd4:	b510      	push	{r4, lr}
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cdc:	f000 f8fc 	bl	8005ed8 <_read_r>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	bfab      	itete	ge
 8005ce4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ce6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ce8:	181b      	addge	r3, r3, r0
 8005cea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005cee:	bfac      	ite	ge
 8005cf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005cf2:	81a3      	strhlt	r3, [r4, #12]
 8005cf4:	bd10      	pop	{r4, pc}

08005cf6 <__swrite>:
 8005cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cfa:	461f      	mov	r7, r3
 8005cfc:	898b      	ldrh	r3, [r1, #12]
 8005cfe:	05db      	lsls	r3, r3, #23
 8005d00:	4605      	mov	r5, r0
 8005d02:	460c      	mov	r4, r1
 8005d04:	4616      	mov	r6, r2
 8005d06:	d505      	bpl.n	8005d14 <__swrite+0x1e>
 8005d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f000 f8d0 	bl	8005eb4 <_lseek_r>
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d1e:	81a3      	strh	r3, [r4, #12]
 8005d20:	4632      	mov	r2, r6
 8005d22:	463b      	mov	r3, r7
 8005d24:	4628      	mov	r0, r5
 8005d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d2a:	f000 b8e7 	b.w	8005efc <_write_r>

08005d2e <__sseek>:
 8005d2e:	b510      	push	{r4, lr}
 8005d30:	460c      	mov	r4, r1
 8005d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d36:	f000 f8bd 	bl	8005eb4 <_lseek_r>
 8005d3a:	1c43      	adds	r3, r0, #1
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	bf15      	itete	ne
 8005d40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d4a:	81a3      	strheq	r3, [r4, #12]
 8005d4c:	bf18      	it	ne
 8005d4e:	81a3      	strhne	r3, [r4, #12]
 8005d50:	bd10      	pop	{r4, pc}

08005d52 <__sclose>:
 8005d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d56:	f000 b89d 	b.w	8005e94 <_close_r>

08005d5a <__swbuf_r>:
 8005d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5c:	460e      	mov	r6, r1
 8005d5e:	4614      	mov	r4, r2
 8005d60:	4605      	mov	r5, r0
 8005d62:	b118      	cbz	r0, 8005d6c <__swbuf_r+0x12>
 8005d64:	6a03      	ldr	r3, [r0, #32]
 8005d66:	b90b      	cbnz	r3, 8005d6c <__swbuf_r+0x12>
 8005d68:	f7ff ff20 	bl	8005bac <__sinit>
 8005d6c:	69a3      	ldr	r3, [r4, #24]
 8005d6e:	60a3      	str	r3, [r4, #8]
 8005d70:	89a3      	ldrh	r3, [r4, #12]
 8005d72:	071a      	lsls	r2, r3, #28
 8005d74:	d501      	bpl.n	8005d7a <__swbuf_r+0x20>
 8005d76:	6923      	ldr	r3, [r4, #16]
 8005d78:	b943      	cbnz	r3, 8005d8c <__swbuf_r+0x32>
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	f000 f82b 	bl	8005dd8 <__swsetup_r>
 8005d82:	b118      	cbz	r0, 8005d8c <__swbuf_r+0x32>
 8005d84:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005d88:	4638      	mov	r0, r7
 8005d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	6922      	ldr	r2, [r4, #16]
 8005d90:	1a98      	subs	r0, r3, r2
 8005d92:	6963      	ldr	r3, [r4, #20]
 8005d94:	b2f6      	uxtb	r6, r6
 8005d96:	4283      	cmp	r3, r0
 8005d98:	4637      	mov	r7, r6
 8005d9a:	dc05      	bgt.n	8005da8 <__swbuf_r+0x4e>
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f000 fa8e 	bl	80062c0 <_fflush_r>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d1ed      	bne.n	8005d84 <__swbuf_r+0x2a>
 8005da8:	68a3      	ldr	r3, [r4, #8]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	60a3      	str	r3, [r4, #8]
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	6022      	str	r2, [r4, #0]
 8005db4:	701e      	strb	r6, [r3, #0]
 8005db6:	6962      	ldr	r2, [r4, #20]
 8005db8:	1c43      	adds	r3, r0, #1
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d004      	beq.n	8005dc8 <__swbuf_r+0x6e>
 8005dbe:	89a3      	ldrh	r3, [r4, #12]
 8005dc0:	07db      	lsls	r3, r3, #31
 8005dc2:	d5e1      	bpl.n	8005d88 <__swbuf_r+0x2e>
 8005dc4:	2e0a      	cmp	r6, #10
 8005dc6:	d1df      	bne.n	8005d88 <__swbuf_r+0x2e>
 8005dc8:	4621      	mov	r1, r4
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f000 fa78 	bl	80062c0 <_fflush_r>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d0d9      	beq.n	8005d88 <__swbuf_r+0x2e>
 8005dd4:	e7d6      	b.n	8005d84 <__swbuf_r+0x2a>
	...

08005dd8 <__swsetup_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4b29      	ldr	r3, [pc, #164]	@ (8005e80 <__swsetup_r+0xa8>)
 8005ddc:	4605      	mov	r5, r0
 8005dde:	6818      	ldr	r0, [r3, #0]
 8005de0:	460c      	mov	r4, r1
 8005de2:	b118      	cbz	r0, 8005dec <__swsetup_r+0x14>
 8005de4:	6a03      	ldr	r3, [r0, #32]
 8005de6:	b90b      	cbnz	r3, 8005dec <__swsetup_r+0x14>
 8005de8:	f7ff fee0 	bl	8005bac <__sinit>
 8005dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005df0:	0719      	lsls	r1, r3, #28
 8005df2:	d422      	bmi.n	8005e3a <__swsetup_r+0x62>
 8005df4:	06da      	lsls	r2, r3, #27
 8005df6:	d407      	bmi.n	8005e08 <__swsetup_r+0x30>
 8005df8:	2209      	movs	r2, #9
 8005dfa:	602a      	str	r2, [r5, #0]
 8005dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e00:	81a3      	strh	r3, [r4, #12]
 8005e02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e06:	e033      	b.n	8005e70 <__swsetup_r+0x98>
 8005e08:	0758      	lsls	r0, r3, #29
 8005e0a:	d512      	bpl.n	8005e32 <__swsetup_r+0x5a>
 8005e0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e0e:	b141      	cbz	r1, 8005e22 <__swsetup_r+0x4a>
 8005e10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e14:	4299      	cmp	r1, r3
 8005e16:	d002      	beq.n	8005e1e <__swsetup_r+0x46>
 8005e18:	4628      	mov	r0, r5
 8005e1a:	f000 f8cd 	bl	8005fb8 <_free_r>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e22:	89a3      	ldrh	r3, [r4, #12]
 8005e24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e28:	81a3      	strh	r3, [r4, #12]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	6063      	str	r3, [r4, #4]
 8005e2e:	6923      	ldr	r3, [r4, #16]
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	f043 0308 	orr.w	r3, r3, #8
 8005e38:	81a3      	strh	r3, [r4, #12]
 8005e3a:	6923      	ldr	r3, [r4, #16]
 8005e3c:	b94b      	cbnz	r3, 8005e52 <__swsetup_r+0x7a>
 8005e3e:	89a3      	ldrh	r3, [r4, #12]
 8005e40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e48:	d003      	beq.n	8005e52 <__swsetup_r+0x7a>
 8005e4a:	4621      	mov	r1, r4
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	f000 fa97 	bl	8006380 <__smakebuf_r>
 8005e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e56:	f013 0201 	ands.w	r2, r3, #1
 8005e5a:	d00a      	beq.n	8005e72 <__swsetup_r+0x9a>
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	60a2      	str	r2, [r4, #8]
 8005e60:	6962      	ldr	r2, [r4, #20]
 8005e62:	4252      	negs	r2, r2
 8005e64:	61a2      	str	r2, [r4, #24]
 8005e66:	6922      	ldr	r2, [r4, #16]
 8005e68:	b942      	cbnz	r2, 8005e7c <__swsetup_r+0xa4>
 8005e6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005e6e:	d1c5      	bne.n	8005dfc <__swsetup_r+0x24>
 8005e70:	bd38      	pop	{r3, r4, r5, pc}
 8005e72:	0799      	lsls	r1, r3, #30
 8005e74:	bf58      	it	pl
 8005e76:	6962      	ldrpl	r2, [r4, #20]
 8005e78:	60a2      	str	r2, [r4, #8]
 8005e7a:	e7f4      	b.n	8005e66 <__swsetup_r+0x8e>
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	e7f7      	b.n	8005e70 <__swsetup_r+0x98>
 8005e80:	2000277c 	.word	0x2000277c

08005e84 <memset>:
 8005e84:	4402      	add	r2, r0
 8005e86:	4603      	mov	r3, r0
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d100      	bne.n	8005e8e <memset+0xa>
 8005e8c:	4770      	bx	lr
 8005e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e92:	e7f9      	b.n	8005e88 <memset+0x4>

08005e94 <_close_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	4d06      	ldr	r5, [pc, #24]	@ (8005eb0 <_close_r+0x1c>)
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	602b      	str	r3, [r5, #0]
 8005ea0:	f7fb fd96 	bl	80019d0 <_close>
 8005ea4:	1c43      	adds	r3, r0, #1
 8005ea6:	d102      	bne.n	8005eae <_close_r+0x1a>
 8005ea8:	682b      	ldr	r3, [r5, #0]
 8005eaa:	b103      	cbz	r3, 8005eae <_close_r+0x1a>
 8005eac:	6023      	str	r3, [r4, #0]
 8005eae:	bd38      	pop	{r3, r4, r5, pc}
 8005eb0:	20002b90 	.word	0x20002b90

08005eb4 <_lseek_r>:
 8005eb4:	b538      	push	{r3, r4, r5, lr}
 8005eb6:	4d07      	ldr	r5, [pc, #28]	@ (8005ed4 <_lseek_r+0x20>)
 8005eb8:	4604      	mov	r4, r0
 8005eba:	4608      	mov	r0, r1
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	602a      	str	r2, [r5, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f7fb fdab 	bl	8001a1e <_lseek>
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	d102      	bne.n	8005ed2 <_lseek_r+0x1e>
 8005ecc:	682b      	ldr	r3, [r5, #0]
 8005ece:	b103      	cbz	r3, 8005ed2 <_lseek_r+0x1e>
 8005ed0:	6023      	str	r3, [r4, #0]
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}
 8005ed4:	20002b90 	.word	0x20002b90

08005ed8 <_read_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4d07      	ldr	r5, [pc, #28]	@ (8005ef8 <_read_r+0x20>)
 8005edc:	4604      	mov	r4, r0
 8005ede:	4608      	mov	r0, r1
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	602a      	str	r2, [r5, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f7fb fd39 	bl	800195e <_read>
 8005eec:	1c43      	adds	r3, r0, #1
 8005eee:	d102      	bne.n	8005ef6 <_read_r+0x1e>
 8005ef0:	682b      	ldr	r3, [r5, #0]
 8005ef2:	b103      	cbz	r3, 8005ef6 <_read_r+0x1e>
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	bd38      	pop	{r3, r4, r5, pc}
 8005ef8:	20002b90 	.word	0x20002b90

08005efc <_write_r>:
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	4d07      	ldr	r5, [pc, #28]	@ (8005f1c <_write_r+0x20>)
 8005f00:	4604      	mov	r4, r0
 8005f02:	4608      	mov	r0, r1
 8005f04:	4611      	mov	r1, r2
 8005f06:	2200      	movs	r2, #0
 8005f08:	602a      	str	r2, [r5, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f7fb fd44 	bl	8001998 <_write>
 8005f10:	1c43      	adds	r3, r0, #1
 8005f12:	d102      	bne.n	8005f1a <_write_r+0x1e>
 8005f14:	682b      	ldr	r3, [r5, #0]
 8005f16:	b103      	cbz	r3, 8005f1a <_write_r+0x1e>
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	bd38      	pop	{r3, r4, r5, pc}
 8005f1c:	20002b90 	.word	0x20002b90

08005f20 <__errno>:
 8005f20:	4b01      	ldr	r3, [pc, #4]	@ (8005f28 <__errno+0x8>)
 8005f22:	6818      	ldr	r0, [r3, #0]
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	2000277c 	.word	0x2000277c

08005f2c <__libc_init_array>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	4d0d      	ldr	r5, [pc, #52]	@ (8005f64 <__libc_init_array+0x38>)
 8005f30:	4c0d      	ldr	r4, [pc, #52]	@ (8005f68 <__libc_init_array+0x3c>)
 8005f32:	1b64      	subs	r4, r4, r5
 8005f34:	10a4      	asrs	r4, r4, #2
 8005f36:	2600      	movs	r6, #0
 8005f38:	42a6      	cmp	r6, r4
 8005f3a:	d109      	bne.n	8005f50 <__libc_init_array+0x24>
 8005f3c:	4d0b      	ldr	r5, [pc, #44]	@ (8005f6c <__libc_init_array+0x40>)
 8005f3e:	4c0c      	ldr	r4, [pc, #48]	@ (8005f70 <__libc_init_array+0x44>)
 8005f40:	f000 fda4 	bl	8006a8c <_init>
 8005f44:	1b64      	subs	r4, r4, r5
 8005f46:	10a4      	asrs	r4, r4, #2
 8005f48:	2600      	movs	r6, #0
 8005f4a:	42a6      	cmp	r6, r4
 8005f4c:	d105      	bne.n	8005f5a <__libc_init_array+0x2e>
 8005f4e:	bd70      	pop	{r4, r5, r6, pc}
 8005f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f54:	4798      	blx	r3
 8005f56:	3601      	adds	r6, #1
 8005f58:	e7ee      	b.n	8005f38 <__libc_init_array+0xc>
 8005f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f5e:	4798      	blx	r3
 8005f60:	3601      	adds	r6, #1
 8005f62:	e7f2      	b.n	8005f4a <__libc_init_array+0x1e>
 8005f64:	080070dc 	.word	0x080070dc
 8005f68:	080070dc 	.word	0x080070dc
 8005f6c:	080070dc 	.word	0x080070dc
 8005f70:	080070e0 	.word	0x080070e0

08005f74 <__retarget_lock_init_recursive>:
 8005f74:	4770      	bx	lr

08005f76 <__retarget_lock_acquire_recursive>:
 8005f76:	4770      	bx	lr

08005f78 <__retarget_lock_release_recursive>:
 8005f78:	4770      	bx	lr
	...

08005f7c <__assert_func>:
 8005f7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f7e:	4614      	mov	r4, r2
 8005f80:	461a      	mov	r2, r3
 8005f82:	4b09      	ldr	r3, [pc, #36]	@ (8005fa8 <__assert_func+0x2c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4605      	mov	r5, r0
 8005f88:	68d8      	ldr	r0, [r3, #12]
 8005f8a:	b14c      	cbz	r4, 8005fa0 <__assert_func+0x24>
 8005f8c:	4b07      	ldr	r3, [pc, #28]	@ (8005fac <__assert_func+0x30>)
 8005f8e:	9100      	str	r1, [sp, #0]
 8005f90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f94:	4906      	ldr	r1, [pc, #24]	@ (8005fb0 <__assert_func+0x34>)
 8005f96:	462b      	mov	r3, r5
 8005f98:	f000 f9ba 	bl	8006310 <fiprintf>
 8005f9c:	f000 fa5e 	bl	800645c <abort>
 8005fa0:	4b04      	ldr	r3, [pc, #16]	@ (8005fb4 <__assert_func+0x38>)
 8005fa2:	461c      	mov	r4, r3
 8005fa4:	e7f3      	b.n	8005f8e <__assert_func+0x12>
 8005fa6:	bf00      	nop
 8005fa8:	2000277c 	.word	0x2000277c
 8005fac:	08007063 	.word	0x08007063
 8005fb0:	08007070 	.word	0x08007070
 8005fb4:	0800709e 	.word	0x0800709e

08005fb8 <_free_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	4605      	mov	r5, r0
 8005fbc:	2900      	cmp	r1, #0
 8005fbe:	d041      	beq.n	8006044 <_free_r+0x8c>
 8005fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc4:	1f0c      	subs	r4, r1, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	bfb8      	it	lt
 8005fca:	18e4      	addlt	r4, r4, r3
 8005fcc:	f000 f8e8 	bl	80061a0 <__malloc_lock>
 8005fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8006048 <_free_r+0x90>)
 8005fd2:	6813      	ldr	r3, [r2, #0]
 8005fd4:	b933      	cbnz	r3, 8005fe4 <_free_r+0x2c>
 8005fd6:	6063      	str	r3, [r4, #4]
 8005fd8:	6014      	str	r4, [r2, #0]
 8005fda:	4628      	mov	r0, r5
 8005fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fe0:	f000 b8e4 	b.w	80061ac <__malloc_unlock>
 8005fe4:	42a3      	cmp	r3, r4
 8005fe6:	d908      	bls.n	8005ffa <_free_r+0x42>
 8005fe8:	6820      	ldr	r0, [r4, #0]
 8005fea:	1821      	adds	r1, r4, r0
 8005fec:	428b      	cmp	r3, r1
 8005fee:	bf01      	itttt	eq
 8005ff0:	6819      	ldreq	r1, [r3, #0]
 8005ff2:	685b      	ldreq	r3, [r3, #4]
 8005ff4:	1809      	addeq	r1, r1, r0
 8005ff6:	6021      	streq	r1, [r4, #0]
 8005ff8:	e7ed      	b.n	8005fd6 <_free_r+0x1e>
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	b10b      	cbz	r3, 8006004 <_free_r+0x4c>
 8006000:	42a3      	cmp	r3, r4
 8006002:	d9fa      	bls.n	8005ffa <_free_r+0x42>
 8006004:	6811      	ldr	r1, [r2, #0]
 8006006:	1850      	adds	r0, r2, r1
 8006008:	42a0      	cmp	r0, r4
 800600a:	d10b      	bne.n	8006024 <_free_r+0x6c>
 800600c:	6820      	ldr	r0, [r4, #0]
 800600e:	4401      	add	r1, r0
 8006010:	1850      	adds	r0, r2, r1
 8006012:	4283      	cmp	r3, r0
 8006014:	6011      	str	r1, [r2, #0]
 8006016:	d1e0      	bne.n	8005fda <_free_r+0x22>
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	6053      	str	r3, [r2, #4]
 800601e:	4408      	add	r0, r1
 8006020:	6010      	str	r0, [r2, #0]
 8006022:	e7da      	b.n	8005fda <_free_r+0x22>
 8006024:	d902      	bls.n	800602c <_free_r+0x74>
 8006026:	230c      	movs	r3, #12
 8006028:	602b      	str	r3, [r5, #0]
 800602a:	e7d6      	b.n	8005fda <_free_r+0x22>
 800602c:	6820      	ldr	r0, [r4, #0]
 800602e:	1821      	adds	r1, r4, r0
 8006030:	428b      	cmp	r3, r1
 8006032:	bf04      	itt	eq
 8006034:	6819      	ldreq	r1, [r3, #0]
 8006036:	685b      	ldreq	r3, [r3, #4]
 8006038:	6063      	str	r3, [r4, #4]
 800603a:	bf04      	itt	eq
 800603c:	1809      	addeq	r1, r1, r0
 800603e:	6021      	streq	r1, [r4, #0]
 8006040:	6054      	str	r4, [r2, #4]
 8006042:	e7ca      	b.n	8005fda <_free_r+0x22>
 8006044:	bd38      	pop	{r3, r4, r5, pc}
 8006046:	bf00      	nop
 8006048:	20002b9c 	.word	0x20002b9c

0800604c <malloc>:
 800604c:	4b02      	ldr	r3, [pc, #8]	@ (8006058 <malloc+0xc>)
 800604e:	4601      	mov	r1, r0
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	f000 b825 	b.w	80060a0 <_malloc_r>
 8006056:	bf00      	nop
 8006058:	2000277c 	.word	0x2000277c

0800605c <sbrk_aligned>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	4e0f      	ldr	r6, [pc, #60]	@ (800609c <sbrk_aligned+0x40>)
 8006060:	460c      	mov	r4, r1
 8006062:	6831      	ldr	r1, [r6, #0]
 8006064:	4605      	mov	r5, r0
 8006066:	b911      	cbnz	r1, 800606e <sbrk_aligned+0x12>
 8006068:	f000 f9e8 	bl	800643c <_sbrk_r>
 800606c:	6030      	str	r0, [r6, #0]
 800606e:	4621      	mov	r1, r4
 8006070:	4628      	mov	r0, r5
 8006072:	f000 f9e3 	bl	800643c <_sbrk_r>
 8006076:	1c43      	adds	r3, r0, #1
 8006078:	d103      	bne.n	8006082 <sbrk_aligned+0x26>
 800607a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800607e:	4620      	mov	r0, r4
 8006080:	bd70      	pop	{r4, r5, r6, pc}
 8006082:	1cc4      	adds	r4, r0, #3
 8006084:	f024 0403 	bic.w	r4, r4, #3
 8006088:	42a0      	cmp	r0, r4
 800608a:	d0f8      	beq.n	800607e <sbrk_aligned+0x22>
 800608c:	1a21      	subs	r1, r4, r0
 800608e:	4628      	mov	r0, r5
 8006090:	f000 f9d4 	bl	800643c <_sbrk_r>
 8006094:	3001      	adds	r0, #1
 8006096:	d1f2      	bne.n	800607e <sbrk_aligned+0x22>
 8006098:	e7ef      	b.n	800607a <sbrk_aligned+0x1e>
 800609a:	bf00      	nop
 800609c:	20002b98 	.word	0x20002b98

080060a0 <_malloc_r>:
 80060a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060a4:	1ccd      	adds	r5, r1, #3
 80060a6:	f025 0503 	bic.w	r5, r5, #3
 80060aa:	3508      	adds	r5, #8
 80060ac:	2d0c      	cmp	r5, #12
 80060ae:	bf38      	it	cc
 80060b0:	250c      	movcc	r5, #12
 80060b2:	2d00      	cmp	r5, #0
 80060b4:	4606      	mov	r6, r0
 80060b6:	db01      	blt.n	80060bc <_malloc_r+0x1c>
 80060b8:	42a9      	cmp	r1, r5
 80060ba:	d904      	bls.n	80060c6 <_malloc_r+0x26>
 80060bc:	230c      	movs	r3, #12
 80060be:	6033      	str	r3, [r6, #0]
 80060c0:	2000      	movs	r0, #0
 80060c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800619c <_malloc_r+0xfc>
 80060ca:	f000 f869 	bl	80061a0 <__malloc_lock>
 80060ce:	f8d8 3000 	ldr.w	r3, [r8]
 80060d2:	461c      	mov	r4, r3
 80060d4:	bb44      	cbnz	r4, 8006128 <_malloc_r+0x88>
 80060d6:	4629      	mov	r1, r5
 80060d8:	4630      	mov	r0, r6
 80060da:	f7ff ffbf 	bl	800605c <sbrk_aligned>
 80060de:	1c43      	adds	r3, r0, #1
 80060e0:	4604      	mov	r4, r0
 80060e2:	d158      	bne.n	8006196 <_malloc_r+0xf6>
 80060e4:	f8d8 4000 	ldr.w	r4, [r8]
 80060e8:	4627      	mov	r7, r4
 80060ea:	2f00      	cmp	r7, #0
 80060ec:	d143      	bne.n	8006176 <_malloc_r+0xd6>
 80060ee:	2c00      	cmp	r4, #0
 80060f0:	d04b      	beq.n	800618a <_malloc_r+0xea>
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	4639      	mov	r1, r7
 80060f6:	4630      	mov	r0, r6
 80060f8:	eb04 0903 	add.w	r9, r4, r3
 80060fc:	f000 f99e 	bl	800643c <_sbrk_r>
 8006100:	4581      	cmp	r9, r0
 8006102:	d142      	bne.n	800618a <_malloc_r+0xea>
 8006104:	6821      	ldr	r1, [r4, #0]
 8006106:	1a6d      	subs	r5, r5, r1
 8006108:	4629      	mov	r1, r5
 800610a:	4630      	mov	r0, r6
 800610c:	f7ff ffa6 	bl	800605c <sbrk_aligned>
 8006110:	3001      	adds	r0, #1
 8006112:	d03a      	beq.n	800618a <_malloc_r+0xea>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	442b      	add	r3, r5
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	f8d8 3000 	ldr.w	r3, [r8]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	bb62      	cbnz	r2, 800617c <_malloc_r+0xdc>
 8006122:	f8c8 7000 	str.w	r7, [r8]
 8006126:	e00f      	b.n	8006148 <_malloc_r+0xa8>
 8006128:	6822      	ldr	r2, [r4, #0]
 800612a:	1b52      	subs	r2, r2, r5
 800612c:	d420      	bmi.n	8006170 <_malloc_r+0xd0>
 800612e:	2a0b      	cmp	r2, #11
 8006130:	d917      	bls.n	8006162 <_malloc_r+0xc2>
 8006132:	1961      	adds	r1, r4, r5
 8006134:	42a3      	cmp	r3, r4
 8006136:	6025      	str	r5, [r4, #0]
 8006138:	bf18      	it	ne
 800613a:	6059      	strne	r1, [r3, #4]
 800613c:	6863      	ldr	r3, [r4, #4]
 800613e:	bf08      	it	eq
 8006140:	f8c8 1000 	streq.w	r1, [r8]
 8006144:	5162      	str	r2, [r4, r5]
 8006146:	604b      	str	r3, [r1, #4]
 8006148:	4630      	mov	r0, r6
 800614a:	f000 f82f 	bl	80061ac <__malloc_unlock>
 800614e:	f104 000b 	add.w	r0, r4, #11
 8006152:	1d23      	adds	r3, r4, #4
 8006154:	f020 0007 	bic.w	r0, r0, #7
 8006158:	1ac2      	subs	r2, r0, r3
 800615a:	bf1c      	itt	ne
 800615c:	1a1b      	subne	r3, r3, r0
 800615e:	50a3      	strne	r3, [r4, r2]
 8006160:	e7af      	b.n	80060c2 <_malloc_r+0x22>
 8006162:	6862      	ldr	r2, [r4, #4]
 8006164:	42a3      	cmp	r3, r4
 8006166:	bf0c      	ite	eq
 8006168:	f8c8 2000 	streq.w	r2, [r8]
 800616c:	605a      	strne	r2, [r3, #4]
 800616e:	e7eb      	b.n	8006148 <_malloc_r+0xa8>
 8006170:	4623      	mov	r3, r4
 8006172:	6864      	ldr	r4, [r4, #4]
 8006174:	e7ae      	b.n	80060d4 <_malloc_r+0x34>
 8006176:	463c      	mov	r4, r7
 8006178:	687f      	ldr	r7, [r7, #4]
 800617a:	e7b6      	b.n	80060ea <_malloc_r+0x4a>
 800617c:	461a      	mov	r2, r3
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	42a3      	cmp	r3, r4
 8006182:	d1fb      	bne.n	800617c <_malloc_r+0xdc>
 8006184:	2300      	movs	r3, #0
 8006186:	6053      	str	r3, [r2, #4]
 8006188:	e7de      	b.n	8006148 <_malloc_r+0xa8>
 800618a:	230c      	movs	r3, #12
 800618c:	6033      	str	r3, [r6, #0]
 800618e:	4630      	mov	r0, r6
 8006190:	f000 f80c 	bl	80061ac <__malloc_unlock>
 8006194:	e794      	b.n	80060c0 <_malloc_r+0x20>
 8006196:	6005      	str	r5, [r0, #0]
 8006198:	e7d6      	b.n	8006148 <_malloc_r+0xa8>
 800619a:	bf00      	nop
 800619c:	20002b9c 	.word	0x20002b9c

080061a0 <__malloc_lock>:
 80061a0:	4801      	ldr	r0, [pc, #4]	@ (80061a8 <__malloc_lock+0x8>)
 80061a2:	f7ff bee8 	b.w	8005f76 <__retarget_lock_acquire_recursive>
 80061a6:	bf00      	nop
 80061a8:	20002b94 	.word	0x20002b94

080061ac <__malloc_unlock>:
 80061ac:	4801      	ldr	r0, [pc, #4]	@ (80061b4 <__malloc_unlock+0x8>)
 80061ae:	f7ff bee3 	b.w	8005f78 <__retarget_lock_release_recursive>
 80061b2:	bf00      	nop
 80061b4:	20002b94 	.word	0x20002b94

080061b8 <__sflush_r>:
 80061b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c0:	0716      	lsls	r6, r2, #28
 80061c2:	4605      	mov	r5, r0
 80061c4:	460c      	mov	r4, r1
 80061c6:	d454      	bmi.n	8006272 <__sflush_r+0xba>
 80061c8:	684b      	ldr	r3, [r1, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	dc02      	bgt.n	80061d4 <__sflush_r+0x1c>
 80061ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	dd48      	ble.n	8006266 <__sflush_r+0xae>
 80061d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061d6:	2e00      	cmp	r6, #0
 80061d8:	d045      	beq.n	8006266 <__sflush_r+0xae>
 80061da:	2300      	movs	r3, #0
 80061dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061e0:	682f      	ldr	r7, [r5, #0]
 80061e2:	6a21      	ldr	r1, [r4, #32]
 80061e4:	602b      	str	r3, [r5, #0]
 80061e6:	d030      	beq.n	800624a <__sflush_r+0x92>
 80061e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061ea:	89a3      	ldrh	r3, [r4, #12]
 80061ec:	0759      	lsls	r1, r3, #29
 80061ee:	d505      	bpl.n	80061fc <__sflush_r+0x44>
 80061f0:	6863      	ldr	r3, [r4, #4]
 80061f2:	1ad2      	subs	r2, r2, r3
 80061f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061f6:	b10b      	cbz	r3, 80061fc <__sflush_r+0x44>
 80061f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061fa:	1ad2      	subs	r2, r2, r3
 80061fc:	2300      	movs	r3, #0
 80061fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006200:	6a21      	ldr	r1, [r4, #32]
 8006202:	4628      	mov	r0, r5
 8006204:	47b0      	blx	r6
 8006206:	1c43      	adds	r3, r0, #1
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	d106      	bne.n	800621a <__sflush_r+0x62>
 800620c:	6829      	ldr	r1, [r5, #0]
 800620e:	291d      	cmp	r1, #29
 8006210:	d82b      	bhi.n	800626a <__sflush_r+0xb2>
 8006212:	4a2a      	ldr	r2, [pc, #168]	@ (80062bc <__sflush_r+0x104>)
 8006214:	40ca      	lsrs	r2, r1
 8006216:	07d6      	lsls	r6, r2, #31
 8006218:	d527      	bpl.n	800626a <__sflush_r+0xb2>
 800621a:	2200      	movs	r2, #0
 800621c:	6062      	str	r2, [r4, #4]
 800621e:	04d9      	lsls	r1, r3, #19
 8006220:	6922      	ldr	r2, [r4, #16]
 8006222:	6022      	str	r2, [r4, #0]
 8006224:	d504      	bpl.n	8006230 <__sflush_r+0x78>
 8006226:	1c42      	adds	r2, r0, #1
 8006228:	d101      	bne.n	800622e <__sflush_r+0x76>
 800622a:	682b      	ldr	r3, [r5, #0]
 800622c:	b903      	cbnz	r3, 8006230 <__sflush_r+0x78>
 800622e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006232:	602f      	str	r7, [r5, #0]
 8006234:	b1b9      	cbz	r1, 8006266 <__sflush_r+0xae>
 8006236:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800623a:	4299      	cmp	r1, r3
 800623c:	d002      	beq.n	8006244 <__sflush_r+0x8c>
 800623e:	4628      	mov	r0, r5
 8006240:	f7ff feba 	bl	8005fb8 <_free_r>
 8006244:	2300      	movs	r3, #0
 8006246:	6363      	str	r3, [r4, #52]	@ 0x34
 8006248:	e00d      	b.n	8006266 <__sflush_r+0xae>
 800624a:	2301      	movs	r3, #1
 800624c:	4628      	mov	r0, r5
 800624e:	47b0      	blx	r6
 8006250:	4602      	mov	r2, r0
 8006252:	1c50      	adds	r0, r2, #1
 8006254:	d1c9      	bne.n	80061ea <__sflush_r+0x32>
 8006256:	682b      	ldr	r3, [r5, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0c6      	beq.n	80061ea <__sflush_r+0x32>
 800625c:	2b1d      	cmp	r3, #29
 800625e:	d001      	beq.n	8006264 <__sflush_r+0xac>
 8006260:	2b16      	cmp	r3, #22
 8006262:	d11e      	bne.n	80062a2 <__sflush_r+0xea>
 8006264:	602f      	str	r7, [r5, #0]
 8006266:	2000      	movs	r0, #0
 8006268:	e022      	b.n	80062b0 <__sflush_r+0xf8>
 800626a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800626e:	b21b      	sxth	r3, r3
 8006270:	e01b      	b.n	80062aa <__sflush_r+0xf2>
 8006272:	690f      	ldr	r7, [r1, #16]
 8006274:	2f00      	cmp	r7, #0
 8006276:	d0f6      	beq.n	8006266 <__sflush_r+0xae>
 8006278:	0793      	lsls	r3, r2, #30
 800627a:	680e      	ldr	r6, [r1, #0]
 800627c:	bf08      	it	eq
 800627e:	694b      	ldreq	r3, [r1, #20]
 8006280:	600f      	str	r7, [r1, #0]
 8006282:	bf18      	it	ne
 8006284:	2300      	movne	r3, #0
 8006286:	eba6 0807 	sub.w	r8, r6, r7
 800628a:	608b      	str	r3, [r1, #8]
 800628c:	f1b8 0f00 	cmp.w	r8, #0
 8006290:	dde9      	ble.n	8006266 <__sflush_r+0xae>
 8006292:	6a21      	ldr	r1, [r4, #32]
 8006294:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006296:	4643      	mov	r3, r8
 8006298:	463a      	mov	r2, r7
 800629a:	4628      	mov	r0, r5
 800629c:	47b0      	blx	r6
 800629e:	2800      	cmp	r0, #0
 80062a0:	dc08      	bgt.n	80062b4 <__sflush_r+0xfc>
 80062a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062aa:	81a3      	strh	r3, [r4, #12]
 80062ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b4:	4407      	add	r7, r0
 80062b6:	eba8 0800 	sub.w	r8, r8, r0
 80062ba:	e7e7      	b.n	800628c <__sflush_r+0xd4>
 80062bc:	20400001 	.word	0x20400001

080062c0 <_fflush_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	690b      	ldr	r3, [r1, #16]
 80062c4:	4605      	mov	r5, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	b913      	cbnz	r3, 80062d0 <_fflush_r+0x10>
 80062ca:	2500      	movs	r5, #0
 80062cc:	4628      	mov	r0, r5
 80062ce:	bd38      	pop	{r3, r4, r5, pc}
 80062d0:	b118      	cbz	r0, 80062da <_fflush_r+0x1a>
 80062d2:	6a03      	ldr	r3, [r0, #32]
 80062d4:	b90b      	cbnz	r3, 80062da <_fflush_r+0x1a>
 80062d6:	f7ff fc69 	bl	8005bac <__sinit>
 80062da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d0f3      	beq.n	80062ca <_fflush_r+0xa>
 80062e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062e4:	07d0      	lsls	r0, r2, #31
 80062e6:	d404      	bmi.n	80062f2 <_fflush_r+0x32>
 80062e8:	0599      	lsls	r1, r3, #22
 80062ea:	d402      	bmi.n	80062f2 <_fflush_r+0x32>
 80062ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062ee:	f7ff fe42 	bl	8005f76 <__retarget_lock_acquire_recursive>
 80062f2:	4628      	mov	r0, r5
 80062f4:	4621      	mov	r1, r4
 80062f6:	f7ff ff5f 	bl	80061b8 <__sflush_r>
 80062fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062fc:	07da      	lsls	r2, r3, #31
 80062fe:	4605      	mov	r5, r0
 8006300:	d4e4      	bmi.n	80062cc <_fflush_r+0xc>
 8006302:	89a3      	ldrh	r3, [r4, #12]
 8006304:	059b      	lsls	r3, r3, #22
 8006306:	d4e1      	bmi.n	80062cc <_fflush_r+0xc>
 8006308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800630a:	f7ff fe35 	bl	8005f78 <__retarget_lock_release_recursive>
 800630e:	e7dd      	b.n	80062cc <_fflush_r+0xc>

08006310 <fiprintf>:
 8006310:	b40e      	push	{r1, r2, r3}
 8006312:	b503      	push	{r0, r1, lr}
 8006314:	4601      	mov	r1, r0
 8006316:	ab03      	add	r3, sp, #12
 8006318:	4805      	ldr	r0, [pc, #20]	@ (8006330 <fiprintf+0x20>)
 800631a:	f853 2b04 	ldr.w	r2, [r3], #4
 800631e:	6800      	ldr	r0, [r0, #0]
 8006320:	9301      	str	r3, [sp, #4]
 8006322:	f000 f8cb 	bl	80064bc <_vfiprintf_r>
 8006326:	b002      	add	sp, #8
 8006328:	f85d eb04 	ldr.w	lr, [sp], #4
 800632c:	b003      	add	sp, #12
 800632e:	4770      	bx	lr
 8006330:	2000277c 	.word	0x2000277c

08006334 <__swhatbuf_r>:
 8006334:	b570      	push	{r4, r5, r6, lr}
 8006336:	460c      	mov	r4, r1
 8006338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800633c:	2900      	cmp	r1, #0
 800633e:	b096      	sub	sp, #88	@ 0x58
 8006340:	4615      	mov	r5, r2
 8006342:	461e      	mov	r6, r3
 8006344:	da0d      	bge.n	8006362 <__swhatbuf_r+0x2e>
 8006346:	89a3      	ldrh	r3, [r4, #12]
 8006348:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800634c:	f04f 0100 	mov.w	r1, #0
 8006350:	bf14      	ite	ne
 8006352:	2340      	movne	r3, #64	@ 0x40
 8006354:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006358:	2000      	movs	r0, #0
 800635a:	6031      	str	r1, [r6, #0]
 800635c:	602b      	str	r3, [r5, #0]
 800635e:	b016      	add	sp, #88	@ 0x58
 8006360:	bd70      	pop	{r4, r5, r6, pc}
 8006362:	466a      	mov	r2, sp
 8006364:	f000 f848 	bl	80063f8 <_fstat_r>
 8006368:	2800      	cmp	r0, #0
 800636a:	dbec      	blt.n	8006346 <__swhatbuf_r+0x12>
 800636c:	9901      	ldr	r1, [sp, #4]
 800636e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006372:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006376:	4259      	negs	r1, r3
 8006378:	4159      	adcs	r1, r3
 800637a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800637e:	e7eb      	b.n	8006358 <__swhatbuf_r+0x24>

08006380 <__smakebuf_r>:
 8006380:	898b      	ldrh	r3, [r1, #12]
 8006382:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006384:	079d      	lsls	r5, r3, #30
 8006386:	4606      	mov	r6, r0
 8006388:	460c      	mov	r4, r1
 800638a:	d507      	bpl.n	800639c <__smakebuf_r+0x1c>
 800638c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	6123      	str	r3, [r4, #16]
 8006394:	2301      	movs	r3, #1
 8006396:	6163      	str	r3, [r4, #20]
 8006398:	b003      	add	sp, #12
 800639a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800639c:	ab01      	add	r3, sp, #4
 800639e:	466a      	mov	r2, sp
 80063a0:	f7ff ffc8 	bl	8006334 <__swhatbuf_r>
 80063a4:	9f00      	ldr	r7, [sp, #0]
 80063a6:	4605      	mov	r5, r0
 80063a8:	4639      	mov	r1, r7
 80063aa:	4630      	mov	r0, r6
 80063ac:	f7ff fe78 	bl	80060a0 <_malloc_r>
 80063b0:	b948      	cbnz	r0, 80063c6 <__smakebuf_r+0x46>
 80063b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b6:	059a      	lsls	r2, r3, #22
 80063b8:	d4ee      	bmi.n	8006398 <__smakebuf_r+0x18>
 80063ba:	f023 0303 	bic.w	r3, r3, #3
 80063be:	f043 0302 	orr.w	r3, r3, #2
 80063c2:	81a3      	strh	r3, [r4, #12]
 80063c4:	e7e2      	b.n	800638c <__smakebuf_r+0xc>
 80063c6:	89a3      	ldrh	r3, [r4, #12]
 80063c8:	6020      	str	r0, [r4, #0]
 80063ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ce:	81a3      	strh	r3, [r4, #12]
 80063d0:	9b01      	ldr	r3, [sp, #4]
 80063d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80063d6:	b15b      	cbz	r3, 80063f0 <__smakebuf_r+0x70>
 80063d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063dc:	4630      	mov	r0, r6
 80063de:	f000 f81d 	bl	800641c <_isatty_r>
 80063e2:	b128      	cbz	r0, 80063f0 <__smakebuf_r+0x70>
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	f023 0303 	bic.w	r3, r3, #3
 80063ea:	f043 0301 	orr.w	r3, r3, #1
 80063ee:	81a3      	strh	r3, [r4, #12]
 80063f0:	89a3      	ldrh	r3, [r4, #12]
 80063f2:	431d      	orrs	r5, r3
 80063f4:	81a5      	strh	r5, [r4, #12]
 80063f6:	e7cf      	b.n	8006398 <__smakebuf_r+0x18>

080063f8 <_fstat_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4d07      	ldr	r5, [pc, #28]	@ (8006418 <_fstat_r+0x20>)
 80063fc:	2300      	movs	r3, #0
 80063fe:	4604      	mov	r4, r0
 8006400:	4608      	mov	r0, r1
 8006402:	4611      	mov	r1, r2
 8006404:	602b      	str	r3, [r5, #0]
 8006406:	f7fb faef 	bl	80019e8 <_fstat>
 800640a:	1c43      	adds	r3, r0, #1
 800640c:	d102      	bne.n	8006414 <_fstat_r+0x1c>
 800640e:	682b      	ldr	r3, [r5, #0]
 8006410:	b103      	cbz	r3, 8006414 <_fstat_r+0x1c>
 8006412:	6023      	str	r3, [r4, #0]
 8006414:	bd38      	pop	{r3, r4, r5, pc}
 8006416:	bf00      	nop
 8006418:	20002b90 	.word	0x20002b90

0800641c <_isatty_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4d06      	ldr	r5, [pc, #24]	@ (8006438 <_isatty_r+0x1c>)
 8006420:	2300      	movs	r3, #0
 8006422:	4604      	mov	r4, r0
 8006424:	4608      	mov	r0, r1
 8006426:	602b      	str	r3, [r5, #0]
 8006428:	f7fb faee 	bl	8001a08 <_isatty>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	d102      	bne.n	8006436 <_isatty_r+0x1a>
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	b103      	cbz	r3, 8006436 <_isatty_r+0x1a>
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	bd38      	pop	{r3, r4, r5, pc}
 8006438:	20002b90 	.word	0x20002b90

0800643c <_sbrk_r>:
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	4d06      	ldr	r5, [pc, #24]	@ (8006458 <_sbrk_r+0x1c>)
 8006440:	2300      	movs	r3, #0
 8006442:	4604      	mov	r4, r0
 8006444:	4608      	mov	r0, r1
 8006446:	602b      	str	r3, [r5, #0]
 8006448:	f7fb faf6 	bl	8001a38 <_sbrk>
 800644c:	1c43      	adds	r3, r0, #1
 800644e:	d102      	bne.n	8006456 <_sbrk_r+0x1a>
 8006450:	682b      	ldr	r3, [r5, #0]
 8006452:	b103      	cbz	r3, 8006456 <_sbrk_r+0x1a>
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	bd38      	pop	{r3, r4, r5, pc}
 8006458:	20002b90 	.word	0x20002b90

0800645c <abort>:
 800645c:	b508      	push	{r3, lr}
 800645e:	2006      	movs	r0, #6
 8006460:	f000 faf8 	bl	8006a54 <raise>
 8006464:	2001      	movs	r0, #1
 8006466:	f7fb fa6f 	bl	8001948 <_exit>

0800646a <__sfputc_r>:
 800646a:	6893      	ldr	r3, [r2, #8]
 800646c:	3b01      	subs	r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	b410      	push	{r4}
 8006472:	6093      	str	r3, [r2, #8]
 8006474:	da08      	bge.n	8006488 <__sfputc_r+0x1e>
 8006476:	6994      	ldr	r4, [r2, #24]
 8006478:	42a3      	cmp	r3, r4
 800647a:	db01      	blt.n	8006480 <__sfputc_r+0x16>
 800647c:	290a      	cmp	r1, #10
 800647e:	d103      	bne.n	8006488 <__sfputc_r+0x1e>
 8006480:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006484:	f7ff bc69 	b.w	8005d5a <__swbuf_r>
 8006488:	6813      	ldr	r3, [r2, #0]
 800648a:	1c58      	adds	r0, r3, #1
 800648c:	6010      	str	r0, [r2, #0]
 800648e:	7019      	strb	r1, [r3, #0]
 8006490:	4608      	mov	r0, r1
 8006492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006496:	4770      	bx	lr

08006498 <__sfputs_r>:
 8006498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649a:	4606      	mov	r6, r0
 800649c:	460f      	mov	r7, r1
 800649e:	4614      	mov	r4, r2
 80064a0:	18d5      	adds	r5, r2, r3
 80064a2:	42ac      	cmp	r4, r5
 80064a4:	d101      	bne.n	80064aa <__sfputs_r+0x12>
 80064a6:	2000      	movs	r0, #0
 80064a8:	e007      	b.n	80064ba <__sfputs_r+0x22>
 80064aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ae:	463a      	mov	r2, r7
 80064b0:	4630      	mov	r0, r6
 80064b2:	f7ff ffda 	bl	800646a <__sfputc_r>
 80064b6:	1c43      	adds	r3, r0, #1
 80064b8:	d1f3      	bne.n	80064a2 <__sfputs_r+0xa>
 80064ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080064bc <_vfiprintf_r>:
 80064bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c0:	460d      	mov	r5, r1
 80064c2:	b09d      	sub	sp, #116	@ 0x74
 80064c4:	4614      	mov	r4, r2
 80064c6:	4698      	mov	r8, r3
 80064c8:	4606      	mov	r6, r0
 80064ca:	b118      	cbz	r0, 80064d4 <_vfiprintf_r+0x18>
 80064cc:	6a03      	ldr	r3, [r0, #32]
 80064ce:	b90b      	cbnz	r3, 80064d4 <_vfiprintf_r+0x18>
 80064d0:	f7ff fb6c 	bl	8005bac <__sinit>
 80064d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064d6:	07d9      	lsls	r1, r3, #31
 80064d8:	d405      	bmi.n	80064e6 <_vfiprintf_r+0x2a>
 80064da:	89ab      	ldrh	r3, [r5, #12]
 80064dc:	059a      	lsls	r2, r3, #22
 80064de:	d402      	bmi.n	80064e6 <_vfiprintf_r+0x2a>
 80064e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064e2:	f7ff fd48 	bl	8005f76 <__retarget_lock_acquire_recursive>
 80064e6:	89ab      	ldrh	r3, [r5, #12]
 80064e8:	071b      	lsls	r3, r3, #28
 80064ea:	d501      	bpl.n	80064f0 <_vfiprintf_r+0x34>
 80064ec:	692b      	ldr	r3, [r5, #16]
 80064ee:	b99b      	cbnz	r3, 8006518 <_vfiprintf_r+0x5c>
 80064f0:	4629      	mov	r1, r5
 80064f2:	4630      	mov	r0, r6
 80064f4:	f7ff fc70 	bl	8005dd8 <__swsetup_r>
 80064f8:	b170      	cbz	r0, 8006518 <_vfiprintf_r+0x5c>
 80064fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064fc:	07dc      	lsls	r4, r3, #31
 80064fe:	d504      	bpl.n	800650a <_vfiprintf_r+0x4e>
 8006500:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006504:	b01d      	add	sp, #116	@ 0x74
 8006506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650a:	89ab      	ldrh	r3, [r5, #12]
 800650c:	0598      	lsls	r0, r3, #22
 800650e:	d4f7      	bmi.n	8006500 <_vfiprintf_r+0x44>
 8006510:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006512:	f7ff fd31 	bl	8005f78 <__retarget_lock_release_recursive>
 8006516:	e7f3      	b.n	8006500 <_vfiprintf_r+0x44>
 8006518:	2300      	movs	r3, #0
 800651a:	9309      	str	r3, [sp, #36]	@ 0x24
 800651c:	2320      	movs	r3, #32
 800651e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006522:	f8cd 800c 	str.w	r8, [sp, #12]
 8006526:	2330      	movs	r3, #48	@ 0x30
 8006528:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80066d8 <_vfiprintf_r+0x21c>
 800652c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006530:	f04f 0901 	mov.w	r9, #1
 8006534:	4623      	mov	r3, r4
 8006536:	469a      	mov	sl, r3
 8006538:	f813 2b01 	ldrb.w	r2, [r3], #1
 800653c:	b10a      	cbz	r2, 8006542 <_vfiprintf_r+0x86>
 800653e:	2a25      	cmp	r2, #37	@ 0x25
 8006540:	d1f9      	bne.n	8006536 <_vfiprintf_r+0x7a>
 8006542:	ebba 0b04 	subs.w	fp, sl, r4
 8006546:	d00b      	beq.n	8006560 <_vfiprintf_r+0xa4>
 8006548:	465b      	mov	r3, fp
 800654a:	4622      	mov	r2, r4
 800654c:	4629      	mov	r1, r5
 800654e:	4630      	mov	r0, r6
 8006550:	f7ff ffa2 	bl	8006498 <__sfputs_r>
 8006554:	3001      	adds	r0, #1
 8006556:	f000 80a7 	beq.w	80066a8 <_vfiprintf_r+0x1ec>
 800655a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800655c:	445a      	add	r2, fp
 800655e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006560:	f89a 3000 	ldrb.w	r3, [sl]
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 809f 	beq.w	80066a8 <_vfiprintf_r+0x1ec>
 800656a:	2300      	movs	r3, #0
 800656c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006574:	f10a 0a01 	add.w	sl, sl, #1
 8006578:	9304      	str	r3, [sp, #16]
 800657a:	9307      	str	r3, [sp, #28]
 800657c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006580:	931a      	str	r3, [sp, #104]	@ 0x68
 8006582:	4654      	mov	r4, sl
 8006584:	2205      	movs	r2, #5
 8006586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800658a:	4853      	ldr	r0, [pc, #332]	@ (80066d8 <_vfiprintf_r+0x21c>)
 800658c:	f7f9 fe48 	bl	8000220 <memchr>
 8006590:	9a04      	ldr	r2, [sp, #16]
 8006592:	b9d8      	cbnz	r0, 80065cc <_vfiprintf_r+0x110>
 8006594:	06d1      	lsls	r1, r2, #27
 8006596:	bf44      	itt	mi
 8006598:	2320      	movmi	r3, #32
 800659a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800659e:	0713      	lsls	r3, r2, #28
 80065a0:	bf44      	itt	mi
 80065a2:	232b      	movmi	r3, #43	@ 0x2b
 80065a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065a8:	f89a 3000 	ldrb.w	r3, [sl]
 80065ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80065ae:	d015      	beq.n	80065dc <_vfiprintf_r+0x120>
 80065b0:	9a07      	ldr	r2, [sp, #28]
 80065b2:	4654      	mov	r4, sl
 80065b4:	2000      	movs	r0, #0
 80065b6:	f04f 0c0a 	mov.w	ip, #10
 80065ba:	4621      	mov	r1, r4
 80065bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065c0:	3b30      	subs	r3, #48	@ 0x30
 80065c2:	2b09      	cmp	r3, #9
 80065c4:	d94b      	bls.n	800665e <_vfiprintf_r+0x1a2>
 80065c6:	b1b0      	cbz	r0, 80065f6 <_vfiprintf_r+0x13a>
 80065c8:	9207      	str	r2, [sp, #28]
 80065ca:	e014      	b.n	80065f6 <_vfiprintf_r+0x13a>
 80065cc:	eba0 0308 	sub.w	r3, r0, r8
 80065d0:	fa09 f303 	lsl.w	r3, r9, r3
 80065d4:	4313      	orrs	r3, r2
 80065d6:	9304      	str	r3, [sp, #16]
 80065d8:	46a2      	mov	sl, r4
 80065da:	e7d2      	b.n	8006582 <_vfiprintf_r+0xc6>
 80065dc:	9b03      	ldr	r3, [sp, #12]
 80065de:	1d19      	adds	r1, r3, #4
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	9103      	str	r1, [sp, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	bfbb      	ittet	lt
 80065e8:	425b      	neglt	r3, r3
 80065ea:	f042 0202 	orrlt.w	r2, r2, #2
 80065ee:	9307      	strge	r3, [sp, #28]
 80065f0:	9307      	strlt	r3, [sp, #28]
 80065f2:	bfb8      	it	lt
 80065f4:	9204      	strlt	r2, [sp, #16]
 80065f6:	7823      	ldrb	r3, [r4, #0]
 80065f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80065fa:	d10a      	bne.n	8006612 <_vfiprintf_r+0x156>
 80065fc:	7863      	ldrb	r3, [r4, #1]
 80065fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006600:	d132      	bne.n	8006668 <_vfiprintf_r+0x1ac>
 8006602:	9b03      	ldr	r3, [sp, #12]
 8006604:	1d1a      	adds	r2, r3, #4
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	9203      	str	r2, [sp, #12]
 800660a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800660e:	3402      	adds	r4, #2
 8006610:	9305      	str	r3, [sp, #20]
 8006612:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80066e8 <_vfiprintf_r+0x22c>
 8006616:	7821      	ldrb	r1, [r4, #0]
 8006618:	2203      	movs	r2, #3
 800661a:	4650      	mov	r0, sl
 800661c:	f7f9 fe00 	bl	8000220 <memchr>
 8006620:	b138      	cbz	r0, 8006632 <_vfiprintf_r+0x176>
 8006622:	9b04      	ldr	r3, [sp, #16]
 8006624:	eba0 000a 	sub.w	r0, r0, sl
 8006628:	2240      	movs	r2, #64	@ 0x40
 800662a:	4082      	lsls	r2, r0
 800662c:	4313      	orrs	r3, r2
 800662e:	3401      	adds	r4, #1
 8006630:	9304      	str	r3, [sp, #16]
 8006632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006636:	4829      	ldr	r0, [pc, #164]	@ (80066dc <_vfiprintf_r+0x220>)
 8006638:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800663c:	2206      	movs	r2, #6
 800663e:	f7f9 fdef 	bl	8000220 <memchr>
 8006642:	2800      	cmp	r0, #0
 8006644:	d03f      	beq.n	80066c6 <_vfiprintf_r+0x20a>
 8006646:	4b26      	ldr	r3, [pc, #152]	@ (80066e0 <_vfiprintf_r+0x224>)
 8006648:	bb1b      	cbnz	r3, 8006692 <_vfiprintf_r+0x1d6>
 800664a:	9b03      	ldr	r3, [sp, #12]
 800664c:	3307      	adds	r3, #7
 800664e:	f023 0307 	bic.w	r3, r3, #7
 8006652:	3308      	adds	r3, #8
 8006654:	9303      	str	r3, [sp, #12]
 8006656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006658:	443b      	add	r3, r7
 800665a:	9309      	str	r3, [sp, #36]	@ 0x24
 800665c:	e76a      	b.n	8006534 <_vfiprintf_r+0x78>
 800665e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006662:	460c      	mov	r4, r1
 8006664:	2001      	movs	r0, #1
 8006666:	e7a8      	b.n	80065ba <_vfiprintf_r+0xfe>
 8006668:	2300      	movs	r3, #0
 800666a:	3401      	adds	r4, #1
 800666c:	9305      	str	r3, [sp, #20]
 800666e:	4619      	mov	r1, r3
 8006670:	f04f 0c0a 	mov.w	ip, #10
 8006674:	4620      	mov	r0, r4
 8006676:	f810 2b01 	ldrb.w	r2, [r0], #1
 800667a:	3a30      	subs	r2, #48	@ 0x30
 800667c:	2a09      	cmp	r2, #9
 800667e:	d903      	bls.n	8006688 <_vfiprintf_r+0x1cc>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d0c6      	beq.n	8006612 <_vfiprintf_r+0x156>
 8006684:	9105      	str	r1, [sp, #20]
 8006686:	e7c4      	b.n	8006612 <_vfiprintf_r+0x156>
 8006688:	fb0c 2101 	mla	r1, ip, r1, r2
 800668c:	4604      	mov	r4, r0
 800668e:	2301      	movs	r3, #1
 8006690:	e7f0      	b.n	8006674 <_vfiprintf_r+0x1b8>
 8006692:	ab03      	add	r3, sp, #12
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	462a      	mov	r2, r5
 8006698:	4b12      	ldr	r3, [pc, #72]	@ (80066e4 <_vfiprintf_r+0x228>)
 800669a:	a904      	add	r1, sp, #16
 800669c:	4630      	mov	r0, r6
 800669e:	f3af 8000 	nop.w
 80066a2:	4607      	mov	r7, r0
 80066a4:	1c78      	adds	r0, r7, #1
 80066a6:	d1d6      	bne.n	8006656 <_vfiprintf_r+0x19a>
 80066a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066aa:	07d9      	lsls	r1, r3, #31
 80066ac:	d405      	bmi.n	80066ba <_vfiprintf_r+0x1fe>
 80066ae:	89ab      	ldrh	r3, [r5, #12]
 80066b0:	059a      	lsls	r2, r3, #22
 80066b2:	d402      	bmi.n	80066ba <_vfiprintf_r+0x1fe>
 80066b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066b6:	f7ff fc5f 	bl	8005f78 <__retarget_lock_release_recursive>
 80066ba:	89ab      	ldrh	r3, [r5, #12]
 80066bc:	065b      	lsls	r3, r3, #25
 80066be:	f53f af1f 	bmi.w	8006500 <_vfiprintf_r+0x44>
 80066c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066c4:	e71e      	b.n	8006504 <_vfiprintf_r+0x48>
 80066c6:	ab03      	add	r3, sp, #12
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	462a      	mov	r2, r5
 80066cc:	4b05      	ldr	r3, [pc, #20]	@ (80066e4 <_vfiprintf_r+0x228>)
 80066ce:	a904      	add	r1, sp, #16
 80066d0:	4630      	mov	r0, r6
 80066d2:	f000 f879 	bl	80067c8 <_printf_i>
 80066d6:	e7e4      	b.n	80066a2 <_vfiprintf_r+0x1e6>
 80066d8:	0800709f 	.word	0x0800709f
 80066dc:	080070a9 	.word	0x080070a9
 80066e0:	00000000 	.word	0x00000000
 80066e4:	08006499 	.word	0x08006499
 80066e8:	080070a5 	.word	0x080070a5

080066ec <_printf_common>:
 80066ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f0:	4616      	mov	r6, r2
 80066f2:	4698      	mov	r8, r3
 80066f4:	688a      	ldr	r2, [r1, #8]
 80066f6:	690b      	ldr	r3, [r1, #16]
 80066f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066fc:	4293      	cmp	r3, r2
 80066fe:	bfb8      	it	lt
 8006700:	4613      	movlt	r3, r2
 8006702:	6033      	str	r3, [r6, #0]
 8006704:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006708:	4607      	mov	r7, r0
 800670a:	460c      	mov	r4, r1
 800670c:	b10a      	cbz	r2, 8006712 <_printf_common+0x26>
 800670e:	3301      	adds	r3, #1
 8006710:	6033      	str	r3, [r6, #0]
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	0699      	lsls	r1, r3, #26
 8006716:	bf42      	ittt	mi
 8006718:	6833      	ldrmi	r3, [r6, #0]
 800671a:	3302      	addmi	r3, #2
 800671c:	6033      	strmi	r3, [r6, #0]
 800671e:	6825      	ldr	r5, [r4, #0]
 8006720:	f015 0506 	ands.w	r5, r5, #6
 8006724:	d106      	bne.n	8006734 <_printf_common+0x48>
 8006726:	f104 0a19 	add.w	sl, r4, #25
 800672a:	68e3      	ldr	r3, [r4, #12]
 800672c:	6832      	ldr	r2, [r6, #0]
 800672e:	1a9b      	subs	r3, r3, r2
 8006730:	42ab      	cmp	r3, r5
 8006732:	dc26      	bgt.n	8006782 <_printf_common+0x96>
 8006734:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006738:	6822      	ldr	r2, [r4, #0]
 800673a:	3b00      	subs	r3, #0
 800673c:	bf18      	it	ne
 800673e:	2301      	movne	r3, #1
 8006740:	0692      	lsls	r2, r2, #26
 8006742:	d42b      	bmi.n	800679c <_printf_common+0xb0>
 8006744:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006748:	4641      	mov	r1, r8
 800674a:	4638      	mov	r0, r7
 800674c:	47c8      	blx	r9
 800674e:	3001      	adds	r0, #1
 8006750:	d01e      	beq.n	8006790 <_printf_common+0xa4>
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	6922      	ldr	r2, [r4, #16]
 8006756:	f003 0306 	and.w	r3, r3, #6
 800675a:	2b04      	cmp	r3, #4
 800675c:	bf02      	ittt	eq
 800675e:	68e5      	ldreq	r5, [r4, #12]
 8006760:	6833      	ldreq	r3, [r6, #0]
 8006762:	1aed      	subeq	r5, r5, r3
 8006764:	68a3      	ldr	r3, [r4, #8]
 8006766:	bf0c      	ite	eq
 8006768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800676c:	2500      	movne	r5, #0
 800676e:	4293      	cmp	r3, r2
 8006770:	bfc4      	itt	gt
 8006772:	1a9b      	subgt	r3, r3, r2
 8006774:	18ed      	addgt	r5, r5, r3
 8006776:	2600      	movs	r6, #0
 8006778:	341a      	adds	r4, #26
 800677a:	42b5      	cmp	r5, r6
 800677c:	d11a      	bne.n	80067b4 <_printf_common+0xc8>
 800677e:	2000      	movs	r0, #0
 8006780:	e008      	b.n	8006794 <_printf_common+0xa8>
 8006782:	2301      	movs	r3, #1
 8006784:	4652      	mov	r2, sl
 8006786:	4641      	mov	r1, r8
 8006788:	4638      	mov	r0, r7
 800678a:	47c8      	blx	r9
 800678c:	3001      	adds	r0, #1
 800678e:	d103      	bne.n	8006798 <_printf_common+0xac>
 8006790:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006798:	3501      	adds	r5, #1
 800679a:	e7c6      	b.n	800672a <_printf_common+0x3e>
 800679c:	18e1      	adds	r1, r4, r3
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	2030      	movs	r0, #48	@ 0x30
 80067a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067a6:	4422      	add	r2, r4
 80067a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067b0:	3302      	adds	r3, #2
 80067b2:	e7c7      	b.n	8006744 <_printf_common+0x58>
 80067b4:	2301      	movs	r3, #1
 80067b6:	4622      	mov	r2, r4
 80067b8:	4641      	mov	r1, r8
 80067ba:	4638      	mov	r0, r7
 80067bc:	47c8      	blx	r9
 80067be:	3001      	adds	r0, #1
 80067c0:	d0e6      	beq.n	8006790 <_printf_common+0xa4>
 80067c2:	3601      	adds	r6, #1
 80067c4:	e7d9      	b.n	800677a <_printf_common+0x8e>
	...

080067c8 <_printf_i>:
 80067c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067cc:	7e0f      	ldrb	r7, [r1, #24]
 80067ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067d0:	2f78      	cmp	r7, #120	@ 0x78
 80067d2:	4691      	mov	r9, r2
 80067d4:	4680      	mov	r8, r0
 80067d6:	460c      	mov	r4, r1
 80067d8:	469a      	mov	sl, r3
 80067da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067de:	d807      	bhi.n	80067f0 <_printf_i+0x28>
 80067e0:	2f62      	cmp	r7, #98	@ 0x62
 80067e2:	d80a      	bhi.n	80067fa <_printf_i+0x32>
 80067e4:	2f00      	cmp	r7, #0
 80067e6:	f000 80d1 	beq.w	800698c <_printf_i+0x1c4>
 80067ea:	2f58      	cmp	r7, #88	@ 0x58
 80067ec:	f000 80b8 	beq.w	8006960 <_printf_i+0x198>
 80067f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067f8:	e03a      	b.n	8006870 <_printf_i+0xa8>
 80067fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067fe:	2b15      	cmp	r3, #21
 8006800:	d8f6      	bhi.n	80067f0 <_printf_i+0x28>
 8006802:	a101      	add	r1, pc, #4	@ (adr r1, 8006808 <_printf_i+0x40>)
 8006804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006808:	08006861 	.word	0x08006861
 800680c:	08006875 	.word	0x08006875
 8006810:	080067f1 	.word	0x080067f1
 8006814:	080067f1 	.word	0x080067f1
 8006818:	080067f1 	.word	0x080067f1
 800681c:	080067f1 	.word	0x080067f1
 8006820:	08006875 	.word	0x08006875
 8006824:	080067f1 	.word	0x080067f1
 8006828:	080067f1 	.word	0x080067f1
 800682c:	080067f1 	.word	0x080067f1
 8006830:	080067f1 	.word	0x080067f1
 8006834:	08006973 	.word	0x08006973
 8006838:	0800689f 	.word	0x0800689f
 800683c:	0800692d 	.word	0x0800692d
 8006840:	080067f1 	.word	0x080067f1
 8006844:	080067f1 	.word	0x080067f1
 8006848:	08006995 	.word	0x08006995
 800684c:	080067f1 	.word	0x080067f1
 8006850:	0800689f 	.word	0x0800689f
 8006854:	080067f1 	.word	0x080067f1
 8006858:	080067f1 	.word	0x080067f1
 800685c:	08006935 	.word	0x08006935
 8006860:	6833      	ldr	r3, [r6, #0]
 8006862:	1d1a      	adds	r2, r3, #4
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6032      	str	r2, [r6, #0]
 8006868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800686c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006870:	2301      	movs	r3, #1
 8006872:	e09c      	b.n	80069ae <_printf_i+0x1e6>
 8006874:	6833      	ldr	r3, [r6, #0]
 8006876:	6820      	ldr	r0, [r4, #0]
 8006878:	1d19      	adds	r1, r3, #4
 800687a:	6031      	str	r1, [r6, #0]
 800687c:	0606      	lsls	r6, r0, #24
 800687e:	d501      	bpl.n	8006884 <_printf_i+0xbc>
 8006880:	681d      	ldr	r5, [r3, #0]
 8006882:	e003      	b.n	800688c <_printf_i+0xc4>
 8006884:	0645      	lsls	r5, r0, #25
 8006886:	d5fb      	bpl.n	8006880 <_printf_i+0xb8>
 8006888:	f9b3 5000 	ldrsh.w	r5, [r3]
 800688c:	2d00      	cmp	r5, #0
 800688e:	da03      	bge.n	8006898 <_printf_i+0xd0>
 8006890:	232d      	movs	r3, #45	@ 0x2d
 8006892:	426d      	negs	r5, r5
 8006894:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006898:	4858      	ldr	r0, [pc, #352]	@ (80069fc <_printf_i+0x234>)
 800689a:	230a      	movs	r3, #10
 800689c:	e011      	b.n	80068c2 <_printf_i+0xfa>
 800689e:	6821      	ldr	r1, [r4, #0]
 80068a0:	6833      	ldr	r3, [r6, #0]
 80068a2:	0608      	lsls	r0, r1, #24
 80068a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80068a8:	d402      	bmi.n	80068b0 <_printf_i+0xe8>
 80068aa:	0649      	lsls	r1, r1, #25
 80068ac:	bf48      	it	mi
 80068ae:	b2ad      	uxthmi	r5, r5
 80068b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80068b2:	4852      	ldr	r0, [pc, #328]	@ (80069fc <_printf_i+0x234>)
 80068b4:	6033      	str	r3, [r6, #0]
 80068b6:	bf14      	ite	ne
 80068b8:	230a      	movne	r3, #10
 80068ba:	2308      	moveq	r3, #8
 80068bc:	2100      	movs	r1, #0
 80068be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068c2:	6866      	ldr	r6, [r4, #4]
 80068c4:	60a6      	str	r6, [r4, #8]
 80068c6:	2e00      	cmp	r6, #0
 80068c8:	db05      	blt.n	80068d6 <_printf_i+0x10e>
 80068ca:	6821      	ldr	r1, [r4, #0]
 80068cc:	432e      	orrs	r6, r5
 80068ce:	f021 0104 	bic.w	r1, r1, #4
 80068d2:	6021      	str	r1, [r4, #0]
 80068d4:	d04b      	beq.n	800696e <_printf_i+0x1a6>
 80068d6:	4616      	mov	r6, r2
 80068d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80068dc:	fb03 5711 	mls	r7, r3, r1, r5
 80068e0:	5dc7      	ldrb	r7, [r0, r7]
 80068e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068e6:	462f      	mov	r7, r5
 80068e8:	42bb      	cmp	r3, r7
 80068ea:	460d      	mov	r5, r1
 80068ec:	d9f4      	bls.n	80068d8 <_printf_i+0x110>
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	d10b      	bne.n	800690a <_printf_i+0x142>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	07df      	lsls	r7, r3, #31
 80068f6:	d508      	bpl.n	800690a <_printf_i+0x142>
 80068f8:	6923      	ldr	r3, [r4, #16]
 80068fa:	6861      	ldr	r1, [r4, #4]
 80068fc:	4299      	cmp	r1, r3
 80068fe:	bfde      	ittt	le
 8006900:	2330      	movle	r3, #48	@ 0x30
 8006902:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006906:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800690a:	1b92      	subs	r2, r2, r6
 800690c:	6122      	str	r2, [r4, #16]
 800690e:	f8cd a000 	str.w	sl, [sp]
 8006912:	464b      	mov	r3, r9
 8006914:	aa03      	add	r2, sp, #12
 8006916:	4621      	mov	r1, r4
 8006918:	4640      	mov	r0, r8
 800691a:	f7ff fee7 	bl	80066ec <_printf_common>
 800691e:	3001      	adds	r0, #1
 8006920:	d14a      	bne.n	80069b8 <_printf_i+0x1f0>
 8006922:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006926:	b004      	add	sp, #16
 8006928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	f043 0320 	orr.w	r3, r3, #32
 8006932:	6023      	str	r3, [r4, #0]
 8006934:	4832      	ldr	r0, [pc, #200]	@ (8006a00 <_printf_i+0x238>)
 8006936:	2778      	movs	r7, #120	@ 0x78
 8006938:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	6831      	ldr	r1, [r6, #0]
 8006940:	061f      	lsls	r7, r3, #24
 8006942:	f851 5b04 	ldr.w	r5, [r1], #4
 8006946:	d402      	bmi.n	800694e <_printf_i+0x186>
 8006948:	065f      	lsls	r7, r3, #25
 800694a:	bf48      	it	mi
 800694c:	b2ad      	uxthmi	r5, r5
 800694e:	6031      	str	r1, [r6, #0]
 8006950:	07d9      	lsls	r1, r3, #31
 8006952:	bf44      	itt	mi
 8006954:	f043 0320 	orrmi.w	r3, r3, #32
 8006958:	6023      	strmi	r3, [r4, #0]
 800695a:	b11d      	cbz	r5, 8006964 <_printf_i+0x19c>
 800695c:	2310      	movs	r3, #16
 800695e:	e7ad      	b.n	80068bc <_printf_i+0xf4>
 8006960:	4826      	ldr	r0, [pc, #152]	@ (80069fc <_printf_i+0x234>)
 8006962:	e7e9      	b.n	8006938 <_printf_i+0x170>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	f023 0320 	bic.w	r3, r3, #32
 800696a:	6023      	str	r3, [r4, #0]
 800696c:	e7f6      	b.n	800695c <_printf_i+0x194>
 800696e:	4616      	mov	r6, r2
 8006970:	e7bd      	b.n	80068ee <_printf_i+0x126>
 8006972:	6833      	ldr	r3, [r6, #0]
 8006974:	6825      	ldr	r5, [r4, #0]
 8006976:	6961      	ldr	r1, [r4, #20]
 8006978:	1d18      	adds	r0, r3, #4
 800697a:	6030      	str	r0, [r6, #0]
 800697c:	062e      	lsls	r6, r5, #24
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	d501      	bpl.n	8006986 <_printf_i+0x1be>
 8006982:	6019      	str	r1, [r3, #0]
 8006984:	e002      	b.n	800698c <_printf_i+0x1c4>
 8006986:	0668      	lsls	r0, r5, #25
 8006988:	d5fb      	bpl.n	8006982 <_printf_i+0x1ba>
 800698a:	8019      	strh	r1, [r3, #0]
 800698c:	2300      	movs	r3, #0
 800698e:	6123      	str	r3, [r4, #16]
 8006990:	4616      	mov	r6, r2
 8006992:	e7bc      	b.n	800690e <_printf_i+0x146>
 8006994:	6833      	ldr	r3, [r6, #0]
 8006996:	1d1a      	adds	r2, r3, #4
 8006998:	6032      	str	r2, [r6, #0]
 800699a:	681e      	ldr	r6, [r3, #0]
 800699c:	6862      	ldr	r2, [r4, #4]
 800699e:	2100      	movs	r1, #0
 80069a0:	4630      	mov	r0, r6
 80069a2:	f7f9 fc3d 	bl	8000220 <memchr>
 80069a6:	b108      	cbz	r0, 80069ac <_printf_i+0x1e4>
 80069a8:	1b80      	subs	r0, r0, r6
 80069aa:	6060      	str	r0, [r4, #4]
 80069ac:	6863      	ldr	r3, [r4, #4]
 80069ae:	6123      	str	r3, [r4, #16]
 80069b0:	2300      	movs	r3, #0
 80069b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069b6:	e7aa      	b.n	800690e <_printf_i+0x146>
 80069b8:	6923      	ldr	r3, [r4, #16]
 80069ba:	4632      	mov	r2, r6
 80069bc:	4649      	mov	r1, r9
 80069be:	4640      	mov	r0, r8
 80069c0:	47d0      	blx	sl
 80069c2:	3001      	adds	r0, #1
 80069c4:	d0ad      	beq.n	8006922 <_printf_i+0x15a>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	079b      	lsls	r3, r3, #30
 80069ca:	d413      	bmi.n	80069f4 <_printf_i+0x22c>
 80069cc:	68e0      	ldr	r0, [r4, #12]
 80069ce:	9b03      	ldr	r3, [sp, #12]
 80069d0:	4298      	cmp	r0, r3
 80069d2:	bfb8      	it	lt
 80069d4:	4618      	movlt	r0, r3
 80069d6:	e7a6      	b.n	8006926 <_printf_i+0x15e>
 80069d8:	2301      	movs	r3, #1
 80069da:	4632      	mov	r2, r6
 80069dc:	4649      	mov	r1, r9
 80069de:	4640      	mov	r0, r8
 80069e0:	47d0      	blx	sl
 80069e2:	3001      	adds	r0, #1
 80069e4:	d09d      	beq.n	8006922 <_printf_i+0x15a>
 80069e6:	3501      	adds	r5, #1
 80069e8:	68e3      	ldr	r3, [r4, #12]
 80069ea:	9903      	ldr	r1, [sp, #12]
 80069ec:	1a5b      	subs	r3, r3, r1
 80069ee:	42ab      	cmp	r3, r5
 80069f0:	dcf2      	bgt.n	80069d8 <_printf_i+0x210>
 80069f2:	e7eb      	b.n	80069cc <_printf_i+0x204>
 80069f4:	2500      	movs	r5, #0
 80069f6:	f104 0619 	add.w	r6, r4, #25
 80069fa:	e7f5      	b.n	80069e8 <_printf_i+0x220>
 80069fc:	080070b0 	.word	0x080070b0
 8006a00:	080070c1 	.word	0x080070c1

08006a04 <_raise_r>:
 8006a04:	291f      	cmp	r1, #31
 8006a06:	b538      	push	{r3, r4, r5, lr}
 8006a08:	4605      	mov	r5, r0
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	d904      	bls.n	8006a18 <_raise_r+0x14>
 8006a0e:	2316      	movs	r3, #22
 8006a10:	6003      	str	r3, [r0, #0]
 8006a12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
 8006a18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006a1a:	b112      	cbz	r2, 8006a22 <_raise_r+0x1e>
 8006a1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a20:	b94b      	cbnz	r3, 8006a36 <_raise_r+0x32>
 8006a22:	4628      	mov	r0, r5
 8006a24:	f000 f830 	bl	8006a88 <_getpid_r>
 8006a28:	4622      	mov	r2, r4
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a32:	f000 b817 	b.w	8006a64 <_kill_r>
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d00a      	beq.n	8006a50 <_raise_r+0x4c>
 8006a3a:	1c59      	adds	r1, r3, #1
 8006a3c:	d103      	bne.n	8006a46 <_raise_r+0x42>
 8006a3e:	2316      	movs	r3, #22
 8006a40:	6003      	str	r3, [r0, #0]
 8006a42:	2001      	movs	r0, #1
 8006a44:	e7e7      	b.n	8006a16 <_raise_r+0x12>
 8006a46:	2100      	movs	r1, #0
 8006a48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	4798      	blx	r3
 8006a50:	2000      	movs	r0, #0
 8006a52:	e7e0      	b.n	8006a16 <_raise_r+0x12>

08006a54 <raise>:
 8006a54:	4b02      	ldr	r3, [pc, #8]	@ (8006a60 <raise+0xc>)
 8006a56:	4601      	mov	r1, r0
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	f7ff bfd3 	b.w	8006a04 <_raise_r>
 8006a5e:	bf00      	nop
 8006a60:	2000277c 	.word	0x2000277c

08006a64 <_kill_r>:
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	4d07      	ldr	r5, [pc, #28]	@ (8006a84 <_kill_r+0x20>)
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	4608      	mov	r0, r1
 8006a6e:	4611      	mov	r1, r2
 8006a70:	602b      	str	r3, [r5, #0]
 8006a72:	f7fa ff59 	bl	8001928 <_kill>
 8006a76:	1c43      	adds	r3, r0, #1
 8006a78:	d102      	bne.n	8006a80 <_kill_r+0x1c>
 8006a7a:	682b      	ldr	r3, [r5, #0]
 8006a7c:	b103      	cbz	r3, 8006a80 <_kill_r+0x1c>
 8006a7e:	6023      	str	r3, [r4, #0]
 8006a80:	bd38      	pop	{r3, r4, r5, pc}
 8006a82:	bf00      	nop
 8006a84:	20002b90 	.word	0x20002b90

08006a88 <_getpid_r>:
 8006a88:	f7fa bf46 	b.w	8001918 <_getpid>

08006a8c <_init>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	bf00      	nop
 8006a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a92:	bc08      	pop	{r3}
 8006a94:	469e      	mov	lr, r3
 8006a96:	4770      	bx	lr

08006a98 <_fini>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	bf00      	nop
 8006a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9e:	bc08      	pop	{r3}
 8006aa0:	469e      	mov	lr, r3
 8006aa2:	4770      	bx	lr
